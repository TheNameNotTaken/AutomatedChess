
mux_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e20  08008e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e28  08008e28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  2000000c  08008e3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008e3c  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4c2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  0003d4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000404c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00041e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e9b9  00000000  00000000  000436c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da3f  00000000  00000000  00072081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012865f  00000000  00000000  0008fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b811f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb8  00000000  00000000  001b8170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008d98 	.word	0x08008d98

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08008d98 	.word	0x08008d98

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 fec4 	bl	8002292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f851 	bl	80005b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800050e:	f000 f8b1 	bl	8000674 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 ff41 	bl	8001398 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f8e1 	bl	80006dc <MX_ADC1_Init>
  MX_CAN1_Init();
 800051a:	f000 f943 	bl	80007a4 <MX_CAN1_Init>
  MX_COMP1_Init();
 800051e:	f000 f975 	bl	800080c <MX_COMP1_Init>
  MX_COMP2_Init();
 8000522:	f000 f9a1 	bl	8000868 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000526:	f000 f9cb 	bl	80008c0 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 800052a:	f000 fa03 	bl	8000934 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 fa43 	bl	80009b8 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa8f 	bl	8000a54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 fadb 	bl	8000af0 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800053a:	f000 fb25 	bl	8000b88 <MX_SAI1_Init>
  MX_SAI2_Init();
 800053e:	f000 fbbb 	bl	8000cb8 <MX_SAI2_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI1_Init();
 8000542:	f000 fc21 	bl	8000d88 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000546:	f000 fc5d 	bl	8000e04 <MX_SPI3_Init>
  MX_TIM1_Init();
 800054a:	f000 fc99 	bl	8000e80 <MX_TIM1_Init>
  MX_TIM2_Init();
 800054e:	f000 fd67 	bl	8001020 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 fdc9 	bl	80010e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000556:	f000 fe2d 	bl	80011b4 <MX_TIM4_Init>
  MX_TIM15_Init();
 800055a:	f000 fe91 	bl	8001280 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800055e:	f000 ff13 	bl	8001388 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  uint32_t ADC_VAL = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]

  //HAL_GPIO_WritePin(GPIOC, sel1_Pin|sel0_Pin|sel2_Pin, GPIO_PIN_RESET);

  // enables mux
  HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f003 fcdf 	bl	8003f30 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */

		//HAL_ADC_PollForConversion(&hadc1, 0xffffffff);
		//ADC_VAL = HAL_ADC_GetValue(&hadc1);

	for (int i = 0; i < 8; ++i) {
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	e015      	b.n	80005a4 <main+0xa4>
		selectHall(i);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ffca 	bl	8001514 <selectHall>
		HAL_ADC_Start(&hadc1);
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0xac>)
 8000582:	f002 fa45 	bl	8002a10 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 0xffffffff);
 8000586:	f04f 31ff 	mov.w	r1, #4294967295
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <main+0xac>)
 800058c:	f002 faa3 	bl	8002ad6 <HAL_ADC_PollForConversion>
		ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <main+0xac>)
 8000592:	f002 fb2f 	bl	8002bf4 <HAL_ADC_GetValue>
 8000596:	6038      	str	r0, [r7, #0]

		HAL_Delay(100);
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f001 feef 	bl	800237c <HAL_Delay>
	for (int i = 0; i < 8; ++i) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	dde6      	ble.n	8000578 <main+0x78>
 80005aa:	e7e2      	b.n	8000572 <main+0x72>
 80005ac:	20000028 	.word	0x20000028

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f008 fbe2 	bl	8008d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f003 fcf3 	bl	8003fc0 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f001 f83a 	bl	8001658 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e4:	f003 fcbc 	bl	8003f60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xc0>)
 80005ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ee:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xc0>)
 80005f0:	f023 0318 	bic.w	r3, r3, #24
 80005f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2314      	movs	r3, #20
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000618:	2310      	movs	r3, #16
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fd7b 	bl	8004128 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000638:	f001 f80e 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f004 f981 	bl	800495c <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000660:	f000 fffa 	bl	8001658 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000664:	f005 fe8a 	bl	800637c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a6      	sub	sp, #152	; 0x98
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2294      	movs	r2, #148	; 0x94
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f008 fb81 	bl	8008d88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000686:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800068a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800068c:	2300      	movs	r3, #0
 800068e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000690:	2300      	movs	r3, #0
 8000692:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000694:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800069c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 80006aa:	2330      	movs	r3, #48	; 0x30
 80006ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 80006b6:	2306      	movs	r3, #6
 80006b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <PeriphCommonClock_Config+0x64>)
 80006bc:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fc09 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80006cc:	f000 ffc4 	bl	8001658 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3798      	adds	r7, #152	; 0x98
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	01110000 	.word	0x01110000

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_ADC1_Init+0xbc>)
 80006f4:	4a29      	ldr	r2, [pc, #164]	; (800079c <MX_ADC1_Init+0xc0>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_ADC1_Init+0xbc>)
 80006fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ADC1_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000714:	2204      	movs	r2, #4
 8000716:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000726:	2201      	movs	r2, #1
 8000728:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_ADC1_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ADC1_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000756:	f002 f80f 	bl	8002778 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000760:	f000 ff7a 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_ADC1_Init+0xc4>)
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2306      	movs	r3, #6
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800076c:	2307      	movs	r3, #7
 800076e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000770:	237f      	movs	r3, #127	; 0x7f
 8000772:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000774:	2304      	movs	r3, #4
 8000776:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC1_Init+0xbc>)
 8000782:	f002 fa45 	bl	8002c10 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800078c:	f000 ff64 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000028 	.word	0x20000028
 800079c:	50040000 	.word	0x50040000
 80007a0:	04300002 	.word	0x04300002

080007a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_CAN1_Init+0x60>)
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_CAN1_Init+0x64>)
 80007ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_CAN1_Init+0x60>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_CAN1_Init+0x60>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_CAN1_Init+0x60>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_CAN1_Init+0x60>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_CAN1_Init+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_CAN1_Init+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_CAN1_Init+0x60>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_CAN1_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_CAN1_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_CAN1_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_CAN1_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_CAN1_Init+0x60>)
 80007f2:	f002 fe8f 	bl	8003514 <HAL_CAN_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f000 ff2c 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000090 	.word	0x20000090
 8000808:	40006400 	.word	0x40006400

0800080c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_COMP1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_COMP1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_COMP1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_COMP1_Init+0x58>)
 800081a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_COMP1_Init+0x50>)
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_COMP1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_COMP1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_COMP1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_COMP1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_COMP1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_COMP1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_COMP1_Init+0x50>)
 8000848:	f003 f808 	bl	800385c <HAL_COMP_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000852:	f000 ff01 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b8 	.word	0x200000b8
 8000860:	40010200 	.word	0x40010200
 8000864:	00800030 	.word	0x00800030

08000868 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_COMP2_Init+0x50>)
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <MX_COMP2_Init+0x54>)
 8000870:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_COMP2_Init+0x50>)
 8000874:	2270      	movs	r2, #112	; 0x70
 8000876:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_COMP2_Init+0x50>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_COMP2_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_COMP2_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_COMP2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_COMP2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_COMP2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_COMP2_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_COMP2_Init+0x50>)
 80008a4:	f002 ffda 	bl	800385c <HAL_COMP_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 fed3 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000e4 	.word	0x200000e4
 80008bc:	40010204 	.word	0x40010204

080008c0 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008c6:	4a19      	ldr	r2, [pc, #100]	; (800092c <MX_I2C1_SMBUS_Init+0x6c>)
 80008c8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_I2C1_SMBUS_Init+0x70>)
 80008ce:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008d8:	2202      	movs	r2, #2
 80008da:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008de:	2201      	movs	r2, #1
 80008e0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 800090e:	f248 1286 	movw	r2, #33158	; 0x8186
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_I2C1_SMBUS_Init+0x68>)
 8000916:	f006 fbb9 	bl	800708c <HAL_SMBUS_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000920:	f000 fe9a 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000110 	.word	0x20000110
 800092c:	40005400 	.word	0x40005400
 8000930:	00707cbb 	.word	0x00707cbb

08000934 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800093a:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <MX_I2C2_SMBUS_Init+0x7c>)
 800093c:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C2_SMBUS_Init+0x80>)
 8000942:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800094c:	2202      	movs	r2, #2
 800094e:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 8000982:	f248 1286 	movw	r2, #33158	; 0x8186
 8000986:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800098a:	f006 fb7f 	bl	800708c <HAL_SMBUS_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000994:	f000 fe60 	bl	8001658 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C2_SMBUS_Init+0x78>)
 800099a:	f006 fc2f 	bl	80071fc <HAL_SMBUS_EnableAlert_IT>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80009a4:	f000 fe58 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000160 	.word	0x20000160
 80009b0:	40005800 	.word	0x40005800
 80009b4:	00707cbb 	.word	0x00707cbb

080009b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_LPUART1_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <MX_LPUART1_UART_Init+0x98>)
 80009c6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 8000a02:	f007 fb99 	bl	8008138 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fe24 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 8000a14:	f008 f8ca 	bl	8008bac <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 fe1b 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 8000a26:	f008 f8ff 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fe12 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_LPUART1_UART_Init+0x90>)
 8000a36:	f008 f880 	bl	8008b3a <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 fe0a 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001b0 	.word	0x200001b0
 8000a4c:	40008000 	.word	0x40008000
 8000a50:	00033324 	.word	0x00033324

08000a54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <MX_USART2_UART_Init+0x98>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a80:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a84:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000aa0:	f007 fb4a 	bl	8008138 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 fdd5 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000ab2:	f008 f87b 	bl	8008bac <HAL_UARTEx_SetTxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000abc:	f000 fdcc 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000ac4:	f008 f8b0 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ace:	f000 fdc3 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000ad4:	f008 f831 	bl	8008b3a <HAL_UARTEx_DisableFifoMode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ade:	f000 fdbb 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000240 	.word	0x20000240
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_USART3_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b3a:	f007 fafd 	bl	8008138 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fd88 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b4c:	f008 f82e 	bl	8008bac <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fd7f 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f008 f863 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fd76 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f007 ffe4 	bl	8008b3a <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fd6e 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200002d0 	.word	0x200002d0
 8000b84:	40004800 	.word	0x40004800

08000b88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000b8c:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000b8e:	4a46      	ldr	r2, [pc, #280]	; (8000ca8 <MX_SAI1_Init+0x120>)
 8000b90:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b92:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000b9e:	4b41      	ldr	r3, [pc, #260]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bce:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bd0:	4a36      	ldr	r2, [pc, #216]	; (8000cac <MX_SAI1_Init+0x124>)
 8000bd2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c00:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c04:	2208      	movs	r2, #8
 8000c06:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000c38:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <MX_SAI1_Init+0x11c>)
 8000c3a:	f005 fedb 	bl	80069f4 <HAL_SAI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000c44:	f000 fd08 	bl	8001658 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <MX_SAI1_Init+0x12c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <MX_SAI1_Init+0x124>)
 8000c70:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_SAI1_Init+0x128>)
 8000c92:	f005 fe7d 	bl	8006990 <HAL_SAI_InitProtocol>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000c9c:	f000 fcdc 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000360 	.word	0x20000360
 8000ca8:	40015424 	.word	0x40015424
 8000cac:	0002ee00 	.word	0x0002ee00
 8000cb0:	200003f4 	.word	0x200003f4
 8000cb4:	40015404 	.word	0x40015404

08000cb8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cbe:	4a30      	ldr	r2, [pc, #192]	; (8000d80 <MX_SAI2_Init+0xc8>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <MX_SAI2_Init+0xcc>)
 8000d02:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d34:	2208      	movs	r2, #8
 8000d36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_SAI2_Init+0xc4>)
 8000d6a:	f005 fe43 	bl	80069f4 <HAL_SAI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000d74:	f000 fc70 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000488 	.word	0x20000488
 8000d80:	40015804 	.word	0x40015804
 8000d84:	0002ee00 	.word	0x0002ee00

08000d88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MX_SPI1_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000da2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000da6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000db6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000de2:	2208      	movs	r2, #8
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000de8:	f006 fa5b 	bl	80072a2 <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f000 fc31 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000051c 	.word	0x2000051c
 8000e00:	40013000 	.word	0x40013000

08000e04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <MX_SPI3_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e52:	2207      	movs	r2, #7
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_SPI3_Init+0x74>)
 8000e64:	f006 fa1d 	bl	80072a2 <HAL_SPI_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 fbf3 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000580 	.word	0x20000580
 8000e7c:	40003c00 	.word	0x40003c00

08000e80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b098      	sub	sp, #96	; 0x60
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	222c      	movs	r2, #44	; 0x2c
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f007 ff65 	bl	8008d88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ebe:	4b56      	ldr	r3, [pc, #344]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ec0:	4a56      	ldr	r2, [pc, #344]	; (800101c <MX_TIM1_Init+0x19c>)
 8000ec2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ec4:	4b54      	ldr	r3, [pc, #336]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ed0:	4b51      	ldr	r3, [pc, #324]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b4f      	ldr	r3, [pc, #316]	; (8001018 <MX_TIM1_Init+0x198>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eea:	484b      	ldr	r0, [pc, #300]	; (8001018 <MX_TIM1_Init+0x198>)
 8000eec:	f006 fa7c 	bl	80073e8 <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ef6:	f000 fbaf 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4842      	ldr	r0, [pc, #264]	; (8001018 <MX_TIM1_Init+0x198>)
 8000f0e:	f006 ff47 	bl	8007da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f18:	f000 fb9e 	bl	8001658 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000f28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4839      	ldr	r0, [pc, #228]	; (8001018 <MX_TIM1_Init+0x198>)
 8000f32:	f007 f83b 	bl	8007fac <HAL_TIMEx_ConfigBreakInput>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000f3c:	f000 fb8c 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f44:	461a      	mov	r2, r3
 8000f46:	2102      	movs	r1, #2
 8000f48:	4833      	ldr	r0, [pc, #204]	; (8001018 <MX_TIM1_Init+0x198>)
 8000f4a:	f007 f82f 	bl	8007fac <HAL_TIMEx_ConfigBreakInput>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000f54:	f000 fb80 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4826      	ldr	r0, [pc, #152]	; (8001018 <MX_TIM1_Init+0x198>)
 8000f7e:	f006 fa8b 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000f88:	f000 fb66 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f90:	2204      	movs	r2, #4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4820      	ldr	r0, [pc, #128]	; (8001018 <MX_TIM1_Init+0x198>)
 8000f96:	f006 fa7f 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000fa0:	f000 fb5a 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_TIM1_Init+0x198>)
 8000fae:	f006 fa73 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000fb8:	f000 fb4e 	bl	8001658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fe4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM1_Init+0x198>)
 8000ffa:	f006 ff59 	bl	8007eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001004:	f000 fb28 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM1_Init+0x198>)
 800100a:	f000 ff19 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 800100e:	bf00      	nop
 8001010:	3760      	adds	r7, #96	; 0x60
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200005e4 	.word	0x200005e4
 800101c:	40012c00 	.word	0x40012c00

08001020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_TIM2_Init+0xc4>)
 8001046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <MX_TIM2_Init+0xc4>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_TIM2_Init+0xc4>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <MX_TIM2_Init+0xc4>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_TIM2_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_TIM2_Init+0xc4>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <MX_TIM2_Init+0xc4>)
 800106e:	f006 f9bb 	bl	80073e8 <HAL_TIM_PWM_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 faee 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <MX_TIM2_Init+0xc4>)
 800108c:	f006 fe88 	bl	8007da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001096:	f000 fadf 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109a:	2360      	movs	r3, #96	; 0x60
 800109c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_TIM2_Init+0xc4>)
 80010b2:	f006 f9f1 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010bc:	f000 facc 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	2208      	movs	r2, #8
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <MX_TIM2_Init+0xc4>)
 80010c8:	f006 f9e6 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010d2:	f000 fac1 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <MX_TIM2_Init+0xc4>)
 80010d8:	f000 feb2 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000630 	.word	0x20000630

080010e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_TIM3_Init+0xc4>)
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <MX_TIM3_Init+0xc8>)
 8001110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_TIM3_Init+0xc4>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_TIM3_Init+0xc4>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_TIM3_Init+0xc4>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_TIM3_Init+0xc4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_TIM3_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001132:	481e      	ldr	r0, [pc, #120]	; (80011ac <MX_TIM3_Init+0xc4>)
 8001134:	f006 f958 	bl	80073e8 <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800113e:	f000 fa8b 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <MX_TIM3_Init+0xc4>)
 8001152:	f006 fe25 	bl	8007da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800115c:	f000 fa7c 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2204      	movs	r2, #4
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_TIM3_Init+0xc4>)
 8001178:	f006 f98e 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001182:	f000 fa69 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_TIM3_Init+0xc4>)
 800118e:	f006 f983 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001198:	f000 fa5e 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <MX_TIM3_Init+0xc4>)
 800119e:	f000 fe4f 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000067c 	.word	0x2000067c
 80011b0:	40000400 	.word	0x40000400

080011b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
 80011d4:	615a      	str	r2, [r3, #20]
 80011d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_TIM4_Init+0xc4>)
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_TIM4_Init+0xc8>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_TIM4_Init+0xc4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_TIM4_Init+0xc4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_TIM4_Init+0xc4>)
 80011ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_TIM4_Init+0xc4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_TIM4_Init+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011fe:	481e      	ldr	r0, [pc, #120]	; (8001278 <MX_TIM4_Init+0xc4>)
 8001200:	f006 f8f2 	bl	80073e8 <HAL_TIM_PWM_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800120a:	f000 fa25 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <MX_TIM4_Init+0xc4>)
 800121e:	f006 fdbf 	bl	8007da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001228:	f000 fa16 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2208      	movs	r2, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM4_Init+0xc4>)
 8001244:	f006 f928 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800124e:	f000 fa03 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	220c      	movs	r2, #12
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM4_Init+0xc4>)
 800125a:	f006 f91d 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001264:	f000 f9f8 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM4_Init+0xc4>)
 800126a:	f000 fde9 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200006c8 	.word	0x200006c8
 800127c:	40000800 	.word	0x40000800

08001280 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	222c      	movs	r2, #44	; 0x2c
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f007 fd6b 	bl	8008d88 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <MX_TIM15_Init+0x100>)
 80012b4:	4a33      	ldr	r2, [pc, #204]	; (8001384 <MX_TIM15_Init+0x104>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <MX_TIM15_Init+0x100>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <MX_TIM15_Init+0x100>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <MX_TIM15_Init+0x100>)
 80012c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <MX_TIM15_Init+0x100>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <MX_TIM15_Init+0x100>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <MX_TIM15_Init+0x100>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80012de:	4828      	ldr	r0, [pc, #160]	; (8001380 <MX_TIM15_Init+0x100>)
 80012e0:	f006 f882 	bl	80073e8 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f9b5 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012fa:	4619      	mov	r1, r3
 80012fc:	4820      	ldr	r0, [pc, #128]	; (8001380 <MX_TIM15_Init+0x100>)
 80012fe:	f006 fd4f 	bl	8007da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f9a6 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM15_Init+0x100>)
 8001332:	f006 f8b1 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800133c:	f000 f98c 	bl	8001658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM15_Init+0x100>)
 8001364:	f006 fda4 	bl	8007eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800136e:	f000 f973 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM15_Init+0x100>)
 8001374:	f000 fd64 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3758      	adds	r7, #88	; 0x58
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000714 	.word	0x20000714
 8001384:	40014000 	.word	0x40014000

08001388 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	4b57      	ldr	r3, [pc, #348]	; (800150c <MX_GPIO_Init+0x174>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a56      	ldr	r2, [pc, #344]	; (800150c <MX_GPIO_Init+0x174>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b54      	ldr	r3, [pc, #336]	; (800150c <MX_GPIO_Init+0x174>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b51      	ldr	r3, [pc, #324]	; (800150c <MX_GPIO_Init+0x174>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a50      	ldr	r2, [pc, #320]	; (800150c <MX_GPIO_Init+0x174>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b4e      	ldr	r3, [pc, #312]	; (800150c <MX_GPIO_Init+0x174>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013de:	4b4b      	ldr	r3, [pc, #300]	; (800150c <MX_GPIO_Init+0x174>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <MX_GPIO_Init+0x174>)
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b48      	ldr	r3, [pc, #288]	; (800150c <MX_GPIO_Init+0x174>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	4b45      	ldr	r3, [pc, #276]	; (800150c <MX_GPIO_Init+0x174>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a44      	ldr	r2, [pc, #272]	; (800150c <MX_GPIO_Init+0x174>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_GPIO_Init+0x174>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <MX_GPIO_Init+0x174>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a3e      	ldr	r2, [pc, #248]	; (800150c <MX_GPIO_Init+0x174>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_GPIO_Init+0x174>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <MX_GPIO_Init+0x174>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a38      	ldr	r2, [pc, #224]	; (800150c <MX_GPIO_Init+0x174>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <MX_GPIO_Init+0x174>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <MX_GPIO_Init+0x174>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a32      	ldr	r2, [pc, #200]	; (800150c <MX_GPIO_Init+0x174>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <MX_GPIO_Init+0x174>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_GPIO_Init+0x174>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a2c      	ldr	r2, [pc, #176]	; (800150c <MX_GPIO_Init+0x174>)
 800145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <MX_GPIO_Init+0x174>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800146e:	f002 fe4b 	bl	8004108 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, sel1_Pin|sel0_Pin|sel2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	211a      	movs	r1, #26
 8001476:	4826      	ldr	r0, [pc, #152]	; (8001510 <MX_GPIO_Init+0x178>)
 8001478:	f002 fd5a 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2108      	movs	r1, #8
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f002 fd54 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sel1_Pin sel0_Pin sel2_Pin */
  GPIO_InitStruct.Pin = sel1_Pin|sel0_Pin|sel2_Pin;
 8001488:	231a      	movs	r3, #26
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	481c      	ldr	r0, [pc, #112]	; (8001510 <MX_GPIO_Init+0x178>)
 80014a0:	f002 fbb4 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80014a4:	2308      	movs	r3, #8
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f002 fba5 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d4:	230a      	movs	r3, #10
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f002 fb93 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f002 fb85 	bl	8003c0c <HAL_GPIO_Init>

}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	48000800 	.word	0x48000800

08001514 <selectHall>:

/* USER CODE BEGIN 4 */
void selectHall(uint32_t num) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	switch(num) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b07      	cmp	r3, #7
 8001520:	f200 8094 	bhi.w	800164c <selectHall+0x138>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <selectHall+0x18>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	0800154d 	.word	0x0800154d
 8001530:	0800156d 	.word	0x0800156d
 8001534:	0800158d 	.word	0x0800158d
 8001538:	080015ad 	.word	0x080015ad
 800153c:	080015cd 	.word	0x080015cd
 8001540:	080015ed 	.word	0x080015ed
 8001544:	0800160d 	.word	0x0800160d
 8001548:	0800162d 	.word	0x0800162d
	case 0:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2108      	movs	r1, #8
 8001550:	4840      	ldr	r0, [pc, #256]	; (8001654 <selectHall+0x140>)
 8001552:	f002 fced 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2102      	movs	r1, #2
 800155a:	483e      	ldr	r0, [pc, #248]	; (8001654 <selectHall+0x140>)
 800155c:	f002 fce8 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2110      	movs	r1, #16
 8001564:	483b      	ldr	r0, [pc, #236]	; (8001654 <selectHall+0x140>)
 8001566:	f002 fce3 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 800156a:	e06f      	b.n	800164c <selectHall+0x138>
	case 1:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2108      	movs	r1, #8
 8001570:	4838      	ldr	r0, [pc, #224]	; (8001654 <selectHall+0x140>)
 8001572:	f002 fcdd 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2102      	movs	r1, #2
 800157a:	4836      	ldr	r0, [pc, #216]	; (8001654 <selectHall+0x140>)
 800157c:	f002 fcd8 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	4833      	ldr	r0, [pc, #204]	; (8001654 <selectHall+0x140>)
 8001586:	f002 fcd3 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 800158a:	e05f      	b.n	800164c <selectHall+0x138>
	case 2:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2108      	movs	r1, #8
 8001590:	4830      	ldr	r0, [pc, #192]	; (8001654 <selectHall+0x140>)
 8001592:	f002 fccd 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	482e      	ldr	r0, [pc, #184]	; (8001654 <selectHall+0x140>)
 800159c:	f002 fcc8 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	482b      	ldr	r0, [pc, #172]	; (8001654 <selectHall+0x140>)
 80015a6:	f002 fcc3 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 80015aa:	e04f      	b.n	800164c <selectHall+0x138>
	case 3:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2108      	movs	r1, #8
 80015b0:	4828      	ldr	r0, [pc, #160]	; (8001654 <selectHall+0x140>)
 80015b2:	f002 fcbd 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2102      	movs	r1, #2
 80015ba:	4826      	ldr	r0, [pc, #152]	; (8001654 <selectHall+0x140>)
 80015bc:	f002 fcb8 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2110      	movs	r1, #16
 80015c4:	4823      	ldr	r0, [pc, #140]	; (8001654 <selectHall+0x140>)
 80015c6:	f002 fcb3 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 80015ca:	e03f      	b.n	800164c <selectHall+0x138>
	case 4:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2108      	movs	r1, #8
 80015d0:	4820      	ldr	r0, [pc, #128]	; (8001654 <selectHall+0x140>)
 80015d2:	f002 fcad 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	481e      	ldr	r0, [pc, #120]	; (8001654 <selectHall+0x140>)
 80015dc:	f002 fca8 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2110      	movs	r1, #16
 80015e4:	481b      	ldr	r0, [pc, #108]	; (8001654 <selectHall+0x140>)
 80015e6:	f002 fca3 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 80015ea:	e02f      	b.n	800164c <selectHall+0x138>
	case 5:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2108      	movs	r1, #8
 80015f0:	4818      	ldr	r0, [pc, #96]	; (8001654 <selectHall+0x140>)
 80015f2:	f002 fc9d 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	4816      	ldr	r0, [pc, #88]	; (8001654 <selectHall+0x140>)
 80015fc:	f002 fc98 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2110      	movs	r1, #16
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <selectHall+0x140>)
 8001606:	f002 fc93 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 800160a:	e01f      	b.n	800164c <selectHall+0x138>
	case 6:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2108      	movs	r1, #8
 8001610:	4810      	ldr	r0, [pc, #64]	; (8001654 <selectHall+0x140>)
 8001612:	f002 fc8d 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2102      	movs	r1, #2
 800161a:	480e      	ldr	r0, [pc, #56]	; (8001654 <selectHall+0x140>)
 800161c:	f002 fc88 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <selectHall+0x140>)
 8001626:	f002 fc83 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 800162a:	e00f      	b.n	800164c <selectHall+0x138>
	case 7:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2108      	movs	r1, #8
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <selectHall+0x140>)
 8001632:	f002 fc7d 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2102      	movs	r1, #2
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <selectHall+0x140>)
 800163c:	f002 fc78 	bl	8003f30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2110      	movs	r1, #16
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <selectHall+0x140>)
 8001646:	f002 fc73 	bl	8003f30 <HAL_GPIO_WritePin>
		break;
 800164a:	bf00      	nop
	}
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	48000800 	.word	0x48000800

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_MspInit+0x44>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_MspInit+0x44>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_MspInit+0x44>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x44>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x44>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x44>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <HAL_ADC_MspInit+0xd4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d154      	bne.n	8001778 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a2c      	ldr	r2, [pc, #176]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a26      	ldr	r2, [pc, #152]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a20      	ldr	r2, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PA1     ------> ADC1_IN6
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = mux_in_Pin|GPIO_PIN_2|GPIO_PIN_5;
 800172e:	2325      	movs	r3, #37	; 0x25
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001732:	230b      	movs	r3, #11
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 8001742:	f002 fa63 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001746:	2302      	movs	r3, #2
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800174a:	230b      	movs	r3, #11
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f002 fa56 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001760:	2302      	movs	r3, #2
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001764:	230b      	movs	r3, #11
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <HAL_ADC_MspInit+0xe0>)
 8001774:	f002 fa4a 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	50040000 	.word	0x50040000
 8001784:	40021000 	.word	0x40021000
 8001788:	48000800 	.word	0x48000800
 800178c:	48000400 	.word	0x48000400

08001790 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_CAN_MspInit+0x7c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d127      	bne.n	8001802 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_CAN_MspInit+0x80>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_CAN_MspInit+0x80>)
 80017b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_CAN_MspInit+0x80>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_CAN_MspInit+0x80>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_CAN_MspInit+0x80>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_CAN_MspInit+0x80>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e2:	2303      	movs	r3, #3
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017f2:	2309      	movs	r3, #9
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_CAN_MspInit+0x84>)
 80017fe:	f002 fa05 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40006400 	.word	0x40006400
 8001810:	40021000 	.word	0x40021000
 8001814:	48000c00 	.word	0x48000c00

08001818 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_COMP_MspInit+0x98>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d118      	bne.n	800186c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_COMP_MspInit+0x9c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_COMP_MspInit+0x9c>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_COMP_MspInit+0x9c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001852:	2304      	movs	r3, #4
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4814      	ldr	r0, [pc, #80]	; (80018b8 <HAL_COMP_MspInit+0xa0>)
 8001866:	f002 f9d1 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800186a:	e01c      	b.n	80018a6 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_COMP_MspInit+0xa4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d117      	bne.n	80018a6 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_COMP_MspInit+0x9c>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_COMP_MspInit+0x9c>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_COMP_MspInit+0x9c>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800188e:	23c0      	movs	r3, #192	; 0xc0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_COMP_MspInit+0xa0>)
 80018a2:	f002 f9b3 	bl	8003c0c <HAL_GPIO_Init>
}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010200 	.word	0x40010200
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	40010204 	.word	0x40010204

080018c0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0b0      	sub	sp, #192	; 0xc0
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	2294      	movs	r2, #148	; 0x94
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fa51 	bl	8008d88 <memset>
  if(hsmbus->Instance==I2C1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a42      	ldr	r2, [pc, #264]	; (80019f4 <HAL_SMBUS_MspInit+0x134>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d13c      	bne.n	800196a <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 faeb 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001908:	f7ff fea6 	bl	8001658 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001918:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001932:	2301      	movs	r3, #1
 8001934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193e:	2304      	movs	r3, #4
 8001940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001948:	4619      	mov	r1, r3
 800194a:	482c      	ldr	r0, [pc, #176]	; (80019fc <HAL_SMBUS_MspInit+0x13c>)
 800194c:	f002 f95e 	bl	8003c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 8001956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195a:	6593      	str	r3, [r2, #88]	; 0x58
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001968:	e03f      	b.n	80019ea <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_SMBUS_MspInit+0x140>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d13a      	bne.n	80019ea <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001978:	2300      	movs	r3, #0
 800197a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4618      	mov	r0, r3
 8001982:	f003 faa9 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 800198c:	f7ff fe64 	bl	8001658 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ae:	2312      	movs	r3, #18
 80019b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c0:	2304      	movs	r3, #4
 80019c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019ca:	4619      	mov	r1, r3
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <HAL_SMBUS_MspInit+0x144>)
 80019ce:	f002 f91d 	bl	8003c0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 80019d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019dc:	6593      	str	r3, [r2, #88]	; 0x58
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_SMBUS_MspInit+0x138>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
}
 80019ea:	bf00      	nop
 80019ec:	37c0      	adds	r7, #192	; 0xc0
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	40005800 	.word	0x40005800
 8001a04:	48001400 	.word	0x48001400

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0b2      	sub	sp, #200	; 0xc8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	2294      	movs	r2, #148	; 0x94
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 f9ad 	bl	8008d88 <memset>
  if(huart->Instance==LPUART1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a64      	ldr	r2, [pc, #400]	; (8001bc4 <HAL_UART_MspInit+0x1bc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13e      	bne.n	8001ab6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 fa47 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a50:	f7ff fe02 	bl	8001658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a54:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001a84:	f002 fb40 	bl	8004108 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4847      	ldr	r0, [pc, #284]	; (8001bcc <HAL_UART_MspInit+0x1c4>)
 8001ab0:	f002 f8ac 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab4:	e081      	b.n	8001bba <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_UART_MspInit+0x1c8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d13b      	bne.n	8001b38 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fa03 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001ad8:	f7ff fdbe 	bl	8001658 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a39      	ldr	r2, [pc, #228]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae8:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b0c:	2378      	movs	r3, #120	; 0x78
 8001b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b24:	2307      	movs	r3, #7
 8001b26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <HAL_UART_MspInit+0x1cc>)
 8001b32:	f002 f86b 	bl	8003c0c <HAL_GPIO_Init>
}
 8001b36:	e040      	b.n	8001bba <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_UART_MspInit+0x1d0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d13b      	bne.n	8001bba <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 f9c2 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001b5a:	f7ff fd7d 	bl	8001658 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_UART_MspInit+0x1c0>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <HAL_UART_MspInit+0x1cc>)
 8001bb6:	f002 f829 	bl	8003c0c <HAL_GPIO_Init>
}
 8001bba:	bf00      	nop
 8001bbc:	37c8      	adds	r7, #200	; 0xc8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40008000 	.word	0x40008000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48001800 	.word	0x48001800
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	48000c00 	.word	0x48000c00
 8001bd8:	40004800 	.word	0x40004800

08001bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <HAL_SPI_MspInit+0xd8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d129      	bne.n	8001c52 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c08:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c2e:	23f0      	movs	r3, #240	; 0xf0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4c:	f001 ffde 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c50:	e02c      	b.n	8001cac <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_SPI_MspInit+0xe0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d127      	bne.n	8001cac <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c66:	6593      	str	r3, [r2, #88]	; 0x58
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_SPI_MspInit+0xdc>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c8c:	2338      	movs	r3, #56	; 0x38
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <HAL_SPI_MspInit+0xe4>)
 8001ca8:	f001 ffb0 	bl	8003c0c <HAL_GPIO_Init>
}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40013000 	.word	0x40013000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40003c00 	.word	0x40003c00
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <HAL_TIM_PWM_MspInit+0x164>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d139      	bne.n	8001d5a <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce6:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	483f      	ldr	r0, [pc, #252]	; (8001e30 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d32:	f001 ff6b 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4837      	ldr	r0, [pc, #220]	; (8001e30 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d54:	f001 ff5a 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d58:	e062      	b.n	8001e20 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d62:	d10c      	bne.n	8001d7e <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
}
 8001d7c:	e050      	b.n	8001e20 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <HAL_TIM_PWM_MspInit+0x170>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10c      	bne.n	8001da2 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	6593      	str	r3, [r2, #88]	; 0x58
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
}
 8001da0:	e03e      	b.n	8001e20 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_TIM_PWM_MspInit+0x174>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d128      	bne.n	8001dfe <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dec:	2302      	movs	r3, #2
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df4:	4619      	mov	r1, r3
 8001df6:	480e      	ldr	r0, [pc, #56]	; (8001e30 <HAL_TIM_PWM_MspInit+0x16c>)
 8001df8:	f001 ff08 	bl	8003c0c <HAL_GPIO_Init>
}
 8001dfc:	e010      	b.n	8001e20 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_TIM_PWM_MspInit+0x178>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10b      	bne.n	8001e20 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6613      	str	r3, [r2, #96]	; 0x60
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_TIM_PWM_MspInit+0x168>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
}
 8001e20:	bf00      	nop
 8001e22:	3738      	adds	r7, #56	; 0x38
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48001000 	.word	0x48001000
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	40014000 	.word	0x40014000

08001e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a73      	ldr	r2, [pc, #460]	; (800202c <HAL_TIM_MspPostInit+0x1ec>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d11d      	bne.n	8001e9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001e68:	f043 0310 	orr.w	r3, r3, #16
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e7a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4867      	ldr	r0, [pc, #412]	; (8002034 <HAL_TIM_MspPostInit+0x1f4>)
 8001e98:	f001 feb8 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001e9c:	e0c2      	b.n	8002024 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d13a      	bne.n	8001f1e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	4a60      	ldr	r2, [pc, #384]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ecc:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef6:	f001 fe89 	bl	8003c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4848      	ldr	r0, [pc, #288]	; (8002038 <HAL_TIM_MspPostInit+0x1f8>)
 8001f18:	f001 fe78 	bl	8003c0c <HAL_GPIO_Init>
}
 8001f1c:	e082      	b.n	8002024 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a46      	ldr	r2, [pc, #280]	; (800203c <HAL_TIM_MspPostInit+0x1fc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d138      	bne.n	8001f9a <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	4a40      	ldr	r2, [pc, #256]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4831      	ldr	r0, [pc, #196]	; (8002038 <HAL_TIM_MspPostInit+0x1f8>)
 8001f74:	f001 fe4a 	bl	8003c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	482b      	ldr	r0, [pc, #172]	; (8002040 <HAL_TIM_MspPostInit+0x200>)
 8001f94:	f001 fe3a 	bl	8003c0c <HAL_GPIO_Init>
}
 8001f98:	e044      	b.n	8002024 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a29      	ldr	r2, [pc, #164]	; (8002044 <HAL_TIM_MspPostInit+0x204>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d11d      	bne.n	8001fe0 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	481b      	ldr	r0, [pc, #108]	; (8002048 <HAL_TIM_MspPostInit+0x208>)
 8001fda:	f001 fe17 	bl	8003c0c <HAL_GPIO_Init>
}
 8001fde:	e021      	b.n	8002024 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_TIM_MspPostInit+0x20c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d11c      	bne.n	8002024 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_TIM_MspPostInit+0x1f0>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002014:	230e      	movs	r3, #14
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <HAL_TIM_MspPostInit+0x1f8>)
 8002020:	f001 fdf4 	bl	8003c0c <HAL_GPIO_Init>
}
 8002024:	bf00      	nop
 8002026:	3738      	adds	r7, #56	; 0x38
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40021000 	.word	0x40021000
 8002034:	48001000 	.word	0x48001000
 8002038:	48000400 	.word	0x48000400
 800203c:	40000400 	.word	0x40000400
 8002040:	48000800 	.word	0x48000800
 8002044:	40000800 	.word	0x40000800
 8002048:	48000c00 	.word	0x48000c00
 800204c:	40014000 	.word	0x40014000

08002050 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a50      	ldr	r2, [pc, #320]	; (80021a0 <HAL_SAI_MspInit+0x150>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d124      	bne.n	80020ac <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_SAI_MspInit+0x154>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10b      	bne.n	8002082 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800206a:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	4a4e      	ldr	r2, [pc, #312]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 8002070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002074:	6613      	str	r3, [r2, #96]	; 0x60
 8002076:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002082:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_SAI_MspInit+0x154>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <HAL_SAI_MspInit+0x154>)
 800208a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800208c:	2374      	movs	r3, #116	; 0x74
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800209c:	230d      	movs	r3, #13
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4841      	ldr	r0, [pc, #260]	; (80021ac <HAL_SAI_MspInit+0x15c>)
 80020a8:	f001 fdb0 	bl	8003c0c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3f      	ldr	r2, [pc, #252]	; (80021b0 <HAL_SAI_MspInit+0x160>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d135      	bne.n	8002122 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_SAI_MspInit+0x154>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a39      	ldr	r2, [pc, #228]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_SAI_MspInit+0x154>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_SAI_MspInit+0x154>)
 80020de:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020e0:	2308      	movs	r3, #8
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80020f0:	230d      	movs	r3, #13
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	482c      	ldr	r0, [pc, #176]	; (80021ac <HAL_SAI_MspInit+0x15c>)
 80020fc:	f001 fd86 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002100:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002112:	230d      	movs	r3, #13
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4825      	ldr	r0, [pc, #148]	; (80021b4 <HAL_SAI_MspInit+0x164>)
 800211e:	f001 fd75 	bl	8003c0c <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <HAL_SAI_MspInit+0x168>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d135      	bne.n	8002198 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_SAI_MspInit+0x16c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 800213a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213e:	6613      	str	r3, [r2, #96]	; 0x60
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_SAI_MspInit+0x158>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_SAI_MspInit+0x16c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_SAI_MspInit+0x16c>)
 8002154:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002156:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002168:	230d      	movs	r3, #13
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4813      	ldr	r0, [pc, #76]	; (80021c0 <HAL_SAI_MspInit+0x170>)
 8002174:	f001 fd4a 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002188:	230d      	movs	r3, #13
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <HAL_SAI_MspInit+0x174>)
 8002194:	f001 fd3a 	bl	8003c0c <HAL_GPIO_Init>

    }
}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40015404 	.word	0x40015404
 80021a4:	20000760 	.word	0x20000760
 80021a8:	40021000 	.word	0x40021000
 80021ac:	48001000 	.word	0x48001000
 80021b0:	40015424 	.word	0x40015424
 80021b4:	48001400 	.word	0x48001400
 80021b8:	40015804 	.word	0x40015804
 80021bc:	20000764 	.word	0x20000764
 80021c0:	48000400 	.word	0x48000400
 80021c4:	48000800 	.word	0x48000800

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002214:	f000 f892 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002244:	f7ff ffea 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <LoopForever+0x6>)
  ldr r1, =_edata
 800224a:	490d      	ldr	r1, [pc, #52]	; (8002280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <LoopForever+0xe>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <LoopForever+0x16>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226e:	f006 fd67 	bl	8008d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002272:	f7fe f945 	bl	8000500 <main>

08002276 <LoopForever>:

LoopForever:
    b LoopForever
 8002276:	e7fe      	b.n	8002276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002278:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002284:	08008e30 	.word	0x08008e30
  ldr r2, =_sbss
 8002288:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800228c:	2000076c 	.word	0x2000076c

08002290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_IRQHandler>

08002292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f001 fc81 	bl	8003ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f80e 	bl	80022c4 <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	e001      	b.n	80022b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b4:	f7ff f9d6 	bl	8001664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_InitTick+0x6c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_InitTick+0x70>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_InitTick+0x6c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fc7f 	bl	8003bf2 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d809      	bhi.n	8002314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f001 fc57 	bl	8003bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_InitTick+0x74>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e007      	b.n	8002324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e004      	b.n	8002324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e001      	b.n	8002324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	20000768 	.word	0x20000768

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000768 	.word	0x20000768

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_Delay+0x44>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008

080023c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3360      	adds	r3, #96	; 0x60
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <LL_ADC_SetOffset+0x44>)
 800244e:	4013      	ands	r3, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	4313      	orrs	r3, r2
 800245c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	03fff000 	.word	0x03fff000

08002474 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	461a      	mov	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3360      	adds	r3, #96	; 0x60
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	615a      	str	r2, [r3, #20]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002522:	b480      	push	{r7}
 8002524:	b087      	sub	sp, #28
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3330      	adds	r3, #48	; 0x30
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	4413      	add	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	211f      	movs	r1, #31
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	f003 011f 	and.w	r1, r3, #31
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	431a      	orrs	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800257a:	b480      	push	{r7}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3314      	adds	r3, #20
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0e5b      	lsrs	r3, r3, #25
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0d1b      	lsrs	r3, r3, #20
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2107      	movs	r1, #7
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0d1b      	lsrs	r3, r3, #20
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0318 	and.w	r3, r3, #24
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025f4:	40d9      	lsrs	r1, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	400b      	ands	r3, r1
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	0007ffff 	.word	0x0007ffff

08002618 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6093      	str	r3, [r2, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002650:	d101      	bne.n	8002656 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a0:	d101      	bne.n	80026a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <LL_ADC_IsEnabled+0x18>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <LL_ADC_IsEnabled+0x1a>
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002712:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b04      	cmp	r3, #4
 800273c:	d101      	bne.n	8002742 <LL_ADC_REG_IsConversionOngoing+0x18>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b08      	cmp	r3, #8
 8002762:	d101      	bne.n	8002768 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e12f      	b.n	80029f2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe ff83 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff3f 	bl	800263c <LL_ADC_IsDeepPowerDownEnabled>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff25 	bl	8002618 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff5a 	bl	800268c <LL_ADC_IsInternalRegulatorEnabled>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff3e 	bl	8002664 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e8:	4b84      	ldr	r3, [pc, #528]	; (80029fc <HAL_ADC_Init+0x284>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	4a84      	ldr	r2, [pc, #528]	; (8002a00 <HAL_ADC_Init+0x288>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027fc:	e002      	b.n	8002804 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3b01      	subs	r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff3c 	bl	800268c <LL_ADC_IsInternalRegulatorEnabled>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff75 	bl	800272a <LL_ADC_REG_IsConversionOngoing>
 8002840:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 80c8 	bne.w	80029e0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 80c4 	bne.w	80029e0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002860:	f043 0202 	orr.w	r2, r3, #2
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff35 	bl	80026dc <LL_ADC_IsEnabled>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002878:	4862      	ldr	r0, [pc, #392]	; (8002a04 <HAL_ADC_Init+0x28c>)
 800287a:	f7ff ff2f 	bl	80026dc <LL_ADC_IsEnabled>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4619      	mov	r1, r3
 800288a:	485f      	ldr	r0, [pc, #380]	; (8002a08 <HAL_ADC_Init+0x290>)
 800288c:	f7ff fd9a 	bl	80023c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7e5b      	ldrb	r3, [r3, #25]
 8002894:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800289a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	3b01      	subs	r3, #1
 80028c4:	045b      	lsls	r3, r3, #17
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_ADC_Init+0x294>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff12 	bl	800272a <LL_ADC_REG_IsConversionOngoing>
 8002906:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff1f 	bl	8002750 <LL_ADC_INJ_IsConversionOngoing>
 8002912:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d140      	bne.n	800299c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d13d      	bne.n	800299c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
 8002928:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800292a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002932:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002942:	f023 0306 	bic.w	r3, r3, #6
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	430b      	orrs	r3, r1
 800294e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002956:	2b01      	cmp	r3, #1
 8002958:	d118      	bne.n	800298c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002970:	4311      	orrs	r1, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002976:	4311      	orrs	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800297c:	430a      	orrs	r2, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	e007      	b.n	800299c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10c      	bne.n	80029be <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f023 010f 	bic.w	r1, r3, #15
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
 80029bc:	e007      	b.n	80029ce <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 020f 	bic.w	r2, r2, #15
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58
 80029de:	e007      	b.n	80029f0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f043 0210 	orr.w	r2, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000000 	.word	0x20000000
 8002a00:	053e2d63 	.word	0x053e2d63
 8002a04:	50040000 	.word	0x50040000
 8002a08:	50040300 	.word	0x50040300
 8002a0c:	fff0c007 	.word	0xfff0c007

08002a10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fe84 	bl	800272a <LL_ADC_REG_IsConversionOngoing>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d14f      	bne.n	8002ac8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Start+0x26>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e04b      	b.n	8002ace <HAL_ADC_Start+0xbe>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fce2 	bl	8003408 <ADC_Enable>
 8002a44:	4603      	mov	r3, r0
 8002a46:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d137      	bne.n	8002abe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6e:	d106      	bne.n	8002a7e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	f023 0206 	bic.w	r2, r3, #6
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	221c      	movs	r2, #28
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fe23 	bl	8002702 <LL_ADC_REG_StartConversion>
 8002abc:	e006      	b.n	8002acc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ac6:	e001      	b.n	8002acc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d102      	bne.n	8002aee <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e010      	b.n	8002b10 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e06f      	b.n	8002bec <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b10:	f7ff fc28 	bl	8002364 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b16:	e021      	b.n	8002b5c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d01d      	beq.n	8002b5c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b20:	f7ff fc20 	bl	8002364 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <HAL_ADC_PollForConversion+0x60>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d112      	bne.n	8002b5c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e047      	b.n	8002bec <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0d6      	beq.n	8002b18 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fcbe 	bl	80024fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01c      	beq.n	8002bc0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7e5b      	ldrb	r3, [r3, #25]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d118      	bne.n	8002bc0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d111      	bne.n	8002bc0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d104      	bne.n	8002bd8 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e008      	b.n	8002bea <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b6      	sub	sp, #216	; 0xd8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x22>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e3d5      	b.n	80033de <HAL_ADC_ConfigChannel+0x7ce>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fd73 	bl	800272a <LL_ADC_REG_IsConversionOngoing>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 83ba 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d824      	bhi.n	8002c9e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	3b02      	subs	r3, #2
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d81b      	bhi.n	8002c96 <HAL_ADC_ConfigChannel+0x86>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <HAL_ADC_ConfigChannel+0x54>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c7d 	.word	0x08002c7d
 8002c6c:	08002c85 	.word	0x08002c85
 8002c70:	08002c8d 	.word	0x08002c8d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	220c      	movs	r2, #12
 8002c78:	605a      	str	r2, [r3, #4]
          break;
 8002c7a:	e011      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2212      	movs	r2, #18
 8002c80:	605a      	str	r2, [r3, #4]
          break;
 8002c82:	e00d      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2218      	movs	r2, #24
 8002c88:	605a      	str	r2, [r3, #4]
          break;
 8002c8a:	e009      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c92:	605a      	str	r2, [r3, #4]
          break;
 8002c94:	e004      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2206      	movs	r2, #6
 8002c9a:	605a      	str	r2, [r3, #4]
          break;
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c9e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f7ff fc38 	bl	8002522 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd37 	bl	800272a <LL_ADC_REG_IsConversionOngoing>
 8002cbc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fd43 	bl	8002750 <LL_ADC_INJ_IsConversionOngoing>
 8002cca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 81c1 	bne.w	800305a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 81bc 	bne.w	800305a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cea:	d10f      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7ff fc3f 	bl	800257a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fbe6 	bl	80024d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d0a:	e00e      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f7ff fc2e 	bl	800257a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fbd6 	bl	80024d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00a      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6919      	ldr	r1, [r3, #16]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d5c:	f7ff fb66 	bl	800242c <LL_ADC_SetOffset>
 8002d60:	e17b      	b.n	800305a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fb83 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x17e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fb78 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	e01e      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x1bc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fb6d 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e004      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1d4>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	e018      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x206>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e004      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d106      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fb3c 	bl	80024a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fb20 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x244>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fb15 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	f003 021f 	and.w	r2, r3, #31
 8002e52:	e01e      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x282>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fb0a 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e004      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x29a>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	e018      	b.n	8002edc <HAL_ADC_ConfigChannel+0x2cc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fad9 	bl	80024a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fabd 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x30a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fab2 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	e01e      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x348>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff faa7 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e004      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x360>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	e016      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x38e>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e004      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fa78 	bl	80024a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fa5c 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x3cc>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2103      	movs	r1, #3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fa51 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	f003 021f 	and.w	r2, r3, #31
 8002fda:	e017      	b.n	800300c <HAL_ADC_ConfigChannel+0x3fc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fa46 	bl	8002474 <LL_ADC_GetOffsetChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ff6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002ffe:	2320      	movs	r3, #32
 8003000:	e003      	b.n	800300a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x414>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	e011      	b.n	8003048 <HAL_ADC_ConfigChannel+0x438>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003034:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e003      	b.n	8003048 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003048:	429a      	cmp	r2, r3
 800304a:	d106      	bne.n	800305a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2200      	movs	r2, #0
 8003052:	2103      	movs	r1, #3
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fa23 	bl	80024a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fb3c 	bl	80026dc <LL_ADC_IsEnabled>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 8140 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	461a      	mov	r2, r3
 800307a:	f7ff faa9 	bl	80025d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4a8f      	ldr	r2, [pc, #572]	; (80032c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	f040 8131 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x4a2>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	3301      	adds	r3, #1
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	bf94      	ite	ls
 80030aa:	2301      	movls	r3, #1
 80030ac:	2300      	movhi	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e019      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x4d6>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80030ca:	2320      	movs	r3, #32
 80030cc:	e003      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80030ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2b09      	cmp	r3, #9
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d079      	beq.n	80031de <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x4f6>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	0e9b      	lsrs	r3, r3, #26
 80030fc:	3301      	adds	r3, #1
 80030fe:	069b      	lsls	r3, r3, #26
 8003100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003104:	e015      	b.n	8003132 <HAL_ADC_ConfigChannel+0x522>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003116:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	3301      	adds	r3, #1
 800312c:	069b      	lsls	r3, r3, #26
 800312e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x542>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	3301      	adds	r3, #1
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	e017      	b.n	8003182 <HAL_ADC_ConfigChannel+0x572>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800316a:	2320      	movs	r3, #32
 800316c:	e003      	b.n	8003176 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800316e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	ea42 0103 	orr.w	r1, r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x598>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	3301      	adds	r3, #1
 800319a:	f003 021f 	and.w	r2, r3, #31
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	051b      	lsls	r3, r3, #20
 80031a6:	e018      	b.n	80031da <HAL_ADC_ConfigChannel+0x5ca>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	e003      	b.n	80031cc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 021f 	and.w	r2, r3, #31
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031da:	430b      	orrs	r3, r1
 80031dc:	e081      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x5ea>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	3301      	adds	r3, #1
 80031f2:	069b      	lsls	r3, r3, #26
 80031f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f8:	e015      	b.n	8003226 <HAL_ADC_ConfigChannel+0x616>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e003      	b.n	800321e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	3301      	adds	r3, #1
 8003220:	069b      	lsls	r3, r3, #26
 8003222:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x636>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	3301      	adds	r3, #1
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	e017      	b.n	8003276 <HAL_ADC_ConfigChannel+0x666>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	61fb      	str	r3, [r7, #28]
  return result;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800325e:	2320      	movs	r3, #32
 8003260:	e003      	b.n	800326a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	ea42 0103 	orr.w	r1, r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x692>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	0e9b      	lsrs	r3, r3, #26
 800328c:	3301      	adds	r3, #1
 800328e:	f003 021f 	and.w	r2, r3, #31
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	3b1e      	subs	r3, #30
 800329a:	051b      	lsls	r3, r3, #20
 800329c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a0:	e01e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x6d0>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	613b      	str	r3, [r7, #16]
  return result;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80032ba:	2320      	movs	r3, #32
 80032bc:	e006      	b.n	80032cc <HAL_ADC_ConfigChannel+0x6bc>
 80032be:	bf00      	nop
 80032c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f003 021f 	and.w	r2, r3, #31
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	3b1e      	subs	r3, #30
 80032da:	051b      	lsls	r3, r3, #20
 80032dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e0:	430b      	orrs	r3, r1
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	6892      	ldr	r2, [r2, #8]
 80032e6:	4619      	mov	r1, r3
 80032e8:	f7ff f947 	bl	800257a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d06c      	beq.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f8:	483c      	ldr	r0, [pc, #240]	; (80033ec <HAL_ADC_ConfigChannel+0x7dc>)
 80032fa:	f7ff f889 	bl	8002410 <LL_ADC_GetCommonPathInternalCh>
 80032fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d127      	bne.n	800335c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800330c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d121      	bne.n	800335c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <HAL_ADC_ConfigChannel+0x7e4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d157      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800332a:	4619      	mov	r1, r3
 800332c:	482f      	ldr	r0, [pc, #188]	; (80033ec <HAL_ADC_ConfigChannel+0x7dc>)
 800332e:	f7ff f85c 	bl	80023ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	4a30      	ldr	r2, [pc, #192]	; (80033fc <HAL_ADC_ConfigChannel+0x7ec>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800334c:	e002      	b.n	8003354 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3b01      	subs	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800335a:	e03a      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_ADC_ConfigChannel+0x7f0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d113      	bne.n	800338e <HAL_ADC_ConfigChannel+0x77e>
 8003366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800336a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d12a      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800337c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003384:	4619      	mov	r1, r3
 8003386:	4819      	ldr	r0, [pc, #100]	; (80033ec <HAL_ADC_ConfigChannel+0x7dc>)
 8003388:	f7ff f82f 	bl	80023ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800338c:	e021      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_ADC_ConfigChannel+0x7f4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d11c      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800339c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d116      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_ADC_ConfigChannel+0x7e4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d111      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033b6:	4619      	mov	r1, r3
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <HAL_ADC_ConfigChannel+0x7dc>)
 80033ba:	f7ff f816 	bl	80023ea <LL_ADC_SetCommonPathInternalCh>
 80033be:	e008      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80033da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	37d8      	adds	r7, #216	; 0xd8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	80080000 	.word	0x80080000
 80033ec:	50040300 	.word	0x50040300
 80033f0:	c7520000 	.word	0xc7520000
 80033f4:	50040000 	.word	0x50040000
 80033f8:	20000000 	.word	0x20000000
 80033fc:	053e2d63 	.word	0x053e2d63
 8003400:	cb840000 	.word	0xcb840000
 8003404:	80000001 	.word	0x80000001

08003408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f95f 	bl	80026dc <LL_ADC_IsEnabled>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d169      	bne.n	80034f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <ADC_Enable+0xfc>)
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e055      	b.n	80034fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f92e 	bl	80026b4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003458:	482b      	ldr	r0, [pc, #172]	; (8003508 <ADC_Enable+0x100>)
 800345a:	f7fe ffd9 	bl	8002410 <LL_ADC_GetCommonPathInternalCh>
 800345e:	4603      	mov	r3, r0
 8003460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <ADC_Enable+0x104>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	4a28      	ldr	r2, [pc, #160]	; (8003510 <ADC_Enable+0x108>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	099b      	lsrs	r3, r3, #6
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003482:	e002      	b.n	800348a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	3b01      	subs	r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f9      	bne.n	8003484 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003490:	f7fe ff68 	bl	8002364 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003496:	e028      	b.n	80034ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f91d 	bl	80026dc <LL_ADC_IsEnabled>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f901 	bl	80026b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034b2:	f7fe ff57 	bl	8002364 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d914      	bls.n	80034ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d00d      	beq.n	80034ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d1cf      	bne.n	8003498 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	8000003f 	.word	0x8000003f
 8003508:	50040300 	.word	0x50040300
 800350c:	20000000 	.word	0x20000000
 8003510:	053e2d63 	.word	0x053e2d63

08003514 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0ed      	b.n	8003702 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe f92c 	bl	8001790 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003548:	f7fe ff0c 	bl	8002364 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800354e:	e012      	b.n	8003576 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003550:	f7fe ff08 	bl	8002364 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d90b      	bls.n	8003576 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2205      	movs	r2, #5
 800356e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0c5      	b.n	8003702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0e5      	beq.n	8003550 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0202 	bic.w	r2, r2, #2
 8003592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003594:	f7fe fee6 	bl	8002364 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800359a:	e012      	b.n	80035c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800359c:	f7fe fee2 	bl	8002364 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b0a      	cmp	r3, #10
 80035a8:	d90b      	bls.n	80035c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2205      	movs	r2, #5
 80035ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e09f      	b.n	8003702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7e1b      	ldrb	r3, [r3, #24]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e007      	b.n	80035fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7e5b      	ldrb	r3, [r3, #25]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d108      	bne.n	8003614 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e007      	b.n	8003624 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e9b      	ldrb	r3, [r3, #26]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d108      	bne.n	800363e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0220 	orr.w	r2, r2, #32
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e007      	b.n	800364e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0220 	bic.w	r2, r2, #32
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7edb      	ldrb	r3, [r3, #27]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d108      	bne.n	8003668 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0210 	bic.w	r2, r2, #16
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e007      	b.n	8003678 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0210 	orr.w	r2, r2, #16
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7f1b      	ldrb	r3, [r3, #28]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0208 	orr.w	r2, r2, #8
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e007      	b.n	80036a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0208 	bic.w	r2, r2, #8
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7f5b      	ldrb	r3, [r3, #29]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0204 	orr.w	r2, r2, #4
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	ea42 0103 	orr.w	r1, r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <LL_EXTI_EnableIT_0_31+0x20>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <LL_EXTI_EnableIT_0_31+0x20>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40010400 	.word	0x40010400

08003730 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <LL_EXTI_DisableIT_0_31+0x24>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	43db      	mvns	r3, r3
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <LL_EXTI_DisableIT_0_31+0x24>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010400 	.word	0x40010400

08003758 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4904      	ldr	r1, [pc, #16]	; (8003778 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]

}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40010400 	.word	0x40010400

0800377c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	43db      	mvns	r3, r3
 800378c:	4904      	ldr	r1, [pc, #16]	; (80037a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800378e:	4013      	ands	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010400 	.word	0x40010400

080037a4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4904      	ldr	r1, [pc, #16]	; (80037c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40010400 	.word	0x40010400

080037c8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	4904      	ldr	r1, [pc, #16]	; (80037ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80037da:	4013      	ands	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]

}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010400 	.word	0x40010400

080037f0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4904      	ldr	r1, [pc, #16]	; (8003810 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4313      	orrs	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40010400 	.word	0x40010400

08003814 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	43db      	mvns	r3, r3
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003826:	4013      	ands	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010400 	.word	0x40010400

0800383c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6153      	str	r3, [r2, #20]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e0d1      	b.n	8003a1c <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003886:	d102      	bne.n	800388e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e0c6      	b.n	8003a1c <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a8:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <HAL_COMP_Init+0x1cc>)
 80038aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ac:	4a5e      	ldr	r2, [pc, #376]	; (8003a28 <HAL_COMP_Init+0x1cc>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6613      	str	r3, [r2, #96]	; 0x60
 80038b4:	4b5c      	ldr	r3, [pc, #368]	; (8003a28 <HAL_COMP_Init+0x1cc>)
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd ffa9 	bl	8001818 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <HAL_COMP_Init+0x1d0>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	430b      	orrs	r3, r1
 8003908:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003912:	d106      	bne.n	8003922 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_COMP_Init+0x1d4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a45      	ldr	r2, [pc, #276]	; (8003a30 <HAL_COMP_Init+0x1d4>)
 800391a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e005      	b.n	800392e <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003922:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_COMP_Init+0x1d4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <HAL_COMP_Init+0x1d4>)
 8003928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392c:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d016      	beq.n	800396a <HAL_COMP_Init+0x10e>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d113      	bne.n	800396a <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003942:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <HAL_COMP_Init+0x1d8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <HAL_COMP_Init+0x1dc>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800395c:	e002      	b.n	8003964 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3b01      	subs	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a33      	ldr	r2, [pc, #204]	; (8003a3c <HAL_COMP_Init+0x1e0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d102      	bne.n	800397a <HAL_COMP_Init+0x11e>
 8003974:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003978:	e001      	b.n	800397e <HAL_COMP_Init+0x122>
 800397a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800397e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d037      	beq.n	80039fc <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003998:	6938      	ldr	r0, [r7, #16]
 800399a:	f7ff ff03 	bl	80037a4 <LL_EXTI_EnableRisingTrig_0_31>
 800399e:	e002      	b.n	80039a6 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80039a0:	6938      	ldr	r0, [r7, #16]
 80039a2:	f7ff ff11 	bl	80037c8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80039b2:	6938      	ldr	r0, [r7, #16]
 80039b4:	f7ff ff1c 	bl	80037f0 <LL_EXTI_EnableFallingTrig_0_31>
 80039b8:	e002      	b.n	80039c0 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80039ba:	6938      	ldr	r0, [r7, #16]
 80039bc:	f7ff ff2a 	bl	8003814 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80039c0:	6938      	ldr	r0, [r7, #16]
 80039c2:	f7ff ff3b 	bl	800383c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80039d2:	6938      	ldr	r0, [r7, #16]
 80039d4:	f7ff fec0 	bl	8003758 <LL_EXTI_EnableEvent_0_31>
 80039d8:	e002      	b.n	80039e0 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80039da:	6938      	ldr	r0, [r7, #16]
 80039dc:	f7ff fece 	bl	800377c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80039ec:	6938      	ldr	r0, [r7, #16]
 80039ee:	f7ff fe8d 	bl	800370c <LL_EXTI_EnableIT_0_31>
 80039f2:	e009      	b.n	8003a08 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80039f4:	6938      	ldr	r0, [r7, #16]
 80039f6:	f7ff fe9b 	bl	8003730 <LL_EXTI_DisableIT_0_31>
 80039fa:	e005      	b.n	8003a08 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80039fc:	6938      	ldr	r0, [r7, #16]
 80039fe:	f7ff febd 	bl	800377c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003a02:	6938      	ldr	r0, [r7, #16]
 8003a04:	f7ff fe94 	bl	8003730 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	ff207d03 	.word	0xff207d03
 8003a30:	40010204 	.word	0x40010204
 8003a34:	20000000 	.word	0x20000000
 8003a38:	053e2d63 	.word	0x053e2d63
 8003a3c:	40010200 	.word	0x40010200

08003a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60d3      	str	r3, [r2, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 0307 	and.w	r3, r3, #7
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	db0a      	blt.n	8003ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	490c      	ldr	r1, [pc, #48]	; (8003af0 <__NVIC_SetPriority+0x4c>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	0112      	lsls	r2, r2, #4
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003acc:	e00a      	b.n	8003ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4908      	ldr	r1, [pc, #32]	; (8003af4 <__NVIC_SetPriority+0x50>)
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	3b04      	subs	r3, #4
 8003adc:	0112      	lsls	r2, r2, #4
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	761a      	strb	r2, [r3, #24]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000e100 	.word	0xe000e100
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f1c3 0307 	rsb	r3, r3, #7
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	bf28      	it	cs
 8003b16:	2304      	movcs	r3, #4
 8003b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d902      	bls.n	8003b28 <NVIC_EncodePriority+0x30>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3b03      	subs	r3, #3
 8003b26:	e000      	b.n	8003b2a <NVIC_EncodePriority+0x32>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b40:	f04f 31ff 	mov.w	r1, #4294967295
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	43d9      	mvns	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	4313      	orrs	r3, r2
         );
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b70:	d301      	bcc.n	8003b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00f      	b.n	8003b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <SysTick_Config+0x40>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b7e:	210f      	movs	r1, #15
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	f7ff ff8e 	bl	8003aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <SysTick_Config+0x40>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <SysTick_Config+0x40>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000e010 	.word	0xe000e010

08003ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff47 	bl	8003a40 <__NVIC_SetPriorityGrouping>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bcc:	f7ff ff5c 	bl	8003a88 <__NVIC_GetPriorityGrouping>
 8003bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7ff ff8e 	bl	8003af8 <NVIC_EncodePriority>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff5d 	bl	8003aa4 <__NVIC_SetPriority>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ffb0 	bl	8003b60 <SysTick_Config>
 8003c00:	4603      	mov	r3, r0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1a:	e166      	b.n	8003eea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8158 	beq.w	8003ee4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d005      	beq.n	8003c4c <HAL_GPIO_Init+0x40>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d130      	bne.n	8003cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c82:	2201      	movs	r2, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 0201 	and.w	r2, r3, #1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d017      	beq.n	8003cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d123      	bne.n	8003d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	08da      	lsrs	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3208      	adds	r2, #8
 8003cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	08da      	lsrs	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	6939      	ldr	r1, [r7, #16]
 8003d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80b2 	beq.w	8003ee4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d80:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	4a60      	ldr	r2, [pc, #384]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8003d8c:	4b5e      	ldr	r3, [pc, #376]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d98:	4a5c      	ldr	r2, [pc, #368]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	3302      	adds	r3, #2
 8003da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dc2:	d02b      	beq.n	8003e1c <HAL_GPIO_Init+0x210>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d025      	beq.n	8003e18 <HAL_GPIO_Init+0x20c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a51      	ldr	r2, [pc, #324]	; (8003f14 <HAL_GPIO_Init+0x308>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01f      	beq.n	8003e14 <HAL_GPIO_Init+0x208>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <HAL_GPIO_Init+0x30c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d019      	beq.n	8003e10 <HAL_GPIO_Init+0x204>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a4f      	ldr	r2, [pc, #316]	; (8003f1c <HAL_GPIO_Init+0x310>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_GPIO_Init+0x200>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a4e      	ldr	r2, [pc, #312]	; (8003f20 <HAL_GPIO_Init+0x314>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00d      	beq.n	8003e08 <HAL_GPIO_Init+0x1fc>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a4d      	ldr	r2, [pc, #308]	; (8003f24 <HAL_GPIO_Init+0x318>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <HAL_GPIO_Init+0x1f8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a4c      	ldr	r2, [pc, #304]	; (8003f28 <HAL_GPIO_Init+0x31c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <HAL_GPIO_Init+0x1f4>
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	e00e      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e00:	2308      	movs	r3, #8
 8003e02:	e00c      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e04:	2306      	movs	r3, #6
 8003e06:	e00a      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e08:	2305      	movs	r3, #5
 8003e0a:	e008      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	e006      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e10:	2303      	movs	r3, #3
 8003e12:	e004      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e002      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	f002 0203 	and.w	r2, r2, #3
 8003e24:	0092      	lsls	r2, r2, #2
 8003e26:	4093      	lsls	r3, r2
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e2e:	4937      	ldr	r1, [pc, #220]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e60:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e8a:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f ae91 	bne.w	8003c1c <HAL_GPIO_Init+0x10>
  }
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	48000400 	.word	0x48000400
 8003f14:	48000800 	.word	0x48000800
 8003f18:	48000c00 	.word	0x48000c00
 8003f1c:	48001000 	.word	0x48001000
 8003f20:	48001400 	.word	0x48001400
 8003f24:	48001800 	.word	0x48001800
 8003f28:	48001c00 	.word	0x48001c00
 8003f2c:	40010400 	.word	0x40010400

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40007000 	.word	0x40007000

08003f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	d102      	bne.n	8003f98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f96:	e00b      	b.n	8003fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d102      	bne.n	8003fae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fac:	e000      	b.n	8003fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003fae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40007000 	.word	0x40007000

08003fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d141      	bne.n	8004052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fce:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d131      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fdc:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe2:	4a46      	ldr	r2, [pc, #280]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fec:	4b43      	ldr	r3, [pc, #268]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ff4:	4a41      	ldr	r2, [pc, #260]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ffc:	4b40      	ldr	r3, [pc, #256]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2232      	movs	r2, #50	; 0x32
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	4a3f      	ldr	r2, [pc, #252]	; (8004104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0c9b      	lsrs	r3, r3, #18
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004012:	e002      	b.n	800401a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004026:	d102      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f2      	bne.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d158      	bne.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e057      	b.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004046:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004050:	e04d      	b.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004058:	d141      	bne.n	80040de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d131      	bne.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406e:	4a23      	ldr	r2, [pc, #140]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004078:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004080:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2232      	movs	r2, #50	; 0x32
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	0c9b      	lsrs	r3, r3, #18
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409e:	e002      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d102      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f2      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d112      	bne.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e011      	b.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040dc:	e007      	b.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e6:	4a05      	ldr	r2, [pc, #20]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40007000 	.word	0x40007000
 8004100:	20000000 	.word	0x20000000
 8004104:	431bde83 	.word	0x431bde83

08004108 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_PWREx_EnableVddIO2+0x1c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004116:	6053      	str	r3, [r2, #4]
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40007000 	.word	0x40007000

08004128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f000 bc08 	b.w	800494c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413c:	4b96      	ldr	r3, [pc, #600]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004146:	4b94      	ldr	r3, [pc, #592]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80e4 	beq.w	8004326 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_RCC_OscConfig+0x4c>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	f040 808b 	bne.w	8004282 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 8087 	bne.w	8004282 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_OscConfig+0x64>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e3df      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	4b81      	ldr	r3, [pc, #516]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_RCC_OscConfig+0x7e>
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a4:	e005      	b.n	80041b2 <HAL_RCC_OscConfig+0x8a>
 80041a6:	4b7c      	ldr	r3, [pc, #496]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d223      	bcs.n	80041fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fdcc 	bl	8004d58 <RCC_SetFlashLatencyFromMSIRange>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e3c0      	b.n	800494c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ca:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a72      	ldr	r2, [pc, #456]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041d0:	f043 0308 	orr.w	r3, r3, #8
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	496d      	ldr	r1, [pc, #436]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e8:	4b6b      	ldr	r3, [pc, #428]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	4968      	ldr	r1, [pc, #416]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
 80041fc:	e025      	b.n	800424a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fe:	4b66      	ldr	r3, [pc, #408]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a65      	ldr	r2, [pc, #404]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004204:	f043 0308 	orr.w	r3, r3, #8
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4960      	ldr	r1, [pc, #384]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421c:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	495b      	ldr	r1, [pc, #364]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fd8c 	bl	8004d58 <RCC_SetFlashLatencyFromMSIRange>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e380      	b.n	800494c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424a:	f000 fcc1 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b51      	ldr	r3, [pc, #324]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	4950      	ldr	r1, [pc, #320]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	fa22 f303 	lsr.w	r3, r2, r3
 8004266:	4a4e      	ldr	r2, [pc, #312]	; (80043a0 <HAL_RCC_OscConfig+0x278>)
 8004268:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <HAL_RCC_OscConfig+0x27c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f828 	bl	80022c4 <HAL_InitTick>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d052      	beq.n	8004324 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	e364      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d032      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800428a:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a42      	ldr	r2, [pc, #264]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004296:	f7fe f865 	bl	8002364 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429e:	f7fe f861 	bl	8002364 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e34d      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a35      	ldr	r2, [pc, #212]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042c2:	f043 0308 	orr.w	r3, r3, #8
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4930      	ldr	r1, [pc, #192]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042da:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	492b      	ldr	r1, [pc, #172]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
 80042ee:	e01a      	b.n	8004326 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f0:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a28      	ldr	r2, [pc, #160]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f832 	bl	8002364 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004304:	f7fe f82e 	bl	8002364 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e31a      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x1dc>
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d073      	beq.n	800441a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d005      	beq.n	8004344 <HAL_RCC_OscConfig+0x21c>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d10e      	bne.n	800435c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d10b      	bne.n	800435c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d063      	beq.n	8004418 <HAL_RCC_OscConfig+0x2f0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d15f      	bne.n	8004418 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e2f7      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d106      	bne.n	8004374 <HAL_RCC_OscConfig+0x24c>
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e025      	b.n	80043c0 <HAL_RCC_OscConfig+0x298>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437c:	d114      	bne.n	80043a8 <HAL_RCC_OscConfig+0x280>
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a02      	ldr	r2, [pc, #8]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e013      	b.n	80043c0 <HAL_RCC_OscConfig+0x298>
 8004398:	40021000 	.word	0x40021000
 800439c:	08008db0 	.word	0x08008db0
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000004 	.word	0x20000004
 80043a8:	4ba0      	ldr	r3, [pc, #640]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a9f      	ldr	r2, [pc, #636]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b9d      	ldr	r3, [pc, #628]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a9c      	ldr	r2, [pc, #624]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd ffcc 	bl	8002364 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fd ffc8 	bl	8002364 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e2b4      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e2:	4b92      	ldr	r3, [pc, #584]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2a8>
 80043ee:	e014      	b.n	800441a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd ffb8 	bl	8002364 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fd ffb4 	bl	8002364 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e2a0      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440a:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x2d0>
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d060      	beq.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d005      	beq.n	8004438 <HAL_RCC_OscConfig+0x310>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d119      	bne.n	8004466 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d116      	bne.n	8004466 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004438:	4b7c      	ldr	r3, [pc, #496]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_OscConfig+0x328>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e27d      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	4973      	ldr	r1, [pc, #460]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004464:	e040      	b.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d023      	beq.n	80044b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446e:	4b6f      	ldr	r3, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6e      	ldr	r2, [pc, #440]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd ff73 	bl	8002364 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fd ff6f 	bl	8002364 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e25b      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a0:	4b62      	ldr	r3, [pc, #392]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	495f      	ldr	r1, [pc, #380]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	e018      	b.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5c      	ldr	r2, [pc, #368]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd ff4f 	bl	8002364 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd ff4b 	bl	8002364 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e237      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03c      	beq.n	800456e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fc:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004502:	4a4a      	ldr	r2, [pc, #296]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd ff2a 	bl	8002364 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd ff26 	bl	8002364 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e212      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ef      	beq.n	8004514 <HAL_RCC_OscConfig+0x3ec>
 8004534:	e01b      	b.n	800456e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453c:	4a3b      	ldr	r2, [pc, #236]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd ff0d 	bl	8002364 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fd ff09 	bl	8002364 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e1f5      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ef      	bne.n	800454e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80a6 	beq.w	80046c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	; 0x58
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d118      	bne.n	80045e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b4:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c0:	f7fd fed0 	bl	8002364 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c8:	f7fd fecc 	bl	8002364 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e1b8      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d108      	bne.n	8004600 <HAL_RCC_OscConfig+0x4d8>
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045fe:	e029      	b.n	8004654 <HAL_RCC_OscConfig+0x52c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d115      	bne.n	8004634 <HAL_RCC_OscConfig+0x50c>
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	4a03      	ldr	r2, [pc, #12]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004628:	e014      	b.n	8004654 <HAL_RCC_OscConfig+0x52c>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
 8004634:	4b9d      	ldr	r3, [pc, #628]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	4a9c      	ldr	r2, [pc, #624]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004644:	4b99      	ldr	r3, [pc, #612]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a98      	ldr	r2, [pc, #608]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d016      	beq.n	800468a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd fe82 	bl	8002364 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fd fe7e 	bl	8002364 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e168      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467a:	4b8c      	ldr	r3, [pc, #560]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ed      	beq.n	8004664 <HAL_RCC_OscConfig+0x53c>
 8004688:	e015      	b.n	80046b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fd fe6b 	bl	8002364 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fd fe67 	bl	8002364 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e151      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a8:	4b80      	ldr	r3, [pc, #512]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ed      	bne.n	8004692 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b6:	7ffb      	ldrb	r3, [r7, #31]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	4a7a      	ldr	r2, [pc, #488]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d03c      	beq.n	800474e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01c      	beq.n	8004716 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046dc:	4b73      	ldr	r3, [pc, #460]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80046de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e2:	4a72      	ldr	r2, [pc, #456]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd fe3a 	bl	8002364 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f4:	f7fd fe36 	bl	8002364 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e122      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004706:	4b69      	ldr	r3, [pc, #420]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ef      	beq.n	80046f4 <HAL_RCC_OscConfig+0x5cc>
 8004714:	e01b      	b.n	800474e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004716:	4b65      	ldr	r3, [pc, #404]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471c:	4a63      	ldr	r2, [pc, #396]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fd fe1d 	bl	8002364 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800472e:	f7fd fe19 	bl	8002364 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e105      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ef      	bne.n	800472e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80f9 	beq.w	800494a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	2b02      	cmp	r3, #2
 800475e:	f040 80cf 	bne.w	8004900 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004762:	4b52      	ldr	r3, [pc, #328]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0203 	and.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	429a      	cmp	r2, r3
 8004774:	d12c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	3b01      	subs	r3, #1
 8004782:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d123      	bne.n	80047d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d11b      	bne.n	80047d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d113      	bne.n	80047d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	3b01      	subs	r3, #1
 80047b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d109      	bne.n	80047d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	3b01      	subs	r3, #1
 80047ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d071      	beq.n	80048b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d068      	beq.n	80048a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047d6:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047e2:	4b32      	ldr	r3, [pc, #200]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0ac      	b.n	800494c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2d      	ldr	r2, [pc, #180]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80047f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047fe:	f7fd fdb1 	bl	8002364 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fd fdad 	bl	8002364 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e099      	b.n	800494c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <HAL_RCC_OscConfig+0x788>)
 800482a:	4013      	ands	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004834:	3a01      	subs	r2, #1
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	4311      	orrs	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483e:	0212      	lsls	r2, r2, #8
 8004840:	4311      	orrs	r1, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004846:	0852      	lsrs	r2, r2, #1
 8004848:	3a01      	subs	r2, #1
 800484a:	0552      	lsls	r2, r2, #21
 800484c:	4311      	orrs	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004852:	0852      	lsrs	r2, r2, #1
 8004854:	3a01      	subs	r2, #1
 8004856:	0652      	lsls	r2, r2, #25
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800485e:	06d2      	lsls	r2, r2, #27
 8004860:	430a      	orrs	r2, r1
 8004862:	4912      	ldr	r1, [pc, #72]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004864:	4313      	orrs	r3, r2
 8004866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4a0c      	ldr	r2, [pc, #48]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800487a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004880:	f7fd fd70 	bl	8002364 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004888:	f7fd fd6c 	bl	8002364 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e058      	b.n	800494c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489a:	4b04      	ldr	r3, [pc, #16]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048a6:	e050      	b.n	800494a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e04f      	b.n	800494c <HAL_RCC_OscConfig+0x824>
 80048ac:	40021000 	.word	0x40021000
 80048b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b4:	4b27      	ldr	r3, [pc, #156]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d144      	bne.n	800494a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 80048c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048cc:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a20      	ldr	r2, [pc, #128]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048d8:	f7fd fd44 	bl	8002364 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd fd40 	bl	8002364 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e02c      	b.n	800494c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f2:	4b18      	ldr	r3, [pc, #96]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x7b8>
 80048fe:	e024      	b.n	800494a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d01f      	beq.n	8004946 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 800490c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fd fd27 	bl	8002364 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fd fd23 	bl	8002364 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e00f      	b.n	800494c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	4905      	ldr	r1, [pc, #20]	; (8004954 <HAL_RCC_OscConfig+0x82c>)
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCC_OscConfig+0x830>)
 8004940:	4013      	ands	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
 8004944:	e001      	b.n	800494a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000
 8004958:	feeefffc 	.word	0xfeeefffc

0800495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e11d      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b90      	ldr	r3, [pc, #576]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d910      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b8d      	ldr	r3, [pc, #564]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 020f 	bic.w	r2, r3, #15
 800498a:	498b      	ldr	r1, [pc, #556]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b89      	ldr	r3, [pc, #548]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e105      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049bc:	429a      	cmp	r2, r3
 80049be:	d908      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b7e      	ldr	r3, [pc, #504]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	497b      	ldr	r1, [pc, #492]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d079      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d11e      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	4b75      	ldr	r3, [pc, #468]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0dc      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80049f6:	f000 fa09 	bl	8004e0c <RCC_GetSysClockFreqFromPLLSource>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4a70      	ldr	r2, [pc, #448]	; (8004bc0 <HAL_RCC_ClockConfig+0x264>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d946      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a02:	4b6e      	ldr	r3, [pc, #440]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d140      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a0e:	4b6b      	ldr	r3, [pc, #428]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a16:	4a69      	ldr	r2, [pc, #420]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	e035      	b.n	8004a90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2c:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d115      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0b9      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a44:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0ad      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a54:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a5      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004a64:	f000 f8b4 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4a55      	ldr	r2, [pc, #340]	; (8004bc0 <HAL_RCC_ClockConfig+0x264>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d90f      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a70:	4b52      	ldr	r3, [pc, #328]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a7c:	4b4f      	ldr	r3, [pc, #316]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a84:	4a4d      	ldr	r2, [pc, #308]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a90:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 0203 	bic.w	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4947      	ldr	r1, [pc, #284]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa2:	f7fd fc5f 	bl	8002364 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aaa:	f7fd fc5b 	bl	8002364 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e077      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac0:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 020c 	and.w	r2, r3, #12
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d1eb      	bne.n	8004aaa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ad8:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4a37      	ldr	r2, [pc, #220]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d208      	bcs.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	492b      	ldr	r1, [pc, #172]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d210      	bcs.n	8004b42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 020f 	bic.w	r2, r3, #15
 8004b28:	4923      	ldr	r1, [pc, #140]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e036      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4918      	ldr	r1, [pc, #96]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4910      	ldr	r1, [pc, #64]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b80:	f000 f826 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	490c      	ldr	r1, [pc, #48]	; (8004bc4 <HAL_RCC_ClockConfig+0x268>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <HAL_RCC_ClockConfig+0x26c>)
 8004b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_RCC_ClockConfig+0x270>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fb8d 	bl	80022c4 <HAL_InitTick>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	04c4b400 	.word	0x04c4b400
 8004bc4:	08008db0 	.word	0x08008db0
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be8:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d121      	bne.n	8004c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11e      	bne.n	8004c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c04:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c10:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e005      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c20:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10d      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d102      	bne.n	8004c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e004      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d134      	bne.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d003      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0xac>
 8004c74:	e005      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c78:	617b      	str	r3, [r7, #20]
      break;
 8004c7a:	e005      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c7e:	617b      	str	r3, [r7, #20]
      break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	617b      	str	r3, [r7, #20]
      break;
 8004c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c88:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	fb03 f202 	mul.w	r2, r3, r2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	0e5b      	lsrs	r3, r3, #25
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	; 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	08008dc8 	.word	0x08008dc8
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000000 	.word	0x20000000

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d04:	f7ff fff0 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4904      	ldr	r1, [pc, #16]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	08008dc0 	.word	0x08008dc0

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d30:	f7ff ffda 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0adb      	lsrs	r3, r3, #11
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4904      	ldr	r1, [pc, #16]	; (8004d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	08008dc0 	.word	0x08008dc0

08004d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d64:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d70:	f7ff f906 	bl	8003f80 <HAL_PWREx_GetVoltageRange>
 8004d74:	6178      	str	r0, [r7, #20]
 8004d76:	e014      	b.n	8004da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d78:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d82:	6593      	str	r3, [r2, #88]	; 0x58
 8004d84:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d90:	f7ff f8f6 	bl	8003f80 <HAL_PWREx_GetVoltageRange>
 8004d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	4a1a      	ldr	r2, [pc, #104]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da8:	d10b      	bne.n	8004dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b80      	cmp	r3, #128	; 0x80
 8004dae:	d913      	bls.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2ba0      	cmp	r3, #160	; 0xa0
 8004db4:	d902      	bls.n	8004dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004db6:	2302      	movs	r3, #2
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e00d      	b.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	e00a      	b.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc6:	d902      	bls.n	8004dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004dc8:	2302      	movs	r3, #2
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	e004      	b.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d101      	bne.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 020f 	bic.w	r2, r3, #15
 8004de0:	4909      	ldr	r1, [pc, #36]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40022000 	.word	0x40022000

08004e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d00b      	beq.n	8004e3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d825      	bhi.n	8004e74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d008      	beq.n	8004e40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11f      	bne.n	8004e74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004e34:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e36:	613b      	str	r3, [r7, #16]
    break;
 8004e38:	e01f      	b.n	8004e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004e3a:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004e3c:	613b      	str	r3, [r7, #16]
    break;
 8004e3e:	e01c      	b.n	8004e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e40:	4b21      	ldr	r3, [pc, #132]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e005      	b.n	8004e68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	613b      	str	r3, [r7, #16]
    break;
 8004e72:	e002      	b.n	8004e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
    break;
 8004e78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	3301      	adds	r3, #1
 8004e86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	fb03 f202 	mul.w	r2, r3, r2
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	0e5b      	lsrs	r3, r3, #25
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004eba:	683b      	ldr	r3, [r7, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200
 8004ed4:	08008dc8 	.word	0x08008dc8

08004ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d040      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d02a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d825      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d026      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f04:	2b60      	cmp	r3, #96	; 0x60
 8004f06:	d821      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d006      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d81d      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d010      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f18:	e018      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f1a:	4b89      	ldr	r3, [pc, #548]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a88      	ldr	r2, [pc, #544]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f26:	e015      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 fa34 	bl	800639c <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fb1f 	bl	8006584 <RCCEx_PLLSAI2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	74fb      	strb	r3, [r7, #19]
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f5a:	4b79      	ldr	r3, [pc, #484]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f60:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f68:	4975      	ldr	r1, [pc, #468]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f70:	e001      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d047      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8a:	d030      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f90:	d82a      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f96:	d02a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9c:	d824      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d81e      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fb4:	e018      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb6:	4b62      	ldr	r3, [pc, #392]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a61      	ldr	r2, [pc, #388]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fc2:	e015      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 f9e6 	bl	800639c <RCCEx_PLLSAI1_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3320      	adds	r3, #32
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f001 fad1 	bl	8006584 <RCCEx_PLLSAI2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	74fb      	strb	r3, [r7, #19]
      break;
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ff6:	4b52      	ldr	r3, [pc, #328]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	494e      	ldr	r1, [pc, #312]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800500c:	e001      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 809f 	beq.w	800515e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005020:	2300      	movs	r3, #0
 8005022:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005024:	4b46      	ldr	r3, [pc, #280]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005034:	2300      	movs	r3, #0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	4b41      	ldr	r3, [pc, #260]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	4a40      	ldr	r2, [pc, #256]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
 8005046:	4b3e      	ldr	r3, [pc, #248]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005052:	2301      	movs	r3, #1
 8005054:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005056:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005062:	f7fd f97f 	bl	8002364 <HAL_GetTick>
 8005066:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005068:	e009      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fd f97b 	bl	8002364 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d902      	bls.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	74fb      	strb	r3, [r7, #19]
        break;
 800507c:	e005      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800507e:	4b31      	ldr	r3, [pc, #196]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ef      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d15b      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005090:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01f      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d019      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ba:	4b21      	ldr	r3, [pc, #132]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050da:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d016      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd f93a 	bl	8002364 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f2:	e00b      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fd f936 	bl	8002364 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d902      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	74fb      	strb	r3, [r7, #19]
            break;
 800510a:	e006      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0ec      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10c      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005138:	e008      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800513a:	7cfb      	ldrb	r3, [r7, #19]
 800513c:	74bb      	strb	r3, [r7, #18]
 800513e:	e005      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005140:	40021000 	.word	0x40021000
 8005144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514c:	7c7b      	ldrb	r3, [r7, #17]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005152:	4ba0      	ldr	r3, [pc, #640]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	4a9f      	ldr	r2, [pc, #636]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800516a:	4b9a      	ldr	r3, [pc, #616]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f023 0203 	bic.w	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	4996      	ldr	r1, [pc, #600]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800518c:	4b91      	ldr	r3, [pc, #580]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f023 020c 	bic.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	498e      	ldr	r1, [pc, #568]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051ae:	4b89      	ldr	r3, [pc, #548]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	4985      	ldr	r1, [pc, #532]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051d0:	4b80      	ldr	r3, [pc, #512]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051de:	497d      	ldr	r1, [pc, #500]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051f2:	4b78      	ldr	r3, [pc, #480]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	4974      	ldr	r1, [pc, #464]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	496c      	ldr	r1, [pc, #432]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005236:	4b67      	ldr	r3, [pc, #412]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005244:	4963      	ldr	r1, [pc, #396]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005258:	4b5e      	ldr	r3, [pc, #376]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005266:	495b      	ldr	r1, [pc, #364]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527a:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	4952      	ldr	r1, [pc, #328]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	494a      	ldr	r1, [pc, #296]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052be:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052cc:	4941      	ldr	r1, [pc, #260]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052e0:	4b3c      	ldr	r3, [pc, #240]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e6:	f023 0203 	bic.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ee:	4939      	ldr	r1, [pc, #228]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d028      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005302:	4b34      	ldr	r3, [pc, #208]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005310:	4930      	ldr	r1, [pc, #192]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005320:	d106      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005322:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532c:	60d3      	str	r3, [r2, #12]
 800532e:	e011      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005338:	d10c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f001 f82b 	bl	800639c <RCCEx_PLLSAI1_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d04d      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005368:	d108      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800536a:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005376:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800537a:	e012      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800537c:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005382:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005388:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539a:	490e      	ldr	r1, [pc, #56]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053aa:	d106      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b6:	60d3      	str	r3, [r2, #12]
 80053b8:	e020      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c2:	d109      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a02      	ldr	r2, [pc, #8]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ce:	60d3      	str	r3, [r2, #12]
 80053d0:	e014      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 ffd7 	bl	800639c <RCCEx_PLLSAI1_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d028      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005408:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005416:	4947      	ldr	r1, [pc, #284]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005426:	d106      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005428:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a41      	ldr	r2, [pc, #260]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005432:	60d3      	str	r3, [r2, #12]
 8005434:	e011      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800543e:	d10c      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	2101      	movs	r1, #1
 8005446:	4618      	mov	r0, r3
 8005448:	f000 ffa8 	bl	800639c <RCCEx_PLLSAI1_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005456:	7cfb      	ldrb	r3, [r7, #19]
 8005458:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01e      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005466:	4b33      	ldr	r3, [pc, #204]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005476:	492f      	ldr	r1, [pc, #188]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 ff83 	bl	800639c <RCCEx_PLLSAI1_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b6:	f023 0204 	bic.w	r2, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c0:	491c      	ldr	r1, [pc, #112]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054d4:	4b17      	ldr	r3, [pc, #92]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054da:	f023 0218 	bic.w	r2, r3, #24
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	4913      	ldr	r1, [pc, #76]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005508:	490a      	ldr	r1, [pc, #40]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a04      	ldr	r2, [pc, #16]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005528:	7cbb      	ldrb	r3, [r7, #18]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000

08005538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800554a:	d13e      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800554c:	4bb6      	ldr	r3, [pc, #728]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005556:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555e:	d028      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	f200 86f4 	bhi.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005570:	d005      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005578:	d00e      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800557a:	f000 beea 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800557e:	4baa      	ldr	r3, [pc, #680]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	f040 86e4 	bne.w	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
      break;
 8005594:	f000 bedf 	b.w	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005598:	4ba3      	ldr	r3, [pc, #652]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	f040 86d9 	bne.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80055a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055ac:	61fb      	str	r3, [r7, #28]
      break;
 80055ae:	f000 bed4 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055b2:	4b9d      	ldr	r3, [pc, #628]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055be:	f040 86ce 	bne.w	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80055c2:	4b9a      	ldr	r3, [pc, #616]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055c4:	61fb      	str	r3, [r7, #28]
      break;
 80055c6:	f000 beca 	b.w	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ca:	4b97      	ldr	r3, [pc, #604]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d036      	beq.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d840      	bhi.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d003      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d020      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80055ec:	e039      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055ee:	4b8e      	ldr	r3, [pc, #568]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d116      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055fa:	4b8b      	ldr	r3, [pc, #556]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005606:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	e005      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005612:	4b85      	ldr	r3, [pc, #532]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	4a84      	ldr	r2, [pc, #528]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005624:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005626:	e01f      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
      break;
 800562c:	e01c      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800562e:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d102      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800563c:	4b7d      	ldr	r3, [pc, #500]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800563e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005640:	e012      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
      break;
 8005646:	e00f      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005648:	4b77      	ldr	r3, [pc, #476]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005654:	d102      	bne.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005656:	4b78      	ldr	r3, [pc, #480]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005658:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800565a:	e005      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
      break;
 8005660:	e002      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
      break;
 8005666:	bf00      	nop
    }

    switch(PeriphClk)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800566e:	f000 8606 	beq.w	800627e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005678:	f200 8673 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005682:	f000 8469 	beq.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800568c:	f200 8669 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005696:	f000 8531 	beq.w	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a0:	f200 865f 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056aa:	f000 8187 	beq.w	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056b4:	f200 8655 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056be:	f000 80cd 	beq.w	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056c8:	f200 864b 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d2:	f000 8430 	beq.w	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056dc:	f200 8641 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e6:	f000 83e4 	beq.w	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f0:	f200 8637 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fa:	f000 80af 	beq.w	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	f200 862d 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570e:	f000 809d 	beq.w	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	f200 8623 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	f000 808b 	beq.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572c:	f200 8619 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	f000 8554 	beq.w	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005740:	f200 860f 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574a:	f000 8500 	beq.w	800614e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005754:	f200 8605 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575e:	f000 84a1 	beq.w	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	f200 85fb 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	f000 846c 	beq.w	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	f200 85f3 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b20      	cmp	r3, #32
 8005780:	d84c      	bhi.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 85ec 	beq.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3b01      	subs	r3, #1
 800578e:	2b1f      	cmp	r3, #31
 8005790:	f200 85e7 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	08005bb1 	.word	0x08005bb1
 80057a0:	08005c1f 	.word	0x08005c1f
 80057a4:	08006363 	.word	0x08006363
 80057a8:	08005cb3 	.word	0x08005cb3
 80057ac:	08006363 	.word	0x08006363
 80057b0:	08006363 	.word	0x08006363
 80057b4:	08006363 	.word	0x08006363
 80057b8:	08005d2b 	.word	0x08005d2b
 80057bc:	08006363 	.word	0x08006363
 80057c0:	08006363 	.word	0x08006363
 80057c4:	08006363 	.word	0x08006363
 80057c8:	08006363 	.word	0x08006363
 80057cc:	08006363 	.word	0x08006363
 80057d0:	08006363 	.word	0x08006363
 80057d4:	08006363 	.word	0x08006363
 80057d8:	08005daf 	.word	0x08005daf
 80057dc:	08006363 	.word	0x08006363
 80057e0:	08006363 	.word	0x08006363
 80057e4:	08006363 	.word	0x08006363
 80057e8:	08006363 	.word	0x08006363
 80057ec:	08006363 	.word	0x08006363
 80057f0:	08006363 	.word	0x08006363
 80057f4:	08006363 	.word	0x08006363
 80057f8:	08006363 	.word	0x08006363
 80057fc:	08006363 	.word	0x08006363
 8005800:	08006363 	.word	0x08006363
 8005804:	08006363 	.word	0x08006363
 8005808:	08006363 	.word	0x08006363
 800580c:	08006363 	.word	0x08006363
 8005810:	08006363 	.word	0x08006363
 8005814:	08006363 	.word	0x08006363
 8005818:	08005e31 	.word	0x08005e31
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	f000 83e8 	beq.w	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005824:	f000 bd9d 	b.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005828:	40021000 	.word	0x40021000
 800582c:	0003d090 	.word	0x0003d090
 8005830:	08008dc8 	.word	0x08008dc8
 8005834:	00f42400 	.word	0x00f42400
 8005838:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005842:	f000 ff93 	bl	800676c <RCCEx_GetSAIxPeriphCLKFreq>
 8005846:	61f8      	str	r0, [r7, #28]
      break;
 8005848:	f000 bd8e 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005852:	f000 ff8b 	bl	800676c <RCCEx_GetSAIxPeriphCLKFreq>
 8005856:	61f8      	str	r0, [r7, #28]
      break;
 8005858:	f000 bd86 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800585c:	4b9a      	ldr	r3, [pc, #616]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800586e:	d015      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005876:	f200 8092 	bhi.w	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005880:	d029      	beq.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005888:	f200 8089 	bhi.w	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d07b      	beq.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005898:	d04a      	beq.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800589a:	e080      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800589c:	4b8a      	ldr	r3, [pc, #552]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d17d      	bne.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80058a8:	4b87      	ldr	r3, [pc, #540]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80058b4:	4b84      	ldr	r3, [pc, #528]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	e005      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80058c0:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	4a7f      	ldr	r2, [pc, #508]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80058ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d2:	61fb      	str	r3, [r7, #28]
          break;
 80058d4:	e066      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058d6:	4b7c      	ldr	r3, [pc, #496]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e2:	d162      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80058e4:	4b78      	ldr	r3, [pc, #480]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f0:	d15b      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058f2:	4b75      	ldr	r3, [pc, #468]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	fb03 f202 	mul.w	r2, r3, r2
 8005906:	4b70      	ldr	r3, [pc, #448]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	3301      	adds	r3, #1
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005918:	4b6b      	ldr	r3, [pc, #428]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	0d5b      	lsrs	r3, r3, #21
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	3301      	adds	r3, #1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	61fb      	str	r3, [r7, #28]
          break;
 800592e:	e03c      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005930:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593c:	d138      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800593e:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594a:	d131      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800594c:	4b5e      	ldr	r3, [pc, #376]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005956:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	fb03 f202 	mul.w	r2, r3, r2
 8005960:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	3301      	adds	r3, #1
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005972:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	0d5b      	lsrs	r3, r3, #21
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	3301      	adds	r3, #1
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	61fb      	str	r3, [r7, #28]
          break;
 8005988:	e012      	b.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800598a:	4b4f      	ldr	r3, [pc, #316]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d10e      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005998:	4b4d      	ldr	r3, [pc, #308]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800599a:	61fb      	str	r3, [r7, #28]
          break;
 800599c:	e00b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800599e:	bf00      	nop
 80059a0:	f000 bce2 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059a4:	bf00      	nop
 80059a6:	f000 bcdf 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059aa:	bf00      	nop
 80059ac:	f000 bcdc 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059b0:	bf00      	nop
 80059b2:	f000 bcd9 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059b6:	bf00      	nop
        break;
 80059b8:	f000 bcd6 	b.w	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80059bc:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ca:	d13d      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059cc:	4b3e      	ldr	r3, [pc, #248]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d8:	f040 84c5 	bne.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80059dc:	4b3a      	ldr	r3, [pc, #232]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	f040 84bd 	bne.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059ec:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	fb03 f202 	mul.w	r2, r3, r2
 8005a00:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a12:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	0edb      	lsrs	r3, r3, #27
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a24:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005a30:	2311      	movs	r3, #17
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e001      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005a36:	2307      	movs	r3, #7
 8005a38:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	61fb      	str	r3, [r7, #28]
      break;
 8005a44:	f000 bc8f 	b.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005a48:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a5a:	d016      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a62:	f200 809b 	bhi.w	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a6c:	d032      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a74:	f200 8092 	bhi.w	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8084 	beq.w	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a86:	d052      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005a88:	e088      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	f040 8084 	bne.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	e005      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	4a03      	ldr	r2, [pc, #12]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac2:	61fb      	str	r3, [r7, #28]
          break;
 8005ac4:	e06c      	b.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	08008dc8 	.word	0x08008dc8
 8005ad0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005ad4:	4ba5      	ldr	r3, [pc, #660]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae0:	d160      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005ae2:	4ba2      	ldr	r3, [pc, #648]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aee:	d159      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005af0:	4b9e      	ldr	r3, [pc, #632]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	fb03 f202 	mul.w	r2, r3, r2
 8005b04:	4b99      	ldr	r3, [pc, #612]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	3301      	adds	r3, #1
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005b16:	4b95      	ldr	r3, [pc, #596]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	0d5b      	lsrs	r3, r3, #21
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	3301      	adds	r3, #1
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	61fb      	str	r3, [r7, #28]
          break;
 8005b2c:	e03a      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005b2e:	4b8f      	ldr	r3, [pc, #572]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3a:	d135      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005b3c:	4b8b      	ldr	r3, [pc, #556]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b48:	d12e      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b4a:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b54:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	fb03 f202 	mul.w	r2, r3, r2
 8005b5e:	4b83      	ldr	r3, [pc, #524]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	3301      	adds	r3, #1
 8005b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005b70:	4b7e      	ldr	r3, [pc, #504]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	0d5b      	lsrs	r3, r3, #21
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	61fb      	str	r3, [r7, #28]
          break;
 8005b86:	e00f      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005b88:	4b78      	ldr	r3, [pc, #480]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d10a      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005b96:	4b76      	ldr	r3, [pc, #472]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005b98:	61fb      	str	r3, [r7, #28]
          break;
 8005b9a:	e007      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005b9c:	bf00      	nop
 8005b9e:	e3e2      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005ba0:	bf00      	nop
 8005ba2:	e3e0      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005ba4:	bf00      	nop
 8005ba6:	e3de      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005ba8:	bf00      	nop
 8005baa:	e3dc      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bac:	bf00      	nop
      break;
 8005bae:	e3da      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bb0:	4b6e      	ldr	r3, [pc, #440]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d827      	bhi.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005be1 	.word	0x08005be1
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bfd 	.word	0x08005bfd
          frequency = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7ff f8a8 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8005bdc:	61f8      	str	r0, [r7, #28]
          break;
 8005bde:	e01d      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005be0:	f7fe fff6 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005be4:	61f8      	str	r0, [r7, #28]
          break;
 8005be6:	e019      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005be8:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf4:	d10f      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005bf6:	4b5f      	ldr	r3, [pc, #380]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005bf8:	61fb      	str	r3, [r7, #28]
          break;
 8005bfa:	e00c      	b.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d107      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0e:	61fb      	str	r3, [r7, #28]
          break;
 8005c10:	e003      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005c12:	bf00      	nop
 8005c14:	e3a8      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c16:	bf00      	nop
 8005c18:	e3a6      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c1a:	bf00      	nop
        break;
 8005c1c:	e3a4      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c1e:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d83a      	bhi.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005c30:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c6d 	.word	0x08005c6d
 8005c3c:	08005ca7 	.word	0x08005ca7
 8005c40:	08005ca7 	.word	0x08005ca7
 8005c44:	08005ca7 	.word	0x08005ca7
 8005c48:	08005c75 	.word	0x08005c75
 8005c4c:	08005ca7 	.word	0x08005ca7
 8005c50:	08005ca7 	.word	0x08005ca7
 8005c54:	08005ca7 	.word	0x08005ca7
 8005c58:	08005c7d 	.word	0x08005c7d
 8005c5c:	08005ca7 	.word	0x08005ca7
 8005c60:	08005ca7 	.word	0x08005ca7
 8005c64:	08005ca7 	.word	0x08005ca7
 8005c68:	08005c91 	.word	0x08005c91
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c6c:	f7ff f848 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005c70:	61f8      	str	r0, [r7, #28]
          break;
 8005c72:	e01d      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c74:	f7fe ffac 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005c78:	61f8      	str	r0, [r7, #28]
          break;
 8005c7a:	e019      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c88:	d10f      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005c8a:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c8c:	61fb      	str	r3, [r7, #28]
          break;
 8005c8e:	e00c      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c90:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d107      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca2:	61fb      	str	r3, [r7, #28]
          break;
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005ca6:	bf00      	nop
 8005ca8:	e35e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005caa:	bf00      	nop
 8005cac:	e35c      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cae:	bf00      	nop
        break;
 8005cb0:	e35a      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005cb2:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b30      	cmp	r3, #48	; 0x30
 8005cc2:	d021      	beq.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b30      	cmp	r3, #48	; 0x30
 8005cc8:	d829      	bhi.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d011      	beq.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d823      	bhi.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d004      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005ce2:	e01c      	b.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7ff f80c 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005ce8:	61f8      	str	r0, [r7, #28]
          break;
 8005cea:	e01d      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cec:	f7fe ff70 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005cf0:	61f8      	str	r0, [r7, #28]
          break;
 8005cf2:	e019      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d00:	d10f      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d04:	61fb      	str	r3, [r7, #28]
          break;
 8005d06:	e00c      	b.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d107      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1a:	61fb      	str	r3, [r7, #28]
          break;
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005d1e:	bf00      	nop
 8005d20:	e322      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d22:	bf00      	nop
 8005d24:	e320      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d26:	bf00      	nop
        break;
 8005d28:	e31e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d2a:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2bc0      	cmp	r3, #192	; 0xc0
 8005d3a:	d027      	beq.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d40:	d82f      	bhi.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d017      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d829      	bhi.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	d004      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005d5a:	e022      	b.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7fe ffd0 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005d60:	61f8      	str	r0, [r7, #28]
          break;
 8005d62:	e023      	b.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d64:	f7fe ff34 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005d68:	61f8      	str	r0, [r7, #28]
          break;
 8005d6a:	e01f      	b.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	02dc6c00 	.word	0x02dc6c00
 8005d74:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d78:	4b9b      	ldr	r3, [pc, #620]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d84:	d10f      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005d86:	4b99      	ldr	r3, [pc, #612]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005d88:	61fb      	str	r3, [r7, #28]
          break;
 8005d8a:	e00c      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d8c:	4b96      	ldr	r3, [pc, #600]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d107      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	61fb      	str	r3, [r7, #28]
          break;
 8005da0:	e003      	b.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005da2:	bf00      	nop
 8005da4:	e2e0      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005da6:	bf00      	nop
 8005da8:	e2de      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005daa:	bf00      	nop
        break;
 8005dac:	e2dc      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005dae:	4b8e      	ldr	r3, [pc, #568]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc0:	d025      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc8:	d82c      	bhi.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d013      	beq.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd8:	d824      	bhi.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d004      	beq.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005de8:	e01c      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dea:	f7fe ff89 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005dee:	61f8      	str	r0, [r7, #28]
          break;
 8005df0:	e01d      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fe feed 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005df6:	61f8      	str	r0, [r7, #28]
          break;
 8005df8:	e019      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dfa:	4b7b      	ldr	r3, [pc, #492]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d10f      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005e08:	4b78      	ldr	r3, [pc, #480]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e0a:	61fb      	str	r3, [r7, #28]
          break;
 8005e0c:	e00c      	b.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e0e:	4b76      	ldr	r3, [pc, #472]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d107      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e20:	61fb      	str	r3, [r7, #28]
          break;
 8005e22:	e003      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005e24:	bf00      	nop
 8005e26:	e29f      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e28:	bf00      	nop
 8005e2a:	e29d      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e2c:	bf00      	nop
        break;
 8005e2e:	e29b      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e30:	4b6d      	ldr	r3, [pc, #436]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e42:	d025      	beq.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e4a:	d82c      	bhi.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e52:	d013      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5a:	d824      	bhi.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d004      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005e6a:	e01c      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fe ff48 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005e70:	61f8      	str	r0, [r7, #28]
          break;
 8005e72:	e01d      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e74:	f7fe feac 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005e78:	61f8      	str	r0, [r7, #28]
          break;
 8005e7a:	e019      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e7c:	4b5a      	ldr	r3, [pc, #360]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d10f      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005e8a:	4b58      	ldr	r3, [pc, #352]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e8c:	61fb      	str	r3, [r7, #28]
          break;
 8005e8e:	e00c      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e90:	4b55      	ldr	r3, [pc, #340]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d107      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea2:	61fb      	str	r3, [r7, #28]
          break;
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005ea6:	bf00      	nop
 8005ea8:	e25e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005eaa:	bf00      	nop
 8005eac:	e25c      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005eae:	bf00      	nop
        break;
 8005eb0:	e25a      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005eb2:	4b4d      	ldr	r3, [pc, #308]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec4:	d007      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ecc:	d12f      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ece:	f7fe fe7f 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005ed2:	61f8      	str	r0, [r7, #28]
          break;
 8005ed4:	e02e      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005ed6:	4b44      	ldr	r3, [pc, #272]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee2:	d126      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005ee4:	4b40      	ldr	r3, [pc, #256]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d020      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ef0:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	fb03 f202 	mul.w	r2, r3, r2
 8005f04:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	3301      	adds	r3, #1
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005f16:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	0e5b      	lsrs	r3, r3, #25
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	3301      	adds	r3, #1
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	61fb      	str	r3, [r7, #28]
          break;
 8005f2c:	e001      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005f2e:	bf00      	nop
 8005f30:	e21a      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f32:	bf00      	nop
        break;
 8005f34:	e218      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f36:	4b2c      	ldr	r3, [pc, #176]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d103      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f48:	f7fe fef0 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8005f4c:	61f8      	str	r0, [r7, #28]
        break;
 8005f4e:	e20b      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f50:	f7fe fe3e 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e207      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f58:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f5e:	f003 0318 	and.w	r3, r3, #24
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d010      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d834      	bhi.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d024      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005f7c:	e02d      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f7e:	69b9      	ldr	r1, [r7, #24]
 8005f80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f84:	f000 fbf2 	bl	800676c <RCCEx_GetSAIxPeriphCLKFreq>
 8005f88:	61f8      	str	r0, [r7, #28]
          break;
 8005f8a:	e02b      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d122      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005fa4:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	e005      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005fb0:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc2:	61fb      	str	r3, [r7, #28]
          break;
 8005fc4:	e00b      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fc6:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd2:	d106      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005fd6:	61fb      	str	r3, [r7, #28]
          break;
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005fda:	bf00      	nop
 8005fdc:	e1c4      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fde:	bf00      	nop
 8005fe0:	e1c2      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fe2:	bf00      	nop
        break;
 8005fe4:	e1c0      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005fe6:	bf00      	nop
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	00f42400 	.word	0x00f42400
 8005ff0:	08008dc8 	.word	0x08008dc8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ff4:	4b96      	ldr	r3, [pc, #600]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006006:	d013      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600e:	d819      	bhi.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	d004      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800601e:	e011      	b.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006020:	f7fe fe6e 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8006024:	61f8      	str	r0, [r7, #28]
          break;
 8006026:	e010      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006028:	f7fe fdd2 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 800602c:	61f8      	str	r0, [r7, #28]
          break;
 800602e:	e00c      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006030:	4b87      	ldr	r3, [pc, #540]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603c:	d104      	bne.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800603e:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006040:	61fb      	str	r3, [r7, #28]
          break;
 8006042:	e001      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006044:	bf00      	nop
 8006046:	e18f      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006048:	bf00      	nop
        break;
 800604a:	e18d      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800604c:	4b80      	ldr	r3, [pc, #512]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605e:	d013      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006066:	d819      	bhi.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006074:	d004      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006076:	e011      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fe fe42 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 800607c:	61f8      	str	r0, [r7, #28]
          break;
 800607e:	e010      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006080:	f7fe fda6 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8006084:	61f8      	str	r0, [r7, #28]
          break;
 8006086:	e00c      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006088:	4b71      	ldr	r3, [pc, #452]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006094:	d104      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006096:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006098:	61fb      	str	r3, [r7, #28]
          break;
 800609a:	e001      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800609c:	bf00      	nop
 800609e:	e163      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060a0:	bf00      	nop
        break;
 80060a2:	e161      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80060a4:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060b6:	d013      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060be:	d819      	bhi.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060cc:	d004      	beq.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80060ce:	e011      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060d0:	f7fe fe16 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80060d4:	61f8      	str	r0, [r7, #28]
          break;
 80060d6:	e010      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80060d8:	f7fe fd7a 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 80060dc:	61f8      	str	r0, [r7, #28]
          break;
 80060de:	e00c      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060e0:	4b5b      	ldr	r3, [pc, #364]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ec:	d104      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80060ee:	4b59      	ldr	r3, [pc, #356]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80060f0:	61fb      	str	r3, [r7, #28]
          break;
 80060f2:	e001      	b.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80060f4:	bf00      	nop
 80060f6:	e137      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060f8:	bf00      	nop
        break;
 80060fa:	e135      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80060fc:	4b54      	ldr	r3, [pc, #336]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d011      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d818      	bhi.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d004      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006120:	e011      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006122:	f7fe fded 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8006126:	61f8      	str	r0, [r7, #28]
          break;
 8006128:	e010      	b.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800612a:	f7fe fd51 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 800612e:	61f8      	str	r0, [r7, #28]
          break;
 8006130:	e00c      	b.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006132:	4b47      	ldr	r3, [pc, #284]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613e:	d104      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006140:	4b44      	ldr	r3, [pc, #272]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006142:	61fb      	str	r3, [r7, #28]
          break;
 8006144:	e001      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006146:	bf00      	nop
 8006148:	e10e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800614a:	bf00      	nop
        break;
 800614c:	e10c      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800614e:	4b40      	ldr	r3, [pc, #256]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006160:	d02c      	beq.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006168:	d833      	bhi.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006170:	d01a      	beq.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006178:	d82b      	bhi.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006186:	d004      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006188:	e023      	b.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800618a:	f7fe fdb9 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 800618e:	61f8      	str	r0, [r7, #28]
          break;
 8006190:	e026      	b.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006192:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b02      	cmp	r3, #2
 800619e:	d11a      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80061a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061a4:	61fb      	str	r3, [r7, #28]
          break;
 80061a6:	e016      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061a8:	4b29      	ldr	r3, [pc, #164]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b4:	d111      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80061b8:	61fb      	str	r3, [r7, #28]
          break;
 80061ba:	e00e      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061bc:	4b24      	ldr	r3, [pc, #144]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d109      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80061ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ce:	61fb      	str	r3, [r7, #28]
          break;
 80061d0:	e005      	b.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80061d2:	bf00      	nop
 80061d4:	e0c8      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061d6:	bf00      	nop
 80061d8:	e0c6      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061da:	bf00      	nop
 80061dc:	e0c4      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061de:	bf00      	nop
        break;
 80061e0:	e0c2      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80061e2:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061f4:	d030      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061fc:	d837      	bhi.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006204:	d01a      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800620c:	d82f      	bhi.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d004      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800621c:	e027      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800621e:	f7fe fd6f 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8006222:	61f8      	str	r0, [r7, #28]
          break;
 8006224:	e02a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d11e      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006238:	61fb      	str	r3, [r7, #28]
          break;
 800623a:	e01a      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006248:	d115      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800624a:	4b02      	ldr	r3, [pc, #8]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800624c:	61fb      	str	r3, [r7, #28]
          break;
 800624e:	e012      	b.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006250:	40021000 	.word	0x40021000
 8006254:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006258:	4b46      	ldr	r3, [pc, #280]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d109      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	61fb      	str	r3, [r7, #28]
          break;
 800626c:	e005      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800626e:	bf00      	nop
 8006270:	e07a      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006272:	bf00      	nop
 8006274:	e078      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006276:	bf00      	nop
 8006278:	e076      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800627a:	bf00      	nop
        break;
 800627c:	e074      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006290:	d02c      	beq.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006298:	d855      	bhi.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a6:	d004      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80062a8:	e04d      	b.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80062aa:	f7fe fc91 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 80062ae:	61f8      	str	r0, [r7, #28]
          break;
 80062b0:	e04e      	b.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062b2:	4b30      	ldr	r3, [pc, #192]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d145      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062be:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80062ca:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	091b      	lsrs	r3, r3, #4
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	e005      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80062d6:	4b27      	ldr	r3, [pc, #156]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	4a25      	ldr	r2, [pc, #148]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80062e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e8:	61fb      	str	r3, [r7, #28]
          break;
 80062ea:	e02e      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f8:	d129      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d122      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006312:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	fb03 f202 	mul.w	r2, r3, r2
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	3301      	adds	r3, #1
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800632e:	4b11      	ldr	r3, [pc, #68]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	0d5b      	lsrs	r3, r3, #21
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	3301      	adds	r3, #1
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006342:	61fb      	str	r3, [r7, #28]
          break;
 8006344:	e003      	b.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006346:	bf00      	nop
 8006348:	e00e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800634a:	bf00      	nop
 800634c:	e00c      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800634e:	bf00      	nop
        break;
 8006350:	e00a      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006352:	bf00      	nop
 8006354:	e008      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006356:	bf00      	nop
 8006358:	e006      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800635a:	bf00      	nop
 800635c:	e004      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800635e:	bf00      	nop
 8006360:	e002      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006366:	bf00      	nop
    }
  }

  return(frequency);
 8006368:	69fb      	ldr	r3, [r7, #28]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	08008dc8 	.word	0x08008dc8

0800637c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006386:	f043 0304 	orr.w	r3, r3, #4
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000

0800639c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063aa:	4b72      	ldr	r3, [pc, #456]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063b6:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f003 0203 	and.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d103      	bne.n	80063ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
       ||
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d142      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	e03f      	b.n	8006454 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d018      	beq.n	800640e <RCCEx_PLLSAI1_Config+0x72>
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d825      	bhi.n	800642c <RCCEx_PLLSAI1_Config+0x90>
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d002      	beq.n	80063ea <RCCEx_PLLSAI1_Config+0x4e>
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d009      	beq.n	80063fc <RCCEx_PLLSAI1_Config+0x60>
 80063e8:	e020      	b.n	800642c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ea:	4b62      	ldr	r3, [pc, #392]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11d      	bne.n	8006432 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fa:	e01a      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063fc:	4b5d      	ldr	r3, [pc, #372]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006404:	2b00      	cmp	r3, #0
 8006406:	d116      	bne.n	8006436 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640c:	e013      	b.n	8006436 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800640e:	4b59      	ldr	r3, [pc, #356]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10f      	bne.n	800643a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800641a:	4b56      	ldr	r3, [pc, #344]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800642a:	e006      	b.n	800643a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e004      	b.n	800643c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800643a:	bf00      	nop
    }

    if(status == HAL_OK)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d108      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006442:	4b4c      	ldr	r3, [pc, #304]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f023 0203 	bic.w	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4949      	ldr	r1, [pc, #292]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006450:	4313      	orrs	r3, r2
 8006452:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 8086 	bne.w	8006568 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800645c:	4b45      	ldr	r3, [pc, #276]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a44      	ldr	r2, [pc, #272]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006468:	f7fb ff7c 	bl	8002364 <HAL_GetTick>
 800646c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800646e:	e009      	b.n	8006484 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006470:	f7fb ff78 	bl	8002364 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d902      	bls.n	8006484 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	73fb      	strb	r3, [r7, #15]
        break;
 8006482:	e005      	b.n	8006490 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006484:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1ef      	bne.n	8006470 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d168      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d113      	bne.n	80064c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800649c:	4b35      	ldr	r3, [pc, #212]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	4b35      	ldr	r3, [pc, #212]	; (8006578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	0211      	lsls	r1, r2, #8
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	68d2      	ldr	r2, [r2, #12]
 80064ae:	06d2      	lsls	r2, r2, #27
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6852      	ldr	r2, [r2, #4]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	0112      	lsls	r2, r2, #4
 80064ba:	430a      	orrs	r2, r1
 80064bc:	492d      	ldr	r1, [pc, #180]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	610b      	str	r3, [r1, #16]
 80064c2:	e02d      	b.n	8006520 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d115      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	4b2b      	ldr	r3, [pc, #172]	; (800657c <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6892      	ldr	r2, [r2, #8]
 80064d6:	0211      	lsls	r1, r2, #8
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6912      	ldr	r2, [r2, #16]
 80064dc:	0852      	lsrs	r2, r2, #1
 80064de:	3a01      	subs	r2, #1
 80064e0:	0552      	lsls	r2, r2, #21
 80064e2:	4311      	orrs	r1, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	3a01      	subs	r2, #1
 80064ea:	0112      	lsls	r2, r2, #4
 80064ec:	430a      	orrs	r2, r1
 80064ee:	4921      	ldr	r1, [pc, #132]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	610b      	str	r3, [r1, #16]
 80064f4:	e014      	b.n	8006520 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f6:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	4b21      	ldr	r3, [pc, #132]	; (8006580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	0211      	lsls	r1, r2, #8
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6952      	ldr	r2, [r2, #20]
 8006508:	0852      	lsrs	r2, r2, #1
 800650a:	3a01      	subs	r2, #1
 800650c:	0652      	lsls	r2, r2, #25
 800650e:	4311      	orrs	r1, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6852      	ldr	r2, [r2, #4]
 8006514:	3a01      	subs	r2, #1
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	430a      	orrs	r2, r1
 800651a:	4916      	ldr	r1, [pc, #88]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800651c:	4313      	orrs	r3, r2
 800651e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a13      	ldr	r2, [pc, #76]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800652a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fb ff1a 	bl	8002364 <HAL_GetTick>
 8006530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006532:	e009      	b.n	8006548 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006534:	f7fb ff16 	bl	8002364 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d902      	bls.n	8006548 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	73fb      	strb	r3, [r7, #15]
          break;
 8006546:	e005      	b.n	8006554 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ef      	beq.n	8006534 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	4904      	ldr	r1, [pc, #16]	; (8006574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006564:	4313      	orrs	r3, r2
 8006566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40021000 	.word	0x40021000
 8006578:	07ff800f 	.word	0x07ff800f
 800657c:	ff9f800f 	.word	0xff9f800f
 8006580:	f9ff800f 	.word	0xf9ff800f

08006584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006592:	4b72      	ldr	r3, [pc, #456]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800659e:	4b6f      	ldr	r3, [pc, #444]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0203 	and.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d103      	bne.n	80065b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
       ||
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d142      	bne.n	800663c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
 80065ba:	e03f      	b.n	800663c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d018      	beq.n	80065f6 <RCCEx_PLLSAI2_Config+0x72>
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d825      	bhi.n	8006614 <RCCEx_PLLSAI2_Config+0x90>
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d002      	beq.n	80065d2 <RCCEx_PLLSAI2_Config+0x4e>
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d009      	beq.n	80065e4 <RCCEx_PLLSAI2_Config+0x60>
 80065d0:	e020      	b.n	8006614 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065d2:	4b62      	ldr	r3, [pc, #392]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11d      	bne.n	800661a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065e2:	e01a      	b.n	800661a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065e4:	4b5d      	ldr	r3, [pc, #372]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d116      	bne.n	800661e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065f4:	e013      	b.n	800661e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065f6:	4b59      	ldr	r3, [pc, #356]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10f      	bne.n	8006622 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006602:	4b56      	ldr	r3, [pc, #344]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006612:	e006      	b.n	8006622 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e004      	b.n	8006624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006622:	bf00      	nop
    }

    if(status == HAL_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800662a:	4b4c      	ldr	r3, [pc, #304]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f023 0203 	bic.w	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4949      	ldr	r1, [pc, #292]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006638:	4313      	orrs	r3, r2
 800663a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 8086 	bne.w	8006750 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006644:	4b45      	ldr	r3, [pc, #276]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a44      	ldr	r2, [pc, #272]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800664a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800664e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006650:	f7fb fe88 	bl	8002364 <HAL_GetTick>
 8006654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006656:	e009      	b.n	800666c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006658:	f7fb fe84 	bl	8002364 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d902      	bls.n	800666c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	73fb      	strb	r3, [r7, #15]
        break;
 800666a:	e005      	b.n	8006678 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800666c:	4b3b      	ldr	r3, [pc, #236]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ef      	bne.n	8006658 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d168      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d113      	bne.n	80066ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006684:	4b35      	ldr	r3, [pc, #212]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	4b35      	ldr	r3, [pc, #212]	; (8006760 <RCCEx_PLLSAI2_Config+0x1dc>)
 800668a:	4013      	ands	r3, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6892      	ldr	r2, [r2, #8]
 8006690:	0211      	lsls	r1, r2, #8
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68d2      	ldr	r2, [r2, #12]
 8006696:	06d2      	lsls	r2, r2, #27
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6852      	ldr	r2, [r2, #4]
 800669e:	3a01      	subs	r2, #1
 80066a0:	0112      	lsls	r2, r2, #4
 80066a2:	430a      	orrs	r2, r1
 80066a4:	492d      	ldr	r1, [pc, #180]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	614b      	str	r3, [r1, #20]
 80066aa:	e02d      	b.n	8006708 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d115      	bne.n	80066de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <RCCEx_PLLSAI2_Config+0x1e0>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6892      	ldr	r2, [r2, #8]
 80066be:	0211      	lsls	r1, r2, #8
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6912      	ldr	r2, [r2, #16]
 80066c4:	0852      	lsrs	r2, r2, #1
 80066c6:	3a01      	subs	r2, #1
 80066c8:	0552      	lsls	r2, r2, #21
 80066ca:	4311      	orrs	r1, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6852      	ldr	r2, [r2, #4]
 80066d0:	3a01      	subs	r2, #1
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	430a      	orrs	r2, r1
 80066d6:	4921      	ldr	r1, [pc, #132]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	614b      	str	r3, [r1, #20]
 80066dc:	e014      	b.n	8006708 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066de:	4b1f      	ldr	r3, [pc, #124]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <RCCEx_PLLSAI2_Config+0x1e4>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6892      	ldr	r2, [r2, #8]
 80066ea:	0211      	lsls	r1, r2, #8
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6952      	ldr	r2, [r2, #20]
 80066f0:	0852      	lsrs	r2, r2, #1
 80066f2:	3a01      	subs	r2, #1
 80066f4:	0652      	lsls	r2, r2, #25
 80066f6:	4311      	orrs	r1, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6852      	ldr	r2, [r2, #4]
 80066fc:	3a01      	subs	r2, #1
 80066fe:	0112      	lsls	r2, r2, #4
 8006700:	430a      	orrs	r2, r1
 8006702:	4916      	ldr	r1, [pc, #88]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006704:	4313      	orrs	r3, r2
 8006706:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a13      	ldr	r2, [pc, #76]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800670e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fb fe26 	bl	8002364 <HAL_GetTick>
 8006718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671a:	e009      	b.n	8006730 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800671c:	f7fb fe22 	bl	8002364 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d902      	bls.n	8006730 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	73fb      	strb	r3, [r7, #15]
          break;
 800672e:	e005      	b.n	800673c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ef      	beq.n	800671c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	4904      	ldr	r1, [pc, #16]	; (800675c <RCCEx_PLLSAI2_Config+0x1d8>)
 800674c:	4313      	orrs	r3, r2
 800674e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	07ff800f 	.word	0x07ff800f
 8006764:	ff9f800f 	.word	0xff9f800f
 8006768:	f9ff800f 	.word	0xf9ff800f

0800676c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006788:	d10b      	bne.n	80067a2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800678a:	4b7e      	ldr	r3, [pc, #504]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800678c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006790:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006794:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b60      	cmp	r3, #96	; 0x60
 800679a:	d112      	bne.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800679c:	4b7a      	ldr	r3, [pc, #488]	; (8006988 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	e00f      	b.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a8:	d10b      	bne.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80067aa:	4b76      	ldr	r3, [pc, #472]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067b4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067bc:	d101      	bne.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80067be:	4b72      	ldr	r3, [pc, #456]	; (8006988 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80067c0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 80d6 	bne.w	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d003      	beq.n	80067dc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067da:	d13b      	bne.n	8006854 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80067dc:	4b69      	ldr	r3, [pc, #420]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e8:	f040 80c4 	bne.w	8006974 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80067ec:	4b65      	ldr	r3, [pc, #404]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80bd 	beq.w	8006974 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067fa:	4b62      	ldr	r3, [pc, #392]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	3301      	adds	r3, #1
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800680e:	4b5d      	ldr	r3, [pc, #372]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006818:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800681a:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	0edb      	lsrs	r3, r3, #27
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800682c:	4b55      	ldr	r3, [pc, #340]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006838:	2311      	movs	r3, #17
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e001      	b.n	8006842 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800683e:	2307      	movs	r3, #7
 8006840:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	fb03 f202 	mul.w	r2, r3, r2
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006852:	e08f      	b.n	8006974 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d13a      	bne.n	80068d0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800685a:	4b4a      	ldr	r3, [pc, #296]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006866:	f040 8086 	bne.w	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800686a:	4b46      	ldr	r3, [pc, #280]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d07f      	beq.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006876:	4b43      	ldr	r3, [pc, #268]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	3301      	adds	r3, #1
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800688a:	4b3e      	ldr	r3, [pc, #248]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	0a1b      	lsrs	r3, r3, #8
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006896:	4b3b      	ldr	r3, [pc, #236]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	0edb      	lsrs	r3, r3, #27
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80068a8:	4b36      	ldr	r3, [pc, #216]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80068b4:	2311      	movs	r3, #17
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e001      	b.n	80068be <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80068ba:	2307      	movs	r3, #7
 80068bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	fb03 f202 	mul.w	r2, r3, r2
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	e052      	b.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d003      	beq.n	80068de <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068dc:	d109      	bne.n	80068f2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068de:	4b29      	ldr	r3, [pc, #164]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ea:	d144      	bne.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80068ec:	4b27      	ldr	r3, [pc, #156]	; (800698c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80068ee:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068f0:	e041      	b.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d003      	beq.n	8006900 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fe:	d13a      	bne.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006900:	4b20      	ldr	r3, [pc, #128]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690c:	d133      	bne.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800690e:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d02d      	beq.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800691a:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	3301      	adds	r3, #1
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006938:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	0edb      	lsrs	r3, r3, #27
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006958:	2311      	movs	r3, #17
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	e001      	b.n	8006962 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800695e:	2307      	movs	r3, #7
 8006960:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	fb03 f202 	mul.w	r2, r3, r2
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	e000      	b.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006974:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006976:	69fb      	ldr	r3, [r7, #28]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3724      	adds	r7, #36	; 0x24
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40021000 	.word	0x40021000
 8006988:	001fff68 	.word	0x001fff68
 800698c:	00f42400 	.word	0x00f42400

08006990 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d904      	bls.n	80069ae <HAL_SAI_InitProtocol+0x1e>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3b03      	subs	r3, #3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d812      	bhi.n	80069d2 <HAL_SAI_InitProtocol+0x42>
 80069ac:	e008      	b.n	80069c0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f9fb 	bl	8006db0 <SAI_InitI2S>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75fb      	strb	r3, [r7, #23]
      break;
 80069be:	e00b      	b.n	80069d8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 faa4 	bl	8006f14 <SAI_InitPCM>
 80069cc:	4603      	mov	r3, r0
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e002      	b.n	80069d8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
      break;
 80069d6:	bf00      	nop
  }

  if (status == HAL_OK)
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f808 	bl	80069f4 <HAL_SAI_Init>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1c7      	b.n	8006d96 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10e      	bne.n	8006a2e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a81      	ldr	r2, [pc, #516]	; (8006c1c <HAL_SAI_Init+0x228>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d107      	bne.n	8006a2a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d103      	bne.n	8006a2a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1b3      	b.n	8006d96 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fb fb04 	bl	8002050 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fae5 	bl	8007018 <SAI_Disable>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e19e      	b.n	8006d96 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d00c      	beq.n	8006a82 <HAL_SAI_Init+0x8e>
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d80d      	bhi.n	8006a88 <HAL_SAI_Init+0x94>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_SAI_Init+0x82>
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d003      	beq.n	8006a7c <HAL_SAI_Init+0x88>
 8006a74:	e008      	b.n	8006a88 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a7a:	e008      	b.n	8006a8e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a80:	e005      	b.n	8006a8e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006a82:	2320      	movs	r3, #32
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a86:	e002      	b.n	8006a8e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a8c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d81d      	bhi.n	8006ad2 <HAL_SAI_Init+0xde>
 8006a96:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <HAL_SAI_Init+0xa8>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006ab3 	.word	0x08006ab3
 8006aa4:	08006abb 	.word	0x08006abb
 8006aa8:	08006ac3 	.word	0x08006ac3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
      break;
 8006ab0:	e012      	b.n	8006ad8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab6:	61fb      	str	r3, [r7, #28]
      break;
 8006ab8:	e00e      	b.n	8006ad8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006abe:	61fb      	str	r3, [r7, #28]
      break;
 8006ac0:	e00a      	b.n	8006ad8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ac6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ad0:	e002      	b.n	8006ad8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
      break;
 8006ad6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a4f      	ldr	r2, [pc, #316]	; (8006c1c <HAL_SAI_Init+0x228>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <HAL_SAI_Init+0xf8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a4e      	ldr	r2, [pc, #312]	; (8006c20 <HAL_SAI_Init+0x22c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d103      	bne.n	8006af4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006aec:	4a4d      	ldr	r2, [pc, #308]	; (8006c24 <HAL_SAI_Init+0x230>)
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e002      	b.n	8006afa <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006af4:	4a4c      	ldr	r2, [pc, #304]	; (8006c28 <HAL_SAI_Init+0x234>)
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d073      	beq.n	8006bea <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a45      	ldr	r2, [pc, #276]	; (8006c1c <HAL_SAI_Init+0x228>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_SAI_Init+0x122>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a43      	ldr	r2, [pc, #268]	; (8006c20 <HAL_SAI_Init+0x22c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d105      	bne.n	8006b22 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b1a:	f7fe fd0d 	bl	8005538 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b1e:	61b8      	str	r0, [r7, #24]
 8006b20:	e004      	b.n	8006b2c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b26:	f7fe fd07 	bl	8005538 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b2a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b34:	d120      	bne.n	8006b78 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d102      	bne.n	8006b44 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e00a      	b.n	8006b5a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d103      	bne.n	8006b54 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e002      	b.n	8006b5a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b58:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	fb02 f303 	mul.w	r3, r2, r3
 8006b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e017      	b.n	8006ba8 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b80:	d101      	bne.n	8006b86 <HAL_SAI_Init+0x192>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e000      	b.n	8006b88 <HAL_SAI_Init+0x194>
 8006b86:	2301      	movs	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	4619      	mov	r1, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ba6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <HAL_SAI_Init+0x238>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	08da      	lsrs	r2, r3, #3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	4b1c      	ldr	r3, [pc, #112]	; (8006c2c <HAL_SAI_Init+0x238>)
 8006bba:	fba3 2301 	umull	r2, r3, r3, r1
 8006bbe:	08da      	lsrs	r2, r3, #3
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	1aca      	subs	r2, r1, r3
 8006bca:	2a08      	cmp	r2, #8
 8006bcc:	d904      	bls.n	8006bd8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d104      	bne.n	8006bea <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	085a      	lsrs	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_SAI_Init+0x206>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d109      	bne.n	8006c0e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_SAI_Init+0x212>
 8006c02:	2300      	movs	r3, #0
 8006c04:	e001      	b.n	8006c0a <HAL_SAI_Init+0x216>
 8006c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	e012      	b.n	8006c34 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10c      	bne.n	8006c30 <HAL_SAI_Init+0x23c>
 8006c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1a:	e00a      	b.n	8006c32 <HAL_SAI_Init+0x23e>
 8006c1c:	40015404 	.word	0x40015404
 8006c20:	40015424 	.word	0x40015424
 8006c24:	40015400 	.word	0x40015400
 8006c28:	40015800 	.word	0x40015800
 8006c2c:	cccccccd 	.word	0xcccccccd
 8006c30:	2300      	movs	r3, #0
 8006c32:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b58      	ldr	r3, [pc, #352]	; (8006da0 <HAL_SAI_Init+0x3ac>)
 8006c40:	400b      	ands	r3, r1
 8006c42:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6819      	ldr	r1, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c58:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006c6c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c78:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	051b      	lsls	r3, r3, #20
 8006c80:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c86:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006c9e:	f023 030f 	bic.w	r3, r3, #15
 8006ca2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6859      	ldr	r1, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6899      	ldr	r1, [r3, #8]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <HAL_SAI_Init+0x3b0>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6899      	ldr	r1, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cdc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006ce2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006ce8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006cee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006cf8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68d9      	ldr	r1, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d10:	400b      	ands	r3, r1
 8006d12:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68d9      	ldr	r1, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d22:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d2a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d30:	3b01      	subs	r3, #1
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <HAL_SAI_Init+0x3b4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d119      	bne.n	8006d7c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006d48:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_SAI_Init+0x3b8>)
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	4a17      	ldr	r2, [pc, #92]	; (8006dac <HAL_SAI_Init+0x3b8>)
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d10e      	bne.n	8006d7c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	3b01      	subs	r3, #1
 8006d68:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006d6a:	4910      	ldr	r1, [pc, #64]	; (8006dac <HAL_SAI_Init+0x3b8>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006d70:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <HAL_SAI_Init+0x3b8>)
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <HAL_SAI_Init+0x3b8>)
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3728      	adds	r7, #40	; 0x28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	f805c010 	.word	0xf805c010
 8006da4:	fff88000 	.word	0xfff88000
 8006da8:	40015404 	.word	0x40015404
 8006dac:	40015400 	.word	0x40015400

08006db0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <SAI_InitI2S+0x2e>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d103      	bne.n	8006de6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	64da      	str	r2, [r3, #76]	; 0x4c
 8006de4:	e002      	b.n	8006dec <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006df2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dfa:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e077      	b.n	8006f06 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60
 8006e2a:	e006      	b.n	8006e3a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e32:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d84f      	bhi.n	8006ee0 <SAI_InitI2S+0x130>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <SAI_InitI2S+0x98>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e7b 	.word	0x08006e7b
 8006e50:	08006e9d 	.word	0x08006e9d
 8006e54:	08006ebf 	.word	0x08006ebf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2280      	movs	r2, #128	; 0x80
 8006e5c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2240      	movs	r2, #64	; 0x40
 8006e76:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006e78:	e035      	b.n	8006ee6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2280      	movs	r2, #128	; 0x80
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	019a      	lsls	r2, r3, #6
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2280      	movs	r2, #128	; 0x80
 8006e98:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006e9a:	e024      	b.n	8006ee6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22c0      	movs	r2, #192	; 0xc0
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	019a      	lsls	r2, r3, #6
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2280      	movs	r2, #128	; 0x80
 8006eba:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ebc:	e013      	b.n	8006ee6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22e0      	movs	r2, #224	; 0xe0
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	019a      	lsls	r2, r3, #6
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2280      	movs	r2, #128	; 0x80
 8006edc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ede:	e002      	b.n	8006ee6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d10b      	bne.n	8006f04 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d102      	bne.n	8006ef8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d102      	bne.n	8006f04 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2208      	movs	r2, #8
 8006f02:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop

08006f14 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <SAI_InitPCM+0x2e>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d103      	bne.n	8006f4a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f48:	e002      	b.n	8006f50 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006f64:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f78:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d103      	bne.n	8006f88 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
 8006f86:	e002      	b.n	8006f8e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	220d      	movs	r2, #13
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d837      	bhi.n	8007004 <SAI_InitPCM+0xf0>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <SAI_InitPCM+0x88>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fc3 	.word	0x08006fc3
 8006fa4:	08006fd9 	.word	0x08006fd9
 8006fa8:	08006fef 	.word	0x08006fef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2280      	movs	r2, #128	; 0x80
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	011a      	lsls	r2, r3, #4
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2240      	movs	r2, #64	; 0x40
 8006fbe:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006fc0:	e023      	b.n	800700a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2280      	movs	r2, #128	; 0x80
 8006fd4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006fd6:	e018      	b.n	800700a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	22c0      	movs	r2, #192	; 0xc0
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2280      	movs	r2, #128	; 0x80
 8006fea:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006fec:	e00d      	b.n	800700a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	22e0      	movs	r2, #224	; 0xe0
 8006ff2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2280      	movs	r2, #128	; 0x80
 8007000:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007002:	e002      	b.n	800700a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
      break;
 8007008:	bf00      	nop
  }

  return status;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
}
 800700c:	4618      	mov	r0, r3
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <SAI_Disable+0x6c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <SAI_Disable+0x70>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	0b1b      	lsrs	r3, r3, #12
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007042:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	72fb      	strb	r3, [r7, #11]
      break;
 800705e:	e009      	b.n	8007074 <SAI_Disable+0x5c>
    }
    count--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b01      	subs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e7      	bne.n	8007044 <SAI_Disable+0x2c>

  return status;
 8007074:	7afb      	ldrb	r3, [r7, #11]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000000 	.word	0x20000000
 8007088:	95cbec1b 	.word	0x95cbec1b

0800708c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e0aa      	b.n	80071f4 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fa fc06 	bl	80018c0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695a      	ldr	r2, [r3, #20]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070e6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80070f6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007100:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007110:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d012      	beq.n	8007140 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d107      	bne.n	8007132 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800712e:	609a      	str	r2, [r3, #8]
 8007130:	e006      	b.n	8007140 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800713e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d104      	bne.n	8007152 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007164:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800718e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071a0:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071a2:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071ac:	d110      	bne.n	80071d0 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80071ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071be:	d107      	bne.n	80071d0 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071ce:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007212:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800721c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f805 	bl	8007230 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007256:	2b38      	cmp	r3, #56	; 0x38
 8007258:	d103      	bne.n	8007262 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007260:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007268:	2bf2      	cmp	r3, #242	; 0xf2
 800726a:	d103      	bne.n	8007274 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007272:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800727a:	2bd4      	cmp	r3, #212	; 0xd4
 800727c:	d103      	bne.n	8007286 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007284:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6819      	ldr	r1, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	430a      	orrs	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e095      	b.n	80073e0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d108      	bne.n	80072ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c4:	d009      	beq.n	80072da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
 80072cc:	e005      	b.n	80072da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fa fc71 	bl	8001bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007310:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800731a:	d902      	bls.n	8007322 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e002      	b.n	8007328 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007326:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007330:	d007      	beq.n	8007342 <HAL_SPI_Init+0xa0>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800733a:	d002      	beq.n	8007342 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007384:	ea42 0103 	orr.w	r1, r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	0c1b      	lsrs	r3, r3, #16
 800739e:	f003 0204 	and.w	r2, r3, #4
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073be:	ea42 0103 	orr.w	r1, r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e049      	b.n	800748e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fa fc58 	bl	8001cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f000 f94a 	bl	80076c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0ff      	b.n	80076b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b14      	cmp	r3, #20
 80074c2:	f200 80f0 	bhi.w	80076a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	08007521 	.word	0x08007521
 80074d0:	080076a7 	.word	0x080076a7
 80074d4:	080076a7 	.word	0x080076a7
 80074d8:	080076a7 	.word	0x080076a7
 80074dc:	08007561 	.word	0x08007561
 80074e0:	080076a7 	.word	0x080076a7
 80074e4:	080076a7 	.word	0x080076a7
 80074e8:	080076a7 	.word	0x080076a7
 80074ec:	080075a3 	.word	0x080075a3
 80074f0:	080076a7 	.word	0x080076a7
 80074f4:	080076a7 	.word	0x080076a7
 80074f8:	080076a7 	.word	0x080076a7
 80074fc:	080075e3 	.word	0x080075e3
 8007500:	080076a7 	.word	0x080076a7
 8007504:	080076a7 	.word	0x080076a7
 8007508:	080076a7 	.word	0x080076a7
 800750c:	08007625 	.word	0x08007625
 8007510:	080076a7 	.word	0x080076a7
 8007514:	080076a7 	.word	0x080076a7
 8007518:	080076a7 	.word	0x080076a7
 800751c:	08007665 	.word	0x08007665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f964 	bl	80077f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0208 	orr.w	r2, r2, #8
 800753a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0204 	bic.w	r2, r2, #4
 800754a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6999      	ldr	r1, [r3, #24]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	619a      	str	r2, [r3, #24]
      break;
 800755e:	e0a5      	b.n	80076ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f9d4 	bl	8007914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	021a      	lsls	r2, r3, #8
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	619a      	str	r2, [r3, #24]
      break;
 80075a0:	e084      	b.n	80076ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fa3d 	bl	8007a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0208 	orr.w	r2, r2, #8
 80075bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0204 	bic.w	r2, r2, #4
 80075cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69d9      	ldr	r1, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	61da      	str	r2, [r3, #28]
      break;
 80075e0:	e064      	b.n	80076ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 faa5 	bl	8007b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	021a      	lsls	r2, r3, #8
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	61da      	str	r2, [r3, #28]
      break;
 8007622:	e043      	b.n	80076ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 faee 	bl	8007c0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0208 	orr.w	r2, r2, #8
 800763e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0204 	bic.w	r2, r2, #4
 800764e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007662:	e023      	b.n	80076ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fb32 	bl	8007cd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800767e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076a4:	e002      	b.n	80076ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
      break;
 80076aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop

080076c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a40      	ldr	r2, [pc, #256]	; (80077d4 <TIM_Base_SetConfig+0x114>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076de:	d00f      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3d      	ldr	r2, [pc, #244]	; (80077d8 <TIM_Base_SetConfig+0x118>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a3c      	ldr	r2, [pc, #240]	; (80077dc <TIM_Base_SetConfig+0x11c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3b      	ldr	r2, [pc, #236]	; (80077e0 <TIM_Base_SetConfig+0x120>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a3a      	ldr	r2, [pc, #232]	; (80077e4 <TIM_Base_SetConfig+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d108      	bne.n	8007712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <TIM_Base_SetConfig+0x114>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01f      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007720:	d01b      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2c      	ldr	r2, [pc, #176]	; (80077d8 <TIM_Base_SetConfig+0x118>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d017      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2b      	ldr	r2, [pc, #172]	; (80077dc <TIM_Base_SetConfig+0x11c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d013      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2a      	ldr	r2, [pc, #168]	; (80077e0 <TIM_Base_SetConfig+0x120>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00f      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <TIM_Base_SetConfig+0x124>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00b      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <TIM_Base_SetConfig+0x128>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d007      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a27      	ldr	r2, [pc, #156]	; (80077ec <TIM_Base_SetConfig+0x12c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d003      	beq.n	800775a <TIM_Base_SetConfig+0x9a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a26      	ldr	r2, [pc, #152]	; (80077f0 <TIM_Base_SetConfig+0x130>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d108      	bne.n	800776c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <TIM_Base_SetConfig+0x114>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00f      	beq.n	80077b8 <TIM_Base_SetConfig+0xf8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <TIM_Base_SetConfig+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00b      	beq.n	80077b8 <TIM_Base_SetConfig+0xf8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a11      	ldr	r2, [pc, #68]	; (80077e8 <TIM_Base_SetConfig+0x128>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d007      	beq.n	80077b8 <TIM_Base_SetConfig+0xf8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a10      	ldr	r2, [pc, #64]	; (80077ec <TIM_Base_SetConfig+0x12c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d003      	beq.n	80077b8 <TIM_Base_SetConfig+0xf8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a0f      	ldr	r2, [pc, #60]	; (80077f0 <TIM_Base_SetConfig+0x130>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	615a      	str	r2, [r3, #20]
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40000400 	.word	0x40000400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40000c00 	.word	0x40000c00
 80077e4:	40013400 	.word	0x40013400
 80077e8:	40014000 	.word	0x40014000
 80077ec:	40014400 	.word	0x40014400
 80077f0:	40014800 	.word	0x40014800

080077f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0302 	bic.w	r3, r3, #2
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a2c      	ldr	r2, [pc, #176]	; (8007900 <TIM_OC1_SetConfig+0x10c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00f      	beq.n	8007874 <TIM_OC1_SetConfig+0x80>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a2b      	ldr	r2, [pc, #172]	; (8007904 <TIM_OC1_SetConfig+0x110>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00b      	beq.n	8007874 <TIM_OC1_SetConfig+0x80>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a2a      	ldr	r2, [pc, #168]	; (8007908 <TIM_OC1_SetConfig+0x114>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <TIM_OC1_SetConfig+0x80>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a29      	ldr	r2, [pc, #164]	; (800790c <TIM_OC1_SetConfig+0x118>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC1_SetConfig+0x80>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a28      	ldr	r2, [pc, #160]	; (8007910 <TIM_OC1_SetConfig+0x11c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d10c      	bne.n	800788e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0308 	bic.w	r3, r3, #8
 800787a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <TIM_OC1_SetConfig+0x10c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00f      	beq.n	80078b6 <TIM_OC1_SetConfig+0xc2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <TIM_OC1_SetConfig+0x110>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00b      	beq.n	80078b6 <TIM_OC1_SetConfig+0xc2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <TIM_OC1_SetConfig+0x114>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_OC1_SetConfig+0xc2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a18      	ldr	r2, [pc, #96]	; (800790c <TIM_OC1_SetConfig+0x118>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC1_SetConfig+0xc2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <TIM_OC1_SetConfig+0x11c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d111      	bne.n	80078da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	40012c00 	.word	0x40012c00
 8007904:	40013400 	.word	0x40013400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800

08007914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f023 0210 	bic.w	r2, r3, #16
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0320 	bic.w	r3, r3, #32
 8007962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <TIM_OC2_SetConfig+0x100>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_OC2_SetConfig+0x6c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <TIM_OC2_SetConfig+0x104>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10d      	bne.n	800799c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <TIM_OC2_SetConfig+0x100>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00f      	beq.n	80079c4 <TIM_OC2_SetConfig+0xb0>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1c      	ldr	r2, [pc, #112]	; (8007a18 <TIM_OC2_SetConfig+0x104>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00b      	beq.n	80079c4 <TIM_OC2_SetConfig+0xb0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1b      	ldr	r2, [pc, #108]	; (8007a1c <TIM_OC2_SetConfig+0x108>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d007      	beq.n	80079c4 <TIM_OC2_SetConfig+0xb0>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <TIM_OC2_SetConfig+0x10c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC2_SetConfig+0xb0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <TIM_OC2_SetConfig+0x110>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d113      	bne.n	80079ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40013400 	.word	0x40013400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a27      	ldr	r2, [pc, #156]	; (8007b24 <TIM_OC3_SetConfig+0xfc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC3_SetConfig+0x6a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a26      	ldr	r2, [pc, #152]	; (8007b28 <TIM_OC3_SetConfig+0x100>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10d      	bne.n	8007aae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	; (8007b24 <TIM_OC3_SetConfig+0xfc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00f      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xae>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	; (8007b28 <TIM_OC3_SetConfig+0x100>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xae>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1a      	ldr	r2, [pc, #104]	; (8007b2c <TIM_OC3_SetConfig+0x104>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xae>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a19      	ldr	r2, [pc, #100]	; (8007b30 <TIM_OC3_SetConfig+0x108>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xae>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a18      	ldr	r2, [pc, #96]	; (8007b34 <TIM_OC3_SetConfig+0x10c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d113      	bne.n	8007afe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	621a      	str	r2, [r3, #32]
}
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40013400 	.word	0x40013400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800

08007b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	031b      	lsls	r3, r3, #12
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <TIM_OC4_SetConfig+0xc0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00f      	beq.n	8007bbc <TIM_OC4_SetConfig+0x84>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a17      	ldr	r2, [pc, #92]	; (8007bfc <TIM_OC4_SetConfig+0xc4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_OC4_SetConfig+0x84>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <TIM_OC4_SetConfig+0xc8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_OC4_SetConfig+0x84>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <TIM_OC4_SetConfig+0xcc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC4_SetConfig+0x84>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <TIM_OC4_SetConfig+0xd0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d109      	bne.n	8007bd0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	019b      	lsls	r3, r3, #6
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40012c00 	.word	0x40012c00
 8007bfc:	40013400 	.word	0x40013400
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800

08007c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <TIM_OC5_SetConfig+0xb4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00f      	beq.n	8007c86 <TIM_OC5_SetConfig+0x7a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <TIM_OC5_SetConfig+0xb8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00b      	beq.n	8007c86 <TIM_OC5_SetConfig+0x7a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <TIM_OC5_SetConfig+0xbc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d007      	beq.n	8007c86 <TIM_OC5_SetConfig+0x7a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <TIM_OC5_SetConfig+0xc0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC5_SetConfig+0x7a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <TIM_OC5_SetConfig+0xc4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d109      	bne.n	8007c9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	051b      	lsls	r3, r3, #20
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a18      	ldr	r2, [pc, #96]	; (8007d8c <TIM_OC6_SetConfig+0xb8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00f      	beq.n	8007d50 <TIM_OC6_SetConfig+0x7c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a17      	ldr	r2, [pc, #92]	; (8007d90 <TIM_OC6_SetConfig+0xbc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00b      	beq.n	8007d50 <TIM_OC6_SetConfig+0x7c>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a16      	ldr	r2, [pc, #88]	; (8007d94 <TIM_OC6_SetConfig+0xc0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_OC6_SetConfig+0x7c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <TIM_OC6_SetConfig+0xc4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_OC6_SetConfig+0x7c>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a14      	ldr	r2, [pc, #80]	; (8007d9c <TIM_OC6_SetConfig+0xc8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d109      	bne.n	8007d64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40012c00 	.word	0x40012c00
 8007d90:	40013400 	.word	0x40013400
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40014400 	.word	0x40014400
 8007d9c:	40014800 	.word	0x40014800

08007da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e068      	b.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a2e      	ldr	r2, [pc, #184]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d108      	bne.n	8007dfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007df2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1e      	ldr	r2, [pc, #120]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1b      	ldr	r2, [pc, #108]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a14      	ldr	r2, [pc, #80]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10c      	bne.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40012c00 	.word	0x40012c00
 8007e9c:	40013400 	.word	0x40013400
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40000c00 	.word	0x40000c00
 8007eac:	40014000 	.word	0x40014000

08007eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e065      	b.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d004      	beq.n	8007f5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d115      	bne.n	8007f86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	051b      	lsls	r3, r3, #20
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40013400 	.word	0x40013400

08007fac <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8007fac:	b480      	push	{r7}
 8007fae:	b08b      	sub	sp, #44	; 0x2c
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIMEx_ConfigBreakInput+0x20>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e0af      	b.n	800812c <HAL_TIMEx_ConfigBreakInput+0x180>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	2b07      	cmp	r3, #7
 8007fdc:	d83a      	bhi.n	8008054 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008005 	.word	0x08008005
 8007fe8:	08008019 	.word	0x08008019
 8007fec:	08008055 	.word	0x08008055
 8007ff0:	0800802d 	.word	0x0800802d
 8007ff4:	08008055 	.word	0x08008055
 8007ff8:	08008055 	.word	0x08008055
 8007ffc:	08008055 	.word	0x08008055
 8008000:	08008041 	.word	0x08008041
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008004:	2301      	movs	r3, #1
 8008006:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800800c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008010:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008012:	2309      	movs	r3, #9
 8008014:	613b      	str	r3, [r7, #16]
      break;
 8008016:	e026      	b.n	8008066 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008018:	2302      	movs	r3, #2
 800801a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800801c:	2301      	movs	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008024:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008026:	230a      	movs	r3, #10
 8008028:	613b      	str	r3, [r7, #16]
      break;
 800802a:	e01c      	b.n	8008066 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800802c:	2304      	movs	r3, #4
 800802e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008030:	2302      	movs	r3, #2
 8008032:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008038:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800803a:	230b      	movs	r3, #11
 800803c:	613b      	str	r3, [r7, #16]
      break;
 800803e:	e012      	b.n	8008066 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008044:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008046:	2308      	movs	r3, #8
 8008048:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
      break;
 8008052:	e008      	b.n	8008066 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	613b      	str	r3, [r7, #16]
      break;
 8008064:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d003      	beq.n	8008074 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d029      	beq.n	80080c6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008072:	e051      	b.n	8008118 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	43db      	mvns	r3, r3
 8008080:	6a3a      	ldr	r2, [r7, #32]
 8008082:	4013      	ands	r3, r2
 8008084:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	409a      	lsls	r2, r3
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4013      	ands	r3, r2
 8008092:	6a3a      	ldr	r2, [r7, #32]
 8008094:	4313      	orrs	r3, r2
 8008096:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b08      	cmp	r3, #8
 800809e:	d00d      	beq.n	80080bc <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	43db      	mvns	r3, r3
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	4013      	ands	r3, r2
 80080a8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	409a      	lsls	r2, r3
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	4013      	ands	r3, r2
 80080b6:	6a3a      	ldr	r2, [r7, #32]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6a3a      	ldr	r2, [r7, #32]
 80080c2:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80080c4:	e02c      	b.n	8008120 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080cc:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	4013      	ands	r3, r2
 80080d6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	409a      	lsls	r2, r3
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	4013      	ands	r3, r2
 80080e4:	6a3a      	ldr	r2, [r7, #32]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d00d      	beq.n	800810e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	6a3a      	ldr	r2, [r7, #32]
 80080f8:	4013      	ands	r3, r2
 80080fa:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	409a      	lsls	r2, r3
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	4013      	ands	r3, r2
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	4313      	orrs	r3, r2
 800810c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6a3a      	ldr	r2, [r7, #32]
 8008114:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008116:	e003      	b.n	8008120 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800811e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800812c:	4618      	mov	r0, r3
 800812e:	372c      	adds	r7, #44	; 0x2c
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e042      	b.n	80081d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7f9 fc53 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2224      	movs	r2, #36	; 0x24
 8008166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0201 	bic.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f82c 	bl	80081d8 <UART_SetConfig>
 8008180:	4603      	mov	r3, r0
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e022      	b.n	80081d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fb1c 	bl	80087d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fba3 	bl	8008914 <UART_CheckIdleState>
 80081ce:	4603      	mov	r3, r0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081dc:	b08c      	sub	sp, #48	; 0x30
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4baa      	ldr	r3, [pc, #680]	; (80084b0 <UART_SetConfig+0x2d8>)
 8008208:	4013      	ands	r3, r2
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008210:	430b      	orrs	r3, r1
 8008212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a9f      	ldr	r2, [pc, #636]	; (80084b4 <UART_SetConfig+0x2dc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008240:	4313      	orrs	r3, r2
 8008242:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800824e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008258:	430b      	orrs	r3, r1
 800825a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f023 010f 	bic.w	r1, r3, #15
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a90      	ldr	r2, [pc, #576]	; (80084b8 <UART_SetConfig+0x2e0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d125      	bne.n	80082c8 <UART_SetConfig+0xf0>
 800827c:	4b8f      	ldr	r3, [pc, #572]	; (80084bc <UART_SetConfig+0x2e4>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d81a      	bhi.n	80082c0 <UART_SetConfig+0xe8>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <UART_SetConfig+0xb8>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e116      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e112      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e10e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082be:	e10a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c6:	e106      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a7c      	ldr	r2, [pc, #496]	; (80084c0 <UART_SetConfig+0x2e8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d138      	bne.n	8008344 <UART_SetConfig+0x16c>
 80082d2:	4b7a      	ldr	r3, [pc, #488]	; (80084bc <UART_SetConfig+0x2e4>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b0c      	cmp	r3, #12
 80082de:	d82d      	bhi.n	800833c <UART_SetConfig+0x164>
 80082e0:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x110>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800831d 	.word	0x0800831d
 80082ec:	0800833d 	.word	0x0800833d
 80082f0:	0800833d 	.word	0x0800833d
 80082f4:	0800833d 	.word	0x0800833d
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	0800833d 	.word	0x0800833d
 8008300:	0800833d 	.word	0x0800833d
 8008304:	0800833d 	.word	0x0800833d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800833d 	.word	0x0800833d
 8008310:	0800833d 	.word	0x0800833d
 8008314:	0800833d 	.word	0x0800833d
 8008318:	08008335 	.word	0x08008335
 800831c:	2300      	movs	r3, #0
 800831e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008322:	e0d8      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008324:	2302      	movs	r3, #2
 8008326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832a:	e0d4      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800832c:	2304      	movs	r3, #4
 800832e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008332:	e0d0      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008334:	2308      	movs	r3, #8
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833a:	e0cc      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800833c:	2310      	movs	r3, #16
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008342:	e0c8      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a5e      	ldr	r2, [pc, #376]	; (80084c4 <UART_SetConfig+0x2ec>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d125      	bne.n	800839a <UART_SetConfig+0x1c2>
 800834e:	4b5b      	ldr	r3, [pc, #364]	; (80084bc <UART_SetConfig+0x2e4>)
 8008350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008354:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008358:	2b30      	cmp	r3, #48	; 0x30
 800835a:	d016      	beq.n	800838a <UART_SetConfig+0x1b2>
 800835c:	2b30      	cmp	r3, #48	; 0x30
 800835e:	d818      	bhi.n	8008392 <UART_SetConfig+0x1ba>
 8008360:	2b20      	cmp	r3, #32
 8008362:	d00a      	beq.n	800837a <UART_SetConfig+0x1a2>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d814      	bhi.n	8008392 <UART_SetConfig+0x1ba>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <UART_SetConfig+0x19a>
 800836c:	2b10      	cmp	r3, #16
 800836e:	d008      	beq.n	8008382 <UART_SetConfig+0x1aa>
 8008370:	e00f      	b.n	8008392 <UART_SetConfig+0x1ba>
 8008372:	2300      	movs	r3, #0
 8008374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008378:	e0ad      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800837a:	2302      	movs	r3, #2
 800837c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008380:	e0a9      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008382:	2304      	movs	r3, #4
 8008384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008388:	e0a5      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800838a:	2308      	movs	r3, #8
 800838c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008390:	e0a1      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008392:	2310      	movs	r3, #16
 8008394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008398:	e09d      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a4a      	ldr	r2, [pc, #296]	; (80084c8 <UART_SetConfig+0x2f0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d125      	bne.n	80083f0 <UART_SetConfig+0x218>
 80083a4:	4b45      	ldr	r3, [pc, #276]	; (80084bc <UART_SetConfig+0x2e4>)
 80083a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083ae:	2bc0      	cmp	r3, #192	; 0xc0
 80083b0:	d016      	beq.n	80083e0 <UART_SetConfig+0x208>
 80083b2:	2bc0      	cmp	r3, #192	; 0xc0
 80083b4:	d818      	bhi.n	80083e8 <UART_SetConfig+0x210>
 80083b6:	2b80      	cmp	r3, #128	; 0x80
 80083b8:	d00a      	beq.n	80083d0 <UART_SetConfig+0x1f8>
 80083ba:	2b80      	cmp	r3, #128	; 0x80
 80083bc:	d814      	bhi.n	80083e8 <UART_SetConfig+0x210>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <UART_SetConfig+0x1f0>
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d008      	beq.n	80083d8 <UART_SetConfig+0x200>
 80083c6:	e00f      	b.n	80083e8 <UART_SetConfig+0x210>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ce:	e082      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083d0:	2302      	movs	r3, #2
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d6:	e07e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083d8:	2304      	movs	r3, #4
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083de:	e07a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083e0:	2308      	movs	r3, #8
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e6:	e076      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083e8:	2310      	movs	r3, #16
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e072      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a35      	ldr	r2, [pc, #212]	; (80084cc <UART_SetConfig+0x2f4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d12a      	bne.n	8008450 <UART_SetConfig+0x278>
 80083fa:	4b30      	ldr	r3, [pc, #192]	; (80084bc <UART_SetConfig+0x2e4>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008408:	d01a      	beq.n	8008440 <UART_SetConfig+0x268>
 800840a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800840e:	d81b      	bhi.n	8008448 <UART_SetConfig+0x270>
 8008410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008414:	d00c      	beq.n	8008430 <UART_SetConfig+0x258>
 8008416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841a:	d815      	bhi.n	8008448 <UART_SetConfig+0x270>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <UART_SetConfig+0x250>
 8008420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008424:	d008      	beq.n	8008438 <UART_SetConfig+0x260>
 8008426:	e00f      	b.n	8008448 <UART_SetConfig+0x270>
 8008428:	2300      	movs	r3, #0
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842e:	e052      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008430:	2302      	movs	r3, #2
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008436:	e04e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843e:	e04a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008446:	e046      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844e:	e042      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <UART_SetConfig+0x2dc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d13a      	bne.n	80084d0 <UART_SetConfig+0x2f8>
 800845a:	4b18      	ldr	r3, [pc, #96]	; (80084bc <UART_SetConfig+0x2e4>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008468:	d01a      	beq.n	80084a0 <UART_SetConfig+0x2c8>
 800846a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800846e:	d81b      	bhi.n	80084a8 <UART_SetConfig+0x2d0>
 8008470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008474:	d00c      	beq.n	8008490 <UART_SetConfig+0x2b8>
 8008476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847a:	d815      	bhi.n	80084a8 <UART_SetConfig+0x2d0>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <UART_SetConfig+0x2b0>
 8008480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008484:	d008      	beq.n	8008498 <UART_SetConfig+0x2c0>
 8008486:	e00f      	b.n	80084a8 <UART_SetConfig+0x2d0>
 8008488:	2300      	movs	r3, #0
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800848e:	e022      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008490:	2302      	movs	r3, #2
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008496:	e01e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008498:	2304      	movs	r3, #4
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849e:	e01a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084a0:	2308      	movs	r3, #8
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a6:	e016      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084a8:	2310      	movs	r3, #16
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ae:	e012      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084b0:	cfff69f3 	.word	0xcfff69f3
 80084b4:	40008000 	.word	0x40008000
 80084b8:	40013800 	.word	0x40013800
 80084bc:	40021000 	.word	0x40021000
 80084c0:	40004400 	.word	0x40004400
 80084c4:	40004800 	.word	0x40004800
 80084c8:	40004c00 	.word	0x40004c00
 80084cc:	40005000 	.word	0x40005000
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4aae      	ldr	r2, [pc, #696]	; (8008794 <UART_SetConfig+0x5bc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	f040 8097 	bne.w	8008610 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d823      	bhi.n	8008532 <UART_SetConfig+0x35a>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x318>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008533 	.word	0x08008533
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008523 	.word	0x08008523
 8008504:	08008533 	.word	0x08008533
 8008508:	08008533 	.word	0x08008533
 800850c:	08008533 	.word	0x08008533
 8008510:	0800852b 	.word	0x0800852b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008514:	f7fc fbf4 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8008518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800851a:	e010      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800851c:	4b9e      	ldr	r3, [pc, #632]	; (8008798 <UART_SetConfig+0x5c0>)
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008520:	e00d      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fc fb55 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8008526:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008528:	e009      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008530:	e005      	b.n	800853e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800853c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8130 	beq.w	80087a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	4a94      	ldr	r2, [pc, #592]	; (800879c <UART_SetConfig+0x5c4>)
 800854c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008550:	461a      	mov	r2, r3
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	fbb3 f3f2 	udiv	r3, r3, r2
 8008558:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4413      	add	r3, r2
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d305      	bcc.n	8008576 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	429a      	cmp	r2, r3
 8008574:	d903      	bls.n	800857e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800857c:	e113      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	2200      	movs	r2, #0
 8008582:	60bb      	str	r3, [r7, #8]
 8008584:	60fa      	str	r2, [r7, #12]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	4a84      	ldr	r2, [pc, #528]	; (800879c <UART_SetConfig+0x5c4>)
 800858c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008590:	b29b      	uxth	r3, r3
 8008592:	2200      	movs	r2, #0
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085a0:	f7f7 fe2c 	bl	80001fc <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	020b      	lsls	r3, r1, #8
 80085b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085ba:	0202      	lsls	r2, r0, #8
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	6849      	ldr	r1, [r1, #4]
 80085c0:	0849      	lsrs	r1, r1, #1
 80085c2:	2000      	movs	r0, #0
 80085c4:	460c      	mov	r4, r1
 80085c6:	4605      	mov	r5, r0
 80085c8:	eb12 0804 	adds.w	r8, r2, r4
 80085cc:	eb43 0905 	adc.w	r9, r3, r5
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	469a      	mov	sl, r3
 80085d8:	4693      	mov	fp, r2
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f7f7 fe0b 	bl	80001fc <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4613      	mov	r3, r2
 80085ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f4:	d308      	bcc.n	8008608 <UART_SetConfig+0x430>
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085fc:	d204      	bcs.n	8008608 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6a3a      	ldr	r2, [r7, #32]
 8008604:	60da      	str	r2, [r3, #12]
 8008606:	e0ce      	b.n	80087a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800860e:	e0ca      	b.n	80087a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008618:	d166      	bne.n	80086e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800861a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800861e:	2b08      	cmp	r3, #8
 8008620:	d827      	bhi.n	8008672 <UART_SetConfig+0x49a>
 8008622:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <UART_SetConfig+0x450>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	0800864d 	.word	0x0800864d
 800862c:	08008655 	.word	0x08008655
 8008630:	0800865d 	.word	0x0800865d
 8008634:	08008673 	.word	0x08008673
 8008638:	08008663 	.word	0x08008663
 800863c:	08008673 	.word	0x08008673
 8008640:	08008673 	.word	0x08008673
 8008644:	08008673 	.word	0x08008673
 8008648:	0800866b 	.word	0x0800866b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864c:	f7fc fb58 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008652:	e014      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008654:	f7fc fb6a 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8008658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800865a:	e010      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800865c:	4b4e      	ldr	r3, [pc, #312]	; (8008798 <UART_SetConfig+0x5c0>)
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008660:	e00d      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008662:	f7fc fab5 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8008666:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008668:	e009      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800866a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008670:	e005      	b.n	800867e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800867c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8090 	beq.w	80087a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	4a44      	ldr	r2, [pc, #272]	; (800879c <UART_SetConfig+0x5c4>)
 800868c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008690:	461a      	mov	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	fbb3 f3f2 	udiv	r3, r3, r2
 8008698:	005a      	lsls	r2, r3, #1
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	441a      	add	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	d916      	bls.n	80086e0 <UART_SetConfig+0x508>
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b8:	d212      	bcs.n	80086e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f023 030f 	bic.w	r3, r3, #15
 80086c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	8bfb      	ldrh	r3, [r7, #30]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	8bfa      	ldrh	r2, [r7, #30]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e062      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086e6:	e05e      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d828      	bhi.n	8008742 <UART_SetConfig+0x56a>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <UART_SetConfig+0x520>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800871d 	.word	0x0800871d
 80086fc:	08008725 	.word	0x08008725
 8008700:	0800872d 	.word	0x0800872d
 8008704:	08008743 	.word	0x08008743
 8008708:	08008733 	.word	0x08008733
 800870c:	08008743 	.word	0x08008743
 8008710:	08008743 	.word	0x08008743
 8008714:	08008743 	.word	0x08008743
 8008718:	0800873b 	.word	0x0800873b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800871c:	f7fc faf0 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8008720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008722:	e014      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008724:	f7fc fb02 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8008728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800872a:	e010      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <UART_SetConfig+0x5c0>)
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008730:	e00d      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008732:	f7fc fa4d 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8008736:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008738:	e009      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008740:	e005      	b.n	800874e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800874c:	bf00      	nop
    }

    if (pclk != 0U)
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d028      	beq.n	80087a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	4a10      	ldr	r2, [pc, #64]	; (800879c <UART_SetConfig+0x5c4>)
 800875a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875e:	461a      	mov	r2, r3
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	fbb3 f2f2 	udiv	r2, r3, r2
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	441a      	add	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d910      	bls.n	80087a0 <UART_SetConfig+0x5c8>
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008784:	d20c      	bcs.n	80087a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	b29a      	uxth	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e009      	b.n	80087a6 <UART_SetConfig+0x5ce>
 8008792:	bf00      	nop
 8008794:	40008000 	.word	0x40008000
 8008798:	00f42400 	.word	0x00f42400
 800879c:	08008df8 	.word	0x08008df8
      }
      else
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2200      	movs	r2, #0
 80087ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3730      	adds	r7, #48	; 0x30
 80087ca:	46bd      	mov	sp, r7
 80087cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	f003 0308 	and.w	r3, r3, #8
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ce:	d10a      	bne.n	80088e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008924:	f7f9 fd1e 	bl	8002364 <HAL_GetTick>
 8008928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b08      	cmp	r3, #8
 8008936:	d10e      	bne.n	8008956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f82f 	bl	80089aa <UART_WaitOnFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e025      	b.n	80089a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b04      	cmp	r3, #4
 8008962:	d10e      	bne.n	8008982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f819 	bl	80089aa <UART_WaitOnFlagUntilTimeout>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e00f      	b.n	80089a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b09c      	sub	sp, #112	; 0x70
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	603b      	str	r3, [r7, #0]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ba:	e0a9      	b.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c2:	f000 80a5 	beq.w	8008b10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c6:	f7f9 fccd 	bl	8002364 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d302      	bcc.n	80089dc <UART_WaitOnFlagUntilTimeout+0x32>
 80089d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d140      	bne.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089f0:	667b      	str	r3, [r7, #100]	; 0x64
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e6      	bne.n	80089dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3308      	adds	r3, #8
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	663b      	str	r3, [r7, #96]	; 0x60
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e5      	bne.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e069      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d051      	beq.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a7a:	d149      	bne.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e6      	bne.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3308      	adds	r3, #8
 8008abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ad8:	623a      	str	r2, [r7, #32]
 8008ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	69f9      	ldr	r1, [r7, #28]
 8008ade:	6a3a      	ldr	r2, [r7, #32]
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e5      	bne.n	8008ab8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e010      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69da      	ldr	r2, [r3, #28]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	bf0c      	ite	eq
 8008b20:	2301      	moveq	r3, #1
 8008b22:	2300      	movne	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	f43f af46 	beq.w	80089bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3770      	adds	r7, #112	; 0x70
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e027      	b.n	8008ba0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2224      	movs	r2, #36	; 0x24
 8008b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e02d      	b.n	8008c20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2224      	movs	r2, #36	; 0x24
 8008bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0201 	bic.w	r2, r2, #1
 8008bea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f84f 	bl	8008ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e02d      	b.n	8008c9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f811 	bl	8008ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d108      	bne.n	8008cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cc4:	e031      	b.n	8008d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cca:	2308      	movs	r3, #8
 8008ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	0e5b      	lsrs	r3, r3, #25
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	0f5b      	lsrs	r3, r3, #29
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	7b3a      	ldrb	r2, [r7, #12]
 8008cf2:	4911      	ldr	r1, [pc, #68]	; (8008d38 <UARTEx_SetNbDataToProcess+0x94>)
 8008cf4:	5c8a      	ldrb	r2, [r1, r2]
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cfa:	7b3a      	ldrb	r2, [r7, #12]
 8008cfc:	490f      	ldr	r1, [pc, #60]	; (8008d3c <UARTEx_SetNbDataToProcess+0x98>)
 8008cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	7b7a      	ldrb	r2, [r7, #13]
 8008d10:	4909      	ldr	r1, [pc, #36]	; (8008d38 <UARTEx_SetNbDataToProcess+0x94>)
 8008d12:	5c8a      	ldrb	r2, [r1, r2]
 8008d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d18:	7b7a      	ldrb	r2, [r7, #13]
 8008d1a:	4908      	ldr	r1, [pc, #32]	; (8008d3c <UARTEx_SetNbDataToProcess+0x98>)
 8008d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	08008e10 	.word	0x08008e10
 8008d3c:	08008e18 	.word	0x08008e18

08008d40 <__libc_init_array>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	4d0d      	ldr	r5, [pc, #52]	; (8008d78 <__libc_init_array+0x38>)
 8008d44:	4c0d      	ldr	r4, [pc, #52]	; (8008d7c <__libc_init_array+0x3c>)
 8008d46:	1b64      	subs	r4, r4, r5
 8008d48:	10a4      	asrs	r4, r4, #2
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	42a6      	cmp	r6, r4
 8008d4e:	d109      	bne.n	8008d64 <__libc_init_array+0x24>
 8008d50:	4d0b      	ldr	r5, [pc, #44]	; (8008d80 <__libc_init_array+0x40>)
 8008d52:	4c0c      	ldr	r4, [pc, #48]	; (8008d84 <__libc_init_array+0x44>)
 8008d54:	f000 f820 	bl	8008d98 <_init>
 8008d58:	1b64      	subs	r4, r4, r5
 8008d5a:	10a4      	asrs	r4, r4, #2
 8008d5c:	2600      	movs	r6, #0
 8008d5e:	42a6      	cmp	r6, r4
 8008d60:	d105      	bne.n	8008d6e <__libc_init_array+0x2e>
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d68:	4798      	blx	r3
 8008d6a:	3601      	adds	r6, #1
 8008d6c:	e7ee      	b.n	8008d4c <__libc_init_array+0xc>
 8008d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d72:	4798      	blx	r3
 8008d74:	3601      	adds	r6, #1
 8008d76:	e7f2      	b.n	8008d5e <__libc_init_array+0x1e>
 8008d78:	08008e28 	.word	0x08008e28
 8008d7c:	08008e28 	.word	0x08008e28
 8008d80:	08008e28 	.word	0x08008e28
 8008d84:	08008e2c 	.word	0x08008e2c

08008d88 <memset>:
 8008d88:	4402      	add	r2, r0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d100      	bne.n	8008d92 <memset+0xa>
 8008d90:	4770      	bx	lr
 8008d92:	f803 1b01 	strb.w	r1, [r3], #1
 8008d96:	e7f9      	b.n	8008d8c <memset+0x4>

08008d98 <_init>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr

08008da4 <_fini>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr
