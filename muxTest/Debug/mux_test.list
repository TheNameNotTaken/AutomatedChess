
mux_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c1c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e48  08008e48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e50  08008e50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e50  08008e50  00018e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  2000000c  08008e64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008e64  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d502  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  0003d53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00040508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00041e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e9b9  00000000  00000000  00043708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db5d  00000000  00000000  000720c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012865f  00000000  00000000  0008fc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b827d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb8  00000000  00000000  001b82d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008dc0 	.word	0x08008dc0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08008dc0 	.word	0x08008dc0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 fed8 	bl	80022ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f865 	bl	80005d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800050e:	f000 f8c5 	bl	800069c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 ff55 	bl	80013c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f8f5 	bl	8000704 <MX_ADC1_Init>
  MX_CAN1_Init();
 800051a:	f000 f957 	bl	80007cc <MX_CAN1_Init>
  MX_COMP1_Init();
 800051e:	f000 f989 	bl	8000834 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000522:	f000 f9b5 	bl	8000890 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000526:	f000 f9df 	bl	80008e8 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 800052a:	f000 fa17 	bl	800095c <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 fa57 	bl	80009e0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 faa3 	bl	8000a7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 faef 	bl	8000b18 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800053a:	f000 fb39 	bl	8000bb0 <MX_SAI1_Init>
  MX_SAI2_Init();
 800053e:	f000 fbcf 	bl	8000ce0 <MX_SAI2_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI1_Init();
 8000542:	f000 fc35 	bl	8000db0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000546:	f000 fc71 	bl	8000e2c <MX_SPI3_Init>
  MX_TIM1_Init();
 800054a:	f000 fcad 	bl	8000ea8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800054e:	f000 fd7b 	bl	8001048 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 fddd 	bl	8001110 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000556:	f000 fe41 	bl	80011dc <MX_TIM4_Init>
  MX_TIM15_Init();
 800055a:	f000 fea5 	bl	80012a8 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800055e:	f000 ff27 	bl	80013b0 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  uint32_t ADC_VAL = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	637b      	str	r3, [r7, #52]	; 0x34

  //HAL_GPIO_WritePin(GPIOC, sel1_Pin|sel0_Pin|sel2_Pin, GPIO_PIN_RESET);

  // enables mux
  HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f003 fcf3 	bl	8003f58 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */

		//HAL_ADC_PollForConversion(&hadc1, 0xffffffff);
		//ADC_VAL = HAL_ADC_GetValue(&hadc1);

	for (int i = 0; i < 8; ++i) {
 8000572:	2300      	movs	r3, #0
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
 8000576:	e027      	b.n	80005c8 <main+0xc8>
		selectHall(i);
 8000578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ffde 	bl	800153c <selectHall>

		uint32_t vals[10];
		for (int j = 0; j < 20; ++j){
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000584:	e011      	b.n	80005aa <main+0xaa>
			HAL_ADC_Start(&hadc1);
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <main+0xd0>)
 8000588:	f002 fa56 	bl	8002a38 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 0xffffffff);
 800058c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <main+0xd0>)
 8000592:	f002 fab4 	bl	8002afe <HAL_ADC_PollForConversion>
		ADC_VAL += HAL_ADC_GetValue(&hadc1);
 8000596:	480e      	ldr	r0, [pc, #56]	; (80005d0 <main+0xd0>)
 8000598:	f002 fb40 	bl	8002c1c <HAL_ADC_GetValue>
 800059c:	4602      	mov	r2, r0
 800059e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a0:	4413      	add	r3, r2
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
		for (int j = 0; j < 20; ++j){
 80005a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a6:	3301      	adds	r3, #1
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ac:	2b13      	cmp	r3, #19
 80005ae:	ddea      	ble.n	8000586 <main+0x86>

		}
		ADC_VAL = ADC_VAL/20;
 80005b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <main+0xd4>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34

		HAL_Delay(10);
 80005bc:	200a      	movs	r0, #10
 80005be:	f001 fef1 	bl	80023a4 <HAL_Delay>
	for (int i = 0; i < 8; ++i) {
 80005c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c4:	3301      	adds	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
 80005c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	ddd4      	ble.n	8000578 <main+0x78>
 80005ce:	e7d0      	b.n	8000572 <main+0x72>
 80005d0:	20000028 	.word	0x20000028
 80005d4:	cccccccd 	.word	0xcccccccd

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fbe2 	bl	8008db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f003 fcf3 	bl	8003fe8 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f001 f83a 	bl	8001680 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f003 fcbc 	bl	8003f88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xc0>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <SystemClock_Config+0xc0>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000620:	2314      	movs	r3, #20
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fd7b 	bl	8004150 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000660:	f001 f80e 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2101      	movs	r1, #1
 800067c:	4618      	mov	r0, r3
 800067e:	f004 f981 	bl	8004984 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000688:	f000 fffa 	bl	8001680 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068c:	f005 fe8a 	bl	80063a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000690:	bf00      	nop
 8000692:	3758      	adds	r7, #88	; 0x58
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a6      	sub	sp, #152	; 0x98
 80006a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2294      	movs	r2, #148	; 0x94
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 fb81 	bl	8008db0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80006ae:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006c8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 80006d2:	2330      	movs	r3, #48	; 0x30
 80006d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80006da:	2304      	movs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 80006de:	2306      	movs	r3, #6
 80006e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <PeriphCommonClock_Config+0x64>)
 80006e4:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fc09 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80006f4:	f000 ffc4 	bl	8001680 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3798      	adds	r7, #152	; 0x98
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	01110000 	.word	0x01110000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800071c:	4a29      	ldr	r2, [pc, #164]	; (80007c4 <MX_ADC1_Init+0xc0>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000722:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800073c:	2204      	movs	r2, #4
 800073e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000748:	2200      	movs	r2, #0
 800074a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800074e:	2201      	movs	r2, #1
 8000750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_ADC1_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800077e:	f002 f80f 	bl	80027a0 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000788:	f000 ff7a 	bl	8001680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ADC1_Init+0xc4>)
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000794:	2307      	movs	r3, #7
 8000796:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000798:	237f      	movs	r3, #127	; 0x7f
 800079a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079c:	2304      	movs	r3, #4
 800079e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC1_Init+0xbc>)
 80007aa:	f002 fa45 	bl	8002c38 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007b4:	f000 ff64 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000028 	.word	0x20000028
 80007c4:	50040000 	.word	0x50040000
 80007c8:	04300002 	.word	0x04300002

080007cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_CAN1_Init+0x60>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_CAN1_Init+0x64>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_CAN1_Init+0x60>)
 80007d8:	2210      	movs	r2, #16
 80007da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_CAN1_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_CAN1_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_CAN1_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_CAN1_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_CAN1_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_CAN1_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_CAN1_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_CAN1_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_CAN1_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_CAN1_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_CAN1_Init+0x60>)
 800081a:	f002 fe8f 	bl	800353c <HAL_CAN_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 ff2c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000090 	.word	0x20000090
 8000830:	40006400 	.word	0x40006400

08000834 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_COMP1_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_COMP1_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_COMP1_Init+0x50>)
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_COMP1_Init+0x58>)
 8000842:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_COMP1_Init+0x50>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_COMP1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_COMP1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_COMP1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_COMP1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_COMP1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_COMP1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_COMP1_Init+0x50>)
 8000870:	f003 f808 	bl	8003884 <HAL_COMP_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 ff01 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000b8 	.word	0x200000b8
 8000888:	40010200 	.word	0x40010200
 800088c:	00800030 	.word	0x00800030

08000890 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_COMP2_Init+0x50>)
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_COMP2_Init+0x54>)
 8000898:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_COMP2_Init+0x50>)
 800089c:	2270      	movs	r2, #112	; 0x70
 800089e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_COMP2_Init+0x50>)
 80008cc:	f002 ffda 	bl	8003884 <HAL_COMP_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fed3 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000e4 	.word	0x200000e4
 80008e4:	40010204 	.word	0x40010204

080008e8 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <MX_I2C1_SMBUS_Init+0x6c>)
 80008f0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 80008f4:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_I2C1_SMBUS_Init+0x70>)
 80008f6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000900:	2202      	movs	r2, #2
 8000902:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000906:	2201      	movs	r2, #1
 8000908:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 8000936:	f248 1286 	movw	r2, #33158	; 0x8186
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2C1_SMBUS_Init+0x68>)
 800093e:	f006 fbb9 	bl	80070b4 <HAL_SMBUS_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000948:	f000 fe9a 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000110 	.word	0x20000110
 8000954:	40005400 	.word	0x40005400
 8000958:	00707cbb 	.word	0x00707cbb

0800095c <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_I2C2_SMBUS_Init+0x7c>)
 8000964:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000968:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_I2C2_SMBUS_Init+0x80>)
 800096a:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000974:	2202      	movs	r2, #2
 8000976:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 800097a:	2201      	movs	r2, #1
 800097c:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 80009aa:	f248 1286 	movw	r2, #33158	; 0x8186
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 80009b2:	f006 fb7f 	bl	80070b4 <HAL_SMBUS_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 80009bc:	f000 fe60 	bl	8001680 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_I2C2_SMBUS_Init+0x78>)
 80009c2:	f006 fc2f 	bl	8007224 <HAL_SMBUS_EnableAlert_IT>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80009cc:	f000 fe58 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000160 	.word	0x20000160
 80009d8:	40005800 	.word	0x40005800
 80009dc:	00707cbb 	.word	0x00707cbb

080009e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 80009e6:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <MX_LPUART1_UART_Init+0x94>)
 80009e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 80009ec:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <MX_LPUART1_UART_Init+0x98>)
 80009ee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 80009f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a28:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a2a:	f007 fb99 	bl	8008160 <HAL_UART_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a34:	f000 fe24 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a3c:	f008 f8ca 	bl	8008bd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a46:	f000 fe1b 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a4e:	f008 f8ff 	bl	8008c50 <HAL_UARTEx_SetRxFifoThreshold>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a58:	f000 fe12 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_LPUART1_UART_Init+0x90>)
 8000a5e:	f008 f880 	bl	8008b62 <HAL_UARTEx_DisableFifoMode>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 fe0a 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200001b0 	.word	0x200001b0
 8000a74:	40008000 	.word	0x40008000
 8000a78:	00033324 	.word	0x00033324

08000a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <MX_USART2_UART_Init+0x98>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000aa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000ac8:	f007 fb4a 	bl	8008160 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ad2:	f000 fdd5 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000ada:	f008 f87b 	bl	8008bd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ae4:	f000 fdcc 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000aec:	f008 f8b0 	bl	8008c50 <HAL_UARTEx_SetRxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000af6:	f000 fdc3 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x94>)
 8000afc:	f008 f831 	bl	8008b62 <HAL_UARTEx_DisableFifoMode>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000b06:	f000 fdbb 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000240 	.word	0x20000240
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_USART3_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b62:	f007 fafd 	bl	8008160 <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f000 fd88 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b74:	f008 f82e 	bl	8008bd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f000 fd7f 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b86:	f008 f863 	bl	8008c50 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f000 fd76 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b96:	f007 ffe4 	bl	8008b62 <HAL_UARTEx_DisableFifoMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 fd6e 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200002d0 	.word	0x200002d0
 8000bac:	40004800 	.word	0x40004800

08000bb0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000bb4:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bb6:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <MX_SAI1_Init+0x120>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000bba:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000bc0:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bc8:	2240      	movs	r2, #64	; 0x40
 8000bca:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000bcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bde:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000be4:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bf8:	4a36      	ldr	r2, [pc, #216]	; (8000cd4 <MX_SAI1_Init+0x124>)
 8000bfa:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000c60:	481a      	ldr	r0, [pc, #104]	; (8000ccc <MX_SAI1_Init+0x11c>)
 8000c62:	f005 fedb 	bl	8006a1c <HAL_SAI_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000c6c:	f000 fd08 	bl	8001680 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c72:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <MX_SAI1_Init+0x12c>)
 8000c74:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <MX_SAI1_Init+0x124>)
 8000c98:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_SAI1_Init+0x128>)
 8000cba:	f005 fe7d 	bl	80069b8 <HAL_SAI_InitProtocol>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000cc4:	f000 fcdc 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000360 	.word	0x20000360
 8000cd0:	40015424 	.word	0x40015424
 8000cd4:	0002ee00 	.word	0x0002ee00
 8000cd8:	200003f4 	.word	0x200003f4
 8000cdc:	40015404 	.word	0x40015404

08000ce0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000ce6:	4a30      	ldr	r2, [pc, #192]	; (8000da8 <MX_SAI2_Init+0xc8>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d28:	4a20      	ldr	r2, [pc, #128]	; (8000dac <MX_SAI2_Init+0xcc>)
 8000d2a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_SAI2_Init+0xc4>)
 8000d92:	f005 fe43 	bl	8006a1c <HAL_SAI_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000d9c:	f000 fc70 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000488 	.word	0x20000488
 8000da8:	40015804 	.word	0x40015804
 8000dac:	0002ee00 	.word	0x0002ee00

08000db0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <MX_SPI1_Init+0x78>)
 8000db8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000de2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000dfe:	2207      	movs	r2, #7
 8000e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_SPI1_Init+0x74>)
 8000e10:	f006 fa5b 	bl	80072ca <HAL_SPI_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 fc31 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000051c 	.word	0x2000051c
 8000e28:	40013000 	.word	0x40013000

08000e2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <MX_SPI3_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e4a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e86:	2208      	movs	r2, #8
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_SPI3_Init+0x74>)
 8000e8c:	f006 fa1d 	bl	80072ca <HAL_SPI_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 fbf3 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000580 	.word	0x20000580
 8000ea4:	40003c00 	.word	0x40003c00

08000ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b098      	sub	sp, #96	; 0x60
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	222c      	movs	r2, #44	; 0x2c
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f007 ff65 	bl	8008db0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee6:	4b56      	ldr	r3, [pc, #344]	; (8001040 <MX_TIM1_Init+0x198>)
 8000ee8:	4a56      	ldr	r2, [pc, #344]	; (8001044 <MX_TIM1_Init+0x19c>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eec:	4b54      	ldr	r3, [pc, #336]	; (8001040 <MX_TIM1_Init+0x198>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <MX_TIM1_Init+0x198>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ef8:	4b51      	ldr	r3, [pc, #324]	; (8001040 <MX_TIM1_Init+0x198>)
 8000efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f06:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f12:	484b      	ldr	r0, [pc, #300]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f14:	f006 fa7c 	bl	8007410 <HAL_TIM_PWM_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f1e:	f000 fbaf 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	4842      	ldr	r0, [pc, #264]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f36:	f006 ff47 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f40:	f000 fb9e 	bl	8001680 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000f44:	2301      	movs	r3, #1
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000f50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f54:	461a      	mov	r2, r3
 8000f56:	2101      	movs	r1, #1
 8000f58:	4839      	ldr	r0, [pc, #228]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f5a:	f007 f83b 	bl	8007fd4 <HAL_TIMEx_ConfigBreakInput>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000f64:	f000 fb8c 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000f68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4833      	ldr	r0, [pc, #204]	; (8001040 <MX_TIM1_Init+0x198>)
 8000f72:	f007 f82f 	bl	8007fd4 <HAL_TIMEx_ConfigBreakInput>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000f7c:	f000 fb80 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f80:	2360      	movs	r3, #96	; 0x60
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4826      	ldr	r0, [pc, #152]	; (8001040 <MX_TIM1_Init+0x198>)
 8000fa6:	f006 fa8b 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000fb0:	f000 fb66 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <MX_TIM1_Init+0x198>)
 8000fbe:	f006 fa7f 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000fc8:	f000 fb5a 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <MX_TIM1_Init+0x198>)
 8000fd6:	f006 fa73 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000fe0:	f000 fb4e 	bl	8001680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fe8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800100e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001012:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <MX_TIM1_Init+0x198>)
 8001022:	f006 ff59 	bl	8007ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800102c:	f000 fb28 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <MX_TIM1_Init+0x198>)
 8001032:	f000 ff19 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001036:	bf00      	nop
 8001038:	3760      	adds	r7, #96	; 0x60
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200005e4 	.word	0x200005e4
 8001044:	40012c00 	.word	0x40012c00

08001048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_TIM2_Init+0xc4>)
 800106e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <MX_TIM2_Init+0xc4>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_TIM2_Init+0xc4>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_TIM2_Init+0xc4>)
 8001082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001086:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_TIM2_Init+0xc4>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_TIM2_Init+0xc4>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001094:	481d      	ldr	r0, [pc, #116]	; (800110c <MX_TIM2_Init+0xc4>)
 8001096:	f006 f9bb 	bl	8007410 <HAL_TIM_PWM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010a0:	f000 faee 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4816      	ldr	r0, [pc, #88]	; (800110c <MX_TIM2_Init+0xc4>)
 80010b4:	f006 fe88 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010be:	f000 fadf 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	; 0x60
 80010c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM2_Init+0xc4>)
 80010da:	f006 f9f1 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010e4:	f000 facc 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	2208      	movs	r2, #8
 80010ec:	4619      	mov	r1, r3
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM2_Init+0xc4>)
 80010f0:	f006 f9e6 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010fa:	f000 fac1 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM2_Init+0xc4>)
 8001100:	f000 feb2 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000630 	.word	0x20000630

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <MX_TIM3_Init+0xc4>)
 8001136:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <MX_TIM3_Init+0xc8>)
 8001138:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MX_TIM3_Init+0xc4>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <MX_TIM3_Init+0xc4>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <MX_TIM3_Init+0xc4>)
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_TIM3_Init+0xc4>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_TIM3_Init+0xc4>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115a:	481e      	ldr	r0, [pc, #120]	; (80011d4 <MX_TIM3_Init+0xc4>)
 800115c:	f006 f958 	bl	8007410 <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001166:	f000 fa8b 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <MX_TIM3_Init+0xc4>)
 800117a:	f006 fe25 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001184:	f000 fa7c 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001188:	2360      	movs	r3, #96	; 0x60
 800118a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2204      	movs	r2, #4
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM3_Init+0xc4>)
 80011a0:	f006 f98e 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80011aa:	f000 fa69 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	2208      	movs	r2, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM3_Init+0xc4>)
 80011b6:	f006 f983 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80011c0:	f000 fa5e 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM3_Init+0xc4>)
 80011c6:	f000 fe4f 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000067c 	.word	0x2000067c
 80011d8:	40000400 	.word	0x40000400

080011dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <MX_TIM4_Init+0xc8>)
 8001204:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_TIM4_Init+0xc4>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_TIM4_Init+0xc4>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001226:	481e      	ldr	r0, [pc, #120]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001228:	f006 f8f2 	bl	8007410 <HAL_TIM_PWM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001232:	f000 fa25 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001246:	f006 fdbf 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001250:	f000 fa16 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001254:	2360      	movs	r3, #96	; 0x60
 8001256:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2208      	movs	r2, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM4_Init+0xc4>)
 800126c:	f006 f928 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001276:	f000 fa03 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	220c      	movs	r2, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001282:	f006 f91d 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800128c:	f000 f9f8 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001292:	f000 fde9 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200006c8 	.word	0x200006c8
 80012a4:	40000800 	.word	0x40000800

080012a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	; 0x58
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	222c      	movs	r2, #44	; 0x2c
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f007 fd6b 	bl	8008db0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <MX_TIM15_Init+0x100>)
 80012dc:	4a33      	ldr	r2, [pc, #204]	; (80013ac <MX_TIM15_Init+0x104>)
 80012de:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_TIM15_Init+0x100>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <MX_TIM15_Init+0x100>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_TIM15_Init+0x100>)
 80012ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_TIM15_Init+0x100>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MX_TIM15_Init+0x100>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <MX_TIM15_Init+0x100>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001306:	4828      	ldr	r0, [pc, #160]	; (80013a8 <MX_TIM15_Init+0x100>)
 8001308:	f006 f882 	bl	8007410 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 f9b5 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800131e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001322:	4619      	mov	r1, r3
 8001324:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_TIM15_Init+0x100>)
 8001326:	f006 fd4f 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001330:	f000 f9a6 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_TIM15_Init+0x100>)
 800135a:	f006 f8b1 	bl	80074c0 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001364:	f000 f98c 	bl	8001680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM15_Init+0x100>)
 800138c:	f006 fda4 	bl	8007ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001396:	f000 f973 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM15_Init+0x100>)
 800139c:	f000 fd64 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 80013a0:	bf00      	nop
 80013a2:	3758      	adds	r7, #88	; 0x58
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000714 	.word	0x20000714
 80013ac:	40014000 	.word	0x40014000

080013b0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <MX_GPIO_Init+0x174>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a56      	ldr	r2, [pc, #344]	; (8001534 <MX_GPIO_Init+0x174>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <MX_GPIO_Init+0x174>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	623b      	str	r3, [r7, #32]
 80013ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <MX_GPIO_Init+0x174>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a50      	ldr	r2, [pc, #320]	; (8001534 <MX_GPIO_Init+0x174>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <MX_GPIO_Init+0x174>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001406:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <MX_GPIO_Init+0x174>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a4a      	ldr	r2, [pc, #296]	; (8001534 <MX_GPIO_Init+0x174>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <MX_GPIO_Init+0x174>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <MX_GPIO_Init+0x174>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a44      	ldr	r2, [pc, #272]	; (8001534 <MX_GPIO_Init+0x174>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b42      	ldr	r3, [pc, #264]	; (8001534 <MX_GPIO_Init+0x174>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <MX_GPIO_Init+0x174>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a3e      	ldr	r2, [pc, #248]	; (8001534 <MX_GPIO_Init+0x174>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <MX_GPIO_Init+0x174>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <MX_GPIO_Init+0x174>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a38      	ldr	r2, [pc, #224]	; (8001534 <MX_GPIO_Init+0x174>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <MX_GPIO_Init+0x174>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <MX_GPIO_Init+0x174>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a32      	ldr	r2, [pc, #200]	; (8001534 <MX_GPIO_Init+0x174>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <MX_GPIO_Init+0x174>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_GPIO_Init+0x174>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <MX_GPIO_Init+0x174>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_GPIO_Init+0x174>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001496:	f002 fe4b 	bl	8004130 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, sel1_Pin|sel0_Pin|sel2_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	211a      	movs	r1, #26
 800149e:	4826      	ldr	r0, [pc, #152]	; (8001538 <MX_GPIO_Init+0x178>)
 80014a0:	f002 fd5a 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2108      	movs	r1, #8
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f002 fd54 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sel1_Pin sel0_Pin sel2_Pin */
  GPIO_InitStruct.Pin = sel1_Pin|sel0_Pin|sel2_Pin;
 80014b0:	231a      	movs	r3, #26
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	481c      	ldr	r0, [pc, #112]	; (8001538 <MX_GPIO_Init+0x178>)
 80014c8:	f002 fbb4 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80014cc:	2308      	movs	r3, #8
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 fba5 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014fc:	230a      	movs	r3, #10
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f002 fb93 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f002 fb85 	bl	8003c34 <HAL_GPIO_Init>

}
 800152a:	bf00      	nop
 800152c:	3738      	adds	r7, #56	; 0x38
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48000800 	.word	0x48000800

0800153c <selectHall>:

/* USER CODE BEGIN 4 */
void selectHall(uint32_t num) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	switch(num) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b07      	cmp	r3, #7
 8001548:	f200 8094 	bhi.w	8001674 <selectHall+0x138>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <selectHall+0x18>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001575 	.word	0x08001575
 8001558:	08001595 	.word	0x08001595
 800155c:	080015b5 	.word	0x080015b5
 8001560:	080015d5 	.word	0x080015d5
 8001564:	080015f5 	.word	0x080015f5
 8001568:	08001615 	.word	0x08001615
 800156c:	08001635 	.word	0x08001635
 8001570:	08001655 	.word	0x08001655
	case 0:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2108      	movs	r1, #8
 8001578:	4840      	ldr	r0, [pc, #256]	; (800167c <selectHall+0x140>)
 800157a:	f002 fced 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	483e      	ldr	r0, [pc, #248]	; (800167c <selectHall+0x140>)
 8001584:	f002 fce8 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	483b      	ldr	r0, [pc, #236]	; (800167c <selectHall+0x140>)
 800158e:	f002 fce3 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 8001592:	e06f      	b.n	8001674 <selectHall+0x138>
	case 1:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2108      	movs	r1, #8
 8001598:	4838      	ldr	r0, [pc, #224]	; (800167c <selectHall+0x140>)
 800159a:	f002 fcdd 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	4836      	ldr	r0, [pc, #216]	; (800167c <selectHall+0x140>)
 80015a4:	f002 fcd8 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2110      	movs	r1, #16
 80015ac:	4833      	ldr	r0, [pc, #204]	; (800167c <selectHall+0x140>)
 80015ae:	f002 fcd3 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 80015b2:	e05f      	b.n	8001674 <selectHall+0x138>
	case 2:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2108      	movs	r1, #8
 80015b8:	4830      	ldr	r0, [pc, #192]	; (800167c <selectHall+0x140>)
 80015ba:	f002 fccd 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2102      	movs	r1, #2
 80015c2:	482e      	ldr	r0, [pc, #184]	; (800167c <selectHall+0x140>)
 80015c4:	f002 fcc8 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	482b      	ldr	r0, [pc, #172]	; (800167c <selectHall+0x140>)
 80015ce:	f002 fcc3 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 80015d2:	e04f      	b.n	8001674 <selectHall+0x138>
	case 3:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2108      	movs	r1, #8
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <selectHall+0x140>)
 80015da:	f002 fcbd 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2102      	movs	r1, #2
 80015e2:	4826      	ldr	r0, [pc, #152]	; (800167c <selectHall+0x140>)
 80015e4:	f002 fcb8 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <selectHall+0x140>)
 80015ee:	f002 fcb3 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 80015f2:	e03f      	b.n	8001674 <selectHall+0x138>
	case 4:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2108      	movs	r1, #8
 80015f8:	4820      	ldr	r0, [pc, #128]	; (800167c <selectHall+0x140>)
 80015fa:	f002 fcad 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2102      	movs	r1, #2
 8001602:	481e      	ldr	r0, [pc, #120]	; (800167c <selectHall+0x140>)
 8001604:	f002 fca8 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2110      	movs	r1, #16
 800160c:	481b      	ldr	r0, [pc, #108]	; (800167c <selectHall+0x140>)
 800160e:	f002 fca3 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 8001612:	e02f      	b.n	8001674 <selectHall+0x138>
	case 5:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	4818      	ldr	r0, [pc, #96]	; (800167c <selectHall+0x140>)
 800161a:	f002 fc9d 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2102      	movs	r1, #2
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <selectHall+0x140>)
 8001624:	f002 fc98 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2110      	movs	r1, #16
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <selectHall+0x140>)
 800162e:	f002 fc93 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 8001632:	e01f      	b.n	8001674 <selectHall+0x138>
	case 6:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2108      	movs	r1, #8
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <selectHall+0x140>)
 800163a:	f002 fc8d 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2102      	movs	r1, #2
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <selectHall+0x140>)
 8001644:	f002 fc88 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <selectHall+0x140>)
 800164e:	f002 fc83 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 8001652:	e00f      	b.n	8001674 <selectHall+0x138>
	case 7:
		HAL_GPIO_WritePin(GPIOC, sel0_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2108      	movs	r1, #8
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <selectHall+0x140>)
 800165a:	f002 fc7d 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel1_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2102      	movs	r1, #2
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <selectHall+0x140>)
 8001664:	f002 fc78 	bl	8003f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, sel2_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2110      	movs	r1, #16
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <selectHall+0x140>)
 800166e:	f002 fc73 	bl	8003f58 <HAL_GPIO_WritePin>
		break;
 8001672:	bf00      	nop
	}
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	48000800 	.word	0x48000800

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x44>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_MspInit+0x44>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6613      	str	r3, [r2, #96]	; 0x60
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x44>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x44>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <HAL_ADC_MspInit+0xd4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d154      	bne.n	80017a0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 80016fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a20      	ldr	r2, [pc, #128]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_ADC_MspInit+0xd8>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PA1     ------> ADC1_IN6
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = mux_in_Pin|GPIO_PIN_2|GPIO_PIN_5;
 8001756:	2325      	movs	r3, #37	; 0x25
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800175a:	230b      	movs	r3, #11
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <HAL_ADC_MspInit+0xdc>)
 800176a:	f002 fa63 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800176e:	2302      	movs	r3, #2
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001772:	230b      	movs	r3, #11
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f002 fa56 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001788:	2302      	movs	r3, #2
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800178c:	230b      	movs	r3, #11
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <HAL_ADC_MspInit+0xe0>)
 800179c:	f002 fa4a 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3730      	adds	r7, #48	; 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	50040000 	.word	0x50040000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000400 	.word	0x48000400

080017b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_CAN_MspInit+0x7c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d127      	bne.n	800182a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_CAN_MspInit+0x80>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	4a16      	ldr	r2, [pc, #88]	; (8001838 <HAL_CAN_MspInit+0x80>)
 80017e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e4:	6593      	str	r3, [r2, #88]	; 0x58
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_CAN_MspInit+0x80>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_CAN_MspInit+0x80>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_CAN_MspInit+0x80>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_CAN_MspInit+0x80>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800180a:	2303      	movs	r3, #3
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800181a:	2309      	movs	r3, #9
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_CAN_MspInit+0x84>)
 8001826:	f002 fa05 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40006400 	.word	0x40006400
 8001838:	40021000 	.word	0x40021000
 800183c:	48000c00 	.word	0x48000c00

08001840 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_COMP_MspInit+0x98>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d118      	bne.n	8001894 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187a:	2304      	movs	r3, #4
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4814      	ldr	r0, [pc, #80]	; (80018e0 <HAL_COMP_MspInit+0xa0>)
 800188e:	f002 f9d1 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001892:	e01c      	b.n	80018ce <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_COMP_MspInit+0xa4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d117      	bne.n	80018ce <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_COMP_MspInit+0xa0>)
 80018ca:	f002 f9b3 	bl	8003c34 <HAL_GPIO_Init>
}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40010200 	.word	0x40010200
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	40010204 	.word	0x40010204

080018e8 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0b0      	sub	sp, #192	; 0xc0
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	2294      	movs	r2, #148	; 0x94
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f007 fa51 	bl	8008db0 <memset>
  if(hsmbus->Instance==I2C1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a42      	ldr	r2, [pc, #264]	; (8001a1c <HAL_SMBUS_MspInit+0x134>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13c      	bne.n	8001992 <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800191c:	2300      	movs	r3, #0
 800191e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4618      	mov	r0, r3
 8001926:	f003 faeb 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001930:	f7ff fea6 	bl	8001680 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195a:	2301      	movs	r3, #1
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001966:	2304      	movs	r3, #4
 8001968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001970:	4619      	mov	r1, r3
 8001972:	482c      	ldr	r0, [pc, #176]	; (8001a24 <HAL_SMBUS_MspInit+0x13c>)
 8001974:	f002 f95e 	bl	8003c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 800197e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001990:	e03f      	b.n	8001a12 <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_SMBUS_MspInit+0x140>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d13a      	bne.n	8001a12 <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 faa9 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 80019b4:	f7ff fe64 	bl	8001680 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 80019be:	f043 0320 	orr.w	r3, r3, #32
 80019c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019d0:	2307      	movs	r3, #7
 80019d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d6:	2312      	movs	r3, #18
 80019d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019dc:	2301      	movs	r3, #1
 80019de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019e8:	2304      	movs	r3, #4
 80019ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019f2:	4619      	mov	r1, r3
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <HAL_SMBUS_MspInit+0x144>)
 80019f6:	f002 f91d 	bl	8003c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_SMBUS_MspInit+0x138>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
}
 8001a12:	bf00      	nop
 8001a14:	37c0      	adds	r7, #192	; 0xc0
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40021000 	.word	0x40021000
 8001a24:	48000400 	.word	0x48000400
 8001a28:	40005800 	.word	0x40005800
 8001a2c:	48001400 	.word	0x48001400

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0b2      	sub	sp, #200	; 0xc8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	2294      	movs	r2, #148	; 0x94
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f007 f9ad 	bl	8008db0 <memset>
  if(huart->Instance==LPUART1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a64      	ldr	r2, [pc, #400]	; (8001bec <HAL_UART_MspInit+0x1bc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d13e      	bne.n	8001ade <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a60:	2320      	movs	r3, #32
 8001a62:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fa47 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a78:	f7ff fe02 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a7c:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	4a5b      	ldr	r2, [pc, #364]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001aac:	f002 fb40 	bl	8004130 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ab0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001aca:	2308      	movs	r3, #8
 8001acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4847      	ldr	r0, [pc, #284]	; (8001bf4 <HAL_UART_MspInit+0x1c4>)
 8001ad8:	f002 f8ac 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001adc:	e081      	b.n	8001be2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a45      	ldr	r2, [pc, #276]	; (8001bf8 <HAL_UART_MspInit+0x1c8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d13b      	bne.n	8001b60 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fa03 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b00:	f7ff fdbe 	bl	8001680 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b34:	2378      	movs	r3, #120	; 0x78
 8001b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <HAL_UART_MspInit+0x1cc>)
 8001b5a:	f002 f86b 	bl	8003c34 <HAL_GPIO_Init>
}
 8001b5e:	e040      	b.n	8001be2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_UART_MspInit+0x1d0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13b      	bne.n	8001be2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f9c2 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001b82:	f7ff fd7d 	bl	8001680 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_UART_MspInit+0x1c0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <HAL_UART_MspInit+0x1cc>)
 8001bde:	f002 f829 	bl	8003c34 <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	37c8      	adds	r7, #200	; 0xc8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40008000 	.word	0x40008000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48001800 	.word	0x48001800
 8001bf8:	40004400 	.word	0x40004400
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	40004800 	.word	0x40004800

08001c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <HAL_SPI_MspInit+0xd8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d129      	bne.n	8001c7a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c56:	23f0      	movs	r3, #240	; 0xf0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c66:	2305      	movs	r3, #5
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f001 ffde 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c78:	e02c      	b.n	8001cd4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_SPI_MspInit+0xe0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d127      	bne.n	8001cd4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_SPI_MspInit+0xdc>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cb4:	2338      	movs	r3, #56	; 0x38
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <HAL_SPI_MspInit+0xe4>)
 8001cd0:	f001 ffb0 	bl	8003c34 <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3730      	adds	r7, #48	; 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40013000 	.word	0x40013000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40003c00 	.word	0x40003c00
 8001ce8:	48000400 	.word	0x48000400

08001cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	; 0x38
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_TIM_PWM_MspInit+0x164>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d139      	bne.n	8001d82 <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0e:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d18:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1a:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d26:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	483f      	ldr	r0, [pc, #252]	; (8001e58 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d5a:	f001 ff6b 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d70:	2303      	movs	r3, #3
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4837      	ldr	r0, [pc, #220]	; (8001e58 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d7c:	f001 ff5a 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d80:	e062      	b.n	8001e48 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d10c      	bne.n	8001da6 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6593      	str	r3, [r2, #88]	; 0x58
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	69bb      	ldr	r3, [r7, #24]
}
 8001da4:	e050      	b.n	8001e48 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <HAL_TIM_PWM_MspInit+0x170>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10c      	bne.n	8001dca <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
}
 8001dc8:	e03e      	b.n	8001e48 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_TIM_PWM_MspInit+0x174>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d128      	bne.n	8001e26 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e04:	2301      	movs	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e14:	2302      	movs	r3, #2
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480e      	ldr	r0, [pc, #56]	; (8001e58 <HAL_TIM_PWM_MspInit+0x16c>)
 8001e20:	f001 ff08 	bl	8003c34 <HAL_GPIO_Init>
}
 8001e24:	e010      	b.n	8001e48 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_TIM_PWM_MspInit+0x178>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10b      	bne.n	8001e48 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_TIM_PWM_MspInit+0x168>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	3738      	adds	r7, #56	; 0x38
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	48001000 	.word	0x48001000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40014000 	.word	0x40014000

08001e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a73      	ldr	r2, [pc, #460]	; (8002054 <HAL_TIM_MspPostInit+0x1ec>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d11d      	bne.n	8001ec6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	623b      	str	r3, [r7, #32]
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ea2:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4867      	ldr	r0, [pc, #412]	; (800205c <HAL_TIM_MspPostInit+0x1f4>)
 8001ec0:	f001 feb8 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ec4:	e0c2      	b.n	800204c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d13a      	bne.n	8001f46 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef4:	4b58      	ldr	r3, [pc, #352]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f10:	2301      	movs	r3, #1
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f001 fe89 	bl	8003c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f34:	2301      	movs	r3, #1
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4848      	ldr	r0, [pc, #288]	; (8002060 <HAL_TIM_MspPostInit+0x1f8>)
 8001f40:	f001 fe78 	bl	8003c34 <HAL_GPIO_Init>
}
 8001f44:	e082      	b.n	800204c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a46      	ldr	r2, [pc, #280]	; (8002064 <HAL_TIM_MspPostInit+0x1fc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d138      	bne.n	8001fc2 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a40      	ldr	r2, [pc, #256]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f74:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f80:	2301      	movs	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f90:	2302      	movs	r3, #2
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4831      	ldr	r0, [pc, #196]	; (8002060 <HAL_TIM_MspPostInit+0x1f8>)
 8001f9c:	f001 fe4a 	bl	8003c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482b      	ldr	r0, [pc, #172]	; (8002068 <HAL_TIM_MspPostInit+0x200>)
 8001fbc:	f001 fe3a 	bl	8003c34 <HAL_GPIO_Init>
}
 8001fc0:	e044      	b.n	800204c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_TIM_MspPostInit+0x204>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d11d      	bne.n	8002008 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	4a21      	ldr	r2, [pc, #132]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fe4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	481b      	ldr	r0, [pc, #108]	; (8002070 <HAL_TIM_MspPostInit+0x208>)
 8002002:	f001 fe17 	bl	8003c34 <HAL_GPIO_Init>
}
 8002006:	e021      	b.n	800204c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_TIM_MspPostInit+0x20c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d11c      	bne.n	800204c <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_TIM_MspPostInit+0x1f0>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800202a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800203c:	230e      	movs	r3, #14
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <HAL_TIM_MspPostInit+0x1f8>)
 8002048:	f001 fdf4 	bl	8003c34 <HAL_GPIO_Init>
}
 800204c:	bf00      	nop
 800204e:	3738      	adds	r7, #56	; 0x38
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40021000 	.word	0x40021000
 800205c:	48001000 	.word	0x48001000
 8002060:	48000400 	.word	0x48000400
 8002064:	40000400 	.word	0x40000400
 8002068:	48000800 	.word	0x48000800
 800206c:	40000800 	.word	0x40000800
 8002070:	48000c00 	.word	0x48000c00
 8002074:	40014000 	.word	0x40014000

08002078 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_SAI_MspInit+0x150>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d124      	bne.n	80020d4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800208a:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_SAI_MspInit+0x154>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10b      	bne.n	80020aa <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002092:	4b4f      	ldr	r3, [pc, #316]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002096:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 8002098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800209c:	6613      	str	r3, [r2, #96]	; 0x60
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <HAL_SAI_MspInit+0x154>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_SAI_MspInit+0x154>)
 80020b2:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020b4:	2374      	movs	r3, #116	; 0x74
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80020c4:	230d      	movs	r3, #13
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4841      	ldr	r0, [pc, #260]	; (80021d4 <HAL_SAI_MspInit+0x15c>)
 80020d0:	f001 fdb0 	bl	8003c34 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <HAL_SAI_MspInit+0x160>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d135      	bne.n	800214a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_SAI_MspInit+0x154>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	4a39      	ldr	r2, [pc, #228]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 80020ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f0:	6613      	str	r3, [r2, #96]	; 0x60
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80020fe:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_SAI_MspInit+0x154>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a31      	ldr	r2, [pc, #196]	; (80021cc <HAL_SAI_MspInit+0x154>)
 8002106:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002108:	2308      	movs	r3, #8
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002118:	230d      	movs	r3, #13
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	482c      	ldr	r0, [pc, #176]	; (80021d4 <HAL_SAI_MspInit+0x15c>)
 8002124:	f001 fd86 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002128:	f44f 7360 	mov.w	r3, #896	; 0x380
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800213a:	230d      	movs	r3, #13
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4825      	ldr	r0, [pc, #148]	; (80021dc <HAL_SAI_MspInit+0x164>)
 8002146:	f001 fd75 	bl	8003c34 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_SAI_MspInit+0x168>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d135      	bne.n	80021c0 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_SAI_MspInit+0x16c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10b      	bne.n	8002174 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 8002162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002166:	6613      	str	r3, [r2, #96]	; 0x60
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_SAI_MspInit+0x158>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_SAI_MspInit+0x16c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	4a1a      	ldr	r2, [pc, #104]	; (80021e4 <HAL_SAI_MspInit+0x16c>)
 800217c:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800217e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002190:	230d      	movs	r3, #13
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	4813      	ldr	r0, [pc, #76]	; (80021e8 <HAL_SAI_MspInit+0x170>)
 800219c:	f001 fd4a 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a0:	2340      	movs	r3, #64	; 0x40
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80021b0:	230d      	movs	r3, #13
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	480c      	ldr	r0, [pc, #48]	; (80021ec <HAL_SAI_MspInit+0x174>)
 80021bc:	f001 fd3a 	bl	8003c34 <HAL_GPIO_Init>

    }
}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40015404 	.word	0x40015404
 80021cc:	20000760 	.word	0x20000760
 80021d0:	40021000 	.word	0x40021000
 80021d4:	48001000 	.word	0x48001000
 80021d8:	40015424 	.word	0x40015424
 80021dc:	48001400 	.word	0x48001400
 80021e0:	40015804 	.word	0x40015804
 80021e4:	20000764 	.word	0x20000764
 80021e8:	48000400 	.word	0x48000400
 80021ec:	48000800 	.word	0x48000800

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <NMI_Handler+0x4>

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler+0x4>

08002202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <UsageFault_Handler+0x4>

0800220e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223c:	f000 f892 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800226c:	f7ff ffea 	bl	8002244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	; (80022a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <LoopForever+0xe>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	; (80022b4 <LoopForever+0x16>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002296:	f006 fd67 	bl	8008d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229a:	f7fe f931 	bl	8000500 <main>

0800229e <LoopForever>:

LoopForever:
    b LoopForever
 800229e:	e7fe      	b.n	800229e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022ac:	08008e58 	.word	0x08008e58
  ldr r2, =_sbss
 80022b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022b4:	2000076c 	.word	0x2000076c

080022b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_IRQHandler>

080022ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f001 fc81 	bl	8003bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f80e 	bl	80022ec <HAL_InitTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	e001      	b.n	80022e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022dc:	f7ff f9d6 	bl	800168c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e0:	79fb      	ldrb	r3, [r7, #7]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_InitTick+0x6c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_InitTick+0x70>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_InitTick+0x6c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fc7f 	bl	8003c1a <HAL_SYSTICK_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d809      	bhi.n	800233c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002330:	f001 fc57 	bl	8003be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_InitTick+0x74>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e007      	b.n	800234c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e004      	b.n	800234c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e001      	b.n	800234c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008
 8002388:	20000768 	.word	0x20000768

0800238c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000768 	.word	0x20000768

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008

080023ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LL_ADC_SetOffset+0x44>)
 8002476:	4013      	ands	r3, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	4313      	orrs	r3, r2
 8002484:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	03fff000 	.word	0x03fff000

0800249c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3360      	adds	r3, #96	; 0x60
 80024aa:	461a      	mov	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3360      	adds	r3, #96	; 0x60
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	615a      	str	r2, [r3, #20]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800254a:	b480      	push	{r7}
 800254c:	b087      	sub	sp, #28
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3330      	adds	r3, #48	; 0x30
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	4413      	add	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	211f      	movs	r1, #31
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	401a      	ands	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	f003 011f 	and.w	r1, r3, #31
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b087      	sub	sp, #28
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3314      	adds	r3, #20
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0e5b      	lsrs	r3, r3, #25
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	4413      	add	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0d1b      	lsrs	r3, r3, #20
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2107      	movs	r1, #7
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0d1b      	lsrs	r3, r3, #20
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	431a      	orrs	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0318 	and.w	r3, r3, #24
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <LL_ADC_SetChannelSingleDiff+0x44>)
 800261c:	40d9      	lsrs	r1, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	400b      	ands	r3, r1
 8002622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	0007ffff 	.word	0x0007ffff

08002640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6093      	str	r3, [r2, #8]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c8:	d101      	bne.n	80026ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <LL_ADC_IsEnabled+0x18>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <LL_ADC_IsEnabled+0x1a>
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b04      	cmp	r3, #4
 8002764:	d101      	bne.n	800276a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b08      	cmp	r3, #8
 800278a:	d101      	bne.n	8002790 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12f      	b.n	8002a1a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fe ff83 	bl	80016d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff3f 	bl	8002664 <LL_ADC_IsDeepPowerDownEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff25 	bl	8002640 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff5a 	bl	80026b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d115      	bne.n	8002832 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff3e 	bl	800268c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002810:	4b84      	ldr	r3, [pc, #528]	; (8002a24 <HAL_ADC_Init+0x284>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	4a84      	ldr	r2, [pc, #528]	; (8002a28 <HAL_ADC_Init+0x288>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002824:	e002      	b.n	800282c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff3c 	bl	80026b4 <LL_ADC_IsInternalRegulatorEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff75 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 8002868:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80c8 	bne.w	8002a08 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 80c4 	bne.w	8002a08 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002888:	f043 0202 	orr.w	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff35 	bl	8002704 <LL_ADC_IsEnabled>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a0:	4862      	ldr	r0, [pc, #392]	; (8002a2c <HAL_ADC_Init+0x28c>)
 80028a2:	f7ff ff2f 	bl	8002704 <LL_ADC_IsEnabled>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4619      	mov	r1, r3
 80028b2:	485f      	ldr	r0, [pc, #380]	; (8002a30 <HAL_ADC_Init+0x290>)
 80028b4:	f7ff fd9a 	bl	80023ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7e5b      	ldrb	r3, [r3, #25]
 80028bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d106      	bne.n	80028f4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	3b01      	subs	r3, #1
 80028ec:	045b      	lsls	r3, r3, #17
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_ADC_Init+0x294>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	69b9      	ldr	r1, [r7, #24]
 8002920:	430b      	orrs	r3, r1
 8002922:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff12 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 800292e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff1f 	bl	8002778 <LL_ADC_INJ_IsConversionOngoing>
 800293a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d140      	bne.n	80029c4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13d      	bne.n	80029c4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e1b      	ldrb	r3, [r3, #24]
 8002950:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002952:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800295a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800296a:	f023 0306 	bic.w	r3, r3, #6
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	430b      	orrs	r3, r1
 8002976:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800297e:	2b01      	cmp	r3, #1
 8002980:	d118      	bne.n	80029b4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029a4:	430a      	orrs	r2, r1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	e007      	b.n	80029c4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10c      	bne.n	80029e6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f023 010f 	bic.w	r1, r3, #15
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	1e5a      	subs	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
 80029e4:	e007      	b.n	80029f6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 020f 	bic.w	r2, r2, #15
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58
 8002a06:	e007      	b.n	8002a18 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f043 0210 	orr.w	r2, r3, #16
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000
 8002a28:	053e2d63 	.word	0x053e2d63
 8002a2c:	50040000 	.word	0x50040000
 8002a30:	50040300 	.word	0x50040300
 8002a34:	fff0c007 	.word	0xfff0c007

08002a38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fe84 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d14f      	bne.n	8002af0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Start+0x26>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e04b      	b.n	8002af6 <HAL_ADC_Start+0xbe>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fce2 	bl	8003430 <ADC_Enable>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d137      	bne.n	8002ae6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	f023 0206 	bic.w	r2, r3, #6
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	221c      	movs	r2, #28
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ad2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe23 	bl	800272a <LL_ADC_REG_StartConversion>
 8002ae4:	e006      	b.n	8002af4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002aee:	e001      	b.n	8002af4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d102      	bne.n	8002b16 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b10:	2308      	movs	r3, #8
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e010      	b.n	8002b38 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e06f      	b.n	8002c14 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002b34:	2304      	movs	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b38:	f7ff fc28 	bl	800238c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b3e:	e021      	b.n	8002b84 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b46:	d01d      	beq.n	8002b84 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b48:	f7ff fc20 	bl	800238c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <HAL_ADC_PollForConversion+0x60>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d112      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e047      	b.n	8002c14 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0d6      	beq.n	8002b40 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fcbe 	bl	8002524 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01c      	beq.n	8002be8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e5b      	ldrb	r3, [r3, #25]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d111      	bne.n	8002be8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d104      	bne.n	8002c00 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e008      	b.n	8002c12 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	220c      	movs	r2, #12
 8002c10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b0b6      	sub	sp, #216	; 0xd8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x22>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e3d5      	b.n	8003406 <HAL_ADC_ConfigChannel+0x7ce>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd73 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 83ba 	bne.w	80033e8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d824      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	3b02      	subs	r3, #2
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d81b      	bhi.n	8002cbe <HAL_ADC_ConfigChannel+0x86>
 8002c86:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_ADC_ConfigChannel+0x54>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002ca5 	.word	0x08002ca5
 8002c94:	08002cad 	.word	0x08002cad
 8002c98:	08002cb5 	.word	0x08002cb5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	605a      	str	r2, [r3, #4]
          break;
 8002ca2:	e011      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2212      	movs	r2, #18
 8002ca8:	605a      	str	r2, [r3, #4]
          break;
 8002caa:	e00d      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2218      	movs	r2, #24
 8002cb0:	605a      	str	r2, [r3, #4]
          break;
 8002cb2:	e009      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cba:	605a      	str	r2, [r3, #4]
          break;
 8002cbc:	e004      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	605a      	str	r2, [r3, #4]
          break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002cc6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f7ff fc38 	bl	800254a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fd37 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 8002ce4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fd43 	bl	8002778 <LL_ADC_INJ_IsConversionOngoing>
 8002cf2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 81c1 	bne.w	8003082 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 81bc 	bne.w	8003082 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d12:	d10f      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7ff fc3f 	bl	80025a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fbe6 	bl	80024fe <LL_ADC_SetSamplingTimeCommonConfig>
 8002d32:	e00e      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f7ff fc2e 	bl	80025a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fbd6 	bl	80024fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	08db      	lsrs	r3, r3, #3
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d00a      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6919      	ldr	r1, [r3, #16]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d84:	f7ff fb66 	bl	8002454 <LL_ADC_SetOffset>
 8002d88:	e17b      	b.n	8003082 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fb83 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x17e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb78 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	0e9b      	lsrs	r3, r3, #26
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	e01e      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x1bc>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fb6d 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002de4:	2320      	movs	r3, #32
 8002de6:	e004      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	e018      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x206>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e004      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb3c 	bl	80024c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fb20 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x244>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fb15 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	e01e      	b.n	8002eba <HAL_ADC_ConfigChannel+0x282>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fb0a 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e004      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x29a>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	e018      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x2cc>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e004      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fad9 	bl	80024c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fabd 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x30a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2102      	movs	r1, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fab2 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	0e9b      	lsrs	r3, r3, #26
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	e01e      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x348>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2102      	movs	r1, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff faa7 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e004      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x360>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	e016      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x38e>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e004      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d106      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fa78 	bl	80024c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2103      	movs	r1, #3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fa5c 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x3cc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fa51 	bl	800249c <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 021f 	and.w	r2, r3, #31
 8003002:	e017      	b.n	8003034 <HAL_ADC_ConfigChannel+0x3fc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2103      	movs	r1, #3
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fa46 	bl	800249c <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800301c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800301e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e003      	b.n	8003032 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800302a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <HAL_ADC_ConfigChannel+0x414>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	e011      	b.n	8003070 <HAL_ADC_ConfigChannel+0x438>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800305a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800305c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003070:	429a      	cmp	r2, r3
 8003072:	d106      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	2103      	movs	r1, #3
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fa23 	bl	80024c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fb3c 	bl	8002704 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8140 	bne.w	8003314 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f7ff faa9 	bl	80025f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4a8f      	ldr	r2, [pc, #572]	; (80032e8 <HAL_ADC_ConfigChannel+0x6b0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f040 8131 	bne.w	8003314 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_ADC_ConfigChannel+0x4a2>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2b09      	cmp	r3, #9
 80030d0:	bf94      	ite	ls
 80030d2:	2301      	movls	r3, #1
 80030d4:	2300      	movhi	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e019      	b.n	800310e <HAL_ADC_ConfigChannel+0x4d6>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80030f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2b09      	cmp	r3, #9
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310e:	2b00      	cmp	r3, #0
 8003110:	d079      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_ADC_ConfigChannel+0x4f6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	3301      	adds	r3, #1
 8003126:	069b      	lsls	r3, r3, #26
 8003128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312c:	e015      	b.n	800315a <HAL_ADC_ConfigChannel+0x522>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e003      	b.n	8003152 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	3301      	adds	r3, #1
 8003154:	069b      	lsls	r3, r3, #26
 8003156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_ADC_ConfigChannel+0x542>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	3301      	adds	r3, #1
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	e017      	b.n	80031aa <HAL_ADC_ConfigChannel+0x572>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003192:	2320      	movs	r3, #32
 8003194:	e003      	b.n	800319e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	ea42 0103 	orr.w	r1, r2, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x598>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0e9b      	lsrs	r3, r3, #26
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 021f 	and.w	r2, r3, #31
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	051b      	lsls	r3, r3, #20
 80031ce:	e018      	b.n	8003202 <HAL_ADC_ConfigChannel+0x5ca>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 021f 	and.w	r2, r3, #31
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003202:	430b      	orrs	r3, r1
 8003204:	e081      	b.n	800330a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x5ea>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	3301      	adds	r3, #1
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003220:	e015      	b.n	800324e <HAL_ADC_ConfigChannel+0x616>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	069b      	lsls	r3, r3, #26
 800324a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_ConfigChannel+0x636>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	e017      	b.n	800329e <HAL_ADC_ConfigChannel+0x666>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	61fb      	str	r3, [r7, #28]
  return result;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e003      	b.n	8003292 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	ea42 0103 	orr.w	r1, r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x692>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	051b      	lsls	r3, r3, #20
 80032c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032c8:	e01e      	b.n	8003308 <HAL_ADC_ConfigChannel+0x6d0>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	613b      	str	r3, [r7, #16]
  return result;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e006      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x6bc>
 80032e6:	bf00      	nop
 80032e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 021f 	and.w	r2, r3, #31
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	3b1e      	subs	r3, #30
 8003302:	051b      	lsls	r3, r3, #20
 8003304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003308:	430b      	orrs	r3, r1
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	4619      	mov	r1, r3
 8003310:	f7ff f947 	bl	80025a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_ADC_ConfigChannel+0x7d8>)
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d06c      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003320:	483c      	ldr	r0, [pc, #240]	; (8003414 <HAL_ADC_ConfigChannel+0x7dc>)
 8003322:	f7ff f889 	bl	8002438 <LL_ADC_GetCommonPathInternalCh>
 8003326:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <HAL_ADC_ConfigChannel+0x7e0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d127      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d121      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a35      	ldr	r2, [pc, #212]	; (800341c <HAL_ADC_ConfigChannel+0x7e4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d157      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800334a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800334e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003352:	4619      	mov	r1, r3
 8003354:	482f      	ldr	r0, [pc, #188]	; (8003414 <HAL_ADC_ConfigChannel+0x7dc>)
 8003356:	f7ff f85c 	bl	8002412 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_ADC_ConfigChannel+0x7e8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	4a30      	ldr	r2, [pc, #192]	; (8003424 <HAL_ADC_ConfigChannel+0x7ec>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003374:	e002      	b.n	800337c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f9      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003382:	e03a      	b.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_ADC_ConfigChannel+0x7f0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d113      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x77e>
 800338e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <HAL_ADC_ConfigChannel+0x7e4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d12a      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ac:	4619      	mov	r1, r3
 80033ae:	4819      	ldr	r0, [pc, #100]	; (8003414 <HAL_ADC_ConfigChannel+0x7dc>)
 80033b0:	f7ff f82f 	bl	8002412 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b4:	e021      	b.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_ADC_ConfigChannel+0x7f4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d11c      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_ADC_ConfigChannel+0x7e4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033de:	4619      	mov	r1, r3
 80033e0:	480c      	ldr	r0, [pc, #48]	; (8003414 <HAL_ADC_ConfigChannel+0x7dc>)
 80033e2:	f7ff f816 	bl	8002412 <LL_ADC_SetCommonPathInternalCh>
 80033e6:	e008      	b.n	80033fa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003402:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003406:	4618      	mov	r0, r3
 8003408:	37d8      	adds	r7, #216	; 0xd8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	80080000 	.word	0x80080000
 8003414:	50040300 	.word	0x50040300
 8003418:	c7520000 	.word	0xc7520000
 800341c:	50040000 	.word	0x50040000
 8003420:	20000000 	.word	0x20000000
 8003424:	053e2d63 	.word	0x053e2d63
 8003428:	cb840000 	.word	0xcb840000
 800342c:	80000001 	.word	0x80000001

08003430 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f95f 	bl	8002704 <LL_ADC_IsEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d169      	bne.n	8003520 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	4b36      	ldr	r3, [pc, #216]	; (800352c <ADC_Enable+0xfc>)
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e055      	b.n	8003522 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff f92e 	bl	80026dc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003480:	482b      	ldr	r0, [pc, #172]	; (8003530 <ADC_Enable+0x100>)
 8003482:	f7fe ffd9 	bl	8002438 <LL_ADC_GetCommonPathInternalCh>
 8003486:	4603      	mov	r3, r0
 8003488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003490:	4b28      	ldr	r3, [pc, #160]	; (8003534 <ADC_Enable+0x104>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	4a28      	ldr	r2, [pc, #160]	; (8003538 <ADC_Enable+0x108>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80034aa:	e002      	b.n	80034b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034b8:	f7fe ff68 	bl	800238c <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034be:	e028      	b.n	8003512 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff f91d 	bl	8002704 <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f901 	bl	80026dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034da:	f7fe ff57 	bl	800238c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d914      	bls.n	8003512 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d00d      	beq.n	8003512 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e007      	b.n	8003522 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d1cf      	bne.n	80034c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	8000003f 	.word	0x8000003f
 8003530:	50040300 	.word	0x50040300
 8003534:	20000000 	.word	0x20000000
 8003538:	053e2d63 	.word	0x053e2d63

0800353c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0ed      	b.n	800372a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe f92c 	bl	80017b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003570:	f7fe ff0c 	bl	800238c <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003576:	e012      	b.n	800359e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003578:	f7fe ff08 	bl	800238c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b0a      	cmp	r3, #10
 8003584:	d90b      	bls.n	800359e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2205      	movs	r2, #5
 8003596:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0c5      	b.n	800372a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0e5      	beq.n	8003578 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0202 	bic.w	r2, r2, #2
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035bc:	f7fe fee6 	bl	800238c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035c2:	e012      	b.n	80035ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c4:	f7fe fee2 	bl	800238c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b0a      	cmp	r3, #10
 80035d0:	d90b      	bls.n	80035ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e09f      	b.n	800372a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d108      	bne.n	8003612 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e007      	b.n	8003622 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7e5b      	ldrb	r3, [r3, #25]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d108      	bne.n	800363c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7e9b      	ldrb	r3, [r3, #26]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d108      	bne.n	8003666 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0220 	orr.w	r2, r2, #32
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e007      	b.n	8003676 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0220 	bic.w	r2, r2, #32
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7edb      	ldrb	r3, [r3, #27]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d108      	bne.n	8003690 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0210 	bic.w	r2, r2, #16
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e007      	b.n	80036a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0210 	orr.w	r2, r2, #16
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7f1b      	ldrb	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e007      	b.n	80036ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7f5b      	ldrb	r3, [r3, #29]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d108      	bne.n	80036e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0204 	orr.w	r2, r2, #4
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e007      	b.n	80036f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	ea42 0103 	orr.w	r1, r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	1e5a      	subs	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <LL_EXTI_EnableIT_0_31+0x20>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <LL_EXTI_EnableIT_0_31+0x20>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40010400 	.word	0x40010400

08003758 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <LL_EXTI_DisableIT_0_31+0x24>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	43db      	mvns	r3, r3
 8003768:	4904      	ldr	r1, [pc, #16]	; (800377c <LL_EXTI_DisableIT_0_31+0x24>)
 800376a:	4013      	ands	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010400 	.word	0x40010400

08003780 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4904      	ldr	r1, [pc, #16]	; (80037a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]

}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40010400 	.word	0x40010400

080037a4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	4904      	ldr	r1, [pc, #16]	; (80037c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010400 	.word	0x40010400

080037cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	4904      	ldr	r1, [pc, #16]	; (80037ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40010400 	.word	0x40010400

080037f0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	43db      	mvns	r3, r3
 8003800:	4904      	ldr	r1, [pc, #16]	; (8003814 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003802:	4013      	ands	r3, r2
 8003804:	608b      	str	r3, [r1, #8]

}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010400 	.word	0x40010400

08003818 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40010400 	.word	0x40010400

0800383c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	43db      	mvns	r3, r3
 800384c:	4904      	ldr	r1, [pc, #16]	; (8003860 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800384e:	4013      	ands	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010400 	.word	0x40010400

08003864 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6153      	str	r3, [r2, #20]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e0d1      	b.n	8003a44 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ae:	d102      	bne.n	80038b6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e0c6      	b.n	8003a44 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d115      	bne.n	80038ee <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_COMP_Init+0x1cc>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_COMP_Init+0x1cc>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6613      	str	r3, [r2, #96]	; 0x60
 80038dc:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_COMP_Init+0x1cc>)
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fd ffa9 	bl	8001840 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_COMP_Init+0x1d0>)
 8003926:	4013      	ands	r3, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	430b      	orrs	r3, r1
 8003930:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393a:	d106      	bne.n	800394a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_COMP_Init+0x1d4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a45      	ldr	r2, [pc, #276]	; (8003a58 <HAL_COMP_Init+0x1d4>)
 8003942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e005      	b.n	8003956 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <HAL_COMP_Init+0x1d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <HAL_COMP_Init+0x1d4>)
 8003950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003954:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d016      	beq.n	8003992 <HAL_COMP_Init+0x10e>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_COMP_Init+0x1d8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <HAL_COMP_Init+0x1dc>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003984:	e002      	b.n	800398c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3b01      	subs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a33      	ldr	r2, [pc, #204]	; (8003a64 <HAL_COMP_Init+0x1e0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d102      	bne.n	80039a2 <HAL_COMP_Init+0x11e>
 800399c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039a0:	e001      	b.n	80039a6 <HAL_COMP_Init+0x122>
 80039a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039a6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d037      	beq.n	8003a24 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80039c0:	6938      	ldr	r0, [r7, #16]
 80039c2:	f7ff ff03 	bl	80037cc <LL_EXTI_EnableRisingTrig_0_31>
 80039c6:	e002      	b.n	80039ce <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80039c8:	6938      	ldr	r0, [r7, #16]
 80039ca:	f7ff ff11 	bl	80037f0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80039da:	6938      	ldr	r0, [r7, #16]
 80039dc:	f7ff ff1c 	bl	8003818 <LL_EXTI_EnableFallingTrig_0_31>
 80039e0:	e002      	b.n	80039e8 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80039e2:	6938      	ldr	r0, [r7, #16]
 80039e4:	f7ff ff2a 	bl	800383c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80039e8:	6938      	ldr	r0, [r7, #16]
 80039ea:	f7ff ff3b 	bl	8003864 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80039fa:	6938      	ldr	r0, [r7, #16]
 80039fc:	f7ff fec0 	bl	8003780 <LL_EXTI_EnableEvent_0_31>
 8003a00:	e002      	b.n	8003a08 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003a02:	6938      	ldr	r0, [r7, #16]
 8003a04:	f7ff fece 	bl	80037a4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003a14:	6938      	ldr	r0, [r7, #16]
 8003a16:	f7ff fe8d 	bl	8003734 <LL_EXTI_EnableIT_0_31>
 8003a1a:	e009      	b.n	8003a30 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003a1c:	6938      	ldr	r0, [r7, #16]
 8003a1e:	f7ff fe9b 	bl	8003758 <LL_EXTI_DisableIT_0_31>
 8003a22:	e005      	b.n	8003a30 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003a24:	6938      	ldr	r0, [r7, #16]
 8003a26:	f7ff febd 	bl	80037a4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003a2a:	6938      	ldr	r0, [r7, #16]
 8003a2c:	f7ff fe94 	bl	8003758 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	ff207d03 	.word	0xff207d03
 8003a58:	40010204 	.word	0x40010204
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	053e2d63 	.word	0x053e2d63
 8003a64:	40010200 	.word	0x40010200

08003a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 0307 	and.w	r3, r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	db0a      	blt.n	8003af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	490c      	ldr	r1, [pc, #48]	; (8003b18 <__NVIC_SetPriority+0x4c>)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	0112      	lsls	r2, r2, #4
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	440b      	add	r3, r1
 8003af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af4:	e00a      	b.n	8003b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	4908      	ldr	r1, [pc, #32]	; (8003b1c <__NVIC_SetPriority+0x50>)
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	3b04      	subs	r3, #4
 8003b04:	0112      	lsls	r2, r2, #4
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	440b      	add	r3, r1
 8003b0a:	761a      	strb	r2, [r3, #24]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000e100 	.word	0xe000e100
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f1c3 0307 	rsb	r3, r3, #7
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	bf28      	it	cs
 8003b3e:	2304      	movcs	r3, #4
 8003b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d902      	bls.n	8003b50 <NVIC_EncodePriority+0x30>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3b03      	subs	r3, #3
 8003b4e:	e000      	b.n	8003b52 <NVIC_EncodePriority+0x32>
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	401a      	ands	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	43d9      	mvns	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b78:	4313      	orrs	r3, r2
         );
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3724      	adds	r7, #36	; 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b98:	d301      	bcc.n	8003b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e00f      	b.n	8003bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <SysTick_Config+0x40>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bac:	f7ff ff8e 	bl	8003acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <SysTick_Config+0x40>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bb6:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <SysTick_Config+0x40>)
 8003bb8:	2207      	movs	r2, #7
 8003bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	e000e010 	.word	0xe000e010

08003bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff47 	bl	8003a68 <__NVIC_SetPriorityGrouping>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf4:	f7ff ff5c 	bl	8003ab0 <__NVIC_GetPriorityGrouping>
 8003bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff ff8e 	bl	8003b20 <NVIC_EncodePriority>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff5d 	bl	8003acc <__NVIC_SetPriority>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffb0 	bl	8003b88 <SysTick_Config>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c42:	e166      	b.n	8003f12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	4013      	ands	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8158 	beq.w	8003f0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d005      	beq.n	8003c74 <HAL_GPIO_Init+0x40>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d130      	bne.n	8003cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003caa:	2201      	movs	r2, #1
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 0201 	and.w	r2, r3, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d017      	beq.n	8003d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d123      	bne.n	8003d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	08da      	lsrs	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3208      	adds	r2, #8
 8003d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	220f      	movs	r2, #15
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	08da      	lsrs	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3208      	adds	r2, #8
 8003d60:	6939      	ldr	r1, [r7, #16]
 8003d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	2203      	movs	r2, #3
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0203 	and.w	r2, r3, #3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80b2 	beq.w	8003f0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da8:	4b61      	ldr	r3, [pc, #388]	; (8003f30 <HAL_GPIO_Init+0x2fc>)
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	4a60      	ldr	r2, [pc, #384]	; (8003f30 <HAL_GPIO_Init+0x2fc>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6613      	str	r3, [r2, #96]	; 0x60
 8003db4:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <HAL_GPIO_Init+0x2fc>)
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dc0:	4a5c      	ldr	r2, [pc, #368]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dea:	d02b      	beq.n	8003e44 <HAL_GPIO_Init+0x210>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_GPIO_Init+0x304>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d025      	beq.n	8003e40 <HAL_GPIO_Init+0x20c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a51      	ldr	r2, [pc, #324]	; (8003f3c <HAL_GPIO_Init+0x308>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d01f      	beq.n	8003e3c <HAL_GPIO_Init+0x208>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a50      	ldr	r2, [pc, #320]	; (8003f40 <HAL_GPIO_Init+0x30c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d019      	beq.n	8003e38 <HAL_GPIO_Init+0x204>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a4f      	ldr	r2, [pc, #316]	; (8003f44 <HAL_GPIO_Init+0x310>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_GPIO_Init+0x200>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <HAL_GPIO_Init+0x314>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00d      	beq.n	8003e30 <HAL_GPIO_Init+0x1fc>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a4d      	ldr	r2, [pc, #308]	; (8003f4c <HAL_GPIO_Init+0x318>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <HAL_GPIO_Init+0x1f8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a4c      	ldr	r2, [pc, #304]	; (8003f50 <HAL_GPIO_Init+0x31c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d101      	bne.n	8003e28 <HAL_GPIO_Init+0x1f4>
 8003e24:	2307      	movs	r3, #7
 8003e26:	e00e      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	e00c      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e2c:	2306      	movs	r3, #6
 8003e2e:	e00a      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e30:	2305      	movs	r3, #5
 8003e32:	e008      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e34:	2304      	movs	r3, #4
 8003e36:	e006      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e004      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e002      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e44:	2300      	movs	r3, #0
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	f002 0203 	and.w	r2, r2, #3
 8003e4c:	0092      	lsls	r2, r2, #2
 8003e4e:	4093      	lsls	r3, r2
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e56:	4937      	ldr	r1, [pc, #220]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e64:	4b3b      	ldr	r3, [pc, #236]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e88:	4a32      	ldr	r2, [pc, #200]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eb2:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003eb8:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f06:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <HAL_GPIO_Init+0x320>)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f47f ae91 	bne.w	8003c44 <HAL_GPIO_Init+0x10>
  }
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40010000 	.word	0x40010000
 8003f38:	48000400 	.word	0x48000400
 8003f3c:	48000800 	.word	0x48000800
 8003f40:	48000c00 	.word	0x48000c00
 8003f44:	48001000 	.word	0x48001000
 8003f48:	48001400 	.word	0x48001400
 8003f4c:	48001800 	.word	0x48001800
 8003f50:	48001c00 	.word	0x48001c00
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
 8003f64:	4613      	mov	r3, r2
 8003f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f68:	787b      	ldrb	r3, [r7, #1]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40007000 	.word	0x40007000

08003fa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d102      	bne.n	8003fc0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fbe:	e00b      	b.n	8003fd8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fce:	d102      	bne.n	8003fd6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fd4:	e000      	b.n	8003fd8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003fd6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d141      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff6:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d131      	bne.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004004:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	4a46      	ldr	r2, [pc, #280]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004014:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800401c:	4a41      	ldr	r2, [pc, #260]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2232      	movs	r2, #50	; 0x32
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a3f      	ldr	r2, [pc, #252]	; (800412c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	0c9b      	lsrs	r3, r3, #18
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	e002      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d102      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f2      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d158      	bne.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e057      	b.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004068:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406e:	4a2d      	ldr	r2, [pc, #180]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004078:	e04d      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d141      	bne.n	8004106 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d131      	bne.n	80040f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004096:	4a23      	ldr	r2, [pc, #140]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2232      	movs	r2, #50	; 0x32
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	0c9b      	lsrs	r3, r3, #18
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c6:	e002      	b.n	80040ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d102      	bne.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f2      	bne.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040e2:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d112      	bne.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e011      	b.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004104:	e007      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800410e:	4a05      	ldr	r2, [pc, #20]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004114:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40007000 	.word	0x40007000
 8004128:	20000000 	.word	0x20000000
 800412c:	431bde83 	.word	0x431bde83

08004130 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <HAL_PWREx_EnableVddIO2+0x1c>)
 800413a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413e:	6053      	str	r3, [r2, #4]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40007000 	.word	0x40007000

08004150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f000 bc08 	b.w	8004974 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004164:	4b96      	ldr	r3, [pc, #600]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416e:	4b94      	ldr	r3, [pc, #592]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80e4 	beq.w	800434e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_RCC_OscConfig+0x4c>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	f040 808b 	bne.w	80042aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 8087 	bne.w	80042aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800419c:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x64>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e3df      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_RCC_OscConfig+0x7e>
 80041c4:	4b7e      	ldr	r3, [pc, #504]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041cc:	e005      	b.n	80041da <HAL_RCC_OscConfig+0x8a>
 80041ce:	4b7c      	ldr	r3, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041da:	4293      	cmp	r3, r2
 80041dc:	d223      	bcs.n	8004226 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fdcc 	bl	8004d80 <RCC_SetFlashLatencyFromMSIRange>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e3c0      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f2:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a72      	ldr	r2, [pc, #456]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80041f8:	f043 0308 	orr.w	r3, r3, #8
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	496d      	ldr	r1, [pc, #436]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004210:	4b6b      	ldr	r3, [pc, #428]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	4968      	ldr	r1, [pc, #416]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	e025      	b.n	8004272 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004226:	4b66      	ldr	r3, [pc, #408]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a65      	ldr	r2, [pc, #404]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800422c:	f043 0308 	orr.w	r3, r3, #8
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4960      	ldr	r1, [pc, #384]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004244:	4b5e      	ldr	r3, [pc, #376]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	495b      	ldr	r1, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fd8c 	bl	8004d80 <RCC_SetFlashLatencyFromMSIRange>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e380      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004272:	f000 fcc1 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	4950      	ldr	r1, [pc, #320]	; (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a4e      	ldr	r2, [pc, #312]	; (80043c8 <HAL_RCC_OscConfig+0x278>)
 8004290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004292:	4b4e      	ldr	r3, [pc, #312]	; (80043cc <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe f828 	bl	80022ec <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d052      	beq.n	800434c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	e364      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d032      	beq.n	8004318 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042b2:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a42      	ldr	r2, [pc, #264]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042be:	f7fe f865 	bl	800238c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c6:	f7fe f861 	bl	800238c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e34d      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042e4:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a35      	ldr	r2, [pc, #212]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042ea:	f043 0308 	orr.w	r3, r3, #8
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4930      	ldr	r1, [pc, #192]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	492b      	ldr	r1, [pc, #172]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004312:	4313      	orrs	r3, r2
 8004314:	604b      	str	r3, [r1, #4]
 8004316:	e01a      	b.n	800434e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004318:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004324:	f7fe f832 	bl	800238c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800432c:	f7fe f82e 	bl	800238c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e31a      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1dc>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d073      	beq.n	8004442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d005      	beq.n	800436c <HAL_RCC_OscConfig+0x21c>
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d10e      	bne.n	8004384 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d063      	beq.n	8004440 <HAL_RCC_OscConfig+0x2f0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d15f      	bne.n	8004440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e2f7      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d106      	bne.n	800439c <HAL_RCC_OscConfig+0x24c>
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e025      	b.n	80043e8 <HAL_RCC_OscConfig+0x298>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d114      	bne.n	80043d0 <HAL_RCC_OscConfig+0x280>
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a02      	ldr	r2, [pc, #8]	; (80043c0 <HAL_RCC_OscConfig+0x270>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e013      	b.n	80043e8 <HAL_RCC_OscConfig+0x298>
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08008dd8 	.word	0x08008dd8
 80043c8:	20000000 	.word	0x20000000
 80043cc:	20000004 	.word	0x20000004
 80043d0:	4ba0      	ldr	r3, [pc, #640]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a9f      	ldr	r2, [pc, #636]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b9d      	ldr	r3, [pc, #628]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a9c      	ldr	r2, [pc, #624]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd ffcc 	bl	800238c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fd ffc8 	bl	800238c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e2b4      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440a:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2a8>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd ffb8 	bl	800238c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd ffb4 	bl	800238c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e2a0      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x2d0>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d060      	beq.n	8004510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d005      	beq.n	8004460 <HAL_RCC_OscConfig+0x310>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d119      	bne.n	800448e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d116      	bne.n	800448e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004460:	4b7c      	ldr	r3, [pc, #496]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_OscConfig+0x328>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e27d      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004478:	4b76      	ldr	r3, [pc, #472]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	4973      	ldr	r1, [pc, #460]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448c:	e040      	b.n	8004510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d023      	beq.n	80044de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004496:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6e      	ldr	r2, [pc, #440]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fd ff73 	bl	800238c <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd ff6f 	bl	800238c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e25b      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044bc:	4b65      	ldr	r3, [pc, #404]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b62      	ldr	r3, [pc, #392]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	495f      	ldr	r1, [pc, #380]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
 80044dc:	e018      	b.n	8004510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5c      	ldr	r2, [pc, #368]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80044e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fd ff4f 	bl	800238c <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fd ff4b 	bl	800238c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e237      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d03c      	beq.n	8004596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01c      	beq.n	800455e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452a:	4a4a      	ldr	r2, [pc, #296]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fd ff2a 	bl	800238c <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453c:	f7fd ff26 	bl	800238c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e212      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ef      	beq.n	800453c <HAL_RCC_OscConfig+0x3ec>
 800455c:	e01b      	b.n	8004596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004564:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fd ff0d 	bl	800238c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004576:	f7fd ff09 	bl	800238c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e1f5      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004588:	4b32      	ldr	r3, [pc, #200]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 800458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ef      	bne.n	8004576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80a6 	beq.w	80046f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	4a26      	ldr	r2, [pc, #152]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045be:	6593      	str	r3, [r2, #88]	; 0x58
 80045c0:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045cc:	2301      	movs	r3, #1
 80045ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d0:	4b21      	ldr	r3, [pc, #132]	; (8004658 <HAL_RCC_OscConfig+0x508>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d118      	bne.n	800460e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045dc:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_RCC_OscConfig+0x508>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <HAL_RCC_OscConfig+0x508>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e8:	f7fd fed0 	bl	800238c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f0:	f7fd fecc 	bl	800238c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e1b8      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x508>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <HAL_RCC_OscConfig+0x4d8>
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004626:	e029      	b.n	800467c <HAL_RCC_OscConfig+0x52c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b05      	cmp	r3, #5
 800462e:	d115      	bne.n	800465c <HAL_RCC_OscConfig+0x50c>
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	4a03      	ldr	r2, [pc, #12]	; (8004654 <HAL_RCC_OscConfig+0x504>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004650:	e014      	b.n	800467c <HAL_RCC_OscConfig+0x52c>
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	40007000 	.word	0x40007000
 800465c:	4b9d      	ldr	r3, [pc, #628]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4a9c      	ldr	r2, [pc, #624]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466c:	4b99      	ldr	r3, [pc, #612]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	4a98      	ldr	r2, [pc, #608]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d016      	beq.n	80046b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd fe82 	bl	800238c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fd fe7e 	bl	800238c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e168      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a2:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ed      	beq.n	800468c <HAL_RCC_OscConfig+0x53c>
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fd fe6b 	bl	800238c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fd fe67 	bl	800238c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e151      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d0:	4b80      	ldr	r3, [pc, #512]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ed      	bne.n	80046ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046de:	7ffb      	ldrb	r3, [r7, #31]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	4b7b      	ldr	r3, [pc, #492]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	4a7a      	ldr	r2, [pc, #488]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d03c      	beq.n	8004776 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01c      	beq.n	800473e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004704:	4b73      	ldr	r3, [pc, #460]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470a:	4a72      	ldr	r2, [pc, #456]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fe3a 	bl	800238c <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800471c:	f7fd fe36 	bl	800238c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e122      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800472e:	4b69      	ldr	r3, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ef      	beq.n	800471c <HAL_RCC_OscConfig+0x5cc>
 800473c:	e01b      	b.n	8004776 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800473e:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004744:	4a63      	ldr	r2, [pc, #396]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fd fe1d 	bl	800238c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004756:	f7fd fe19 	bl	800238c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e105      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004768:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800476a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ef      	bne.n	8004756 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80f9 	beq.w	8004972 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	2b02      	cmp	r3, #2
 8004786:	f040 80cf 	bne.w	8004928 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800478a:	4b52      	ldr	r3, [pc, #328]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f003 0203 	and.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	429a      	cmp	r2, r3
 800479c:	d12c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	3b01      	subs	r3, #1
 80047aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d123      	bne.n	80047f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d11b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d113      	bne.n	80047f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	3b01      	subs	r3, #1
 80047de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d109      	bne.n	80047f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	3b01      	subs	r3, #1
 80047f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d071      	beq.n	80048dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d068      	beq.n	80048d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047fe:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800480a:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0ac      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800481a:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004824:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004826:	f7fd fdb1 	bl	800238c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fd fdad 	bl	800238c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e099      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <HAL_RCC_OscConfig+0x788>)
 8004852:	4013      	ands	r3, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800485c:	3a01      	subs	r2, #1
 800485e:	0112      	lsls	r2, r2, #4
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004866:	0212      	lsls	r2, r2, #8
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800486e:	0852      	lsrs	r2, r2, #1
 8004870:	3a01      	subs	r2, #1
 8004872:	0552      	lsls	r2, r2, #21
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800487a:	0852      	lsrs	r2, r2, #1
 800487c:	3a01      	subs	r2, #1
 800487e:	0652      	lsls	r2, r2, #25
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004886:	06d2      	lsls	r2, r2, #27
 8004888:	430a      	orrs	r2, r1
 800488a:	4912      	ldr	r1, [pc, #72]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800488c:	4313      	orrs	r3, r2
 800488e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004890:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0f      	ldr	r2, [pc, #60]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 80048a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048a8:	f7fd fd70 	bl	800238c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd fd6c 	bl	800238c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e058      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <HAL_RCC_OscConfig+0x784>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ce:	e050      	b.n	8004972 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e04f      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
 80048d4:	40021000 	.word	0x40021000
 80048d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d144      	bne.n	8004972 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048e8:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a23      	ldr	r2, [pc, #140]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 80048ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048f4:	4b21      	ldr	r3, [pc, #132]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004900:	f7fd fd44 	bl	800238c <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004908:	f7fd fd40 	bl	800238c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e02c      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x7b8>
 8004926:	e024      	b.n	8004972 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b0c      	cmp	r3, #12
 800492c:	d01f      	beq.n	800496e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 8004934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd fd27 	bl	800238c <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fd fd23 	bl	800238c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e00f      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	4905      	ldr	r1, [pc, #20]	; (800497c <HAL_RCC_OscConfig+0x82c>)
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x830>)
 8004968:	4013      	ands	r3, r2
 800496a:	60cb      	str	r3, [r1, #12]
 800496c:	e001      	b.n	8004972 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	feeefffc 	.word	0xfeeefffc

08004984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e11d      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b90      	ldr	r3, [pc, #576]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 020f 	bic.w	r2, r3, #15
 80049b2:	498b      	ldr	r1, [pc, #556]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b89      	ldr	r3, [pc, #548]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e105      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	4b81      	ldr	r3, [pc, #516]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d908      	bls.n	80049fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e8:	4b7e      	ldr	r3, [pc, #504]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	497b      	ldr	r1, [pc, #492]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d079      	beq.n	8004afa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d11e      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	4b75      	ldr	r3, [pc, #468]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0dc      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a1e:	f000 fa09 	bl	8004e34 <RCC_GetSysClockFreqFromPLLSource>
 8004a22:	4603      	mov	r3, r0
 8004a24:	4a70      	ldr	r2, [pc, #448]	; (8004be8 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d946      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a2a:	4b6e      	ldr	r3, [pc, #440]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d140      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a36:	4b6b      	ldr	r3, [pc, #428]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3e:	4a69      	ldr	r2, [pc, #420]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e035      	b.n	8004ab8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a54:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d115      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b9      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a6c:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0ad      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0a5      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004a8c:	f000 f8b4 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4a55      	ldr	r2, [pc, #340]	; (8004be8 <HAL_RCC_ClockConfig+0x264>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d90f      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a98:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aa4:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aac:	4a4d      	ldr	r2, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ab8:	4b4a      	ldr	r3, [pc, #296]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 0203 	bic.w	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4947      	ldr	r1, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aca:	f7fd fc5f 	bl	800238c <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad2:	f7fd fc5b 	bl	800238c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e077      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae8:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 020c 	and.w	r2, r3, #12
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d1eb      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b00:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a37      	ldr	r2, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d208      	bcs.n	8004b3a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	492b      	ldr	r1, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3a:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d210      	bcs.n	8004b6a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 020f 	bic.w	r2, r3, #15
 8004b50:	4923      	ldr	r1, [pc, #140]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e036      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4918      	ldr	r1, [pc, #96]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4910      	ldr	r1, [pc, #64]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba8:	f000 f826 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	490c      	ldr	r1, [pc, #48]	; (8004bec <HAL_RCC_ClockConfig+0x268>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x26c>)
 8004bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x270>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fd fb8d 	bl	80022ec <HAL_InitTick>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
 8004be8:	04c4b400 	.word	0x04c4b400
 8004bec:	08008dd8 	.word	0x08008dd8
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c06:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x34>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d121      	bne.n	8004c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d11e      	bne.n	8004c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c2c:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c38:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e005      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c48:	4b2d      	ldr	r3, [pc, #180]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c54:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e004      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c7c:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d134      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c86:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d003      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8004c9c:	e005      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ca0:	617b      	str	r3, [r7, #20]
      break;
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca6:	617b      	str	r3, [r7, #20]
      break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	617b      	str	r3, [r7, #20]
      break;
 8004cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	3301      	adds	r3, #1
 8004cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	fb03 f202 	mul.w	r2, r3, r2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	0e5b      	lsrs	r3, r3, #25
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	08008df0 	.word	0x08008df0
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	007a1200 	.word	0x007a1200

08004d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000000 	.word	0x20000000

08004d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d2c:	f7ff fff0 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4904      	ldr	r1, [pc, #16]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	08008de8 	.word	0x08008de8

08004d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d58:	f7ff ffda 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0adb      	lsrs	r3, r3, #11
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4904      	ldr	r1, [pc, #16]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	08008de8 	.word	0x08008de8

08004d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d98:	f7ff f906 	bl	8003fa8 <HAL_PWREx_GetVoltageRange>
 8004d9c:	6178      	str	r0, [r7, #20]
 8004d9e:	e014      	b.n	8004dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
 8004dac:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004db8:	f7ff f8f6 	bl	8003fa8 <HAL_PWREx_GetVoltageRange>
 8004dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d10b      	bne.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d913      	bls.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2ba0      	cmp	r3, #160	; 0xa0
 8004ddc:	d902      	bls.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dde:	2302      	movs	r3, #2
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e00d      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004de4:	2301      	movs	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e00a      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b7f      	cmp	r3, #127	; 0x7f
 8004dee:	d902      	bls.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004df0:	2302      	movs	r3, #2
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e004      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d101      	bne.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 020f 	bic.w	r2, r3, #15
 8004e08:	4909      	ldr	r1, [pc, #36]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d001      	beq.n	8004e22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40022000 	.word	0x40022000

08004e34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d00b      	beq.n	8004e62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d825      	bhi.n	8004e9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d008      	beq.n	8004e68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d11f      	bne.n	8004e9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e5e:	613b      	str	r3, [r7, #16]
    break;
 8004e60:	e01f      	b.n	8004ea2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004e62:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004e64:	613b      	str	r3, [r7, #16]
    break;
 8004e66:	e01c      	b.n	8004ea2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d107      	bne.n	8004e84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e005      	b.n	8004e90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004e90:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e98:	613b      	str	r3, [r7, #16]
    break;
 8004e9a:	e002      	b.n	8004ea2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
    break;
 8004ea0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	3301      	adds	r3, #1
 8004eae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	fb03 f202 	mul.w	r2, r3, r2
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	0e5b      	lsrs	r3, r3, #25
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ee2:	683b      	ldr	r3, [r7, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	08008df0 	.word	0x08008df0

08004f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f08:	2300      	movs	r3, #0
 8004f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d040      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d02a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d825      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d026      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d821      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d006      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d81d      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d010      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f40:	e018      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f42:	4b89      	ldr	r3, [pc, #548]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	4a88      	ldr	r2, [pc, #544]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f4e:	e015      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 fa34 	bl	80063c4 <RCCEx_PLLSAI1_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f60:	e00c      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3320      	adds	r3, #32
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fb1f 	bl	80065ac <RCCEx_PLLSAI2_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	74fb      	strb	r3, [r7, #19]
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f82:	4b79      	ldr	r3, [pc, #484]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f88:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f90:	4975      	ldr	r1, [pc, #468]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f98:	e001      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d047      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	d030      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb8:	d82a      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fbe:	d02a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc4:	d824      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fca:	d008      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd0:	d81e      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	d010      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fdc:	e018      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fde:	4b62      	ldr	r3, [pc, #392]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4a61      	ldr	r2, [pc, #388]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fea:	e015      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f9e6 	bl	80063c4 <RCCEx_PLLSAI1_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ffc:	e00c      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3320      	adds	r3, #32
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fad1 	bl	80065ac <RCCEx_PLLSAI2_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	74fb      	strb	r3, [r7, #19]
      break;
 8005014:	e000      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800501e:	4b52      	ldr	r3, [pc, #328]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	494e      	ldr	r1, [pc, #312]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005034:	e001      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	7cfb      	ldrb	r3, [r7, #19]
 8005038:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 809f 	beq.w	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005048:	2300      	movs	r3, #0
 800504a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800504c:	4b46      	ldr	r3, [pc, #280]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	4a40      	ldr	r2, [pc, #256]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6593      	str	r3, [r2, #88]	; 0x58
 800506e:	4b3e      	ldr	r3, [pc, #248]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507e:	4b3b      	ldr	r3, [pc, #236]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a3a      	ldr	r2, [pc, #232]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508a:	f7fd f97f 	bl	800238c <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005090:	e009      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fd f97b 	bl	800238c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d902      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	74fb      	strb	r3, [r7, #19]
        break;
 80050a4:	e005      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050a6:	4b31      	ldr	r3, [pc, #196]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ef      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d15b      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050b8:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01f      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d019      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e2:	4b21      	ldr	r3, [pc, #132]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005102:	4a19      	ldr	r2, [pc, #100]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fd f93a 	bl	800238c <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	e00b      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fd f936 	bl	800238c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d902      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	74fb      	strb	r3, [r7, #19]
            break;
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ec      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10c      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	4903      	ldr	r1, [pc, #12]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005160:	e008      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005162:	7cfb      	ldrb	r3, [r7, #19]
 8005164:	74bb      	strb	r3, [r7, #18]
 8005166:	e005      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005174:	7c7b      	ldrb	r3, [r7, #17]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517a:	4ba0      	ldr	r3, [pc, #640]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	4a9f      	ldr	r2, [pc, #636]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005192:	4b9a      	ldr	r3, [pc, #616]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f023 0203 	bic.w	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	4996      	ldr	r1, [pc, #600]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b4:	4b91      	ldr	r3, [pc, #580]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f023 020c 	bic.w	r2, r3, #12
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	498e      	ldr	r1, [pc, #568]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051d6:	4b89      	ldr	r3, [pc, #548]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	4985      	ldr	r1, [pc, #532]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051f8:	4b80      	ldr	r3, [pc, #512]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	497d      	ldr	r1, [pc, #500]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800521a:	4b78      	ldr	r3, [pc, #480]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005228:	4974      	ldr	r1, [pc, #464]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800523c:	4b6f      	ldr	r3, [pc, #444]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524a:	496c      	ldr	r1, [pc, #432]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800525e:	4b67      	ldr	r3, [pc, #412]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526c:	4963      	ldr	r1, [pc, #396]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005280:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528e:	495b      	ldr	r1, [pc, #364]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052a2:	4b56      	ldr	r3, [pc, #344]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	4952      	ldr	r1, [pc, #328]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052c4:	4b4d      	ldr	r3, [pc, #308]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d2:	494a      	ldr	r1, [pc, #296]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052e6:	4b45      	ldr	r3, [pc, #276]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	4941      	ldr	r1, [pc, #260]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005308:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	4939      	ldr	r1, [pc, #228]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d028      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800532a:	4b34      	ldr	r3, [pc, #208]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005338:	4930      	ldr	r1, [pc, #192]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005348:	d106      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534a:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4a2b      	ldr	r2, [pc, #172]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005354:	60d3      	str	r3, [r2, #12]
 8005356:	e011      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005360:	d10c      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f001 f82b 	bl	80063c4 <RCCEx_PLLSAI1_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d04d      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005390:	d108      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005392:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005398:	4a18      	ldr	r2, [pc, #96]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800539e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053a2:	e012      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80053a4:	4b15      	ldr	r3, [pc, #84]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c2:	490e      	ldr	r1, [pc, #56]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053d2:	d106      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053de:	60d3      	str	r3, [r2, #12]
 80053e0:	e020      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ea:	d109      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a02      	ldr	r2, [pc, #8]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f6:	60d3      	str	r3, [r2, #12]
 80053f8:	e014      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005408:	d10c      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	2101      	movs	r1, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f000 ffd7 	bl	80063c4 <RCCEx_PLLSAI1_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d028      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005430:	4b4a      	ldr	r3, [pc, #296]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543e:	4947      	ldr	r1, [pc, #284]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800544e:	d106      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4a41      	ldr	r2, [pc, #260]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545a:	60d3      	str	r3, [r2, #12]
 800545c:	e011      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005462:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005466:	d10c      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	2101      	movs	r1, #1
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ffa8 	bl	80063c4 <RCCEx_PLLSAI1_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800548e:	4b33      	ldr	r3, [pc, #204]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800549e:	492f      	ldr	r1, [pc, #188]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b0:	d10c      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 ff83 	bl	80063c4 <RCCEx_PLLSAI1_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054d8:	4b20      	ldr	r3, [pc, #128]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054de:	f023 0204 	bic.w	r2, r3, #4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e8:	491c      	ldr	r1, [pc, #112]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054fc:	4b17      	ldr	r3, [pc, #92]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005502:	f023 0218 	bic.w	r2, r3, #24
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	4913      	ldr	r1, [pc, #76]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d017      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005530:	490a      	ldr	r1, [pc, #40]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005542:	d105      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800554a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800554e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005550:	7cbb      	ldrb	r3, [r7, #18]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000

08005560 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005572:	d13e      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005574:	4bb6      	ldr	r3, [pc, #728]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005586:	d028      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558e:	f200 86f4 	bhi.w	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d005      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a0:	d00e      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80055a2:	f000 beea 	b.w	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055a6:	4baa      	ldr	r3, [pc, #680]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	f040 86e4 	bne.w	800637e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ba:	61fb      	str	r3, [r7, #28]
      break;
 80055bc:	f000 bedf 	b.w	800637e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80055c0:	4ba3      	ldr	r3, [pc, #652]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	f040 86d9 	bne.w	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80055d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055d4:	61fb      	str	r3, [r7, #28]
      break;
 80055d6:	f000 bed4 	b.w	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055da:	4b9d      	ldr	r3, [pc, #628]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e6:	f040 86ce 	bne.w	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80055ea:	4b9a      	ldr	r3, [pc, #616]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055ec:	61fb      	str	r3, [r7, #28]
      break;
 80055ee:	f000 beca 	b.w	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f2:	4b97      	ldr	r3, [pc, #604]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d036      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d840      	bhi.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d020      	beq.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005614:	e039      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005616:	4b8e      	ldr	r3, [pc, #568]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d116      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005622:	4b8b      	ldr	r3, [pc, #556]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800562e:	4b88      	ldr	r3, [pc, #544]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	e005      	b.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800563a:	4b85      	ldr	r3, [pc, #532]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800563c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	4a84      	ldr	r2, [pc, #528]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800564e:	e01f      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
      break;
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005656:	4b7e      	ldr	r3, [pc, #504]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005662:	d102      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005664:	4b7d      	ldr	r3, [pc, #500]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005666:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005668:	e012      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
      break;
 800566e:	e00f      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005670:	4b77      	ldr	r3, [pc, #476]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567c:	d102      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800567e:	4b78      	ldr	r3, [pc, #480]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005680:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005682:	e005      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
      break;
 8005688:	e002      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
      break;
 800568e:	bf00      	nop
    }

    switch(PeriphClk)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005696:	f000 8606 	beq.w	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056a0:	f200 8673 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056aa:	f000 8469 	beq.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b4:	f200 8669 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	f000 8531 	beq.w	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c8:	f200 865f 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056d2:	f000 8187 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056dc:	f200 8655 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056e6:	f000 80cd 	beq.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f0:	f200 864b 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fa:	f000 8430 	beq.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	f200 8641 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570e:	f000 83e4 	beq.w	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005718:	f200 8637 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005722:	f000 80af 	beq.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	f200 862d 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005736:	f000 809d 	beq.w	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	f200 8623 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574a:	f000 808b 	beq.w	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005754:	f200 8619 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575e:	f000 8554 	beq.w	800620a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005768:	f200 860f 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005772:	f000 8500 	beq.w	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577c:	f200 8605 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005786:	f000 84a1 	beq.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005790:	f200 85fb 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	f000 846c 	beq.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	f200 85f3 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d84c      	bhi.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 85ec 	beq.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	2b1f      	cmp	r3, #31
 80057b8:	f200 85e7 	bhi.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	08005bd9 	.word	0x08005bd9
 80057c8:	08005c47 	.word	0x08005c47
 80057cc:	0800638b 	.word	0x0800638b
 80057d0:	08005cdb 	.word	0x08005cdb
 80057d4:	0800638b 	.word	0x0800638b
 80057d8:	0800638b 	.word	0x0800638b
 80057dc:	0800638b 	.word	0x0800638b
 80057e0:	08005d53 	.word	0x08005d53
 80057e4:	0800638b 	.word	0x0800638b
 80057e8:	0800638b 	.word	0x0800638b
 80057ec:	0800638b 	.word	0x0800638b
 80057f0:	0800638b 	.word	0x0800638b
 80057f4:	0800638b 	.word	0x0800638b
 80057f8:	0800638b 	.word	0x0800638b
 80057fc:	0800638b 	.word	0x0800638b
 8005800:	08005dd7 	.word	0x08005dd7
 8005804:	0800638b 	.word	0x0800638b
 8005808:	0800638b 	.word	0x0800638b
 800580c:	0800638b 	.word	0x0800638b
 8005810:	0800638b 	.word	0x0800638b
 8005814:	0800638b 	.word	0x0800638b
 8005818:	0800638b 	.word	0x0800638b
 800581c:	0800638b 	.word	0x0800638b
 8005820:	0800638b 	.word	0x0800638b
 8005824:	0800638b 	.word	0x0800638b
 8005828:	0800638b 	.word	0x0800638b
 800582c:	0800638b 	.word	0x0800638b
 8005830:	0800638b 	.word	0x0800638b
 8005834:	0800638b 	.word	0x0800638b
 8005838:	0800638b 	.word	0x0800638b
 800583c:	0800638b 	.word	0x0800638b
 8005840:	08005e59 	.word	0x08005e59
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	f000 83e8 	beq.w	800601c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800584c:	f000 bd9d 	b.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005850:	40021000 	.word	0x40021000
 8005854:	0003d090 	.word	0x0003d090
 8005858:	08008df0 	.word	0x08008df0
 800585c:	00f42400 	.word	0x00f42400
 8005860:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800586a:	f000 ff93 	bl	8006794 <RCCEx_GetSAIxPeriphCLKFreq>
 800586e:	61f8      	str	r0, [r7, #28]
      break;
 8005870:	f000 bd8e 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800587a:	f000 ff8b 	bl	8006794 <RCCEx_GetSAIxPeriphCLKFreq>
 800587e:	61f8      	str	r0, [r7, #28]
      break;
 8005880:	f000 bd86 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005884:	4b9a      	ldr	r3, [pc, #616]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005896:	d015      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800589e:	f200 8092 	bhi.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a8:	d029      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b0:	f200 8089 	bhi.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d07b      	beq.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058c0:	d04a      	beq.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80058c2:	e080      	b.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80058c4:	4b8a      	ldr	r3, [pc, #552]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d17d      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80058d0:	4b87      	ldr	r3, [pc, #540]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80058dc:	4b84      	ldr	r3, [pc, #528]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	e005      	b.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80058e8:	4b81      	ldr	r3, [pc, #516]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ee:	0a1b      	lsrs	r3, r3, #8
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	4a7f      	ldr	r2, [pc, #508]	; (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80058f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fa:	61fb      	str	r3, [r7, #28]
          break;
 80058fc:	e066      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058fe:	4b7c      	ldr	r3, [pc, #496]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800590a:	d162      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800590c:	4b78      	ldr	r3, [pc, #480]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005918:	d15b      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800591a:	4b75      	ldr	r3, [pc, #468]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005924:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	fb03 f202 	mul.w	r2, r3, r2
 800592e:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	3301      	adds	r3, #1
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005940:	4b6b      	ldr	r3, [pc, #428]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	0d5b      	lsrs	r3, r3, #21
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	3301      	adds	r3, #1
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	61fb      	str	r3, [r7, #28]
          break;
 8005956:	e03c      	b.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005958:	4b65      	ldr	r3, [pc, #404]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005964:	d138      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005966:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005972:	d131      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005974:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	fb03 f202 	mul.w	r2, r3, r2
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	3301      	adds	r3, #1
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800599a:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	0d5b      	lsrs	r3, r3, #21
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	3301      	adds	r3, #1
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ae:	61fb      	str	r3, [r7, #28]
          break;
 80059b0:	e012      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80059b2:	4b4f      	ldr	r3, [pc, #316]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d10e      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80059c0:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80059c2:	61fb      	str	r3, [r7, #28]
          break;
 80059c4:	e00b      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80059c6:	bf00      	nop
 80059c8:	f000 bce2 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059cc:	bf00      	nop
 80059ce:	f000 bcdf 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059d2:	bf00      	nop
 80059d4:	f000 bcdc 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059d8:	bf00      	nop
 80059da:	f000 bcd9 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059de:	bf00      	nop
        break;
 80059e0:	f000 bcd6 	b.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80059e4:	4b42      	ldr	r3, [pc, #264]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f2:	d13d      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059f4:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a00:	f040 84c5 	bne.w	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005a04:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	f040 84bd 	bne.w	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a14:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	fb03 f202 	mul.w	r2, r3, r2
 8005a28:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	3301      	adds	r3, #1
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a3a:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	0edb      	lsrs	r3, r3, #27
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005a58:	2311      	movs	r3, #17
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e001      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005a5e:	2307      	movs	r3, #7
 8005a60:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
      break;
 8005a6c:	f000 bc8f 	b.w	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005a70:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a82:	d016      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a8a:	f200 809b 	bhi.w	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d032      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9c:	f200 8092 	bhi.w	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8084 	beq.w	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aae:	d052      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005ab0:	e088      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	f040 8084 	bne.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	4a03      	ldr	r2, [pc, #12]	; (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aea:	61fb      	str	r3, [r7, #28]
          break;
 8005aec:	e06c      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	08008df0 	.word	0x08008df0
 8005af8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b08:	d160      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005b0a:	4ba2      	ldr	r3, [pc, #648]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b16:	d159      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b18:	4b9e      	ldr	r3, [pc, #632]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b22:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	fb03 f202 	mul.w	r2, r3, r2
 8005b2c:	4b99      	ldr	r3, [pc, #612]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3301      	adds	r3, #1
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005b3e:	4b95      	ldr	r3, [pc, #596]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	0d5b      	lsrs	r3, r3, #21
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	61fb      	str	r3, [r7, #28]
          break;
 8005b54:	e03a      	b.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005b56:	4b8f      	ldr	r3, [pc, #572]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b62:	d135      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005b64:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b70:	d12e      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b72:	4b88      	ldr	r3, [pc, #544]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	fb03 f202 	mul.w	r2, r3, r2
 8005b86:	4b83      	ldr	r3, [pc, #524]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	3301      	adds	r3, #1
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005b98:	4b7e      	ldr	r3, [pc, #504]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	0d5b      	lsrs	r3, r3, #21
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	61fb      	str	r3, [r7, #28]
          break;
 8005bae:	e00f      	b.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005bb0:	4b78      	ldr	r3, [pc, #480]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005bbe:	4b76      	ldr	r3, [pc, #472]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005bc0:	61fb      	str	r3, [r7, #28]
          break;
 8005bc2:	e007      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005bc4:	bf00      	nop
 8005bc6:	e3e2      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bc8:	bf00      	nop
 8005bca:	e3e0      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bcc:	bf00      	nop
 8005bce:	e3de      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bd0:	bf00      	nop
 8005bd2:	e3dc      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bd4:	bf00      	nop
      break;
 8005bd6:	e3da      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bd8:	4b6e      	ldr	r3, [pc, #440]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d827      	bhi.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c09 	.word	0x08005c09
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c25 	.word	0x08005c25
          frequency = HAL_RCC_GetPCLK2Freq();
 8005c00:	f7ff f8a8 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8005c04:	61f8      	str	r0, [r7, #28]
          break;
 8005c06:	e01d      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c08:	f7fe fff6 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005c0c:	61f8      	str	r0, [r7, #28]
          break;
 8005c0e:	e019      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c10:	4b60      	ldr	r3, [pc, #384]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1c:	d10f      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c20:	61fb      	str	r3, [r7, #28]
          break;
 8005c22:	e00c      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c24:	4b5b      	ldr	r3, [pc, #364]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d107      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c36:	61fb      	str	r3, [r7, #28]
          break;
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005c3a:	bf00      	nop
 8005c3c:	e3a8      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c3e:	bf00      	nop
 8005c40:	e3a6      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c42:	bf00      	nop
        break;
 8005c44:	e3a4      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c46:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	f003 030c 	and.w	r3, r3, #12
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d83a      	bhi.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005ccf 	.word	0x08005ccf
 8005c68:	08005ccf 	.word	0x08005ccf
 8005c6c:	08005ccf 	.word	0x08005ccf
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005ccf 	.word	0x08005ccf
 8005c78:	08005ccf 	.word	0x08005ccf
 8005c7c:	08005ccf 	.word	0x08005ccf
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005ccf 	.word	0x08005ccf
 8005c88:	08005ccf 	.word	0x08005ccf
 8005c8c:	08005ccf 	.word	0x08005ccf
 8005c90:	08005cb9 	.word	0x08005cb9
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c94:	f7ff f848 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8005c98:	61f8      	str	r0, [r7, #28]
          break;
 8005c9a:	e01d      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c9c:	f7fe ffac 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005ca0:	61f8      	str	r0, [r7, #28]
          break;
 8005ca2:	e019      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ca4:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005cb2:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cb4:	61fb      	str	r3, [r7, #28]
          break;
 8005cb6:	e00c      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cb8:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	61fb      	str	r3, [r7, #28]
          break;
 8005ccc:	e003      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005cce:	bf00      	nop
 8005cd0:	e35e      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cd2:	bf00      	nop
 8005cd4:	e35c      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cd6:	bf00      	nop
        break;
 8005cd8:	e35a      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005cda:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d021      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b30      	cmp	r3, #48	; 0x30
 8005cf0:	d829      	bhi.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d011      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d823      	bhi.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d004      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005d0a:	e01c      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d0c:	f7ff f80c 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8005d10:	61f8      	str	r0, [r7, #28]
          break;
 8005d12:	e01d      	b.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d14:	f7fe ff70 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005d18:	61f8      	str	r0, [r7, #28]
          break;
 8005d1a:	e019      	b.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d28:	d10f      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d2c:	61fb      	str	r3, [r7, #28]
          break;
 8005d2e:	e00c      	b.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d30:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d42:	61fb      	str	r3, [r7, #28]
          break;
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005d46:	bf00      	nop
 8005d48:	e322      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d4a:	bf00      	nop
 8005d4c:	e320      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d4e:	bf00      	nop
        break;
 8005d50:	e31e      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d52:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2bc0      	cmp	r3, #192	; 0xc0
 8005d62:	d027      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2bc0      	cmp	r3, #192	; 0xc0
 8005d68:	d82f      	bhi.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d017      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d829      	bhi.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d004      	beq.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005d82:	e022      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d84:	f7fe ffd0 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8005d88:	61f8      	str	r0, [r7, #28]
          break;
 8005d8a:	e023      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d8c:	f7fe ff34 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005d90:	61f8      	str	r0, [r7, #28]
          break;
 8005d92:	e01f      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005d94:	40021000 	.word	0x40021000
 8005d98:	02dc6c00 	.word	0x02dc6c00
 8005d9c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005da0:	4b9b      	ldr	r3, [pc, #620]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	d10f      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005dae:	4b99      	ldr	r3, [pc, #612]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005db0:	61fb      	str	r3, [r7, #28]
          break;
 8005db2:	e00c      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005db4:	4b96      	ldr	r3, [pc, #600]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	61fb      	str	r3, [r7, #28]
          break;
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005dca:	bf00      	nop
 8005dcc:	e2e0      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dce:	bf00      	nop
 8005dd0:	e2de      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dd2:	bf00      	nop
        break;
 8005dd4:	e2dc      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005dd6:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de8:	d025      	beq.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df0:	d82c      	bhi.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df8:	d013      	beq.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d824      	bhi.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0e:	d004      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005e10:	e01c      	b.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7fe ff89 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8005e16:	61f8      	str	r0, [r7, #28]
          break;
 8005e18:	e01d      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fe feed 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005e1e:	61f8      	str	r0, [r7, #28]
          break;
 8005e20:	e019      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e22:	4b7b      	ldr	r3, [pc, #492]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d10f      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005e30:	4b78      	ldr	r3, [pc, #480]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e32:	61fb      	str	r3, [r7, #28]
          break;
 8005e34:	e00c      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e36:	4b76      	ldr	r3, [pc, #472]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d107      	bne.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e48:	61fb      	str	r3, [r7, #28]
          break;
 8005e4a:	e003      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005e4c:	bf00      	nop
 8005e4e:	e29f      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e50:	bf00      	nop
 8005e52:	e29d      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e54:	bf00      	nop
        break;
 8005e56:	e29b      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e58:	4b6d      	ldr	r3, [pc, #436]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e6a:	d025      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e72:	d82c      	bhi.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7a:	d013      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e82:	d824      	bhi.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d004      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005e92:	e01c      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fe ff48 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8005e98:	61f8      	str	r0, [r7, #28]
          break;
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e9c:	f7fe feac 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005ea0:	61f8      	str	r0, [r7, #28]
          break;
 8005ea2:	e019      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ea4:	4b5a      	ldr	r3, [pc, #360]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb0:	d10f      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005eb2:	4b58      	ldr	r3, [pc, #352]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005eb4:	61fb      	str	r3, [r7, #28]
          break;
 8005eb6:	e00c      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eb8:	4b55      	ldr	r3, [pc, #340]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eca:	61fb      	str	r3, [r7, #28]
          break;
 8005ecc:	e003      	b.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005ece:	bf00      	nop
 8005ed0:	e25e      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ed2:	bf00      	nop
 8005ed4:	e25c      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ed6:	bf00      	nop
        break;
 8005ed8:	e25a      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005eda:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eec:	d007      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef4:	d12f      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ef6:	f7fe fe7f 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005efa:	61f8      	str	r0, [r7, #28]
          break;
 8005efc:	e02e      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0a:	d126      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005f0c:	4b40      	ldr	r3, [pc, #256]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d020      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f18:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	0a1b      	lsrs	r3, r3, #8
 8005f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f22:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	fb03 f202 	mul.w	r2, r3, r2
 8005f2c:	4b38      	ldr	r3, [pc, #224]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	3301      	adds	r3, #1
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005f3e:	4b34      	ldr	r3, [pc, #208]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	0e5b      	lsrs	r3, r3, #25
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	3301      	adds	r3, #1
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	61fb      	str	r3, [r7, #28]
          break;
 8005f54:	e001      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005f56:	bf00      	nop
 8005f58:	e21a      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f5a:	bf00      	nop
        break;
 8005f5c:	e218      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fe fef0 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8005f74:	61f8      	str	r0, [r7, #28]
        break;
 8005f76:	e20b      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f78:	f7fe fe3e 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005f7c:	61f8      	str	r0, [r7, #28]
        break;
 8005f7e:	e207      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f80:	4b23      	ldr	r3, [pc, #140]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f86:	f003 0318 	and.w	r3, r3, #24
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d010      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d834      	bhi.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d024      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005fa4:	e02d      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fac:	f000 fbf2 	bl	8006794 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fb0:	61f8      	str	r0, [r7, #28]
          break;
 8005fb2:	e02b      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005fb4:	4b16      	ldr	r3, [pc, #88]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d122      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fc0:	4b13      	ldr	r3, [pc, #76]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	e005      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	4a0c      	ldr	r2, [pc, #48]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fea:	61fb      	str	r3, [r7, #28]
          break;
 8005fec:	e00b      	b.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffa:	d106      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ffe:	61fb      	str	r3, [r7, #28]
          break;
 8006000:	e003      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006002:	bf00      	nop
 8006004:	e1c4      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006006:	bf00      	nop
 8006008:	e1c2      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800600a:	bf00      	nop
        break;
 800600c:	e1c0      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	00f42400 	.word	0x00f42400
 8006018:	08008df0 	.word	0x08008df0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800601c:	4b96      	ldr	r3, [pc, #600]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	d013      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	d819      	bhi.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006044:	d004      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006046:	e011      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006048:	f7fe fe6e 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 800604c:	61f8      	str	r0, [r7, #28]
          break;
 800604e:	e010      	b.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006050:	f7fe fdd2 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8006054:	61f8      	str	r0, [r7, #28]
          break;
 8006056:	e00c      	b.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006058:	4b87      	ldr	r3, [pc, #540]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006064:	d104      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006066:	4b85      	ldr	r3, [pc, #532]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006068:	61fb      	str	r3, [r7, #28]
          break;
 800606a:	e001      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800606c:	bf00      	nop
 800606e:	e18f      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006070:	bf00      	nop
        break;
 8006072:	e18d      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006074:	4b80      	ldr	r3, [pc, #512]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006086:	d013      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608e:	d819      	bhi.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609c:	d004      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800609e:	e011      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fe42 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61f8      	str	r0, [r7, #28]
          break;
 80060a6:	e010      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80060a8:	f7fe fda6 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 80060ac:	61f8      	str	r0, [r7, #28]
          break;
 80060ae:	e00c      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060b0:	4b71      	ldr	r3, [pc, #452]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d104      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80060be:	4b6f      	ldr	r3, [pc, #444]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80060c0:	61fb      	str	r3, [r7, #28]
          break;
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80060c4:	bf00      	nop
 80060c6:	e163      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060c8:	bf00      	nop
        break;
 80060ca:	e161      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80060cc:	4b6a      	ldr	r3, [pc, #424]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060de:	d013      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060e6:	d819      	bhi.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d004      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80060f6:	e011      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060f8:	f7fe fe16 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 80060fc:	61f8      	str	r0, [r7, #28]
          break;
 80060fe:	e010      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006100:	f7fe fd7a 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8006104:	61f8      	str	r0, [r7, #28]
          break;
 8006106:	e00c      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006108:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006114:	d104      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006116:	4b59      	ldr	r3, [pc, #356]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006118:	61fb      	str	r3, [r7, #28]
          break;
 800611a:	e001      	b.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800611c:	bf00      	nop
 800611e:	e137      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006120:	bf00      	nop
        break;
 8006122:	e135      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006124:	4b54      	ldr	r3, [pc, #336]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d011      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d818      	bhi.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d004      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006148:	e011      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800614a:	f7fe fded 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 800614e:	61f8      	str	r0, [r7, #28]
          break;
 8006150:	e010      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006152:	f7fe fd51 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8006156:	61f8      	str	r0, [r7, #28]
          break;
 8006158:	e00c      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800615a:	4b47      	ldr	r3, [pc, #284]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006166:	d104      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006168:	4b44      	ldr	r3, [pc, #272]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800616a:	61fb      	str	r3, [r7, #28]
          break;
 800616c:	e001      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800616e:	bf00      	nop
 8006170:	e10e      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006172:	bf00      	nop
        break;
 8006174:	e10c      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006176:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006188:	d02c      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006190:	d833      	bhi.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006198:	d01a      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061a0:	d82b      	bhi.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ae:	d004      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80061b0:	e023      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061b2:	f7fe fdb9 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 80061b6:	61f8      	str	r0, [r7, #28]
          break;
 80061b8:	e026      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d11a      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80061c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061cc:	61fb      	str	r3, [r7, #28]
          break;
 80061ce:	e016      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061dc:	d111      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80061e0:	61fb      	str	r3, [r7, #28]
          break;
 80061e2:	e00e      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061e4:	4b24      	ldr	r3, [pc, #144]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d109      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	61fb      	str	r3, [r7, #28]
          break;
 80061f8:	e005      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80061fa:	bf00      	nop
 80061fc:	e0c8      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061fe:	bf00      	nop
 8006200:	e0c6      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006202:	bf00      	nop
 8006204:	e0c4      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006206:	bf00      	nop
        break;
 8006208:	e0c2      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006210:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800621c:	d030      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006224:	d837      	bhi.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800622c:	d01a      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006234:	d82f      	bhi.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d004      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006244:	e027      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006246:	f7fe fd6f 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 800624a:	61f8      	str	r0, [r7, #28]
          break;
 800624c:	e02a      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d11e      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800625c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006260:	61fb      	str	r3, [r7, #28]
          break;
 8006262:	e01a      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d115      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006272:	4b02      	ldr	r3, [pc, #8]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006274:	61fb      	str	r3, [r7, #28]
          break;
 8006276:	e012      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006278:	40021000 	.word	0x40021000
 800627c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006280:	4b46      	ldr	r3, [pc, #280]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d109      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800628e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006292:	61fb      	str	r3, [r7, #28]
          break;
 8006294:	e005      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006296:	bf00      	nop
 8006298:	e07a      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800629a:	bf00      	nop
 800629c:	e078      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800629e:	bf00      	nop
 80062a0:	e076      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062a2:	bf00      	nop
        break;
 80062a4:	e074      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80062a6:	4b3d      	ldr	r3, [pc, #244]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b8:	d02c      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062c0:	d855      	bhi.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d004      	beq.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80062d0:	e04d      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80062d2:	f7fe fc91 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 80062d6:	61f8      	str	r0, [r7, #28]
          break;
 80062d8:	e04e      	b.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d145      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062e6:	4b2d      	ldr	r3, [pc, #180]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80062f2:	4b2a      	ldr	r3, [pc, #168]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	e005      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800630c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006310:	61fb      	str	r3, [r7, #28]
          break;
 8006312:	e02e      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006314:	4b21      	ldr	r3, [pc, #132]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006320:	d129      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800632a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632e:	d122      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	fb03 f202 	mul.w	r2, r3, r2
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	3301      	adds	r3, #1
 8006350:	fbb2 f3f3 	udiv	r3, r2, r3
 8006354:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	0d5b      	lsrs	r3, r3, #21
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	3301      	adds	r3, #1
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	61fb      	str	r3, [r7, #28]
          break;
 800636c:	e003      	b.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800636e:	bf00      	nop
 8006370:	e00e      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006372:	bf00      	nop
 8006374:	e00c      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006376:	bf00      	nop
        break;
 8006378:	e00a      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800637a:	bf00      	nop
 800637c:	e008      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800637e:	bf00      	nop
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006382:	bf00      	nop
 8006384:	e004      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006386:	bf00      	nop
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800638e:	bf00      	nop
    }
  }

  return(frequency);
 8006390:	69fb      	ldr	r3, [r7, #28]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40021000 	.word	0x40021000
 80063a0:	08008df0 	.word	0x08008df0

080063a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063ae:	f043 0304 	orr.w	r3, r3, #4
 80063b2:	6013      	str	r3, [r2, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000

080063c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063d2:	4b72      	ldr	r3, [pc, #456]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063de:	4b6f      	ldr	r3, [pc, #444]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0203 	and.w	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d103      	bne.n	80063f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
       ||
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d142      	bne.n	800647c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	e03f      	b.n	800647c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d018      	beq.n	8006436 <RCCEx_PLLSAI1_Config+0x72>
 8006404:	2b03      	cmp	r3, #3
 8006406:	d825      	bhi.n	8006454 <RCCEx_PLLSAI1_Config+0x90>
 8006408:	2b01      	cmp	r3, #1
 800640a:	d002      	beq.n	8006412 <RCCEx_PLLSAI1_Config+0x4e>
 800640c:	2b02      	cmp	r3, #2
 800640e:	d009      	beq.n	8006424 <RCCEx_PLLSAI1_Config+0x60>
 8006410:	e020      	b.n	8006454 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006412:	4b62      	ldr	r3, [pc, #392]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11d      	bne.n	800645a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006422:	e01a      	b.n	800645a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006424:	4b5d      	ldr	r3, [pc, #372]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642c:	2b00      	cmp	r3, #0
 800642e:	d116      	bne.n	800645e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006434:	e013      	b.n	800645e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006436:	4b59      	ldr	r3, [pc, #356]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10f      	bne.n	8006462 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006442:	4b56      	ldr	r3, [pc, #344]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006452:	e006      	b.n	8006462 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      break;
 8006458:	e004      	b.n	8006464 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006462:	bf00      	nop
    }

    if(status == HAL_OK)
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d108      	bne.n	800647c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800646a:	4b4c      	ldr	r3, [pc, #304]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4949      	ldr	r1, [pc, #292]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006478:	4313      	orrs	r3, r2
 800647a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 8086 	bne.w	8006590 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006484:	4b45      	ldr	r3, [pc, #276]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a44      	ldr	r2, [pc, #272]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 800648a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800648e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006490:	f7fb ff7c 	bl	800238c <HAL_GetTick>
 8006494:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006496:	e009      	b.n	80064ac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006498:	f7fb ff78 	bl	800238c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d902      	bls.n	80064ac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	73fb      	strb	r3, [r7, #15]
        break;
 80064aa:	e005      	b.n	80064b8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064ac:	4b3b      	ldr	r3, [pc, #236]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1ef      	bne.n	8006498 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d168      	bne.n	8006590 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064c4:	4b35      	ldr	r3, [pc, #212]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	4b35      	ldr	r3, [pc, #212]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6892      	ldr	r2, [r2, #8]
 80064d0:	0211      	lsls	r1, r2, #8
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68d2      	ldr	r2, [r2, #12]
 80064d6:	06d2      	lsls	r2, r2, #27
 80064d8:	4311      	orrs	r1, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6852      	ldr	r2, [r2, #4]
 80064de:	3a01      	subs	r2, #1
 80064e0:	0112      	lsls	r2, r2, #4
 80064e2:	430a      	orrs	r2, r1
 80064e4:	492d      	ldr	r1, [pc, #180]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	610b      	str	r3, [r1, #16]
 80064ea:	e02d      	b.n	8006548 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d115      	bne.n	800651e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	4b2b      	ldr	r3, [pc, #172]	; (80065a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	0211      	lsls	r1, r2, #8
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6912      	ldr	r2, [r2, #16]
 8006504:	0852      	lsrs	r2, r2, #1
 8006506:	3a01      	subs	r2, #1
 8006508:	0552      	lsls	r2, r2, #21
 800650a:	4311      	orrs	r1, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6852      	ldr	r2, [r2, #4]
 8006510:	3a01      	subs	r2, #1
 8006512:	0112      	lsls	r2, r2, #4
 8006514:	430a      	orrs	r2, r1
 8006516:	4921      	ldr	r1, [pc, #132]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006518:	4313      	orrs	r3, r2
 800651a:	610b      	str	r3, [r1, #16]
 800651c:	e014      	b.n	8006548 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800651e:	4b1f      	ldr	r3, [pc, #124]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006524:	4013      	ands	r3, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6892      	ldr	r2, [r2, #8]
 800652a:	0211      	lsls	r1, r2, #8
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6952      	ldr	r2, [r2, #20]
 8006530:	0852      	lsrs	r2, r2, #1
 8006532:	3a01      	subs	r2, #1
 8006534:	0652      	lsls	r2, r2, #25
 8006536:	4311      	orrs	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6852      	ldr	r2, [r2, #4]
 800653c:	3a01      	subs	r2, #1
 800653e:	0112      	lsls	r2, r2, #4
 8006540:	430a      	orrs	r2, r1
 8006542:	4916      	ldr	r1, [pc, #88]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006544:	4313      	orrs	r3, r2
 8006546:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a13      	ldr	r2, [pc, #76]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 800654e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006552:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006554:	f7fb ff1a 	bl	800238c <HAL_GetTick>
 8006558:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800655a:	e009      	b.n	8006570 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800655c:	f7fb ff16 	bl	800238c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d902      	bls.n	8006570 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	73fb      	strb	r3, [r7, #15]
          break;
 800656e:	e005      	b.n	800657c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ef      	beq.n	800655c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	4904      	ldr	r1, [pc, #16]	; (800659c <RCCEx_PLLSAI1_Config+0x1d8>)
 800658c:	4313      	orrs	r3, r2
 800658e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40021000 	.word	0x40021000
 80065a0:	07ff800f 	.word	0x07ff800f
 80065a4:	ff9f800f 	.word	0xff9f800f
 80065a8:	f9ff800f 	.word	0xf9ff800f

080065ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ba:	4b72      	ldr	r3, [pc, #456]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065c6:	4b6f      	ldr	r3, [pc, #444]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0203 	and.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d103      	bne.n	80065de <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
       ||
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d142      	bne.n	8006664 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
 80065e2:	e03f      	b.n	8006664 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d018      	beq.n	800661e <RCCEx_PLLSAI2_Config+0x72>
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d825      	bhi.n	800663c <RCCEx_PLLSAI2_Config+0x90>
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d002      	beq.n	80065fa <RCCEx_PLLSAI2_Config+0x4e>
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d009      	beq.n	800660c <RCCEx_PLLSAI2_Config+0x60>
 80065f8:	e020      	b.n	800663c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065fa:	4b62      	ldr	r3, [pc, #392]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11d      	bne.n	8006642 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800660a:	e01a      	b.n	8006642 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800660c:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	d116      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800661c:	e013      	b.n	8006646 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800661e:	4b59      	ldr	r3, [pc, #356]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800662a:	4b56      	ldr	r3, [pc, #344]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800663a:	e006      	b.n	800664a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      break;
 8006640:	e004      	b.n	800664c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800664a:	bf00      	nop
    }

    if(status == HAL_OK)
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d108      	bne.n	8006664 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006652:	4b4c      	ldr	r3, [pc, #304]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f023 0203 	bic.w	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4949      	ldr	r1, [pc, #292]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006660:	4313      	orrs	r3, r2
 8006662:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 8086 	bne.w	8006778 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800666c:	4b45      	ldr	r3, [pc, #276]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a44      	ldr	r2, [pc, #272]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006678:	f7fb fe88 	bl	800238c <HAL_GetTick>
 800667c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800667e:	e009      	b.n	8006694 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006680:	f7fb fe84 	bl	800238c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d902      	bls.n	8006694 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	73fb      	strb	r3, [r7, #15]
        break;
 8006692:	e005      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006694:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ef      	bne.n	8006680 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d168      	bne.n	8006778 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d113      	bne.n	80066d4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066ac:	4b35      	ldr	r3, [pc, #212]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	4b35      	ldr	r3, [pc, #212]	; (8006788 <RCCEx_PLLSAI2_Config+0x1dc>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	0211      	lsls	r1, r2, #8
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68d2      	ldr	r2, [r2, #12]
 80066be:	06d2      	lsls	r2, r2, #27
 80066c0:	4311      	orrs	r1, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6852      	ldr	r2, [r2, #4]
 80066c6:	3a01      	subs	r2, #1
 80066c8:	0112      	lsls	r2, r2, #4
 80066ca:	430a      	orrs	r2, r1
 80066cc:	492d      	ldr	r1, [pc, #180]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	614b      	str	r3, [r1, #20]
 80066d2:	e02d      	b.n	8006730 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d115      	bne.n	8006706 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066da:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	4b2b      	ldr	r3, [pc, #172]	; (800678c <RCCEx_PLLSAI2_Config+0x1e0>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6892      	ldr	r2, [r2, #8]
 80066e6:	0211      	lsls	r1, r2, #8
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6912      	ldr	r2, [r2, #16]
 80066ec:	0852      	lsrs	r2, r2, #1
 80066ee:	3a01      	subs	r2, #1
 80066f0:	0552      	lsls	r2, r2, #21
 80066f2:	4311      	orrs	r1, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6852      	ldr	r2, [r2, #4]
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0112      	lsls	r2, r2, #4
 80066fc:	430a      	orrs	r2, r1
 80066fe:	4921      	ldr	r1, [pc, #132]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006700:	4313      	orrs	r3, r2
 8006702:	614b      	str	r3, [r1, #20]
 8006704:	e014      	b.n	8006730 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006706:	4b1f      	ldr	r3, [pc, #124]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	4b21      	ldr	r3, [pc, #132]	; (8006790 <RCCEx_PLLSAI2_Config+0x1e4>)
 800670c:	4013      	ands	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6892      	ldr	r2, [r2, #8]
 8006712:	0211      	lsls	r1, r2, #8
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6952      	ldr	r2, [r2, #20]
 8006718:	0852      	lsrs	r2, r2, #1
 800671a:	3a01      	subs	r2, #1
 800671c:	0652      	lsls	r2, r2, #25
 800671e:	4311      	orrs	r1, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6852      	ldr	r2, [r2, #4]
 8006724:	3a01      	subs	r2, #1
 8006726:	0112      	lsls	r2, r2, #4
 8006728:	430a      	orrs	r2, r1
 800672a:	4916      	ldr	r1, [pc, #88]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006730:	4b14      	ldr	r3, [pc, #80]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a13      	ldr	r2, [pc, #76]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673c:	f7fb fe26 	bl	800238c <HAL_GetTick>
 8006740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006742:	e009      	b.n	8006758 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006744:	f7fb fe22 	bl	800238c <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d902      	bls.n	8006758 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	73fb      	strb	r3, [r7, #15]
          break;
 8006756:	e005      	b.n	8006764 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0ef      	beq.n	8006744 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	4904      	ldr	r1, [pc, #16]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006774:	4313      	orrs	r3, r2
 8006776:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
 8006788:	07ff800f 	.word	0x07ff800f
 800678c:	ff9f800f 	.word	0xff9f800f
 8006790:	f9ff800f 	.word	0xf9ff800f

08006794 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006794:	b480      	push	{r7}
 8006796:	b089      	sub	sp, #36	; 0x24
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b0:	d10b      	bne.n	80067ca <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80067b2:	4b7e      	ldr	r3, [pc, #504]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80067bc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b60      	cmp	r3, #96	; 0x60
 80067c2:	d112      	bne.n	80067ea <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067c4:	4b7a      	ldr	r3, [pc, #488]	; (80069b0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	e00f      	b.n	80067ea <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d0:	d10b      	bne.n	80067ea <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80067d2:	4b76      	ldr	r3, [pc, #472]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067dc:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e4:	d101      	bne.n	80067ea <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80067e6:	4b72      	ldr	r3, [pc, #456]	; (80069b0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80067e8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 80d6 	bne.w	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d003      	beq.n	8006804 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006802:	d13b      	bne.n	800687c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006804:	4b69      	ldr	r3, [pc, #420]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006810:	f040 80c4 	bne.w	800699c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006814:	4b65      	ldr	r3, [pc, #404]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80bd 	beq.w	800699c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006822:	4b62      	ldr	r3, [pc, #392]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	3301      	adds	r3, #1
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006836:	4b5d      	ldr	r3, [pc, #372]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006840:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006842:	4b5a      	ldr	r3, [pc, #360]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	0edb      	lsrs	r3, r3, #27
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006854:	4b55      	ldr	r3, [pc, #340]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006860:	2311      	movs	r3, #17
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e001      	b.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006866:	2307      	movs	r3, #7
 8006868:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	fb03 f202 	mul.w	r2, r3, r2
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800687a:	e08f      	b.n	800699c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d13a      	bne.n	80068f8 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006882:	4b4a      	ldr	r3, [pc, #296]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688e:	f040 8086 	bne.w	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006892:	4b46      	ldr	r3, [pc, #280]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d07f      	beq.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800689e:	4b43      	ldr	r3, [pc, #268]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	3301      	adds	r3, #1
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80068b2:	4b3e      	ldr	r3, [pc, #248]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	0edb      	lsrs	r3, r3, #27
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80068d0:	4b36      	ldr	r3, [pc, #216]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80068dc:	2311      	movs	r3, #17
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e001      	b.n	80068e6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80068e2:	2307      	movs	r3, #7
 80068e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	fb03 f202 	mul.w	r2, r3, r2
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	e052      	b.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d003      	beq.n	8006906 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006904:	d109      	bne.n	800691a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006906:	4b29      	ldr	r3, [pc, #164]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d144      	bne.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006914:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006916:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006918:	e041      	b.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b20      	cmp	r3, #32
 800691e:	d003      	beq.n	8006928 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006926:	d13a      	bne.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006928:	4b20      	ldr	r3, [pc, #128]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006934:	d133      	bne.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d02d      	beq.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006942:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	3301      	adds	r3, #1
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006956:	4b15      	ldr	r3, [pc, #84]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006960:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	0edb      	lsrs	r3, r3, #27
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006974:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006980:	2311      	movs	r3, #17
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e001      	b.n	800698a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006986:	2307      	movs	r3, #7
 8006988:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	fb03 f202 	mul.w	r2, r3, r2
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	fbb2 f3f3 	udiv	r3, r2, r3
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e000      	b.n	800699e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800699c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800699e:	69fb      	ldr	r3, [r7, #28]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3724      	adds	r7, #36	; 0x24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40021000 	.word	0x40021000
 80069b0:	001fff68 	.word	0x001fff68
 80069b4:	00f42400 	.word	0x00f42400

080069b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d904      	bls.n	80069d6 <HAL_SAI_InitProtocol+0x1e>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3b03      	subs	r3, #3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d812      	bhi.n	80069fa <HAL_SAI_InitProtocol+0x42>
 80069d4:	e008      	b.n	80069e8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f9fb 	bl	8006dd8 <SAI_InitI2S>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]
      break;
 80069e6:	e00b      	b.n	8006a00 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 faa4 	bl	8006f3c <SAI_InitPCM>
 80069f4:	4603      	mov	r3, r0
 80069f6:	75fb      	strb	r3, [r7, #23]
      break;
 80069f8:	e002      	b.n	8006a00 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
      break;
 80069fe:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f808 	bl	8006a1c <HAL_SAI_Init>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1c7      	b.n	8006dbe <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10e      	bne.n	8006a56 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a81      	ldr	r2, [pc, #516]	; (8006c44 <HAL_SAI_Init+0x228>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d107      	bne.n	8006a52 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d103      	bne.n	8006a52 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e1b3      	b.n	8006dbe <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fb fb04 	bl	8002078 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fae5 	bl	8007040 <SAI_Disable>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e19e      	b.n	8006dbe <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d00c      	beq.n	8006aaa <HAL_SAI_Init+0x8e>
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d80d      	bhi.n	8006ab0 <HAL_SAI_Init+0x94>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_SAI_Init+0x82>
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d003      	beq.n	8006aa4 <HAL_SAI_Init+0x88>
 8006a9c:	e008      	b.n	8006ab0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aa2:	e008      	b.n	8006ab6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aa8:	e005      	b.n	8006ab6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006aaa:	2320      	movs	r3, #32
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ab4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d81d      	bhi.n	8006afa <HAL_SAI_Init+0xde>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_SAI_Init+0xa8>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006adb 	.word	0x08006adb
 8006acc:	08006ae3 	.word	0x08006ae3
 8006ad0:	08006aeb 	.word	0x08006aeb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
      break;
 8006ad8:	e012      	b.n	8006b00 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ade:	61fb      	str	r3, [r7, #28]
      break;
 8006ae0:	e00e      	b.n	8006b00 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ae6:	61fb      	str	r3, [r7, #28]
      break;
 8006ae8:	e00a      	b.n	8006b00 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aee:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006af8:	e002      	b.n	8006b00 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
      break;
 8006afe:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a4f      	ldr	r2, [pc, #316]	; (8006c44 <HAL_SAI_Init+0x228>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_SAI_Init+0xf8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a4e      	ldr	r2, [pc, #312]	; (8006c48 <HAL_SAI_Init+0x22c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d103      	bne.n	8006b1c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006b14:	4a4d      	ldr	r2, [pc, #308]	; (8006c4c <HAL_SAI_Init+0x230>)
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e002      	b.n	8006b22 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006b1c:	4a4c      	ldr	r2, [pc, #304]	; (8006c50 <HAL_SAI_Init+0x234>)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d073      	beq.n	8006c12 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a45      	ldr	r2, [pc, #276]	; (8006c44 <HAL_SAI_Init+0x228>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_SAI_Init+0x122>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a43      	ldr	r2, [pc, #268]	; (8006c48 <HAL_SAI_Init+0x22c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d105      	bne.n	8006b4a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b42:	f7fe fd0d 	bl	8005560 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b46:	61b8      	str	r0, [r7, #24]
 8006b48:	e004      	b.n	8006b54 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b4e:	f7fe fd07 	bl	8005560 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b52:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b5c:	d120      	bne.n	8006ba0 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d102      	bne.n	8006b6c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006b66:	2340      	movs	r3, #64	; 0x40
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	e00a      	b.n	8006b82 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d103      	bne.n	8006b7c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	e002      	b.n	8006b82 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b80:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	fb02 f303 	mul.w	r3, r2, r3
 8006b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e017      	b.n	8006bd0 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba8:	d101      	bne.n	8006bae <HAL_SAI_Init+0x192>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e000      	b.n	8006bb0 <HAL_SAI_Init+0x194>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bce:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <HAL_SAI_Init+0x238>)
 8006bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd8:	08da      	lsrs	r2, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006bde:	6979      	ldr	r1, [r7, #20]
 8006be0:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <HAL_SAI_Init+0x238>)
 8006be2:	fba3 2301 	umull	r2, r3, r3, r1
 8006be6:	08da      	lsrs	r2, r3, #3
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	1aca      	subs	r2, r1, r3
 8006bf2:	2a08      	cmp	r2, #8
 8006bf4:	d904      	bls.n	8006c00 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d104      	bne.n	8006c12 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	085a      	lsrs	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_SAI_Init+0x206>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d109      	bne.n	8006c36 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_SAI_Init+0x212>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e001      	b.n	8006c32 <HAL_SAI_Init+0x216>
 8006c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c32:	623b      	str	r3, [r7, #32]
 8006c34:	e012      	b.n	8006c5c <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d10c      	bne.n	8006c58 <HAL_SAI_Init+0x23c>
 8006c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c42:	e00a      	b.n	8006c5a <HAL_SAI_Init+0x23e>
 8006c44:	40015404 	.word	0x40015404
 8006c48:	40015424 	.word	0x40015424
 8006c4c:	40015400 	.word	0x40015400
 8006c50:	40015800 	.word	0x40015800
 8006c54:	cccccccd 	.word	0xcccccccd
 8006c58:	2300      	movs	r3, #0
 8006c5a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6819      	ldr	r1, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b58      	ldr	r3, [pc, #352]	; (8006dc8 <HAL_SAI_Init+0x3ac>)
 8006c68:	400b      	ands	r3, r1
 8006c6a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6819      	ldr	r1, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c80:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c86:	431a      	orrs	r2, r3
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006c94:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006ca0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	051b      	lsls	r3, r3, #20
 8006ca8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cae:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6812      	ldr	r2, [r2, #0]
 8006cc2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006cc6:	f023 030f 	bic.w	r3, r3, #15
 8006cca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6859      	ldr	r1, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6899      	ldr	r1, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b35      	ldr	r3, [pc, #212]	; (8006dcc <HAL_SAI_Init+0x3b0>)
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6899      	ldr	r1, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d0a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006d10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006d16:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006d20:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68d9      	ldr	r1, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d38:	400b      	ands	r3, r1
 8006d3a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68d9      	ldr	r1, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d4a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d52:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a19      	ldr	r2, [pc, #100]	; (8006dd0 <HAL_SAI_Init+0x3b4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d119      	bne.n	8006da4 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006d70:	4b18      	ldr	r3, [pc, #96]	; (8006dd4 <HAL_SAI_Init+0x3b8>)
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <HAL_SAI_Init+0x3b8>)
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10e      	bne.n	8006da4 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006d92:	4910      	ldr	r1, [pc, #64]	; (8006dd4 <HAL_SAI_Init+0x3b8>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <HAL_SAI_Init+0x3b8>)
 8006d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <HAL_SAI_Init+0x3b8>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3728      	adds	r7, #40	; 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	f805c010 	.word	0xf805c010
 8006dcc:	fff88000 	.word	0xfff88000
 8006dd0:	40015404 	.word	0x40015404
 8006dd4:	40015400 	.word	0x40015400

08006dd8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <SAI_InitI2S+0x2e>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d103      	bne.n	8006e0e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e0c:	e002      	b.n	8006e14 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e1a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e22:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e077      	b.n	8006f2e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e50:	661a      	str	r2, [r3, #96]	; 0x60
 8006e52:	e006      	b.n	8006e62 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e5a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d84f      	bhi.n	8006f08 <SAI_InitI2S+0x130>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <SAI_InitI2S+0x98>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e81 	.word	0x08006e81
 8006e74:	08006ea3 	.word	0x08006ea3
 8006e78:	08006ec5 	.word	0x08006ec5
 8006e7c:	08006ee7 	.word	0x08006ee7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2280      	movs	r2, #128	; 0x80
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2240      	movs	r2, #64	; 0x40
 8006e9e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ea0:	e035      	b.n	8006f0e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2280      	movs	r2, #128	; 0x80
 8006ea6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	019a      	lsls	r2, r3, #6
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2280      	movs	r2, #128	; 0x80
 8006ec0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ec2:	e024      	b.n	8006f0e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	22c0      	movs	r2, #192	; 0xc0
 8006ec8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	019a      	lsls	r2, r3, #6
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2280      	movs	r2, #128	; 0x80
 8006ee2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ee4:	e013      	b.n	8006f0e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	22e0      	movs	r2, #224	; 0xe0
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	019a      	lsls	r2, r3, #6
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2280      	movs	r2, #128	; 0x80
 8006f04:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f06:	e002      	b.n	8006f0e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d10b      	bne.n	8006f2c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d102      	bne.n	8006f20 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d102      	bne.n	8006f2c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop

08006f3c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <SAI_InitPCM+0x2e>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d103      	bne.n	8006f72 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f70:	e002      	b.n	8006f78 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f84:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006f8c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fa0:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d103      	bne.n	8006fb0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
 8006fae:	e002      	b.n	8006fb6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	220d      	movs	r2, #13
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d837      	bhi.n	800702c <SAI_InitPCM+0xf0>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <SAI_InitPCM+0x88>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fd5 	.word	0x08006fd5
 8006fc8:	08006feb 	.word	0x08006feb
 8006fcc:	08007001 	.word	0x08007001
 8006fd0:	08007017 	.word	0x08007017
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	011a      	lsls	r2, r3, #4
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2240      	movs	r2, #64	; 0x40
 8006fe6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006fe8:	e023      	b.n	8007032 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2280      	movs	r2, #128	; 0x80
 8006fee:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ffe:	e018      	b.n	8007032 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	22c0      	movs	r2, #192	; 0xc0
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2280      	movs	r2, #128	; 0x80
 8007012:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007014:	e00d      	b.n	8007032 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	22e0      	movs	r2, #224	; 0xe0
 800701a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800702a:	e002      	b.n	8007032 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
      break;
 8007030:	bf00      	nop
  }

  return status;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007048:	4b18      	ldr	r3, [pc, #96]	; (80070ac <SAI_Disable+0x6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <SAI_Disable+0x70>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	0b1b      	lsrs	r3, r3, #12
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800706a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007078:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	72fb      	strb	r3, [r7, #11]
      break;
 8007086:	e009      	b.n	800709c <SAI_Disable+0x5c>
    }
    count--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3b01      	subs	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e7      	bne.n	800706c <SAI_Disable+0x2c>

  return status;
 800709c:	7afb      	ldrb	r3, [r7, #11]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000000 	.word	0x20000000
 80070b0:	95cbec1b 	.word	0x95cbec1b

080070b4 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e0aa      	b.n	800721c <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa fc06 	bl	80018e8 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0201 	bic.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695a      	ldr	r2, [r3, #20]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800710e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800711e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007128:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007138:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d012      	beq.n	8007168 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d107      	bne.n	800715a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	e006      	b.n	8007168 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007166:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d104      	bne.n	800717a <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071b6:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071c8:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071ca:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071d4:	d110      	bne.n	80071f8 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80071e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071e6:	d107      	bne.n	80071f8 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800723a:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007244:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f805 	bl	8007258 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727e:	2b38      	cmp	r3, #56	; 0x38
 8007280:	d103      	bne.n	800728a <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007288:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007290:	2bf2      	cmp	r3, #242	; 0xf2
 8007292:	d103      	bne.n	800729c <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800729a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 80072a2:	2bd4      	cmp	r3, #212	; 0xd4
 80072a4:	d103      	bne.n	80072ae <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	601a      	str	r2, [r3, #0]
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e095      	b.n	8007408 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d108      	bne.n	80072f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ec:	d009      	beq.n	8007302 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	61da      	str	r2, [r3, #28]
 80072f4:	e005      	b.n	8007302 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7fa fc71 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007338:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007342:	d902      	bls.n	800734a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e002      	b.n	8007350 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800734a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800734e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007358:	d007      	beq.n	800736a <HAL_SPI_Init+0xa0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007362:	d002      	beq.n	800736a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ac:	ea42 0103 	orr.w	r1, r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	f003 0204 	and.w	r2, r3, #4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073e6:	ea42 0103 	orr.w	r1, r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e049      	b.n	80074b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fa fc58 	bl	8001cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f000 f94a 	bl	80076e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074da:	2302      	movs	r3, #2
 80074dc:	e0ff      	b.n	80076de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b14      	cmp	r3, #20
 80074ea:	f200 80f0 	bhi.w	80076ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007549 	.word	0x08007549
 80074f8:	080076cf 	.word	0x080076cf
 80074fc:	080076cf 	.word	0x080076cf
 8007500:	080076cf 	.word	0x080076cf
 8007504:	08007589 	.word	0x08007589
 8007508:	080076cf 	.word	0x080076cf
 800750c:	080076cf 	.word	0x080076cf
 8007510:	080076cf 	.word	0x080076cf
 8007514:	080075cb 	.word	0x080075cb
 8007518:	080076cf 	.word	0x080076cf
 800751c:	080076cf 	.word	0x080076cf
 8007520:	080076cf 	.word	0x080076cf
 8007524:	0800760b 	.word	0x0800760b
 8007528:	080076cf 	.word	0x080076cf
 800752c:	080076cf 	.word	0x080076cf
 8007530:	080076cf 	.word	0x080076cf
 8007534:	0800764d 	.word	0x0800764d
 8007538:	080076cf 	.word	0x080076cf
 800753c:	080076cf 	.word	0x080076cf
 8007540:	080076cf 	.word	0x080076cf
 8007544:	0800768d 	.word	0x0800768d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f964 	bl	800781c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6999      	ldr	r1, [r3, #24]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	619a      	str	r2, [r3, #24]
      break;
 8007586:	e0a5      	b.n	80076d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f9d4 	bl	800793c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6999      	ldr	r1, [r3, #24]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	021a      	lsls	r2, r3, #8
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	619a      	str	r2, [r3, #24]
      break;
 80075c8:	e084      	b.n	80076d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fa3d 	bl	8007a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0208 	orr.w	r2, r2, #8
 80075e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0204 	bic.w	r2, r2, #4
 80075f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69d9      	ldr	r1, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	61da      	str	r2, [r3, #28]
      break;
 8007608:	e064      	b.n	80076d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 faa5 	bl	8007b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69d9      	ldr	r1, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	021a      	lsls	r2, r3, #8
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	61da      	str	r2, [r3, #28]
      break;
 800764a:	e043      	b.n	80076d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 faee 	bl	8007c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0208 	orr.w	r2, r2, #8
 8007666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0204 	bic.w	r2, r2, #4
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800768a:	e023      	b.n	80076d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fb32 	bl	8007cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076cc:	e002      	b.n	80076d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
      break;
 80076d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a40      	ldr	r2, [pc, #256]	; (80077fc <TIM_Base_SetConfig+0x114>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007706:	d00f      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3d      	ldr	r2, [pc, #244]	; (8007800 <TIM_Base_SetConfig+0x118>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00b      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3c      	ldr	r2, [pc, #240]	; (8007804 <TIM_Base_SetConfig+0x11c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d007      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3b      	ldr	r2, [pc, #236]	; (8007808 <TIM_Base_SetConfig+0x120>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a3a      	ldr	r2, [pc, #232]	; (800780c <TIM_Base_SetConfig+0x124>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d108      	bne.n	800773a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2f      	ldr	r2, [pc, #188]	; (80077fc <TIM_Base_SetConfig+0x114>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01f      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007748:	d01b      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2c      	ldr	r2, [pc, #176]	; (8007800 <TIM_Base_SetConfig+0x118>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d017      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2b      	ldr	r2, [pc, #172]	; (8007804 <TIM_Base_SetConfig+0x11c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2a      	ldr	r2, [pc, #168]	; (8007808 <TIM_Base_SetConfig+0x120>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00f      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a29      	ldr	r2, [pc, #164]	; (800780c <TIM_Base_SetConfig+0x124>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00b      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a28      	ldr	r2, [pc, #160]	; (8007810 <TIM_Base_SetConfig+0x128>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d007      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a27      	ldr	r2, [pc, #156]	; (8007814 <TIM_Base_SetConfig+0x12c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <TIM_Base_SetConfig+0x9a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a26      	ldr	r2, [pc, #152]	; (8007818 <TIM_Base_SetConfig+0x130>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d108      	bne.n	8007794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <TIM_Base_SetConfig+0x114>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00f      	beq.n	80077e0 <TIM_Base_SetConfig+0xf8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a12      	ldr	r2, [pc, #72]	; (800780c <TIM_Base_SetConfig+0x124>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00b      	beq.n	80077e0 <TIM_Base_SetConfig+0xf8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a11      	ldr	r2, [pc, #68]	; (8007810 <TIM_Base_SetConfig+0x128>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d007      	beq.n	80077e0 <TIM_Base_SetConfig+0xf8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a10      	ldr	r2, [pc, #64]	; (8007814 <TIM_Base_SetConfig+0x12c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d003      	beq.n	80077e0 <TIM_Base_SetConfig+0xf8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a0f      	ldr	r2, [pc, #60]	; (8007818 <TIM_Base_SetConfig+0x130>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d103      	bne.n	80077e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	615a      	str	r2, [r3, #20]
}
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40000400 	.word	0x40000400
 8007804:	40000800 	.word	0x40000800
 8007808:	40000c00 	.word	0x40000c00
 800780c:	40013400 	.word	0x40013400
 8007810:	40014000 	.word	0x40014000
 8007814:	40014400 	.word	0x40014400
 8007818:	40014800 	.word	0x40014800

0800781c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f023 0302 	bic.w	r3, r3, #2
 8007868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <TIM_OC1_SetConfig+0x10c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00f      	beq.n	800789c <TIM_OC1_SetConfig+0x80>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a2b      	ldr	r2, [pc, #172]	; (800792c <TIM_OC1_SetConfig+0x110>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_OC1_SetConfig+0x80>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <TIM_OC1_SetConfig+0x114>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_OC1_SetConfig+0x80>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a29      	ldr	r2, [pc, #164]	; (8007934 <TIM_OC1_SetConfig+0x118>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_OC1_SetConfig+0x80>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a28      	ldr	r2, [pc, #160]	; (8007938 <TIM_OC1_SetConfig+0x11c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d10c      	bne.n	80078b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f023 0308 	bic.w	r3, r3, #8
 80078a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 0304 	bic.w	r3, r3, #4
 80078b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a1b      	ldr	r2, [pc, #108]	; (8007928 <TIM_OC1_SetConfig+0x10c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00f      	beq.n	80078de <TIM_OC1_SetConfig+0xc2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1a      	ldr	r2, [pc, #104]	; (800792c <TIM_OC1_SetConfig+0x110>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00b      	beq.n	80078de <TIM_OC1_SetConfig+0xc2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a19      	ldr	r2, [pc, #100]	; (8007930 <TIM_OC1_SetConfig+0x114>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d007      	beq.n	80078de <TIM_OC1_SetConfig+0xc2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a18      	ldr	r2, [pc, #96]	; (8007934 <TIM_OC1_SetConfig+0x118>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_OC1_SetConfig+0xc2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a17      	ldr	r2, [pc, #92]	; (8007938 <TIM_OC1_SetConfig+0x11c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d111      	bne.n	8007902 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	621a      	str	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40013400 	.word	0x40013400
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800

0800793c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f023 0210 	bic.w	r2, r3, #16
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0320 	bic.w	r3, r3, #32
 800798a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a28      	ldr	r2, [pc, #160]	; (8007a3c <TIM_OC2_SetConfig+0x100>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_OC2_SetConfig+0x6c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a27      	ldr	r2, [pc, #156]	; (8007a40 <TIM_OC2_SetConfig+0x104>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d10d      	bne.n	80079c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <TIM_OC2_SetConfig+0x100>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00f      	beq.n	80079ec <TIM_OC2_SetConfig+0xb0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <TIM_OC2_SetConfig+0x104>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00b      	beq.n	80079ec <TIM_OC2_SetConfig+0xb0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <TIM_OC2_SetConfig+0x108>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d007      	beq.n	80079ec <TIM_OC2_SetConfig+0xb0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a1a      	ldr	r2, [pc, #104]	; (8007a48 <TIM_OC2_SetConfig+0x10c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d003      	beq.n	80079ec <TIM_OC2_SetConfig+0xb0>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a19      	ldr	r2, [pc, #100]	; (8007a4c <TIM_OC2_SetConfig+0x110>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d113      	bne.n	8007a14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800

08007a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a27      	ldr	r2, [pc, #156]	; (8007b4c <TIM_OC3_SetConfig+0xfc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC3_SetConfig+0x6a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a26      	ldr	r2, [pc, #152]	; (8007b50 <TIM_OC3_SetConfig+0x100>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d10d      	bne.n	8007ad6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <TIM_OC3_SetConfig+0xfc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00f      	beq.n	8007afe <TIM_OC3_SetConfig+0xae>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <TIM_OC3_SetConfig+0x100>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <TIM_OC3_SetConfig+0xae>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <TIM_OC3_SetConfig+0x104>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <TIM_OC3_SetConfig+0xae>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a19      	ldr	r2, [pc, #100]	; (8007b58 <TIM_OC3_SetConfig+0x108>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0xae>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <TIM_OC3_SetConfig+0x10c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d113      	bne.n	8007b26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800

08007b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	031b      	lsls	r3, r3, #12
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <TIM_OC4_SetConfig+0xc0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <TIM_OC4_SetConfig+0x84>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <TIM_OC4_SetConfig+0xc4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_OC4_SetConfig+0x84>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <TIM_OC4_SetConfig+0xc8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_OC4_SetConfig+0x84>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <TIM_OC4_SetConfig+0xcc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC4_SetConfig+0x84>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a14      	ldr	r2, [pc, #80]	; (8007c30 <TIM_OC4_SetConfig+0xd0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d109      	bne.n	8007bf8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	019b      	lsls	r3, r3, #6
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40013400 	.word	0x40013400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800

08007c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	041b      	lsls	r3, r3, #16
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <TIM_OC5_SetConfig+0xb4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00f      	beq.n	8007cae <TIM_OC5_SetConfig+0x7a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <TIM_OC5_SetConfig+0xb8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00b      	beq.n	8007cae <TIM_OC5_SetConfig+0x7a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <TIM_OC5_SetConfig+0xbc>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d007      	beq.n	8007cae <TIM_OC5_SetConfig+0x7a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <TIM_OC5_SetConfig+0xc0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d003      	beq.n	8007cae <TIM_OC5_SetConfig+0x7a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <TIM_OC5_SetConfig+0xc4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d109      	bne.n	8007cc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	621a      	str	r2, [r3, #32]
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	40012c00 	.word	0x40012c00
 8007cec:	40013400 	.word	0x40013400
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400
 8007cf8:	40014800 	.word	0x40014800

08007cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	051b      	lsls	r3, r3, #20
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a18      	ldr	r2, [pc, #96]	; (8007db4 <TIM_OC6_SetConfig+0xb8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00f      	beq.n	8007d78 <TIM_OC6_SetConfig+0x7c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <TIM_OC6_SetConfig+0xbc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00b      	beq.n	8007d78 <TIM_OC6_SetConfig+0x7c>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a16      	ldr	r2, [pc, #88]	; (8007dbc <TIM_OC6_SetConfig+0xc0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d007      	beq.n	8007d78 <TIM_OC6_SetConfig+0x7c>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a15      	ldr	r2, [pc, #84]	; (8007dc0 <TIM_OC6_SetConfig+0xc4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_OC6_SetConfig+0x7c>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a14      	ldr	r2, [pc, #80]	; (8007dc4 <TIM_OC6_SetConfig+0xc8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d109      	bne.n	8007d8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	029b      	lsls	r3, r3, #10
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	621a      	str	r2, [r3, #32]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800

08007dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e068      	b.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2e      	ldr	r2, [pc, #184]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a2d      	ldr	r2, [pc, #180]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d108      	bne.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1e      	ldr	r2, [pc, #120]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01d      	beq.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d018      	beq.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1b      	ldr	r2, [pc, #108]	; (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a1a      	ldr	r2, [pc, #104]	; (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00e      	beq.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d009      	beq.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a13      	ldr	r2, [pc, #76]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d004      	beq.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d10c      	bne.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40012c00 	.word	0x40012c00
 8007ec4:	40013400 	.word	0x40013400
 8007ec8:	40000400 	.word	0x40000400
 8007ecc:	40000800 	.word	0x40000800
 8007ed0:	40000c00 	.word	0x40000c00
 8007ed4:	40014000 	.word	0x40014000

08007ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e065      	b.n	8007fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	041b      	lsls	r3, r3, #16
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a16      	ldr	r2, [pc, #88]	; (8007fcc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d115      	bne.n	8007fae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	051b      	lsls	r3, r3, #20
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40013400 	.word	0x40013400

08007fd4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b08b      	sub	sp, #44	; 0x2c
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIMEx_ConfigBreakInput+0x20>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e0af      	b.n	8008154 <HAL_TIMEx_ConfigBreakInput+0x180>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3b01      	subs	r3, #1
 8008002:	2b07      	cmp	r3, #7
 8008004:	d83a      	bhi.n	800807c <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	0800802d 	.word	0x0800802d
 8008010:	08008041 	.word	0x08008041
 8008014:	0800807d 	.word	0x0800807d
 8008018:	08008055 	.word	0x08008055
 800801c:	0800807d 	.word	0x0800807d
 8008020:	0800807d 	.word	0x0800807d
 8008024:	0800807d 	.word	0x0800807d
 8008028:	08008069 	.word	0x08008069
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800802c:	2301      	movs	r3, #1
 800802e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008038:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800803a:	2309      	movs	r3, #9
 800803c:	613b      	str	r3, [r7, #16]
      break;
 800803e:	e026      	b.n	800808e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008040:	2302      	movs	r3, #2
 8008042:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008044:	2301      	movs	r3, #1
 8008046:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800804c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800804e:	230a      	movs	r3, #10
 8008050:	613b      	str	r3, [r7, #16]
      break;
 8008052:	e01c      	b.n	800808e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008054:	2304      	movs	r3, #4
 8008056:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008058:	2302      	movs	r3, #2
 800805a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800805c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008060:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8008062:	230b      	movs	r3, #11
 8008064:	613b      	str	r3, [r7, #16]
      break;
 8008066:	e012      	b.n	800808e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800806c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800806e:	2308      	movs	r3, #8
 8008070:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	613b      	str	r3, [r7, #16]
      break;
 800807a:	e008      	b.n	800808e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
      break;
 800808c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d003      	beq.n	800809c <HAL_TIMEx_ConfigBreakInput+0xc8>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d029      	beq.n	80080ee <HAL_TIMEx_ConfigBreakInput+0x11a>
 800809a:	e051      	b.n	8008140 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a2:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	43db      	mvns	r3, r3
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	4013      	ands	r3, r2
 80080ac:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	409a      	lsls	r2, r3
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	4013      	ands	r3, r2
 80080ba:	6a3a      	ldr	r2, [r7, #32]
 80080bc:	4313      	orrs	r3, r2
 80080be:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d00d      	beq.n	80080e4 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	6a3a      	ldr	r2, [r7, #32]
 80080ce:	4013      	ands	r3, r2
 80080d0:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	409a      	lsls	r2, r3
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	4013      	ands	r3, r2
 80080de:	6a3a      	ldr	r2, [r7, #32]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6a3a      	ldr	r2, [r7, #32]
 80080ea:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80080ec:	e02c      	b.n	8008148 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f4:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	6a3a      	ldr	r2, [r7, #32]
 80080fc:	4013      	ands	r3, r2
 80080fe:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	409a      	lsls	r2, r3
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4013      	ands	r3, r2
 800810c:	6a3a      	ldr	r2, [r7, #32]
 800810e:	4313      	orrs	r3, r2
 8008110:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b08      	cmp	r3, #8
 8008118:	d00d      	beq.n	8008136 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	43db      	mvns	r3, r3
 800811e:	6a3a      	ldr	r2, [r7, #32]
 8008120:	4013      	ands	r3, r2
 8008122:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	409a      	lsls	r2, r3
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	4013      	ands	r3, r2
 8008130:	6a3a      	ldr	r2, [r7, #32]
 8008132:	4313      	orrs	r3, r2
 8008134:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800813e:	e003      	b.n	8008148 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008146:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008154:	4618      	mov	r0, r3
 8008156:	372c      	adds	r7, #44	; 0x2c
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e042      	b.n	80081f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7f9 fc53 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2224      	movs	r2, #36	; 0x24
 800818e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0201 	bic.w	r2, r2, #1
 80081a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f82c 	bl	8008200 <UART_SetConfig>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d101      	bne.n	80081b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e022      	b.n	80081f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fb1c 	bl	80087f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fba3 	bl	800893c <UART_CheckIdleState>
 80081f6:	4603      	mov	r3, r0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008204:	b08c      	sub	sp, #48	; 0x30
 8008206:	af00      	add	r7, sp, #0
 8008208:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	431a      	orrs	r2, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	431a      	orrs	r2, r3
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	4313      	orrs	r3, r2
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4baa      	ldr	r3, [pc, #680]	; (80084d8 <UART_SetConfig+0x2d8>)
 8008230:	4013      	ands	r3, r2
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008238:	430b      	orrs	r3, r1
 800823a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a9f      	ldr	r2, [pc, #636]	; (80084dc <UART_SetConfig+0x2dc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008268:	4313      	orrs	r3, r2
 800826a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008276:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008280:	430b      	orrs	r3, r1
 8008282:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	f023 010f 	bic.w	r1, r3, #15
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a90      	ldr	r2, [pc, #576]	; (80084e0 <UART_SetConfig+0x2e0>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d125      	bne.n	80082f0 <UART_SetConfig+0xf0>
 80082a4:	4b8f      	ldr	r3, [pc, #572]	; (80084e4 <UART_SetConfig+0x2e4>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d81a      	bhi.n	80082e8 <UART_SetConfig+0xe8>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <UART_SetConfig+0xb8>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082c9 	.word	0x080082c9
 80082bc:	080082d9 	.word	0x080082d9
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ce:	e116      	b.n	80084fe <UART_SetConfig+0x2fe>
 80082d0:	2302      	movs	r3, #2
 80082d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d6:	e112      	b.n	80084fe <UART_SetConfig+0x2fe>
 80082d8:	2304      	movs	r3, #4
 80082da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082de:	e10e      	b.n	80084fe <UART_SetConfig+0x2fe>
 80082e0:	2308      	movs	r3, #8
 80082e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e6:	e10a      	b.n	80084fe <UART_SetConfig+0x2fe>
 80082e8:	2310      	movs	r3, #16
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ee:	e106      	b.n	80084fe <UART_SetConfig+0x2fe>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a7c      	ldr	r2, [pc, #496]	; (80084e8 <UART_SetConfig+0x2e8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d138      	bne.n	800836c <UART_SetConfig+0x16c>
 80082fa:	4b7a      	ldr	r3, [pc, #488]	; (80084e4 <UART_SetConfig+0x2e4>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008300:	f003 030c 	and.w	r3, r3, #12
 8008304:	2b0c      	cmp	r3, #12
 8008306:	d82d      	bhi.n	8008364 <UART_SetConfig+0x164>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <UART_SetConfig+0x110>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008345 	.word	0x08008345
 8008314:	08008365 	.word	0x08008365
 8008318:	08008365 	.word	0x08008365
 800831c:	08008365 	.word	0x08008365
 8008320:	08008355 	.word	0x08008355
 8008324:	08008365 	.word	0x08008365
 8008328:	08008365 	.word	0x08008365
 800832c:	08008365 	.word	0x08008365
 8008330:	0800834d 	.word	0x0800834d
 8008334:	08008365 	.word	0x08008365
 8008338:	08008365 	.word	0x08008365
 800833c:	08008365 	.word	0x08008365
 8008340:	0800835d 	.word	0x0800835d
 8008344:	2300      	movs	r3, #0
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834a:	e0d8      	b.n	80084fe <UART_SetConfig+0x2fe>
 800834c:	2302      	movs	r3, #2
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008352:	e0d4      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008354:	2304      	movs	r3, #4
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835a:	e0d0      	b.n	80084fe <UART_SetConfig+0x2fe>
 800835c:	2308      	movs	r3, #8
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008362:	e0cc      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008364:	2310      	movs	r3, #16
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836a:	e0c8      	b.n	80084fe <UART_SetConfig+0x2fe>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a5e      	ldr	r2, [pc, #376]	; (80084ec <UART_SetConfig+0x2ec>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d125      	bne.n	80083c2 <UART_SetConfig+0x1c2>
 8008376:	4b5b      	ldr	r3, [pc, #364]	; (80084e4 <UART_SetConfig+0x2e4>)
 8008378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008380:	2b30      	cmp	r3, #48	; 0x30
 8008382:	d016      	beq.n	80083b2 <UART_SetConfig+0x1b2>
 8008384:	2b30      	cmp	r3, #48	; 0x30
 8008386:	d818      	bhi.n	80083ba <UART_SetConfig+0x1ba>
 8008388:	2b20      	cmp	r3, #32
 800838a:	d00a      	beq.n	80083a2 <UART_SetConfig+0x1a2>
 800838c:	2b20      	cmp	r3, #32
 800838e:	d814      	bhi.n	80083ba <UART_SetConfig+0x1ba>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <UART_SetConfig+0x19a>
 8008394:	2b10      	cmp	r3, #16
 8008396:	d008      	beq.n	80083aa <UART_SetConfig+0x1aa>
 8008398:	e00f      	b.n	80083ba <UART_SetConfig+0x1ba>
 800839a:	2300      	movs	r3, #0
 800839c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a0:	e0ad      	b.n	80084fe <UART_SetConfig+0x2fe>
 80083a2:	2302      	movs	r3, #2
 80083a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a8:	e0a9      	b.n	80084fe <UART_SetConfig+0x2fe>
 80083aa:	2304      	movs	r3, #4
 80083ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b0:	e0a5      	b.n	80084fe <UART_SetConfig+0x2fe>
 80083b2:	2308      	movs	r3, #8
 80083b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b8:	e0a1      	b.n	80084fe <UART_SetConfig+0x2fe>
 80083ba:	2310      	movs	r3, #16
 80083bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c0:	e09d      	b.n	80084fe <UART_SetConfig+0x2fe>
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a4a      	ldr	r2, [pc, #296]	; (80084f0 <UART_SetConfig+0x2f0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d125      	bne.n	8008418 <UART_SetConfig+0x218>
 80083cc:	4b45      	ldr	r3, [pc, #276]	; (80084e4 <UART_SetConfig+0x2e4>)
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083d6:	2bc0      	cmp	r3, #192	; 0xc0
 80083d8:	d016      	beq.n	8008408 <UART_SetConfig+0x208>
 80083da:	2bc0      	cmp	r3, #192	; 0xc0
 80083dc:	d818      	bhi.n	8008410 <UART_SetConfig+0x210>
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d00a      	beq.n	80083f8 <UART_SetConfig+0x1f8>
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d814      	bhi.n	8008410 <UART_SetConfig+0x210>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <UART_SetConfig+0x1f0>
 80083ea:	2b40      	cmp	r3, #64	; 0x40
 80083ec:	d008      	beq.n	8008400 <UART_SetConfig+0x200>
 80083ee:	e00f      	b.n	8008410 <UART_SetConfig+0x210>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e082      	b.n	80084fe <UART_SetConfig+0x2fe>
 80083f8:	2302      	movs	r3, #2
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e07e      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008406:	e07a      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840e:	e076      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008416:	e072      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a35      	ldr	r2, [pc, #212]	; (80084f4 <UART_SetConfig+0x2f4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d12a      	bne.n	8008478 <UART_SetConfig+0x278>
 8008422:	4b30      	ldr	r3, [pc, #192]	; (80084e4 <UART_SetConfig+0x2e4>)
 8008424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008430:	d01a      	beq.n	8008468 <UART_SetConfig+0x268>
 8008432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008436:	d81b      	bhi.n	8008470 <UART_SetConfig+0x270>
 8008438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843c:	d00c      	beq.n	8008458 <UART_SetConfig+0x258>
 800843e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008442:	d815      	bhi.n	8008470 <UART_SetConfig+0x270>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <UART_SetConfig+0x250>
 8008448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844c:	d008      	beq.n	8008460 <UART_SetConfig+0x260>
 800844e:	e00f      	b.n	8008470 <UART_SetConfig+0x270>
 8008450:	2300      	movs	r3, #0
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008456:	e052      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008458:	2302      	movs	r3, #2
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845e:	e04e      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008460:	2304      	movs	r3, #4
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008466:	e04a      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008468:	2308      	movs	r3, #8
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846e:	e046      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008470:	2310      	movs	r3, #16
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008476:	e042      	b.n	80084fe <UART_SetConfig+0x2fe>
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <UART_SetConfig+0x2dc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d13a      	bne.n	80084f8 <UART_SetConfig+0x2f8>
 8008482:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <UART_SetConfig+0x2e4>)
 8008484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800848c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008490:	d01a      	beq.n	80084c8 <UART_SetConfig+0x2c8>
 8008492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008496:	d81b      	bhi.n	80084d0 <UART_SetConfig+0x2d0>
 8008498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849c:	d00c      	beq.n	80084b8 <UART_SetConfig+0x2b8>
 800849e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a2:	d815      	bhi.n	80084d0 <UART_SetConfig+0x2d0>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <UART_SetConfig+0x2b0>
 80084a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ac:	d008      	beq.n	80084c0 <UART_SetConfig+0x2c0>
 80084ae:	e00f      	b.n	80084d0 <UART_SetConfig+0x2d0>
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b6:	e022      	b.n	80084fe <UART_SetConfig+0x2fe>
 80084b8:	2302      	movs	r3, #2
 80084ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084be:	e01e      	b.n	80084fe <UART_SetConfig+0x2fe>
 80084c0:	2304      	movs	r3, #4
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c6:	e01a      	b.n	80084fe <UART_SetConfig+0x2fe>
 80084c8:	2308      	movs	r3, #8
 80084ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ce:	e016      	b.n	80084fe <UART_SetConfig+0x2fe>
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d6:	e012      	b.n	80084fe <UART_SetConfig+0x2fe>
 80084d8:	cfff69f3 	.word	0xcfff69f3
 80084dc:	40008000 	.word	0x40008000
 80084e0:	40013800 	.word	0x40013800
 80084e4:	40021000 	.word	0x40021000
 80084e8:	40004400 	.word	0x40004400
 80084ec:	40004800 	.word	0x40004800
 80084f0:	40004c00 	.word	0x40004c00
 80084f4:	40005000 	.word	0x40005000
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4aae      	ldr	r2, [pc, #696]	; (80087bc <UART_SetConfig+0x5bc>)
 8008504:	4293      	cmp	r3, r2
 8008506:	f040 8097 	bne.w	8008638 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800850a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800850e:	2b08      	cmp	r3, #8
 8008510:	d823      	bhi.n	800855a <UART_SetConfig+0x35a>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <UART_SetConfig+0x318>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	0800853d 	.word	0x0800853d
 800851c:	0800855b 	.word	0x0800855b
 8008520:	08008545 	.word	0x08008545
 8008524:	0800855b 	.word	0x0800855b
 8008528:	0800854b 	.word	0x0800854b
 800852c:	0800855b 	.word	0x0800855b
 8008530:	0800855b 	.word	0x0800855b
 8008534:	0800855b 	.word	0x0800855b
 8008538:	08008553 	.word	0x08008553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800853c:	f7fc fbf4 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8008540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008542:	e010      	b.n	8008566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008544:	4b9e      	ldr	r3, [pc, #632]	; (80087c0 <UART_SetConfig+0x5c0>)
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008548:	e00d      	b.n	8008566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800854a:	f7fc fb55 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 800854e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008550:	e009      	b.n	8008566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008558:	e005      	b.n	8008566 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 8130 	beq.w	80087ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	4a94      	ldr	r2, [pc, #592]	; (80087c4 <UART_SetConfig+0x5c4>)
 8008574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008578:	461a      	mov	r2, r3
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008580:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4413      	add	r3, r2
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	429a      	cmp	r2, r3
 8008590:	d305      	bcc.n	800859e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	429a      	cmp	r2, r3
 800859c:	d903      	bls.n	80085a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085a4:	e113      	b.n	80087ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	2200      	movs	r2, #0
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	60fa      	str	r2, [r7, #12]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	4a84      	ldr	r2, [pc, #528]	; (80087c4 <UART_SetConfig+0x5c4>)
 80085b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2200      	movs	r2, #0
 80085bc:	603b      	str	r3, [r7, #0]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085c8:	f7f7 fe18 	bl	80001fc <__aeabi_uldivmod>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4610      	mov	r0, r2
 80085d2:	4619      	mov	r1, r3
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	020b      	lsls	r3, r1, #8
 80085de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085e2:	0202      	lsls	r2, r0, #8
 80085e4:	6979      	ldr	r1, [r7, #20]
 80085e6:	6849      	ldr	r1, [r1, #4]
 80085e8:	0849      	lsrs	r1, r1, #1
 80085ea:	2000      	movs	r0, #0
 80085ec:	460c      	mov	r4, r1
 80085ee:	4605      	mov	r5, r0
 80085f0:	eb12 0804 	adds.w	r8, r2, r4
 80085f4:	eb43 0905 	adc.w	r9, r3, r5
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	469a      	mov	sl, r3
 8008600:	4693      	mov	fp, r2
 8008602:	4652      	mov	r2, sl
 8008604:	465b      	mov	r3, fp
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f7f7 fdf7 	bl	80001fc <__aeabi_uldivmod>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4613      	mov	r3, r2
 8008614:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800861c:	d308      	bcc.n	8008630 <UART_SetConfig+0x430>
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008624:	d204      	bcs.n	8008630 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6a3a      	ldr	r2, [r7, #32]
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	e0ce      	b.n	80087ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008636:	e0ca      	b.n	80087ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008640:	d166      	bne.n	8008710 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008646:	2b08      	cmp	r3, #8
 8008648:	d827      	bhi.n	800869a <UART_SetConfig+0x49a>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0x450>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008675 	.word	0x08008675
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008685 	.word	0x08008685
 800865c:	0800869b 	.word	0x0800869b
 8008660:	0800868b 	.word	0x0800868b
 8008664:	0800869b 	.word	0x0800869b
 8008668:	0800869b 	.word	0x0800869b
 800866c:	0800869b 	.word	0x0800869b
 8008670:	08008693 	.word	0x08008693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008674:	f7fc fb58 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800867a:	e014      	b.n	80086a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800867c:	f7fc fb6a 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008682:	e010      	b.n	80086a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008684:	4b4e      	ldr	r3, [pc, #312]	; (80087c0 <UART_SetConfig+0x5c0>)
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008688:	e00d      	b.n	80086a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800868a:	f7fc fab5 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 800868e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008690:	e009      	b.n	80086a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008698:	e005      	b.n	80086a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8090 	beq.w	80087ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	4a44      	ldr	r2, [pc, #272]	; (80087c4 <UART_SetConfig+0x5c4>)
 80086b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b8:	461a      	mov	r2, r3
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80086c0:	005a      	lsls	r2, r3, #1
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	441a      	add	r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	2b0f      	cmp	r3, #15
 80086d8:	d916      	bls.n	8008708 <UART_SetConfig+0x508>
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e0:	d212      	bcs.n	8008708 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f023 030f 	bic.w	r3, r3, #15
 80086ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	085b      	lsrs	r3, r3, #1
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	8bfb      	ldrh	r3, [r7, #30]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	8bfa      	ldrh	r2, [r7, #30]
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	e062      	b.n	80087ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800870e:	e05e      	b.n	80087ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008710:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008714:	2b08      	cmp	r3, #8
 8008716:	d828      	bhi.n	800876a <UART_SetConfig+0x56a>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x520>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008745 	.word	0x08008745
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008755 	.word	0x08008755
 800872c:	0800876b 	.word	0x0800876b
 8008730:	0800875b 	.word	0x0800875b
 8008734:	0800876b 	.word	0x0800876b
 8008738:	0800876b 	.word	0x0800876b
 800873c:	0800876b 	.word	0x0800876b
 8008740:	08008763 	.word	0x08008763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fc faf0 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8008748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800874a:	e014      	b.n	8008776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fc fb02 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8008750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008752:	e010      	b.n	8008776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <UART_SetConfig+0x5c0>)
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008758:	e00d      	b.n	8008776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800875a:	f7fc fa4d 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 800875e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008760:	e009      	b.n	8008776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008768:	e005      	b.n	8008776 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008774:	bf00      	nop
    }

    if (pclk != 0U)
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d028      	beq.n	80087ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	4a10      	ldr	r2, [pc, #64]	; (80087c4 <UART_SetConfig+0x5c4>)
 8008782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008786:	461a      	mov	r2, r3
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	fbb3 f2f2 	udiv	r2, r3, r2
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	441a      	add	r2, r3
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	fbb2 f3f3 	udiv	r3, r2, r3
 800879e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	2b0f      	cmp	r3, #15
 80087a4:	d910      	bls.n	80087c8 <UART_SetConfig+0x5c8>
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ac:	d20c      	bcs.n	80087c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60da      	str	r2, [r3, #12]
 80087b8:	e009      	b.n	80087ce <UART_SetConfig+0x5ce>
 80087ba:	bf00      	nop
 80087bc:	40008000 	.word	0x40008000
 80087c0:	00f42400 	.word	0x00f42400
 80087c4:	08008e20 	.word	0x08008e20
      }
      else
      {
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2201      	movs	r2, #1
 80087da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2200      	movs	r2, #0
 80087e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2200      	movs	r2, #0
 80087e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3730      	adds	r7, #48	; 0x30
 80087f2:	46bd      	mov	sp, r7
 80087f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01a      	beq.n	800890e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f6:	d10a      	bne.n	800890e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af02      	add	r7, sp, #8
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800894c:	f7f9 fd1e 	bl	800238c <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b08      	cmp	r3, #8
 800895e:	d10e      	bne.n	800897e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f82f 	bl	80089d2 <UART_WaitOnFlagUntilTimeout>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e025      	b.n	80089ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b04      	cmp	r3, #4
 800898a:	d10e      	bne.n	80089aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800898c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f819 	bl	80089d2 <UART_WaitOnFlagUntilTimeout>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e00f      	b.n	80089ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b09c      	sub	sp, #112	; 0x70
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	4613      	mov	r3, r2
 80089e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e2:	e0a9      	b.n	8008b38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ea:	f000 80a5 	beq.w	8008b38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ee:	f7f9 fccd 	bl	800238c <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d302      	bcc.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x32>
 80089fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d140      	bne.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a18:	667b      	str	r3, [r7, #100]	; 0x64
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e6      	bne.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3308      	adds	r3, #8
 8008a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a56:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e5      	bne.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e069      	b.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d051      	beq.n	8008b38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aa2:	d149      	bne.n	8008b38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ace:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	613b      	str	r3, [r7, #16]
   return(result);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b00:	623a      	str	r2, [r7, #32]
 8008b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	69f9      	ldr	r1, [r7, #28]
 8008b06:	6a3a      	ldr	r2, [r7, #32]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e010      	b.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	69da      	ldr	r2, [r3, #28]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4013      	ands	r3, r2
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	bf0c      	ite	eq
 8008b48:	2301      	moveq	r3, #1
 8008b4a:	2300      	movne	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	f43f af46 	beq.w	80089e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3770      	adds	r7, #112	; 0x70
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e027      	b.n	8008bc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2224      	movs	r2, #36	; 0x24
 8008b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ba6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e02d      	b.n	8008c48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2224      	movs	r2, #36	; 0x24
 8008bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0201 	bic.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f84f 	bl	8008ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d101      	bne.n	8008c68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e02d      	b.n	8008cc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2224      	movs	r2, #36	; 0x24
 8008c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0201 	bic.w	r2, r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f811 	bl	8008ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d108      	bne.n	8008cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cec:	e031      	b.n	8008d52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cee:	2308      	movs	r3, #8
 8008cf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	0e5b      	lsrs	r3, r3, #25
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	0f5b      	lsrs	r3, r3, #29
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	7b3a      	ldrb	r2, [r7, #12]
 8008d1a:	4911      	ldr	r1, [pc, #68]	; (8008d60 <UARTEx_SetNbDataToProcess+0x94>)
 8008d1c:	5c8a      	ldrb	r2, [r1, r2]
 8008d1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d22:	7b3a      	ldrb	r2, [r7, #12]
 8008d24:	490f      	ldr	r1, [pc, #60]	; (8008d64 <UARTEx_SetNbDataToProcess+0x98>)
 8008d26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	7b7a      	ldrb	r2, [r7, #13]
 8008d38:	4909      	ldr	r1, [pc, #36]	; (8008d60 <UARTEx_SetNbDataToProcess+0x94>)
 8008d3a:	5c8a      	ldrb	r2, [r1, r2]
 8008d3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d40:	7b7a      	ldrb	r2, [r7, #13]
 8008d42:	4908      	ldr	r1, [pc, #32]	; (8008d64 <UARTEx_SetNbDataToProcess+0x98>)
 8008d44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d52:	bf00      	nop
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	08008e38 	.word	0x08008e38
 8008d64:	08008e40 	.word	0x08008e40

08008d68 <__libc_init_array>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4d0d      	ldr	r5, [pc, #52]	; (8008da0 <__libc_init_array+0x38>)
 8008d6c:	4c0d      	ldr	r4, [pc, #52]	; (8008da4 <__libc_init_array+0x3c>)
 8008d6e:	1b64      	subs	r4, r4, r5
 8008d70:	10a4      	asrs	r4, r4, #2
 8008d72:	2600      	movs	r6, #0
 8008d74:	42a6      	cmp	r6, r4
 8008d76:	d109      	bne.n	8008d8c <__libc_init_array+0x24>
 8008d78:	4d0b      	ldr	r5, [pc, #44]	; (8008da8 <__libc_init_array+0x40>)
 8008d7a:	4c0c      	ldr	r4, [pc, #48]	; (8008dac <__libc_init_array+0x44>)
 8008d7c:	f000 f820 	bl	8008dc0 <_init>
 8008d80:	1b64      	subs	r4, r4, r5
 8008d82:	10a4      	asrs	r4, r4, #2
 8008d84:	2600      	movs	r6, #0
 8008d86:	42a6      	cmp	r6, r4
 8008d88:	d105      	bne.n	8008d96 <__libc_init_array+0x2e>
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d90:	4798      	blx	r3
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7ee      	b.n	8008d74 <__libc_init_array+0xc>
 8008d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9a:	4798      	blx	r3
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	e7f2      	b.n	8008d86 <__libc_init_array+0x1e>
 8008da0:	08008e50 	.word	0x08008e50
 8008da4:	08008e50 	.word	0x08008e50
 8008da8:	08008e50 	.word	0x08008e50
 8008dac:	08008e54 	.word	0x08008e54

08008db0 <memset>:
 8008db0:	4402      	add	r2, r0
 8008db2:	4603      	mov	r3, r0
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d100      	bne.n	8008dba <memset+0xa>
 8008db8:	4770      	bx	lr
 8008dba:	f803 1b01 	strb.w	r1, [r3], #1
 8008dbe:	e7f9      	b.n	8008db4 <memset+0x4>

08008dc0 <_init>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	bf00      	nop
 8008dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc6:	bc08      	pop	{r3}
 8008dc8:	469e      	mov	lr, r3
 8008dca:	4770      	bx	lr

08008dcc <_fini>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	bf00      	nop
 8008dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd2:	bc08      	pop	{r3}
 8008dd4:	469e      	mov	lr, r3
 8008dd6:	4770      	bx	lr
