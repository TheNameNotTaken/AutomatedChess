
numericKeypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c4  080082c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082cc  080082cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  2000000c  080082e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  080082e0  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca00  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb7  00000000  00000000  0003ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0003f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00041348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dcf3  00000000  00000000  00042b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d21b  00000000  00000000  0007087b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123481  00000000  00000000  0008da96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b0f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd4  00000000  00000000  001b0f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800820c 	.word	0x0800820c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800820c 	.word	0x0800820c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b08f      	sub	sp, #60	; 0x3c
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 fc0e 	bl	8001d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f851 	bl	80005b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800050e:	f000 f8b1 	bl	8000674 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fd37 	bl	8000f84 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f8df 	bl	80006d8 <MX_ADC1_Init>
  MX_CAN1_Init();
 800051a:	f000 f941 	bl	80007a0 <MX_CAN1_Init>
  MX_COMP1_Init();
 800051e:	f000 f973 	bl	8000808 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000522:	f000 f99f 	bl	8000864 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000526:	f000 f9c9 	bl	80008bc <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 800052a:	f000 fa01 	bl	8000930 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 fa41 	bl	80009b4 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa8d 	bl	8000a50 <MX_USART2_UART_Init>
  MX_SAI1_Init();
 8000536:	f000 fad9 	bl	8000aec <MX_SAI1_Init>
  MX_SPI1_Init();
 800053a:	f000 fb6f 	bl	8000c1c <MX_SPI1_Init>
  MX_SPI3_Init();
 800053e:	f000 fbab 	bl	8000c98 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000542:	f000 fbe7 	bl	8000d14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000546:	f000 fc49 	bl	8000ddc <MX_TIM3_Init>
  MX_TIM4_Init();
 800054a:	f000 fcad 	bl	8000ea8 <MX_TIM4_Init>
  MX_USB_OTG_FS_USB_Init();
 800054e:	f000 fd11 	bl	8000f74 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  uint32_t keyNum = 16;
 8000552:	2310      	movs	r3, #16
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  GPIO_TypeDef* colPorts[4] = {GPIOF, GPIOE, GPIOE, GPIOF};
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <main+0xa0>)
 8000558:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800055c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800055e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  GPIO_TypeDef* rowPorts[4] = {GPIOD, GPIOD, GPIOF, GPIOE};
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <main+0xa4>)
 8000564:	f107 0414 	add.w	r4, r7, #20
 8000568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  uint16_t colPins[4] = {GPIO_PIN_14, GPIO_PIN_11, GPIO_PIN_9, GPIO_PIN_13};
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <main+0xa8>)
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000578:	e883 0003 	stmia.w	r3, {r0, r1}
	  uint16_t rowPins[4] = {GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_15, GPIO_PIN_13};
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <main+0xac>)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000584:	e883 0003 	stmia.w	r3, {r0, r1}


	  keyNum = keyValue(colPorts, rowPorts, colPins, rowPins);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	f107 0114 	add.w	r1, r7, #20
 8000592:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000596:	f000 fe0f 	bl	80011b8 <keyValue>
 800059a:	6378      	str	r0, [r7, #52]	; 0x34
  {
 800059c:	e7db      	b.n	8000556 <main+0x56>
 800059e:	bf00      	nop
 80005a0:	08008224 	.word	0x08008224
 80005a4:	08008234 	.word	0x08008234
 80005a8:	08008244 	.word	0x08008244
 80005ac:	0800824c 	.word	0x0800824c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fe1c 	bl	80081fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f003 f871 	bl	80036bc <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 feaa 	bl	8001338 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e4:	f003 f83a 	bl	800365c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xc0>)
 80005ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ee:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xc0>)
 80005f0:	f023 0318 	bic.w	r3, r3, #24
 80005f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2314      	movs	r3, #20
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000618:	2310      	movs	r3, #16
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f8f9 	bl	8003824 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000638:	f000 fe7e 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fcff 	bl	8004058 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000660:	f000 fe6a 	bl	8001338 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000664:	f005 fa08 	bl	8005a78 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a6      	sub	sp, #152	; 0x98
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2294      	movs	r2, #148	; 0x94
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f007 fdbb 	bl	80081fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8000686:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800068a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800068c:	2300      	movs	r3, #0
 800068e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000698:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800069c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800069e:	2301      	movs	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006a6:	2318      	movs	r3, #24
 80006a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <PeriphCommonClock_Config+0x60>)
 80006b8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 ff89 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80006c8:	f000 fe36 	bl	8001338 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3798      	adds	r7, #152	; 0x98
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	01110000 	.word	0x01110000

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC1_Init+0xbc>)
 80006f0:	4a29      	ldr	r2, [pc, #164]	; (8000798 <MX_ADC1_Init+0xc0>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC1_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC1_Init+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0xbc>)
 800070e:	2204      	movs	r2, #4
 8000710:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000750:	f001 fcfe 	bl	8002150 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800075a:	f000 fded 	bl	8001338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_ADC1_Init+0xc4>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	237f      	movs	r3, #127	; 0x7f
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC1_Init+0xbc>)
 800077c:	f001 fe34 	bl	80023e8 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000786:	f000 fdd7 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000028 	.word	0x20000028
 8000798:	50040000 	.word	0x50040000
 800079c:	04300002 	.word	0x04300002

080007a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_CAN1_Init+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_CAN1_Init+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_CAN1_Init+0x60>)
 80007ac:	2210      	movs	r2, #16
 80007ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_CAN1_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_CAN1_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_CAN1_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_CAN1_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_CAN1_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_CAN1_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_CAN1_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_CAN1_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_CAN1_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CAN1_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_CAN1_Init+0x60>)
 80007ee:	f002 f9f7 	bl	8002be0 <HAL_CAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fd9e 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000090 	.word	0x20000090
 8000804:	40006400 	.word	0x40006400

08000808 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_COMP1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_COMP1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_COMP1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_COMP1_Init+0x58>)
 8000816:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_COMP1_Init+0x50>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_COMP1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_COMP1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_COMP1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_COMP1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_COMP1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_COMP1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_COMP1_Init+0x50>)
 8000844:	f002 fb70 	bl	8002f28 <HAL_COMP_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 800084e:	f000 fd73 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000b8 	.word	0x200000b8
 800085c:	40010200 	.word	0x40010200
 8000860:	00800030 	.word	0x00800030

08000864 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_COMP2_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_COMP2_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_1_4VREFINT;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000870:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000874:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_COMP2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_COMP2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_COMP2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_COMP2_Init+0x50>)
 80008a2:	f002 fb41 	bl	8002f28 <HAL_COMP_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 fd44 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000e4 	.word	0x200000e4
 80008b8:	40010204 	.word	0x40010204

080008bc <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <MX_I2C1_SMBUS_Init+0x6c>)
 80008c4:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008c8:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_I2C1_SMBUS_Init+0x70>)
 80008ca:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 800090a:	f248 1286 	movw	r2, #33158	; 0x8186
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 8000912:	f005 ff39 	bl	8006788 <HAL_SMBUS_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 800091c:	f000 fd0c 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000110 	.word	0x20000110
 8000928:	40005400 	.word	0x40005400
 800092c:	00707cbb 	.word	0x00707cbb

08000930 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000936:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <MX_I2C2_SMBUS_Init+0x7c>)
 8000938:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800093c:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_I2C2_SMBUS_Init+0x80>)
 800093e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000948:	2202      	movs	r2, #2
 800094a:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000978:	2200      	movs	r2, #0
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800097e:	f248 1286 	movw	r2, #33158	; 0x8186
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000986:	f005 feff 	bl	8006788 <HAL_SMBUS_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000990:	f000 fcd2 	bl	8001338 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000996:	f005 ffaf 	bl	80068f8 <HAL_SMBUS_EnableAlert_IT>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80009a0:	f000 fcca 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000160 	.word	0x20000160
 80009ac:	40005800 	.word	0x40005800
 80009b0:	00707cbb 	.word	0x00707cbb

080009b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_LPUART1_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_LPUART1_UART_Init+0x98>)
 80009c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009fe:	f006 fdd5 	bl	80075ac <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fc96 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 8000a10:	f007 fb06 	bl	8008020 <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 fc8d 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 8000a22:	f007 fb3b 	bl	800809c <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 fc84 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 8000a32:	f007 fabc 	bl	8007fae <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 fc7c 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001b0 	.word	0x200001b0
 8000a48:	40008000 	.word	0x40008000
 8000a4c:	00033324 	.word	0x00033324

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <MX_USART2_UART_Init+0x98>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a9c:	f006 fd86 	bl	80075ac <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000aa6:	f000 fc47 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000aae:	f007 fab7 	bl	8008020 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ab8:	f000 fc3e 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000ac0:	f007 faec 	bl	800809c <HAL_UARTEx_SetRxFifoThreshold>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000aca:	f000 fc35 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000ad0:	f007 fa6d 	bl	8007fae <HAL_UARTEx_DisableFifoMode>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ada:	f000 fc2d 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000240 	.word	0x20000240
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000af0:	4b45      	ldr	r3, [pc, #276]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <MX_SAI1_Init+0x120>)
 8000af4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000af6:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000afc:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b04:	2240      	movs	r2, #64	; 0x40
 8000b06:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b1a:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b20:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b34:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <MX_SAI1_Init+0x124>)
 8000b36:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b38:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b68:	2208      	movs	r2, #8
 8000b6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000b9c:	481a      	ldr	r0, [pc, #104]	; (8000c08 <MX_SAI1_Init+0x11c>)
 8000b9e:	f005 faa7 	bl	80060f0 <HAL_SAI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000ba8:	f000 fbc6 	bl	8001338 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <MX_SAI1_Init+0x12c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <MX_SAI1_Init+0x124>)
 8000bd4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bee:	2302      	movs	r3, #2
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4807      	ldr	r0, [pc, #28]	; (8000c14 <MX_SAI1_Init+0x128>)
 8000bf6:	f005 fa49 	bl	800608c <HAL_SAI_InitProtocol>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000c00:	f000 fb9a 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200002d0 	.word	0x200002d0
 8000c0c:	40015424 	.word	0x40015424
 8000c10:	0002ee00 	.word	0x0002ee00
 8000c14:	20000364 	.word	0x20000364
 8000c18:	40015404 	.word	0x40015404

08000c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_SPI1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c76:	2208      	movs	r2, #8
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c7c:	f005 fe8f 	bl	800699e <HAL_SPI_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 fb57 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200003f8 	.word	0x200003f8
 8000c94:	40013000 	.word	0x40013000

08000c98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MX_SPI3_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cb2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cb6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_SPI3_Init+0x74>)
 8000cf8:	f005 fe51 	bl	800699e <HAL_SPI_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 fb19 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000045c 	.word	0x2000045c
 8000d10:	40003c00 	.word	0x40003c00

08000d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	615a      	str	r2, [r3, #20]
 8000d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d60:	481d      	ldr	r0, [pc, #116]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d62:	f005 febf 	bl	8006ae4 <HAL_TIM_PWM_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d6c:	f000 fae4 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000d80:	f006 fb8c 	bl	800749c <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d8a:	f000 fad5 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8e:	2360      	movs	r3, #96	; 0x60
 8000d90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000da6:	f005 fef5 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000db0:	f000 fac2 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2208      	movs	r2, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000dbc:	f005 feea 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000dc6:	f000 fab7 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM2_Init+0xc4>)
 8000dcc:	f000 fe10 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200004c0 	.word	0x200004c0

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e02:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <MX_TIM3_Init+0xc8>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e26:	481e      	ldr	r0, [pc, #120]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e28:	f005 fe5c 	bl	8006ae4 <HAL_TIM_PWM_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e32:	f000 fa81 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4816      	ldr	r0, [pc, #88]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e46:	f006 fb29 	bl	800749c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e50:	f000 fa72 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e54:	2360      	movs	r3, #96	; 0x60
 8000e56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2204      	movs	r2, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e6c:	f005 fe92 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e76:	f000 fa5f 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e82:	f005 fe87 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e8c:	f000 fa54 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <MX_TIM3_Init+0xc4>)
 8000e92:	f000 fdad 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000050c 	.word	0x2000050c
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000ece:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <MX_TIM4_Init+0xc8>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000ef4:	f005 fdf6 	bl	8006ae4 <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000efe:	f000 fa1b 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4816      	ldr	r0, [pc, #88]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000f12:	f006 fac3 	bl	800749c <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f1c:	f000 fa0c 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2208      	movs	r2, #8
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000f38:	f005 fe2c 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f42:	f000 f9f9 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	220c      	movs	r2, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000f4e:	f005 fe21 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f58:	f000 f9ee 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM4_Init+0xc4>)
 8000f5e:	f000 fd47 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000558 	.word	0x20000558
 8000f70:	40000800 	.word	0x40000800

08000f74 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b82      	ldr	r3, [pc, #520]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a81      	ldr	r2, [pc, #516]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b7f      	ldr	r3, [pc, #508]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b7c      	ldr	r3, [pc, #496]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a7b      	ldr	r2, [pc, #492]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b79      	ldr	r3, [pc, #484]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a75      	ldr	r2, [pc, #468]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b73      	ldr	r3, [pc, #460]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a6f      	ldr	r2, [pc, #444]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <MX_GPIO_Init+0x220>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a69      	ldr	r2, [pc, #420]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a63      	ldr	r2, [pc, #396]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b61      	ldr	r3, [pc, #388]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b5e      	ldr	r3, [pc, #376]	; (80011a4 <MX_GPIO_Init+0x220>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a5d      	ldr	r2, [pc, #372]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001042:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b55      	ldr	r3, [pc, #340]	; (80011a4 <MX_GPIO_Init+0x220>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800105a:	f002 fbd3 	bl	8003804 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, pin1_Pin|pin4_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001064:	4850      	ldr	r0, [pc, #320]	; (80011a8 <MX_GPIO_Init+0x224>)
 8001066:	f002 fae1 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, pin2_Pin|pin3_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001070:	484e      	ldr	r0, [pc, #312]	; (80011ac <MX_GPIO_Init+0x228>)
 8001072:	f002 fadb 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	484d      	ldr	r0, [pc, #308]	; (80011b0 <MX_GPIO_Init+0x22c>)
 800107c:	f002 fad6 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pin1_Pin pin4_Pin */
  GPIO_InitStruct.Pin = pin1_Pin|pin4_Pin;
 8001080:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4843      	ldr	r0, [pc, #268]	; (80011a8 <MX_GPIO_Init+0x224>)
 800109a:	f002 f91d 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin6_Pin */
  GPIO_InitStruct.Pin = pin6_Pin;
 800109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(pin6_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	483d      	ldr	r0, [pc, #244]	; (80011a8 <MX_GPIO_Init+0x224>)
 80010b4:	f002 f910 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : pin2_Pin pin3_Pin */
  GPIO_InitStruct.Pin = pin2_Pin|pin3_Pin;
 80010b8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4836      	ldr	r0, [pc, #216]	; (80011ac <MX_GPIO_Init+0x228>)
 80010d2:	f002 f901 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin5_Pin */
  GPIO_InitStruct.Pin = pin5_Pin;
 80010d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(pin5_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4830      	ldr	r0, [pc, #192]	; (80011ac <MX_GPIO_Init+0x228>)
 80010ec:	f002 f8f4 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010f0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	482a      	ldr	r0, [pc, #168]	; (80011b0 <MX_GPIO_Init+0x22c>)
 8001106:	f002 f8e7 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : pin7_Pin pin8_Pin */
  GPIO_InitStruct.Pin = pin7_Pin|pin8_Pin;
 800110a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001114:	2302      	movs	r3, #2
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4825      	ldr	r0, [pc, #148]	; (80011b4 <MX_GPIO_Init+0x230>)
 8001120:	f002 f8da 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001124:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	481e      	ldr	r0, [pc, #120]	; (80011b4 <MX_GPIO_Init+0x230>)
 800113a:	f002 f8cd 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800113e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001150:	230a      	movs	r3, #10
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f002 f8bb 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f002 f8ad 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_GPIO_Init+0x22c>)
 8001196:	f002 f89f 	bl	80032d8 <HAL_GPIO_Init>

}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	; 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48001400 	.word	0x48001400
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000c00 	.word	0x48000c00

080011b8 <keyValue>:

/* USER CODE BEGIN 4 */



uint32_t keyValue(GPIO_TypeDef* colPorts[], GPIO_TypeDef* rowPorts[], uint16_t colPins[], uint16_t rowPins[]) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]

	uint32_t keyNum = 16;
 80011c6:	2310      	movs	r3, #16
 80011c8:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < 4; ++i) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	e010      	b.n	80011f2 <keyValue+0x3a>
		//HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
		HAL_GPIO_WritePin(colPorts[i], colPins[i], GPIO_PIN_RESET);
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	f002 fa20 	bl	800362c <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; ++i) {
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	3301      	adds	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	ddeb      	ble.n	80011d0 <keyValue+0x18>
	}

	for (int i = 0; i < 4; ++i) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e093      	b.n	8001326 <keyValue+0x16e>
		HAL_GPIO_WritePin(colPorts[i], colPins[i], GPIO_PIN_SET);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4413      	add	r3, r2
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	2201      	movs	r2, #1
 8001214:	4619      	mov	r1, r3
 8001216:	f002 fa09 	bl	800362c <HAL_GPIO_WritePin>


		for (int j = 0; j < 4; ++j) {
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	e06e      	b.n	80012fe <keyValue+0x146>
			if (HAL_GPIO_ReadPin(rowPorts[j], rowPins[j])) {
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	4413      	add	r3, r2
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f002 f9e1 	bl	80035fc <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <keyValue+0x140>
				if (i == 0) {
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d114      	bne.n	8001270 <keyValue+0xb8>
					if (j == 0) {
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <keyValue+0x9a>
						keyNum = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	e052      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 1) {
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d102      	bne.n	800125e <keyValue+0xa6>
						keyNum = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	e04c      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 2) {
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d102      	bne.n	800126a <keyValue+0xb2>
						keyNum = 7;
 8001264:	2307      	movs	r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e046      	b.n	80012f8 <keyValue+0x140>
					} else {
						keyNum = 14; // *
 800126a:	230e      	movs	r3, #14
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e043      	b.n	80012f8 <keyValue+0x140>
					}

				} else if (i == 1) {
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d114      	bne.n	80012a0 <keyValue+0xe8>
					if (j == 0) {
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <keyValue+0xca>
						keyNum = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e03a      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 1) {
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d102      	bne.n	800128e <keyValue+0xd6>
						keyNum = 5;
 8001288:	2305      	movs	r3, #5
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	e034      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 2) {
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d102      	bne.n	800129a <keyValue+0xe2>
						keyNum = 8;
 8001294:	2308      	movs	r3, #8
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	e02e      	b.n	80012f8 <keyValue+0x140>
					} else {
						keyNum = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e02b      	b.n	80012f8 <keyValue+0x140>
					}
				} else if (i == 2) {
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d114      	bne.n	80012d0 <keyValue+0x118>
					if (j == 0) {
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <keyValue+0xfa>
						keyNum = 3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	e022      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 1) {
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <keyValue+0x106>
						keyNum = 6;
 80012b8:	2306      	movs	r3, #6
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	e01c      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 2) {
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d102      	bne.n	80012ca <keyValue+0x112>
						keyNum = 9;
 80012c4:	2309      	movs	r3, #9
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e016      	b.n	80012f8 <keyValue+0x140>
					} else {
						keyNum = 15; // #
 80012ca:	230f      	movs	r3, #15
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e013      	b.n	80012f8 <keyValue+0x140>
					}
				} else {
					if (j == 0) {
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <keyValue+0x124>
						keyNum = 10; //A
 80012d6:	230a      	movs	r3, #10
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e00d      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 1) {
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d102      	bne.n	80012e8 <keyValue+0x130>
					 	keyNum = 11; // B
 80012e2:	230b      	movs	r3, #11
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e007      	b.n	80012f8 <keyValue+0x140>
					} else if (j == 2) {
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d102      	bne.n	80012f4 <keyValue+0x13c>
						keyNum = 12; // C
 80012ee:	230c      	movs	r3, #12
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e001      	b.n	80012f8 <keyValue+0x140>
					} else {
						keyNum = 13; // D
 80012f4:	230d      	movs	r3, #13
 80012f6:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < 4; ++j) {
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	3301      	adds	r3, #1
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b03      	cmp	r3, #3
 8001302:	dd8d      	ble.n	8001220 <keyValue+0x68>
				}

			}
		}

		HAL_GPIO_WritePin(colPorts[i], colPins[i], GPIO_PIN_RESET);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	f002 f986 	bl	800362c <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; ++i) {
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b03      	cmp	r3, #3
 800132a:	f77f af68 	ble.w	80011fe <keyValue+0x46>
	}

	return keyNum;
 800132e:	69fb      	ldr	r3, [r7, #28]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x44>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6613      	str	r3, [r2, #96]	; 0x60
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x44>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x44>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6593      	str	r3, [r2, #88]	; 0x58
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x44>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <HAL_ADC_MspInit+0xd4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d154      	bne.n	8001458 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_ADC_MspInit+0xd8>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800140e:	233f      	movs	r3, #63	; 0x3f
 8001410:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001412:	230b      	movs	r3, #11
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <HAL_ADC_MspInit+0xdc>)
 8001422:	f001 ff59 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001426:	230a      	movs	r3, #10
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800142a:	230b      	movs	r3, #11
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f001 ff4c 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001444:	230b      	movs	r3, #11
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <HAL_ADC_MspInit+0xe0>)
 8001454:	f001 ff40 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	; 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	50040000 	.word	0x50040000
 8001464:	40021000 	.word	0x40021000
 8001468:	48000800 	.word	0x48000800
 800146c:	48000400 	.word	0x48000400

08001470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_CAN_MspInit+0x7c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d127      	bne.n	80014e2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_CAN_MspInit+0x80>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <HAL_CAN_MspInit+0x80>)
 8001498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_CAN_MspInit+0x80>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_CAN_MspInit+0x80>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_CAN_MspInit+0x80>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_CAN_MspInit+0x80>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c2:	2303      	movs	r3, #3
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014d2:	2309      	movs	r3, #9
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <HAL_CAN_MspInit+0x84>)
 80014de:	f001 fefb 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40006400 	.word	0x40006400
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000c00 	.word	0x48000c00

080014f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_COMP_MspInit+0x98>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d118      	bne.n	800154c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_COMP_MspInit+0x9c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_COMP_MspInit+0x9c>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_COMP_MspInit+0x9c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001532:	2304      	movs	r3, #4
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001536:	2303      	movs	r3, #3
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4814      	ldr	r0, [pc, #80]	; (8001598 <HAL_COMP_MspInit+0xa0>)
 8001546:	f001 fec7 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800154a:	e01c      	b.n	8001586 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_COMP_MspInit+0xa4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d117      	bne.n	8001586 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_COMP_MspInit+0x9c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_COMP_MspInit+0x9c>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_COMP_MspInit+0x9c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_COMP_MspInit+0xa0>)
 8001582:	f001 fea9 	bl	80032d8 <HAL_GPIO_Init>
}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40010200 	.word	0x40010200
 8001594:	40021000 	.word	0x40021000
 8001598:	48000400 	.word	0x48000400
 800159c:	40010204 	.word	0x40010204

080015a0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0b0      	sub	sp, #192	; 0xc0
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	2294      	movs	r2, #148	; 0x94
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f006 fe1b 	bl	80081fc <memset>
  if(hsmbus->Instance==I2C1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_SMBUS_MspInit+0x134>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d13c      	bne.n	800164a <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d0:	2340      	movs	r3, #64	; 0x40
 80015d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fff9 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 80015e8:	f7ff fea6 	bl	8001338 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001604:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161e:	2304      	movs	r3, #4
 8001620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001628:	4619      	mov	r1, r3
 800162a:	482c      	ldr	r0, [pc, #176]	; (80016dc <HAL_SMBUS_MspInit+0x13c>)
 800162c:	f001 fe54 	bl	80032d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 8001636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163a:	6593      	str	r3, [r2, #88]	; 0x58
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001648:	e03f      	b.n	80016ca <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <HAL_SMBUS_MspInit+0x140>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d13a      	bne.n	80016ca <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001658:	2300      	movs	r3, #0
 800165a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f002 ffb7 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 800166c:	f7ff fe64 	bl	8001338 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001688:	2307      	movs	r3, #7
 800168a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168e:	2312      	movs	r3, #18
 8001690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001694:	2301      	movs	r3, #1
 8001696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016a0:	2304      	movs	r3, #4
 80016a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016aa:	4619      	mov	r1, r3
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <HAL_SMBUS_MspInit+0x144>)
 80016ae:	f001 fe13 	bl	80032d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 80016b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_SMBUS_MspInit+0x138>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
}
 80016ca:	bf00      	nop
 80016cc:	37c0      	adds	r7, #192	; 0xc0
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400
 80016e0:	40005800 	.word	0x40005800
 80016e4:	48001400 	.word	0x48001400

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0b0      	sub	sp, #192	; 0xc0
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	2294      	movs	r2, #148	; 0x94
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f006 fd77 	bl	80081fc <memset>
  if(huart->Instance==LPUART1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a43      	ldr	r2, [pc, #268]	; (8001820 <HAL_UART_MspInit+0x138>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d13e      	bne.n	8001796 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001718:	2320      	movs	r3, #32
 800171a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800171c:	2300      	movs	r3, #0
 800171e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4618      	mov	r0, r3
 8001726:	f002 ff55 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001730:	f7ff fe02 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_UART_MspInit+0x13c>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_UART_MspInit+0x13c>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4a34      	ldr	r2, [pc, #208]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_UART_MspInit+0x13c>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001764:	f002 f84e 	bl	8003804 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001768:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001782:	2308      	movs	r3, #8
 8001784:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001788:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800178c:	4619      	mov	r1, r3
 800178e:	4826      	ldr	r0, [pc, #152]	; (8001828 <HAL_UART_MspInit+0x140>)
 8001790:	f001 fda2 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001794:	e03f      	b.n	8001816 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a24      	ldr	r2, [pc, #144]	; (800182c <HAL_UART_MspInit+0x144>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d13a      	bne.n	8001816 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 ff11 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80017b8:	f7ff fdbe 	bl	8001338 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6593      	str	r3, [r2, #88]	; 0x58
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017ec:	2378      	movs	r3, #120	; 0x78
 80017ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001804:	2307      	movs	r3, #7
 8001806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800180e:	4619      	mov	r1, r3
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <HAL_UART_MspInit+0x148>)
 8001812:	f001 fd61 	bl	80032d8 <HAL_GPIO_Init>
}
 8001816:	bf00      	nop
 8001818:	37c0      	adds	r7, #192	; 0xc0
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40008000 	.word	0x40008000
 8001824:	40021000 	.word	0x40021000
 8001828:	48001800 	.word	0x48001800
 800182c:	40004400 	.word	0x40004400
 8001830:	48000c00 	.word	0x48000c00

08001834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_SPI_MspInit+0xd8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d129      	bne.n	80018aa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 800185c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001860:	6613      	str	r3, [r2, #96]	; 0x60
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a27      	ldr	r2, [pc, #156]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001886:	23f0      	movs	r3, #240	; 0xf0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001896:	2305      	movs	r3, #5
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f001 fd18 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018a8:	e02c      	b.n	8001904 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_SPI_MspInit+0xe0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d127      	bne.n	8001904 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	4a15      	ldr	r2, [pc, #84]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	6593      	str	r3, [r2, #88]	; 0x58
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_SPI_MspInit+0xdc>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018e4:	2338      	movs	r3, #56	; 0x38
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018f4:	2306      	movs	r3, #6
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <HAL_SPI_MspInit+0xe4>)
 8001900:	f001 fcea 	bl	80032d8 <HAL_GPIO_Init>
}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013000 	.word	0x40013000
 8001910:	40021000 	.word	0x40021000
 8001914:	40003c00 	.word	0x40003c00
 8001918:	48000400 	.word	0x48000400

0800191c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d10c      	bne.n	8001958 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001956:	e03e      	b.n	80019d6 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_TIM_PWM_MspInit+0xc8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10c      	bne.n	800197c <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6593      	str	r3, [r2, #88]	; 0x58
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
}
 800197a:	e02c      	b.n	80019d6 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_TIM_PWM_MspInit+0xcc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d127      	bne.n	80019d6 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <HAL_TIM_PWM_MspInit+0xd0>)
 80019d2:	f001 fc81 	bl	80032d8 <HAL_GPIO_Init>
}
 80019d6:	bf00      	nop
 80019d8:	3730      	adds	r7, #48	; 0x30
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40000800 	.word	0x40000800
 80019ec:	48001000 	.word	0x48001000

080019f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d13a      	bne.n	8001a88 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a4e      	ldr	r2, [pc, #312]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a52:	2301      	movs	r3, #1
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f001 fc3a 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4834      	ldr	r0, [pc, #208]	; (8001b54 <HAL_TIM_MspPostInit+0x164>)
 8001a82:	f001 fc29 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a86:	e05f      	b.n	8001b48 <HAL_TIM_MspPostInit+0x158>
  else if(htim->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_TIM_MspPostInit+0x168>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d138      	bne.n	8001b04 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	481d      	ldr	r0, [pc, #116]	; (8001b54 <HAL_TIM_MspPostInit+0x164>)
 8001ade:	f001 fbfb 	bl	80032d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af2:	2302      	movs	r3, #2
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4817      	ldr	r0, [pc, #92]	; (8001b5c <HAL_TIM_MspPostInit+0x16c>)
 8001afe:	f001 fbeb 	bl	80032d8 <HAL_GPIO_Init>
}
 8001b02:	e021      	b.n	8001b48 <HAL_TIM_MspPostInit+0x158>
  else if(htim->Instance==TIM4)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <HAL_TIM_MspPostInit+0x170>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11c      	bne.n	8001b48 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <HAL_TIM_MspPostInit+0x174>)
 8001b44:	f001 fbc8 	bl	80032d8 <HAL_GPIO_Init>
}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48000400 	.word	0x48000400
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	40000800 	.word	0x40000800
 8001b64:	48000c00 	.word	0x48000c00

08001b68 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_SAI_MspInit+0xdc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d124      	bne.n	8001bc4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_SAI_MspInit+0xe0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10b      	bne.n	8001b9a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_SAI_MspInit+0xe4>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <HAL_SAI_MspInit+0xe4>)
 8001b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_SAI_MspInit+0xe4>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_SAI_MspInit+0xe0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a29      	ldr	r2, [pc, #164]	; (8001c48 <HAL_SAI_MspInit+0xe0>)
 8001ba2:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ba4:	2374      	movs	r3, #116	; 0x74
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001bb4:	230d      	movs	r3, #13
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4824      	ldr	r0, [pc, #144]	; (8001c50 <HAL_SAI_MspInit+0xe8>)
 8001bc0:	f001 fb8a 	bl	80032d8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_SAI_MspInit+0xec>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d135      	bne.n	8001c3a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_SAI_MspInit+0xe0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_SAI_MspInit+0xe4>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_SAI_MspInit+0xe4>)
 8001bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be0:	6613      	str	r3, [r2, #96]	; 0x60
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_SAI_MspInit+0xe4>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_SAI_MspInit+0xe0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_SAI_MspInit+0xe0>)
 8001bf6:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c08:	230d      	movs	r3, #13
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	480f      	ldr	r0, [pc, #60]	; (8001c50 <HAL_SAI_MspInit+0xe8>)
 8001c14:	f001 fb60 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c18:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c2a:	230d      	movs	r3, #13
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4808      	ldr	r0, [pc, #32]	; (8001c58 <HAL_SAI_MspInit+0xf0>)
 8001c36:	f001 fb4f 	bl	80032d8 <HAL_GPIO_Init>

    }
}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40015404 	.word	0x40015404
 8001c48:	200005a4 	.word	0x200005a4
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48001000 	.word	0x48001000
 8001c54:	40015424 	.word	0x40015424
 8001c58:	48001400 	.word	0x48001400

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f892 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd8:	f7ff ffea 	bl	8001cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f006 fa57 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d06:	f7fe fbfb 	bl	8000500 <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d0c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d18:	080082d4 	.word	0x080082d4
  ldr r2, =_sbss
 8001d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d20:	200005ac 	.word	0x200005ac

08001d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_IRQHandler>

08001d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f001 fa9d 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f80e 	bl	8001d58 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fafc 	bl	8001344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_InitTick+0x70>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fa9b 	bl	80032be <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d809      	bhi.n	8001da8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f001 fa73 	bl	8003286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_InitTick+0x74>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e007      	b.n	8001db8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e004      	b.n	8001db8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e001      	b.n	8001db8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008
 8001df4:	200005a8 	.word	0x200005a8

08001df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	200005a8 	.word	0x200005a8

08001e10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3360      	adds	r3, #96	; 0x60
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LL_ADC_SetOffset+0x44>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	03fff000 	.word	0x03fff000

08001ec0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3360      	adds	r3, #96	; 0x60
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3360      	adds	r3, #96	; 0x60
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3330      	adds	r3, #48	; 0x30
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	211f      	movs	r1, #31
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0e9b      	lsrs	r3, r3, #26
 8001f80:	f003 011f 	and.w	r1, r3, #31
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0e5b      	lsrs	r3, r3, #25
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	0d1b      	lsrs	r3, r3, #20
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2107      	movs	r1, #7
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0d1b      	lsrs	r3, r3, #20
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0318 	and.w	r3, r3, #24
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <LL_ADC_SetChannelSingleDiff+0x44>)
 800201c:	40d9      	lsrs	r1, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	400b      	ands	r3, r1
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	431a      	orrs	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	0007ffff 	.word	0x0007ffff

08002040 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6093      	str	r3, [r2, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002078:	d101      	bne.n	800207e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800209c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020c8:	d101      	bne.n	80020ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_IsEnabled+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_IsEnabled+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d101      	bne.n	8002140 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e12f      	b.n	80023ca <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff f907 	bl	800138c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff67 	bl	8002064 <LL_ADC_IsDeepPowerDownEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff4d 	bl	8002040 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff82 	bl	80020b4 <LL_ADC_IsInternalRegulatorEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff66 	bl	800208c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c0:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <HAL_ADC_Init+0x284>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	4a84      	ldr	r2, [pc, #528]	; (80023d8 <HAL_ADC_Init+0x288>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	3301      	adds	r3, #1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff64 	bl	80020b4 <LL_ADC_IsInternalRegulatorEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff75 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80c8 	bne.w	80023b8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 80c4 	bne.w	80023b8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002238:	f043 0202 	orr.w	r2, r3, #2
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff49 	bl	80020dc <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002250:	4862      	ldr	r0, [pc, #392]	; (80023dc <HAL_ADC_Init+0x28c>)
 8002252:	f7ff ff43 	bl	80020dc <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4619      	mov	r1, r3
 8002262:	485f      	ldr	r0, [pc, #380]	; (80023e0 <HAL_ADC_Init+0x290>)
 8002264:	f7ff fdd4 	bl	8001e10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e5b      	ldrb	r3, [r3, #25]
 800226c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002272:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002278:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800227e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002286:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d106      	bne.n	80022a4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	045b      	lsls	r3, r3, #17
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_ADC_Init+0x294>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff12 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 80022de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff1f 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 80022ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d140      	bne.n	8002374 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d13d      	bne.n	8002374 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e1b      	ldrb	r3, [r3, #24]
 8002300:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002302:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231a:	f023 0306 	bic.w	r3, r3, #6
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	430b      	orrs	r3, r1
 8002326:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800232e:	2b01      	cmp	r3, #1
 8002330:	d118      	bne.n	8002364 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002354:	430a      	orrs	r2, r1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	e007      	b.n	8002374 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10c      	bne.n	8002396 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f023 010f 	bic.w	r1, r3, #15
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	1e5a      	subs	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	e007      	b.n	80023a6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020f 	bic.w	r2, r2, #15
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	659a      	str	r2, [r3, #88]	; 0x58
 80023b6:	e007      	b.n	80023c8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f043 0210 	orr.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000000 	.word	0x20000000
 80023d8:	053e2d63 	.word	0x053e2d63
 80023dc:	50040000 	.word	0x50040000
 80023e0:	50040300 	.word	0x50040300
 80023e4:	fff0c007 	.word	0xfff0c007

080023e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0b6      	sub	sp, #216	; 0xd8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x22>
 8002406:	2302      	movs	r3, #2
 8002408:	e3d5      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x7ce>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fe73 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 83ba 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d824      	bhi.n	8002476 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	3b02      	subs	r3, #2
 8002432:	2b03      	cmp	r3, #3
 8002434:	d81b      	bhi.n	800246e <HAL_ADC_ConfigChannel+0x86>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <HAL_ADC_ConfigChannel+0x54>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	0800244d 	.word	0x0800244d
 8002440:	08002455 	.word	0x08002455
 8002444:	0800245d 	.word	0x0800245d
 8002448:	08002465 	.word	0x08002465
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	220c      	movs	r2, #12
 8002450:	605a      	str	r2, [r3, #4]
          break;
 8002452:	e011      	b.n	8002478 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2212      	movs	r2, #18
 8002458:	605a      	str	r2, [r3, #4]
          break;
 800245a:	e00d      	b.n	8002478 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2218      	movs	r2, #24
 8002460:	605a      	str	r2, [r3, #4]
          break;
 8002462:	e009      	b.n	8002478 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800246a:	605a      	str	r2, [r3, #4]
          break;
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2206      	movs	r2, #6
 8002472:	605a      	str	r2, [r3, #4]
          break;
 8002474:	e000      	b.n	8002478 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002476:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff fd5f 	bl	8001f48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe37 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002494:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fe43 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 81c1 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 81bc 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c2:	d10f      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff fd66 	bl	8001fa0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fd20 	bl	8001f22 <LL_ADC_SetSamplingTimeCommonConfig>
 80024e2:	e00e      	b.n	8002502 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fd55 	bl	8001fa0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fd10 	bl	8001f22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d00a      	beq.n	800253a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002534:	f7ff fca0 	bl	8001e78 <LL_ADC_SetOffset>
 8002538:	e17b      	b.n	8002832 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fcbd 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x17e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fcb2 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	e01e      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1bc>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fca7 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800258c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e004      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d4>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e018      	b.n	80025ee <HAL_ADC_ConfigChannel+0x206>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80025e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d106      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fc76 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fc5a 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <HAL_ADC_ConfigChannel+0x244>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fc4f 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	e01e      	b.n	800266a <HAL_ADC_ConfigChannel+0x282>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fc44 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800264a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e004      	b.n	8002668 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800265e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x29a>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x2cc>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800269a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800269e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80026aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fc13 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2102      	movs	r1, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fbf7 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x30a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2102      	movs	r1, #2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fbec 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x348>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fbe1 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e004      	b.n	800272e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x360>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	e016      	b.n	8002776 <HAL_ADC_ConfigChannel+0x38e>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800275a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e004      	b.n	8002776 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800276c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fbb2 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2103      	movs	r1, #3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fb96 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x3cc>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2103      	movs	r1, #3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fb8b 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	e017      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x3fc>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2103      	movs	r1, #3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fb80 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80027da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x414>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e011      	b.n	8002820 <HAL_ADC_ConfigChannel+0x438>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800280a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2103      	movs	r1, #3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb5d 	bl	8001eec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fc50 	bl	80020dc <LL_ADC_IsEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8140 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	461a      	mov	r2, r3
 8002852:	f7ff fbd1 	bl	8001ff8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a8f      	ldr	r2, [pc, #572]	; (8002a98 <HAL_ADC_ConfigChannel+0x6b0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	f040 8131 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_ADC_ConfigChannel+0x4a2>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	3301      	adds	r3, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2b09      	cmp	r3, #9
 8002880:	bf94      	ite	ls
 8002882:	2301      	movls	r3, #1
 8002884:	2300      	movhi	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	e019      	b.n	80028be <HAL_ADC_ConfigChannel+0x4d6>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800289c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d079      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_ADC_ConfigChannel+0x4f6>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	e015      	b.n	800290a <HAL_ADC_ConfigChannel+0x522>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	069b      	lsls	r3, r3, #26
 8002906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_ADC_ConfigChannel+0x542>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	e017      	b.n	800295a <HAL_ADC_ConfigChannel+0x572>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	ea42 0103 	orr.w	r1, r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x598>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	e018      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x5ca>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b2:	430b      	orrs	r3, r1
 80029b4:	e081      	b.n	8002aba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x5ea>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	3301      	adds	r3, #1
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d0:	e015      	b.n	80029fe <HAL_ADC_ConfigChannel+0x616>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	069b      	lsls	r3, r3, #26
 80029fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x636>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	e017      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x666>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	ea42 0103 	orr.w	r1, r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x692>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b1e      	subs	r3, #30
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x6d0>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	613b      	str	r3, [r7, #16]
  return result;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e006      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x6bc>
 8002a96:	bf00      	nop
 8002a98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6892      	ldr	r2, [r2, #8]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7ff fa6e 	bl	8001fa0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d06c      	beq.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad0:	483c      	ldr	r0, [pc, #240]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ad2:	f7ff f9c3 	bl	8001e5c <LL_ADC_GetCommonPathInternalCh>
 8002ad6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3a      	ldr	r2, [pc, #232]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d127      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d121      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <HAL_ADC_ConfigChannel+0x7e4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d157      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002afe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b02:	4619      	mov	r1, r3
 8002b04:	482f      	ldr	r0, [pc, #188]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b06:	f7ff f996 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b24:	e002      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f9      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b32:	e03a      	b.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d113      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x77e>
 8002b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_ADC_ConfigChannel+0x7e4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d12a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4819      	ldr	r0, [pc, #100]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b60:	f7ff f969 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b64:	e021      	b.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_ADC_ConfigChannel+0x7f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d11c      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d116      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <HAL_ADC_ConfigChannel+0x7e4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b8e:	4619      	mov	r1, r3
 8002b90:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b92:	f7ff f950 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
 8002b96:	e008      	b.n	8002baa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	37d8      	adds	r7, #216	; 0xd8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	80080000 	.word	0x80080000
 8002bc4:	50040300 	.word	0x50040300
 8002bc8:	c7520000 	.word	0xc7520000
 8002bcc:	50040000 	.word	0x50040000
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	053e2d63 	.word	0x053e2d63
 8002bd8:	cb840000 	.word	0xcb840000
 8002bdc:	80000001 	.word	0x80000001

08002be0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0ed      	b.n	8002dce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fc36 	bl	8001470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c14:	f7ff f8f0 	bl	8001df8 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c1a:	e012      	b.n	8002c42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c1c:	f7ff f8ec 	bl	8001df8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b0a      	cmp	r3, #10
 8002c28:	d90b      	bls.n	8002c42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0c5      	b.n	8002dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0e5      	beq.n	8002c1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0202 	bic.w	r2, r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7ff f8ca 	bl	8001df8 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c66:	e012      	b.n	8002c8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c68:	f7ff f8c6 	bl	8001df8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b0a      	cmp	r3, #10
 8002c74:	d90b      	bls.n	8002c8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2205      	movs	r2, #5
 8002c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e09f      	b.n	8002dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e5      	bne.n	8002c68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e007      	b.n	8002cc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e5b      	ldrb	r3, [r3, #25]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d108      	bne.n	8002ce0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e007      	b.n	8002cf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7e9b      	ldrb	r3, [r3, #26]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d108      	bne.n	8002d0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0220 	bic.w	r2, r2, #32
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7edb      	ldrb	r3, [r3, #27]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0210 	orr.w	r2, r2, #16
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7f1b      	ldrb	r3, [r3, #28]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0208 	orr.w	r2, r2, #8
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e007      	b.n	8002d6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0208 	bic.w	r2, r2, #8
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7f5b      	ldrb	r3, [r3, #29]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0204 	orr.w	r2, r2, #4
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e007      	b.n	8002d98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4904      	ldr	r1, [pc, #16]	; (8002df8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40010400 	.word	0x40010400

08002dfc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	4904      	ldr	r1, [pc, #16]	; (8002e20 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40010400 	.word	0x40010400

08002e24 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]

}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40010400 	.word	0x40010400

08002e48 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4904      	ldr	r1, [pc, #16]	; (8002e6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010400 	.word	0x40010400

08002e70 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]

}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40010400 	.word	0x40010400

08002e94 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]

}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40010400 	.word	0x40010400

08002ebc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40010400 	.word	0x40010400

08002ee0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	4904      	ldr	r1, [pc, #16]	; (8002f04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60cb      	str	r3, [r1, #12]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010400 	.word	0x40010400

08002f08 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6153      	str	r3, [r2, #20]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40010400 	.word	0x40010400

08002f28 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e0d1      	b.n	80030e8 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f52:	d102      	bne.n	8002f5a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e0c6      	b.n	80030e8 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d115      	bne.n	8002f92 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f74:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <HAL_COMP_Init+0x1cc>)
 8002f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f78:	4a5e      	ldr	r2, [pc, #376]	; (80030f4 <HAL_COMP_Init+0x1cc>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8002f80:	4b5c      	ldr	r3, [pc, #368]	; (80030f4 <HAL_COMP_Init+0x1cc>)
 8002f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fe fab3 	bl	80014f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <HAL_COMP_Init+0x1d0>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fde:	d106      	bne.n	8002fee <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_COMP_Init+0x1d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a45      	ldr	r2, [pc, #276]	; (80030fc <HAL_COMP_Init+0x1d4>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e005      	b.n	8002ffa <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002fee:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_COMP_Init+0x1d4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a42      	ldr	r2, [pc, #264]	; (80030fc <HAL_COMP_Init+0x1d4>)
 8002ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff8:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <HAL_COMP_Init+0x10e>
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d113      	bne.n	8003036 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800300e:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <HAL_COMP_Init+0x1d8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	099b      	lsrs	r3, r3, #6
 8003014:	4a3b      	ldr	r2, [pc, #236]	; (8003104 <HAL_COMP_Init+0x1dc>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003028:	e002      	b.n	8003030 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3b01      	subs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f9      	bne.n	800302a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_COMP_Init+0x1e0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d102      	bne.n	8003046 <HAL_COMP_Init+0x11e>
 8003040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003044:	e001      	b.n	800304a <HAL_COMP_Init+0x122>
 8003046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800304a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d037      	beq.n	80030c8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003064:	6938      	ldr	r0, [r7, #16]
 8003066:	f7ff ff03 	bl	8002e70 <LL_EXTI_EnableRisingTrig_0_31>
 800306a:	e002      	b.n	8003072 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800306c:	6938      	ldr	r0, [r7, #16]
 800306e:	f7ff ff11 	bl	8002e94 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800307e:	6938      	ldr	r0, [r7, #16]
 8003080:	f7ff ff1c 	bl	8002ebc <LL_EXTI_EnableFallingTrig_0_31>
 8003084:	e002      	b.n	800308c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003086:	6938      	ldr	r0, [r7, #16]
 8003088:	f7ff ff2a 	bl	8002ee0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800308c:	6938      	ldr	r0, [r7, #16]
 800308e:	f7ff ff3b 	bl	8002f08 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800309e:	6938      	ldr	r0, [r7, #16]
 80030a0:	f7ff fec0 	bl	8002e24 <LL_EXTI_EnableEvent_0_31>
 80030a4:	e002      	b.n	80030ac <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80030a6:	6938      	ldr	r0, [r7, #16]
 80030a8:	f7ff fece 	bl	8002e48 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80030b8:	6938      	ldr	r0, [r7, #16]
 80030ba:	f7ff fe8d 	bl	8002dd8 <LL_EXTI_EnableIT_0_31>
 80030be:	e009      	b.n	80030d4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80030c0:	6938      	ldr	r0, [r7, #16]
 80030c2:	f7ff fe9b 	bl	8002dfc <LL_EXTI_DisableIT_0_31>
 80030c6:	e005      	b.n	80030d4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80030c8:	6938      	ldr	r0, [r7, #16]
 80030ca:	f7ff febd 	bl	8002e48 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80030ce:	6938      	ldr	r0, [r7, #16]
 80030d0:	f7ff fe94 	bl	8002dfc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80030e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	ff207d03 	.word	0xff207d03
 80030fc:	40010204 	.word	0x40010204
 8003100:	20000000 	.word	0x20000000
 8003104:	053e2d63 	.word	0x053e2d63
 8003108:	40010200 	.word	0x40010200

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	; (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800323c:	d301      	bcc.n	8003242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <SysTick_Config+0x40>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324a:	210f      	movs	r1, #15
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f7ff ff8e 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <SysTick_Config+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <SysTick_Config+0x40>)
 800325c:	2207      	movs	r2, #7
 800325e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff47 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003298:	f7ff ff5c 	bl	8003154 <__NVIC_GetPriorityGrouping>
 800329c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff8e 	bl	80031c4 <NVIC_EncodePriority>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff5d 	bl	8003170 <__NVIC_SetPriority>
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ffb0 	bl	800322c <SysTick_Config>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e6:	e166      	b.n	80035b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8158 	beq.w	80035b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d005      	beq.n	8003318 <HAL_GPIO_Init+0x40>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d130      	bne.n	800337a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800334e:	2201      	movs	r2, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 0201 	and.w	r2, r3, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d017      	beq.n	80033b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d123      	bne.n	800340a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3208      	adds	r2, #8
 80033ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	08da      	lsrs	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3208      	adds	r2, #8
 8003404:	6939      	ldr	r1, [r7, #16]
 8003406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0203 	and.w	r2, r3, #3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80b2 	beq.w	80035b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	4a60      	ldr	r2, [pc, #384]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6613      	str	r3, [r2, #96]	; 0x60
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003464:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <HAL_GPIO_Init+0x300>)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800348e:	d02b      	beq.n	80034e8 <HAL_GPIO_Init+0x210>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d025      	beq.n	80034e4 <HAL_GPIO_Init+0x20c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a51      	ldr	r2, [pc, #324]	; (80035e0 <HAL_GPIO_Init+0x308>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d01f      	beq.n	80034e0 <HAL_GPIO_Init+0x208>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a50      	ldr	r2, [pc, #320]	; (80035e4 <HAL_GPIO_Init+0x30c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d019      	beq.n	80034dc <HAL_GPIO_Init+0x204>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <HAL_GPIO_Init+0x310>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_GPIO_Init+0x200>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_GPIO_Init+0x314>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00d      	beq.n	80034d4 <HAL_GPIO_Init+0x1fc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <HAL_GPIO_Init+0x318>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <HAL_GPIO_Init+0x1f8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_GPIO_Init+0x31c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_GPIO_Init+0x1f4>
 80034c8:	2307      	movs	r3, #7
 80034ca:	e00e      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034cc:	2308      	movs	r3, #8
 80034ce:	e00c      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034d0:	2306      	movs	r3, #6
 80034d2:	e00a      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034d4:	2305      	movs	r3, #5
 80034d6:	e008      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034d8:	2304      	movs	r3, #4
 80034da:	e006      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034dc:	2303      	movs	r3, #3
 80034de:	e004      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e002      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_GPIO_Init+0x212>
 80034e8:	2300      	movs	r3, #0
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	4093      	lsls	r3, r2
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034fa:	4937      	ldr	r1, [pc, #220]	; (80035d8 <HAL_GPIO_Init+0x300>)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003508:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_GPIO_Init+0x320>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800352c:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <HAL_GPIO_Init+0x320>)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003532:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003556:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_GPIO_Init+0x320>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035aa:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <HAL_GPIO_Init+0x320>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f ae91 	bne.w	80032e8 <HAL_GPIO_Init+0x10>
  }
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40010000 	.word	0x40010000
 80035dc:	48000400 	.word	0x48000400
 80035e0:	48000800 	.word	0x48000800
 80035e4:	48000c00 	.word	0x48000c00
 80035e8:	48001000 	.word	0x48001000
 80035ec:	48001400 	.word	0x48001400
 80035f0:	48001800 	.word	0x48001800
 80035f4:	48001c00 	.word	0x48001c00
 80035f8:	40010400 	.word	0x40010400

080035fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e001      	b.n	800361e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e002      	b.n	8003650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40007000 	.word	0x40007000

0800367c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d102      	bne.n	8003694 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800368e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003692:	e00b      	b.n	80036ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d102      	bne.n	80036aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80036a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a8:	e000      	b.n	80036ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80036aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007000 	.word	0x40007000

080036bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d141      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d131      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d8:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	4a46      	ldr	r2, [pc, #280]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f0:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036f8:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2232      	movs	r2, #50	; 0x32
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370e:	e002      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003716:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d102      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f2      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d158      	bne.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e057      	b.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800373c:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800374c:	e04d      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d141      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003756:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d131      	bne.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376a:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800377c:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2232      	movs	r2, #50	; 0x32
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379a:	e002      	b.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d102      	bne.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f2      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d112      	bne.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e011      	b.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037d8:	e007      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40007000 	.word	0x40007000
 80037fc:	20000000 	.word	0x20000000
 8003800:	431bde83 	.word	0x431bde83

08003804 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_PWREx_EnableVddIO2+0x1c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_PWREx_EnableVddIO2+0x1c>)
 800380e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003812:	6053      	str	r3, [r2, #4]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40007000 	.word	0x40007000

08003824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f000 bc08 	b.w	8004048 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003838:	4b96      	ldr	r3, [pc, #600]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003842:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80e4 	beq.w	8003a22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_RCC_OscConfig+0x4c>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	f040 808b 	bne.w	800397e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b01      	cmp	r3, #1
 800386c:	f040 8087 	bne.w	800397e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003870:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x64>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e3df      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_RCC_OscConfig+0x7e>
 8003898:	4b7e      	ldr	r3, [pc, #504]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a0:	e005      	b.n	80038ae <HAL_RCC_OscConfig+0x8a>
 80038a2:	4b7c      	ldr	r3, [pc, #496]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d223      	bcs.n	80038fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fdcc 	bl	8004454 <RCC_SetFlashLatencyFromMSIRange>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e3c0      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c6:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a72      	ldr	r2, [pc, #456]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b70      	ldr	r3, [pc, #448]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	496d      	ldr	r1, [pc, #436]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e4:	4b6b      	ldr	r3, [pc, #428]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	4968      	ldr	r1, [pc, #416]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
 80038f8:	e025      	b.n	8003946 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fa:	4b66      	ldr	r3, [pc, #408]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a65      	ldr	r2, [pc, #404]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b63      	ldr	r3, [pc, #396]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4960      	ldr	r1, [pc, #384]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003918:	4b5e      	ldr	r3, [pc, #376]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	495b      	ldr	r1, [pc, #364]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fd8c 	bl	8004454 <RCC_SetFlashLatencyFromMSIRange>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e380      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003946:	f000 fcc1 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800394a:	4602      	mov	r2, r0
 800394c:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4950      	ldr	r1, [pc, #320]	; (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003958:	5ccb      	ldrb	r3, [r1, r3]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a4e      	ldr	r2, [pc, #312]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003964:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003966:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <HAL_RCC_OscConfig+0x27c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe f9f4 	bl	8001d58 <HAL_InitTick>
 8003970:	4603      	mov	r3, r0
 8003972:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d052      	beq.n	8003a20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	e364      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d032      	beq.n	80039ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003986:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a42      	ldr	r2, [pc, #264]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003992:	f7fe fa31 	bl	8001df8 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800399a:	f7fe fa2d 	bl	8001df8 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e34d      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b8:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039be:	f043 0308 	orr.w	r3, r3, #8
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4930      	ldr	r1, [pc, #192]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	492b      	ldr	r1, [pc, #172]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
 80039ea:	e01a      	b.n	8003a22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f8:	f7fe f9fe 	bl	8001df8 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a00:	f7fe f9fa 	bl	8001df8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e31a      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1dc>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d073      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x21c>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d10e      	bne.n	8003a58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d063      	beq.n	8003b14 <HAL_RCC_OscConfig+0x2f0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d15f      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e2f7      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x24c>
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e025      	b.n	8003abc <HAL_RCC_OscConfig+0x298>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a78:	d114      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x280>
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a02      	ldr	r2, [pc, #8]	; (8003a94 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e013      	b.n	8003abc <HAL_RCC_OscConfig+0x298>
 8003a94:	40021000 	.word	0x40021000
 8003a98:	08008254 	.word	0x08008254
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	4ba0      	ldr	r3, [pc, #640]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a9f      	ldr	r2, [pc, #636]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b9d      	ldr	r3, [pc, #628]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a9c      	ldr	r2, [pc, #624]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe f998 	bl	8001df8 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe f994 	bl	8001df8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2b4      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ade:	4b92      	ldr	r3, [pc, #584]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x2a8>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe f984 	bl	8001df8 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe f980 	bl	8001df8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e2a0      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b06:	4b88      	ldr	r3, [pc, #544]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2d0>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d060      	beq.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x310>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d119      	bne.n	8003b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d116      	bne.n	8003b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b34:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x328>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e27d      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	4973      	ldr	r1, [pc, #460]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b60:	e040      	b.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d023      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6e      	ldr	r2, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fe f93f 	bl	8001df8 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7e:	f7fe f93b 	bl	8001df8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e25b      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b90:	4b65      	ldr	r3, [pc, #404]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9c:	4b62      	ldr	r3, [pc, #392]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	495f      	ldr	r1, [pc, #380]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
 8003bb0:	e018      	b.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5c      	ldr	r2, [pc, #368]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f91b 	bl	8001df8 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe f917 	bl	8001df8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e237      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd8:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfe:	4a4a      	ldr	r2, [pc, #296]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fe f8f6 	bl	8001df8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fe f8f2 	bl	8001df8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e212      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c22:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <HAL_RCC_OscConfig+0x3ec>
 8003c30:	e01b      	b.n	8003c6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c32:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c38:	4a3b      	ldr	r2, [pc, #236]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fe f8d9 	bl	8001df8 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4a:	f7fe f8d5 	bl	8001df8 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e1f5      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ef      	bne.n	8003c4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a6 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10d      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
 8003c94:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_RCC_OscConfig+0x508>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d118      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <HAL_RCC_OscConfig+0x508>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x508>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbc:	f7fe f89c 	bl	8001df8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fe f898 	bl	8001df8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1b8      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x508>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d108      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4d8>
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cfa:	e029      	b.n	8003d50 <HAL_RCC_OscConfig+0x52c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d115      	bne.n	8003d30 <HAL_RCC_OscConfig+0x50c>
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a03      	ldr	r2, [pc, #12]	; (8003d28 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d24:	e014      	b.n	8003d50 <HAL_RCC_OscConfig+0x52c>
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	4b9d      	ldr	r3, [pc, #628]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a9c      	ldr	r2, [pc, #624]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d40:	4b99      	ldr	r3, [pc, #612]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	4a98      	ldr	r2, [pc, #608]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe f84e 	bl	8001df8 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fe f84a 	bl	8001df8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e168      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b8c      	ldr	r3, [pc, #560]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ed      	beq.n	8003d60 <HAL_RCC_OscConfig+0x53c>
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fe f837 	bl	8001df8 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fe f833 	bl	8001df8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e151      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ed      	bne.n	8003d8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b7b      	ldr	r3, [pc, #492]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	4a7a      	ldr	r2, [pc, #488]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd8:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dde:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fe f806 	bl	8001df8 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df0:	f7fe f802 	bl	8001df8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e122      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e02:	4b69      	ldr	r3, [pc, #420]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ef      	beq.n	8003df0 <HAL_RCC_OscConfig+0x5cc>
 8003e10:	e01b      	b.n	8003e4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e18:	4a63      	ldr	r2, [pc, #396]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd ffe9 	bl	8001df8 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e2a:	f7fd ffe5 	bl	8001df8 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e105      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e3c:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80f9 	beq.w	8004046 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	f040 80cf 	bne.w	8003ffc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0203 	and.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d12c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d123      	bne.n	8003ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d11b      	bne.n	8003ecc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d113      	bne.n	8003ecc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d071      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d068      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0ac      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003efa:	f7fd ff7d 	bl	8001df8 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fd ff79 	bl	8001df8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e099      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_RCC_OscConfig+0x788>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f30:	3a01      	subs	r2, #1
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	4311      	orrs	r1, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f3a:	0212      	lsls	r2, r2, #8
 8003f3c:	4311      	orrs	r1, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f42:	0852      	lsrs	r2, r2, #1
 8003f44:	3a01      	subs	r2, #1
 8003f46:	0552      	lsls	r2, r2, #21
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f4e:	0852      	lsrs	r2, r2, #1
 8003f50:	3a01      	subs	r2, #1
 8003f52:	0652      	lsls	r2, r2, #25
 8003f54:	4311      	orrs	r1, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5a:	06d2      	lsls	r2, r2, #27
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	4912      	ldr	r1, [pc, #72]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f7c:	f7fd ff3c 	bl	8001df8 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fd ff38 	bl	8001df8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e058      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <HAL_RCC_OscConfig+0x784>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa2:	e050      	b.n	8004046 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04f      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d144      	bne.n	8004046 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a23      	ldr	r2, [pc, #140]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a20      	ldr	r2, [pc, #128]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fd4:	f7fd ff10 	bl	8001df8 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd ff0c 	bl	8001df8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e02c      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x7b8>
 8003ffa:	e024      	b.n	8004046 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d01f      	beq.n	8004042 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8004008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd fef3 	bl	8001df8 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd feef 	bl	8001df8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e00f      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	4905      	ldr	r1, [pc, #20]	; (8004050 <HAL_RCC_OscConfig+0x82c>)
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x830>)
 800403c:	4013      	ands	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
 8004040:	e001      	b.n	8004046 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	feeefffc 	.word	0xfeeefffc

08004058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e11d      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b90      	ldr	r3, [pc, #576]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 020f 	bic.w	r2, r3, #15
 8004086:	498b      	ldr	r1, [pc, #556]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b89      	ldr	r3, [pc, #548]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e105      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d908      	bls.n	80040ce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b7e      	ldr	r3, [pc, #504]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	497b      	ldr	r1, [pc, #492]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d079      	beq.n	80041ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d11e      	bne.n	8004120 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e2:	4b75      	ldr	r3, [pc, #468]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0dc      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80040f2:	f000 fa09 	bl	8004508 <RCC_GetSysClockFreqFromPLLSource>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4a70      	ldr	r2, [pc, #448]	; (80042bc <HAL_RCC_ClockConfig+0x264>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d946      	bls.n	800418c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80040fe:	4b6e      	ldr	r3, [pc, #440]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d140      	bne.n	800418c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410a:	4b6b      	ldr	r3, [pc, #428]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004112:	4a69      	ldr	r2, [pc, #420]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004118:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e035      	b.n	800418c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004128:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d115      	bne.n	8004160 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b9      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004140:	4b5d      	ldr	r3, [pc, #372]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0ad      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004150:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0a5      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004160:	f000 f8b4 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8004164:	4603      	mov	r3, r0
 8004166:	4a55      	ldr	r2, [pc, #340]	; (80042bc <HAL_RCC_ClockConfig+0x264>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d90f      	bls.n	800418c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800416c:	4b52      	ldr	r3, [pc, #328]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004178:	4b4f      	ldr	r3, [pc, #316]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004180:	4a4d      	ldr	r2, [pc, #308]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004186:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800418c:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f023 0203 	bic.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4947      	ldr	r1, [pc, #284]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fd fe2b 	bl	8001df8 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a6:	f7fd fe27 	bl	8001df8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e077      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041bc:	4b3e      	ldr	r3, [pc, #248]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 020c 	and.w	r2, r3, #12
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d1eb      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041d4:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a37      	ldr	r2, [pc, #220]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80041da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041de:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d208      	bcs.n	800420e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	492b      	ldr	r1, [pc, #172]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d210      	bcs.n	800423e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 020f 	bic.w	r2, r3, #15
 8004224:	4923      	ldr	r1, [pc, #140]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422c:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e036      	b.n	80042ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4918      	ldr	r1, [pc, #96]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4910      	ldr	r1, [pc, #64]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800427c:	f000 f826 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	490c      	ldr	r1, [pc, #48]	; (80042c0 <HAL_RCC_ClockConfig+0x268>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <HAL_RCC_ClockConfig+0x26c>)
 800429a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x270>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fd59 	bl	8001d58 <HAL_InitTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40021000 	.word	0x40021000
 80042bc:	04c4b400 	.word	0x04c4b400
 80042c0:	08008254 	.word	0x08008254
 80042c4:	20000000 	.word	0x20000000
 80042c8:	20000004 	.word	0x20000004

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	; 0x24
 80042d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x34>
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d121      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d11e      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800430c:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e005      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004328:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004330:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10d      	bne.n	8004354 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b04      	cmp	r3, #4
 8004342:	d102      	bne.n	800434a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e004      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d101      	bne.n	8004354 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004352:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d134      	bne.n	80043c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0xa6>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d003      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0xac>
 8004370:	e005      	b.n	800437e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004374:	617b      	str	r3, [r7, #20]
      break;
 8004376:	e005      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800437a:	617b      	str	r3, [r7, #20]
      break;
 800437c:	e002      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	617b      	str	r3, [r7, #20]
      break;
 8004382:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	3301      	adds	r3, #1
 8004390:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	fb03 f202 	mul.w	r2, r3, r2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	0e5b      	lsrs	r3, r3, #25
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	3301      	adds	r3, #1
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043c4:	69bb      	ldr	r3, [r7, #24]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	0800826c 	.word	0x0800826c
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	007a1200 	.word	0x007a1200

080043e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004400:	f7ff fff0 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4904      	ldr	r1, [pc, #16]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	08008264 	.word	0x08008264

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800442c:	f7ff ffda 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0adb      	lsrs	r3, r3, #11
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4904      	ldr	r1, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x28>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	08008264 	.word	0x08008264

08004454 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800446c:	f7ff f906 	bl	800367c <HAL_PWREx_GetVoltageRange>
 8004470:	6178      	str	r0, [r7, #20]
 8004472:	e014      	b.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447e:	6593      	str	r3, [r2, #88]	; 0x58
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800448c:	f7ff f8f6 	bl	800367c <HAL_PWREx_GetVoltageRange>
 8004490:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a4:	d10b      	bne.n	80044be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d913      	bls.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2ba0      	cmp	r3, #160	; 0xa0
 80044b0:	d902      	bls.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b2:	2302      	movs	r3, #2
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	e00d      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b8:	2301      	movs	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	e00a      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b7f      	cmp	r3, #127	; 0x7f
 80044c2:	d902      	bls.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80044c4:	2302      	movs	r3, #2
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	e004      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b70      	cmp	r3, #112	; 0x70
 80044ce:	d101      	bne.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d0:	2301      	movs	r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 020f 	bic.w	r2, r3, #15
 80044dc:	4909      	ldr	r1, [pc, #36]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d001      	beq.n	80044f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	40022000 	.word	0x40022000

08004508 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b03      	cmp	r3, #3
 800451c:	d00b      	beq.n	8004536 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d825      	bhi.n	8004570 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d008      	beq.n	800453c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d11f      	bne.n	8004570 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004532:	613b      	str	r3, [r7, #16]
    break;
 8004534:	e01f      	b.n	8004576 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004538:	613b      	str	r3, [r7, #16]
    break;
 800453a:	e01c      	b.n	8004576 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800453c:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e005      	b.n	8004564 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456c:	613b      	str	r3, [r7, #16]
    break;
 800456e:	e002      	b.n	8004576 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
    break;
 8004574:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004576:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	3301      	adds	r3, #1
 8004582:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	fb03 f202 	mul.w	r2, r3, r2
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0e5b      	lsrs	r3, r3, #25
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	3301      	adds	r3, #1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80045b6:	683b      	ldr	r3, [r7, #0]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40021000 	.word	0x40021000
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200
 80045d0:	0800826c 	.word	0x0800826c

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045dc:	2300      	movs	r3, #0
 80045de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e0:	2300      	movs	r3, #0
 80045e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d040      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d02a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	d825      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045fc:	2b60      	cmp	r3, #96	; 0x60
 80045fe:	d026      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004600:	2b60      	cmp	r3, #96	; 0x60
 8004602:	d821      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d006      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d81d      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d009      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d010      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004614:	e018      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004616:	4b89      	ldr	r3, [pc, #548]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4a88      	ldr	r2, [pc, #544]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004622:	e015      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fa34 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004634:	e00c      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3320      	adds	r3, #32
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f001 fb1f 	bl	8005c80 <RCCEx_PLLSAI2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	74fb      	strb	r3, [r7, #19]
      break;
 800464c:	e000      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800464e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004656:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800465c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004664:	4975      	ldr	r1, [pc, #468]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800466c:	e001      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d047      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d030      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468c:	d82a      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800468e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004692:	d02a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004698:	d824      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d008      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a4:	d81e      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d010      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046b0:	e018      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046b2:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4a61      	ldr	r2, [pc, #388]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046be:	e015      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 f9e6 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046d0:	e00c      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3320      	adds	r3, #32
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fad1 	bl	8005c80 <RCCEx_PLLSAI2_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e2:	e003      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	74fb      	strb	r3, [r7, #19]
      break;
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80046ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f2:	4b52      	ldr	r3, [pc, #328]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	494e      	ldr	r1, [pc, #312]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004708:	e001      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 809f 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471c:	2300      	movs	r3, #0
 800471e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004720:	4b46      	ldr	r3, [pc, #280]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a40      	ldr	r2, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474e:	2301      	movs	r3, #1
 8004750:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004752:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475e:	f7fd fb4b 	bl	8001df8 <HAL_GetTick>
 8004762:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004764:	e009      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd fb47 	bl	8001df8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d902      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	74fb      	strb	r3, [r7, #19]
        break;
 8004778:	e005      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ef      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d15b      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01f      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d019      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b6:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d016      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fd fb06 	bl	8001df8 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ee:	e00b      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fd fb02 	bl	8001df8 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d902      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	74fb      	strb	r3, [r7, #19]
            break;
 8004806:	e006      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ec      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10c      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004834:	e008      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	74bb      	strb	r3, [r7, #18]
 800483a:	e005      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004848:	7c7b      	ldrb	r3, [r7, #17]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4ba0      	ldr	r3, [pc, #640]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	4a9f      	ldr	r2, [pc, #636]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004858:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004866:	4b9a      	ldr	r3, [pc, #616]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 0203 	bic.w	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	4996      	ldr	r1, [pc, #600]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004888:	4b91      	ldr	r3, [pc, #580]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 020c 	bic.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	498e      	ldr	r1, [pc, #568]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048aa:	4b89      	ldr	r3, [pc, #548]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	4985      	ldr	r1, [pc, #532]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048cc:	4b80      	ldr	r3, [pc, #512]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	497d      	ldr	r1, [pc, #500]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ee:	4b78      	ldr	r3, [pc, #480]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	4974      	ldr	r1, [pc, #464]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004910:	4b6f      	ldr	r3, [pc, #444]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	496c      	ldr	r1, [pc, #432]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004932:	4b67      	ldr	r3, [pc, #412]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004940:	4963      	ldr	r1, [pc, #396]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004954:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004962:	495b      	ldr	r1, [pc, #364]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	4952      	ldr	r1, [pc, #328]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004998:	4b4d      	ldr	r3, [pc, #308]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	494a      	ldr	r1, [pc, #296]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ba:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	4941      	ldr	r1, [pc, #260]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049dc:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	4939      	ldr	r1, [pc, #228]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d028      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	4930      	ldr	r1, [pc, #192]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a28:	60d3      	str	r3, [r2, #12]
 8004a2a:	e011      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 f82b 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d04d      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a64:	d108      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a76:	e012      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a7e:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a84:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a96:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e020      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a02      	ldr	r2, [pc, #8]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aca:	60d3      	str	r3, [r2, #12]
 8004acc:	e014      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ffd7 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d028      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b04:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b12:	4947      	ldr	r1, [pc, #284]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b22:	d106      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b24:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a41      	ldr	r2, [pc, #260]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2e:	60d3      	str	r3, [r2, #12]
 8004b30:	e011      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 ffa8 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01e      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b72:	492f      	ldr	r1, [pc, #188]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 ff83 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bac:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bb2:	f023 0204 	bic.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbc:	491c      	ldr	r1, [pc, #112]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bd6:	f023 0218 	bic.w	r2, r3, #24
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	4913      	ldr	r1, [pc, #76]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d017      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	490a      	ldr	r1, [pc, #40]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c16:	d105      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c46:	d13e      	bne.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004c48:	4bb6      	ldr	r3, [pc, #728]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5a:	d028      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	f200 86f4 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c74:	d00e      	beq.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004c76:	f000 beea 	b.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c7a:	4baa      	ldr	r3, [pc, #680]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	f040 86e4 	bne.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8e:	61fb      	str	r3, [r7, #28]
      break;
 8004c90:	f000 bedf 	b.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c94:	4ba3      	ldr	r3, [pc, #652]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	f040 86d9 	bne.w	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8004ca4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ca8:	61fb      	str	r3, [r7, #28]
      break;
 8004caa:	f000 bed4 	b.w	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004cae:	4b9d      	ldr	r3, [pc, #628]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cba:	f040 86ce 	bne.w	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004cbe:	4b9a      	ldr	r3, [pc, #616]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004cc0:	61fb      	str	r3, [r7, #28]
      break;
 8004cc2:	f000 beca 	b.w	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc6:	4b97      	ldr	r3, [pc, #604]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d036      	beq.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d840      	bhi.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d003      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d020      	beq.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004ce8:	e039      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004cea:	4b8e      	ldr	r3, [pc, #568]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d116      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004cf6:	4b8b      	ldr	r3, [pc, #556]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004d02:	4b88      	ldr	r3, [pc, #544]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	091b      	lsrs	r3, r3, #4
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	e005      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004d0e:	4b85      	ldr	r3, [pc, #532]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	4a84      	ldr	r2, [pc, #528]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d22:	e01f      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
      break;
 8004d28:	e01c      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d2a:	4b7e      	ldr	r3, [pc, #504]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d102      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004d38:	4b7d      	ldr	r3, [pc, #500]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004d3a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d3c:	e012      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
      break;
 8004d42:	e00f      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d44:	4b77      	ldr	r3, [pc, #476]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d50:	d102      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004d52:	4b78      	ldr	r3, [pc, #480]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004d54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
      break;
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
      break;
 8004d62:	bf00      	nop
    }

    switch(PeriphClk)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d6a:	f000 8606 	beq.w	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d74:	f200 8673 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d7e:	f000 8469 	beq.w	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d88:	f200 8669 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d92:	f000 8531 	beq.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	f200 865f 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004da6:	f000 8187 	beq.w	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004db0:	f200 8655 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dba:	f000 80cd 	beq.w	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc4:	f200 864b 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	f000 8430 	beq.w	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	f200 8641 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de2:	f000 83e4 	beq.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dec:	f200 8637 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df6:	f000 80af 	beq.w	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	f200 862d 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	f000 809d 	beq.w	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	f200 8623 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	f000 808b 	beq.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e28:	f200 8619 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	f000 8554 	beq.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	f200 860f 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e46:	f000 8500 	beq.w	800584a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e50:	f200 8605 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	f000 84a1 	beq.w	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e64:	f200 85fb 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	f000 846c 	beq.w	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	f200 85f3 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d84c      	bhi.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 85ec 	beq.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	2b1f      	cmp	r3, #31
 8004e8c:	f200 85e7 	bhi.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	080052ad 	.word	0x080052ad
 8004e9c:	0800531b 	.word	0x0800531b
 8004ea0:	08005a5f 	.word	0x08005a5f
 8004ea4:	080053af 	.word	0x080053af
 8004ea8:	08005a5f 	.word	0x08005a5f
 8004eac:	08005a5f 	.word	0x08005a5f
 8004eb0:	08005a5f 	.word	0x08005a5f
 8004eb4:	08005427 	.word	0x08005427
 8004eb8:	08005a5f 	.word	0x08005a5f
 8004ebc:	08005a5f 	.word	0x08005a5f
 8004ec0:	08005a5f 	.word	0x08005a5f
 8004ec4:	08005a5f 	.word	0x08005a5f
 8004ec8:	08005a5f 	.word	0x08005a5f
 8004ecc:	08005a5f 	.word	0x08005a5f
 8004ed0:	08005a5f 	.word	0x08005a5f
 8004ed4:	080054ab 	.word	0x080054ab
 8004ed8:	08005a5f 	.word	0x08005a5f
 8004edc:	08005a5f 	.word	0x08005a5f
 8004ee0:	08005a5f 	.word	0x08005a5f
 8004ee4:	08005a5f 	.word	0x08005a5f
 8004ee8:	08005a5f 	.word	0x08005a5f
 8004eec:	08005a5f 	.word	0x08005a5f
 8004ef0:	08005a5f 	.word	0x08005a5f
 8004ef4:	08005a5f 	.word	0x08005a5f
 8004ef8:	08005a5f 	.word	0x08005a5f
 8004efc:	08005a5f 	.word	0x08005a5f
 8004f00:	08005a5f 	.word	0x08005a5f
 8004f04:	08005a5f 	.word	0x08005a5f
 8004f08:	08005a5f 	.word	0x08005a5f
 8004f0c:	08005a5f 	.word	0x08005a5f
 8004f10:	08005a5f 	.word	0x08005a5f
 8004f14:	0800552d 	.word	0x0800552d
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	f000 83e8 	beq.w	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004f20:	f000 bd9d 	b.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004f24:	40021000 	.word	0x40021000
 8004f28:	0003d090 	.word	0x0003d090
 8004f2c:	0800826c 	.word	0x0800826c
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f3e:	f000 ff93 	bl	8005e68 <RCCEx_GetSAIxPeriphCLKFreq>
 8004f42:	61f8      	str	r0, [r7, #28]
      break;
 8004f44:	f000 bd8e 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f4e:	f000 ff8b 	bl	8005e68 <RCCEx_GetSAIxPeriphCLKFreq>
 8004f52:	61f8      	str	r0, [r7, #28]
      break;
 8004f54:	f000 bd86 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004f58:	4b9a      	ldr	r3, [pc, #616]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f6a:	d015      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f72:	f200 8092 	bhi.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7c:	d029      	beq.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f84:	f200 8089 	bhi.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d07b      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f94:	d04a      	beq.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004f96:	e080      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f98:	4b8a      	ldr	r3, [pc, #552]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d17d      	bne.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004fa4:	4b87      	ldr	r3, [pc, #540]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004fb0:	4b84      	ldr	r3, [pc, #528]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	e005      	b.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004fbc:	4b81      	ldr	r3, [pc, #516]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	4a7f      	ldr	r2, [pc, #508]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fce:	61fb      	str	r3, [r7, #28]
          break;
 8004fd0:	e066      	b.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004fd2:	4b7c      	ldr	r3, [pc, #496]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fde:	d162      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004fe0:	4b78      	ldr	r3, [pc, #480]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fec:	d15b      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fee:	4b75      	ldr	r3, [pc, #468]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	fb03 f202 	mul.w	r2, r3, r2
 8005002:	4b70      	ldr	r3, [pc, #448]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	3301      	adds	r3, #1
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005014:	4b6b      	ldr	r3, [pc, #428]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	0d5b      	lsrs	r3, r3, #21
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	61fb      	str	r3, [r7, #28]
          break;
 800502a:	e03c      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800502c:	4b65      	ldr	r3, [pc, #404]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005038:	d138      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800503a:	4b62      	ldr	r3, [pc, #392]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005046:	d131      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005048:	4b5e      	ldr	r3, [pc, #376]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005052:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	fb03 f202 	mul.w	r2, r3, r2
 800505c:	4b59      	ldr	r3, [pc, #356]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	3301      	adds	r3, #1
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800506e:	4b55      	ldr	r3, [pc, #340]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	0d5b      	lsrs	r3, r3, #21
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	3301      	adds	r3, #1
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	61fb      	str	r3, [r7, #28]
          break;
 8005084:	e012      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005086:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d10e      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005094:	4b4d      	ldr	r3, [pc, #308]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005096:	61fb      	str	r3, [r7, #28]
          break;
 8005098:	e00b      	b.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800509a:	bf00      	nop
 800509c:	f000 bce2 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050a0:	bf00      	nop
 80050a2:	f000 bcdf 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050a6:	bf00      	nop
 80050a8:	f000 bcdc 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050ac:	bf00      	nop
 80050ae:	f000 bcd9 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050b2:	bf00      	nop
        break;
 80050b4:	f000 bcd6 	b.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c6:	d13d      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80050c8:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d4:	f040 84c5 	bne.w	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80050d8:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	f040 84bd 	bne.w	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050e8:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	fb03 f202 	mul.w	r2, r3, r2
 80050fc:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	3301      	adds	r3, #1
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	0edb      	lsrs	r3, r3, #27
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800512c:	2311      	movs	r3, #17
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e001      	b.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005132:	2307      	movs	r3, #7
 8005134:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	61fb      	str	r3, [r7, #28]
      break;
 8005140:	f000 bc8f 	b.w	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005156:	d016      	beq.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800515e:	f200 809b 	bhi.w	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005168:	d032      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005170:	f200 8092 	bhi.w	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8084 	beq.w	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005182:	d052      	beq.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005184:	e088      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	f040 8084 	bne.w	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	e005      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80051ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051be:	61fb      	str	r3, [r7, #28]
          break;
 80051c0:	e06c      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800826c 	.word	0x0800826c
 80051cc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80051d0:	4ba5      	ldr	r3, [pc, #660]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051dc:	d160      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80051de:	4ba2      	ldr	r3, [pc, #648]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d159      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051ec:	4b9e      	ldr	r3, [pc, #632]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	fb03 f202 	mul.w	r2, r3, r2
 8005200:	4b99      	ldr	r3, [pc, #612]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	3301      	adds	r3, #1
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005212:	4b95      	ldr	r3, [pc, #596]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	0d5b      	lsrs	r3, r3, #21
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	3301      	adds	r3, #1
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	61fb      	str	r3, [r7, #28]
          break;
 8005228:	e03a      	b.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800522a:	4b8f      	ldr	r3, [pc, #572]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005236:	d135      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005238:	4b8b      	ldr	r3, [pc, #556]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005244:	d12e      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005246:	4b88      	ldr	r3, [pc, #544]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005250:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	fb03 f202 	mul.w	r2, r3, r2
 800525a:	4b83      	ldr	r3, [pc, #524]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	091b      	lsrs	r3, r3, #4
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	3301      	adds	r3, #1
 8005266:	fbb2 f3f3 	udiv	r3, r2, r3
 800526a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800526c:	4b7e      	ldr	r3, [pc, #504]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	0d5b      	lsrs	r3, r3, #21
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	61fb      	str	r3, [r7, #28]
          break;
 8005282:	e00f      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005284:	4b78      	ldr	r3, [pc, #480]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d10a      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005292:	4b76      	ldr	r3, [pc, #472]	; (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005294:	61fb      	str	r3, [r7, #28]
          break;
 8005296:	e007      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005298:	bf00      	nop
 800529a:	e3e2      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800529c:	bf00      	nop
 800529e:	e3e0      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80052a0:	bf00      	nop
 80052a2:	e3de      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80052a4:	bf00      	nop
 80052a6:	e3dc      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80052a8:	bf00      	nop
      break;
 80052aa:	e3da      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80052ac:	4b6e      	ldr	r3, [pc, #440]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d827      	bhi.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052dd 	.word	0x080052dd
 80052cc:	080052e5 	.word	0x080052e5
 80052d0:	080052f9 	.word	0x080052f9
          frequency = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7ff f8a8 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 80052d8:	61f8      	str	r0, [r7, #28]
          break;
 80052da:	e01d      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80052dc:	f7fe fff6 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80052e0:	61f8      	str	r0, [r7, #28]
          break;
 80052e2:	e019      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052e4:	4b60      	ldr	r3, [pc, #384]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d10f      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80052f2:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052f4:	61fb      	str	r3, [r7, #28]
          break;
 80052f6:	e00c      	b.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052f8:	4b5b      	ldr	r3, [pc, #364]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d107      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	61fb      	str	r3, [r7, #28]
          break;
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800530e:	bf00      	nop
 8005310:	e3a8      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005312:	bf00      	nop
 8005314:	e3a6      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005316:	bf00      	nop
        break;
 8005318:	e3a4      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800531a:	4b53      	ldr	r3, [pc, #332]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d83a      	bhi.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005369 	.word	0x08005369
 8005338:	080053a3 	.word	0x080053a3
 800533c:	080053a3 	.word	0x080053a3
 8005340:	080053a3 	.word	0x080053a3
 8005344:	08005371 	.word	0x08005371
 8005348:	080053a3 	.word	0x080053a3
 800534c:	080053a3 	.word	0x080053a3
 8005350:	080053a3 	.word	0x080053a3
 8005354:	08005379 	.word	0x08005379
 8005358:	080053a3 	.word	0x080053a3
 800535c:	080053a3 	.word	0x080053a3
 8005360:	080053a3 	.word	0x080053a3
 8005364:	0800538d 	.word	0x0800538d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005368:	f7ff f848 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800536c:	61f8      	str	r0, [r7, #28]
          break;
 800536e:	e01d      	b.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005370:	f7fe ffac 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005374:	61f8      	str	r0, [r7, #28]
          break;
 8005376:	e019      	b.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005378:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005384:	d10f      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005386:	4b3a      	ldr	r3, [pc, #232]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005388:	61fb      	str	r3, [r7, #28]
          break;
 800538a:	e00c      	b.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d107      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539e:	61fb      	str	r3, [r7, #28]
          break;
 80053a0:	e003      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80053a2:	bf00      	nop
 80053a4:	e35e      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053a6:	bf00      	nop
 80053a8:	e35c      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053aa:	bf00      	nop
        break;
 80053ac:	e35a      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d021      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b30      	cmp	r3, #48	; 0x30
 80053c4:	d829      	bhi.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d011      	beq.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d823      	bhi.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d004      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80053de:	e01c      	b.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053e0:	f7ff f80c 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 80053e4:	61f8      	str	r0, [r7, #28]
          break;
 80053e6:	e01d      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80053e8:	f7fe ff70 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80053ec:	61f8      	str	r0, [r7, #28]
          break;
 80053ee:	e019      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fc:	d10f      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80053fe:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005400:	61fb      	str	r3, [r7, #28]
          break;
 8005402:	e00c      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005404:	4b18      	ldr	r3, [pc, #96]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d107      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005416:	61fb      	str	r3, [r7, #28]
          break;
 8005418:	e003      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800541a:	bf00      	nop
 800541c:	e322      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800541e:	bf00      	nop
 8005420:	e320      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005422:	bf00      	nop
        break;
 8005424:	e31e      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2bc0      	cmp	r3, #192	; 0xc0
 8005436:	d027      	beq.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2bc0      	cmp	r3, #192	; 0xc0
 800543c:	d82f      	bhi.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d017      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d829      	bhi.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d004      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005456:	e022      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005458:	f7fe ffd0 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800545c:	61f8      	str	r0, [r7, #28]
          break;
 800545e:	e023      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005460:	f7fe ff34 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005464:	61f8      	str	r0, [r7, #28]
          break;
 8005466:	e01f      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005468:	40021000 	.word	0x40021000
 800546c:	02dc6c00 	.word	0x02dc6c00
 8005470:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005474:	4b9b      	ldr	r3, [pc, #620]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005480:	d10f      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005482:	4b99      	ldr	r3, [pc, #612]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005484:	61fb      	str	r3, [r7, #28]
          break;
 8005486:	e00c      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005488:	4b96      	ldr	r3, [pc, #600]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	d107      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549a:	61fb      	str	r3, [r7, #28]
          break;
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800549e:	bf00      	nop
 80054a0:	e2e0      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054a2:	bf00      	nop
 80054a4:	e2de      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054a6:	bf00      	nop
        break;
 80054a8:	e2dc      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80054aa:	4b8e      	ldr	r3, [pc, #568]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054bc:	d025      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c4:	d82c      	bhi.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054cc:	d013      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d4:	d824      	bhi.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	d004      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80054e4:	e01c      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054e6:	f7fe ff89 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 80054ea:	61f8      	str	r0, [r7, #28]
          break;
 80054ec:	e01d      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80054ee:	f7fe feed 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80054f2:	61f8      	str	r0, [r7, #28]
          break;
 80054f4:	e019      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f6:	4b7b      	ldr	r3, [pc, #492]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005502:	d10f      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005504:	4b78      	ldr	r3, [pc, #480]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005506:	61fb      	str	r3, [r7, #28]
          break;
 8005508:	e00c      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800550a:	4b76      	ldr	r3, [pc, #472]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d107      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551c:	61fb      	str	r3, [r7, #28]
          break;
 800551e:	e003      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005520:	bf00      	nop
 8005522:	e29f      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005524:	bf00      	nop
 8005526:	e29d      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005528:	bf00      	nop
        break;
 800552a:	e29b      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800552c:	4b6d      	ldr	r3, [pc, #436]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800553e:	d025      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005546:	d82c      	bhi.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554e:	d013      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005556:	d824      	bhi.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d004      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	d004      	beq.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005566:	e01c      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005568:	f7fe ff48 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800556c:	61f8      	str	r0, [r7, #28]
          break;
 800556e:	e01d      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005570:	f7fe feac 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005574:	61f8      	str	r0, [r7, #28]
          break;
 8005576:	e019      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005578:	4b5a      	ldr	r3, [pc, #360]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005584:	d10f      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005586:	4b58      	ldr	r3, [pc, #352]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005588:	61fb      	str	r3, [r7, #28]
          break;
 800558a:	e00c      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800558c:	4b55      	ldr	r3, [pc, #340]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d107      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800559a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559e:	61fb      	str	r3, [r7, #28]
          break;
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80055a2:	bf00      	nop
 80055a4:	e25e      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055a6:	bf00      	nop
 80055a8:	e25c      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055aa:	bf00      	nop
        break;
 80055ac:	e25a      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80055ae:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c0:	d007      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055c8:	d12f      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80055ca:	f7fe fe7f 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80055ce:	61f8      	str	r0, [r7, #28]
          break;
 80055d0:	e02e      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80055d2:	4b44      	ldr	r3, [pc, #272]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055de:	d126      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80055e0:	4b40      	ldr	r3, [pc, #256]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	fb03 f202 	mul.w	r2, r3, r2
 8005600:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	3301      	adds	r3, #1
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005612:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	0e5b      	lsrs	r3, r3, #25
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	3301      	adds	r3, #1
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	61fb      	str	r3, [r7, #28]
          break;
 8005628:	e001      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800562a:	bf00      	nop
 800562c:	e21a      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800562e:	bf00      	nop
        break;
 8005630:	e218      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005632:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005644:	f7fe fef0 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8005648:	61f8      	str	r0, [r7, #28]
        break;
 800564a:	e20b      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800564c:	f7fe fe3e 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005650:	61f8      	str	r0, [r7, #28]
        break;
 8005652:	e207      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800565a:	f003 0318 	and.w	r3, r3, #24
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b10      	cmp	r3, #16
 8005664:	d010      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b10      	cmp	r3, #16
 800566a:	d834      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d024      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005678:	e02d      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800567a:	69b9      	ldr	r1, [r7, #24]
 800567c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005680:	f000 fbf2 	bl	8005e68 <RCCEx_GetSAIxPeriphCLKFreq>
 8005684:	61f8      	str	r0, [r7, #28]
          break;
 8005686:	e02b      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005688:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d122      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	e005      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	61fb      	str	r3, [r7, #28]
          break;
 80056c0:	e00b      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056c2:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ce:	d106      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80056d2:	61fb      	str	r3, [r7, #28]
          break;
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80056d6:	bf00      	nop
 80056d8:	e1c4      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056da:	bf00      	nop
 80056dc:	e1c2      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056de:	bf00      	nop
        break;
 80056e0:	e1c0      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	0800826c 	.word	0x0800826c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80056f0:	4b96      	ldr	r3, [pc, #600]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005702:	d013      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	d819      	bhi.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	d004      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800571a:	e011      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800571c:	f7fe fe6e 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8005720:	61f8      	str	r0, [r7, #28]
          break;
 8005722:	e010      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005724:	f7fe fdd2 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005728:	61f8      	str	r0, [r7, #28]
          break;
 800572a:	e00c      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800572c:	4b87      	ldr	r3, [pc, #540]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005738:	d104      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800573a:	4b85      	ldr	r3, [pc, #532]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800573c:	61fb      	str	r3, [r7, #28]
          break;
 800573e:	e001      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005740:	bf00      	nop
 8005742:	e18f      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005744:	bf00      	nop
        break;
 8005746:	e18d      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005748:	4b80      	ldr	r3, [pc, #512]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	d013      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005762:	d819      	bhi.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005770:	d004      	beq.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005772:	e011      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005774:	f7fe fe42 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8005778:	61f8      	str	r0, [r7, #28]
          break;
 800577a:	e010      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800577c:	f7fe fda6 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005780:	61f8      	str	r0, [r7, #28]
          break;
 8005782:	e00c      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005784:	4b71      	ldr	r3, [pc, #452]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	d104      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005792:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005794:	61fb      	str	r3, [r7, #28]
          break;
 8005796:	e001      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005798:	bf00      	nop
 800579a:	e163      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800579c:	bf00      	nop
        break;
 800579e:	e161      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80057a0:	4b6a      	ldr	r3, [pc, #424]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057b2:	d013      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ba:	d819      	bhi.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d004      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80057ca:	e011      	b.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe fe16 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 80057d0:	61f8      	str	r0, [r7, #28]
          break;
 80057d2:	e010      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80057d4:	f7fe fd7a 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80057d8:	61f8      	str	r0, [r7, #28]
          break;
 80057da:	e00c      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057dc:	4b5b      	ldr	r3, [pc, #364]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d104      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80057ea:	4b59      	ldr	r3, [pc, #356]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80057ec:	61fb      	str	r3, [r7, #28]
          break;
 80057ee:	e001      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80057f0:	bf00      	nop
 80057f2:	e137      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057f4:	bf00      	nop
        break;
 80057f6:	e135      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80057f8:	4b54      	ldr	r3, [pc, #336]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d011      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d818      	bhi.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d004      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800581c:	e011      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800581e:	f7fe fded 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8005822:	61f8      	str	r0, [r7, #28]
          break;
 8005824:	e010      	b.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005826:	f7fe fd51 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800582a:	61f8      	str	r0, [r7, #28]
          break;
 800582c:	e00c      	b.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800582e:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	d104      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800583c:	4b44      	ldr	r3, [pc, #272]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800583e:	61fb      	str	r3, [r7, #28]
          break;
 8005840:	e001      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005842:	bf00      	nop
 8005844:	e10e      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005846:	bf00      	nop
        break;
 8005848:	e10c      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800584a:	4b40      	ldr	r3, [pc, #256]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800585c:	d02c      	beq.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005864:	d833      	bhi.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800586c:	d01a      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005874:	d82b      	bhi.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005882:	d004      	beq.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005884:	e023      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005886:	f7fe fdb9 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800588a:	61f8      	str	r0, [r7, #28]
          break;
 800588c:	e026      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800588e:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d11a      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800589c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80058a0:	61fb      	str	r3, [r7, #28]
          break;
 80058a2:	e016      	b.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058a4:	4b29      	ldr	r3, [pc, #164]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d111      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80058b2:	4b27      	ldr	r3, [pc, #156]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80058b4:	61fb      	str	r3, [r7, #28]
          break;
 80058b6:	e00e      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d109      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80058c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ca:	61fb      	str	r3, [r7, #28]
          break;
 80058cc:	e005      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80058ce:	bf00      	nop
 80058d0:	e0c8      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058d2:	bf00      	nop
 80058d4:	e0c6      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058d6:	bf00      	nop
 80058d8:	e0c4      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058da:	bf00      	nop
        break;
 80058dc:	e0c2      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80058de:	4b1b      	ldr	r3, [pc, #108]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058f0:	d030      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058f8:	d837      	bhi.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005900:	d01a      	beq.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005908:	d82f      	bhi.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005916:	d004      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005918:	e027      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800591a:	f7fe fd6f 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800591e:	61f8      	str	r0, [r7, #28]
          break;
 8005920:	e02a      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d11e      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005930:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005934:	61fb      	str	r3, [r7, #28]
          break;
 8005936:	e01a      	b.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d115      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005946:	4b02      	ldr	r3, [pc, #8]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005948:	61fb      	str	r3, [r7, #28]
          break;
 800594a:	e012      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800594c:	40021000 	.word	0x40021000
 8005950:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005954:	4b46      	ldr	r3, [pc, #280]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d109      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005966:	61fb      	str	r3, [r7, #28]
          break;
 8005968:	e005      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800596a:	bf00      	nop
 800596c:	e07a      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800596e:	bf00      	nop
 8005970:	e078      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005972:	bf00      	nop
 8005974:	e076      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005976:	bf00      	nop
        break;
 8005978:	e074      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800597a:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800597c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005980:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800598c:	d02c      	beq.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005994:	d855      	bhi.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a2:	d004      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80059a4:	e04d      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fe fc91 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80059aa:	61f8      	str	r0, [r7, #28]
          break;
 80059ac:	e04e      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80059ae:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d145      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80059ba:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80059c6:	4b2a      	ldr	r3, [pc, #168]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	e005      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80059d2:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80059e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e4:	61fb      	str	r3, [r7, #28]
          break;
 80059e6:	e02e      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059e8:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f4:	d129      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a02:	d122      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	fb03 f202 	mul.w	r2, r3, r2
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3301      	adds	r3, #1
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	0d5b      	lsrs	r3, r3, #21
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	3301      	adds	r3, #1
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	61fb      	str	r3, [r7, #28]
          break;
 8005a40:	e003      	b.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005a42:	bf00      	nop
 8005a44:	e00e      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a46:	bf00      	nop
 8005a48:	e00c      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a4a:	bf00      	nop
        break;
 8005a4c:	e00a      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a4e:	bf00      	nop
 8005a50:	e008      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a52:	bf00      	nop
 8005a54:	e006      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a56:	bf00      	nop
 8005a58:	e004      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e002      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a62:	bf00      	nop
    }
  }

  return(frequency);
 8005a64:	69fb      	ldr	r3, [r7, #28]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	0800826c 	.word	0x0800826c

08005a78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6013      	str	r3, [r2, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40021000 	.word	0x40021000

08005a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aa6:	4b72      	ldr	r3, [pc, #456]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ab2:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0203 	and.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d103      	bne.n	8005aca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d142      	bne.n	8005b50 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
 8005ace:	e03f      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d018      	beq.n	8005b0a <RCCEx_PLLSAI1_Config+0x72>
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d825      	bhi.n	8005b28 <RCCEx_PLLSAI1_Config+0x90>
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d002      	beq.n	8005ae6 <RCCEx_PLLSAI1_Config+0x4e>
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d009      	beq.n	8005af8 <RCCEx_PLLSAI1_Config+0x60>
 8005ae4:	e020      	b.n	8005b28 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ae6:	4b62      	ldr	r3, [pc, #392]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11d      	bne.n	8005b2e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af6:	e01a      	b.n	8005b2e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005af8:	4b5d      	ldr	r3, [pc, #372]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d116      	bne.n	8005b32 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b08:	e013      	b.n	8005b32 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b0a:	4b59      	ldr	r3, [pc, #356]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10f      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b16:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b26:	e006      	b.n	8005b36 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2c:	e004      	b.n	8005b38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005b3e:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f023 0203 	bic.w	r2, r3, #3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4949      	ldr	r1, [pc, #292]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 8086 	bne.w	8005c64 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b58:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a44      	ldr	r2, [pc, #272]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b64:	f7fc f948 	bl	8001df8 <HAL_GetTick>
 8005b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b6a:	e009      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6c:	f7fc f944 	bl	8001df8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d902      	bls.n	8005b80 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b7e:	e005      	b.n	8005b8c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b80:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1ef      	bne.n	8005b6c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d168      	bne.n	8005c64 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d113      	bne.n	8005bc0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b98:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	0211      	lsls	r1, r2, #8
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68d2      	ldr	r2, [r2, #12]
 8005baa:	06d2      	lsls	r2, r2, #27
 8005bac:	4311      	orrs	r1, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6852      	ldr	r2, [r2, #4]
 8005bb2:	3a01      	subs	r2, #1
 8005bb4:	0112      	lsls	r2, r2, #4
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	492d      	ldr	r1, [pc, #180]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	610b      	str	r3, [r1, #16]
 8005bbe:	e02d      	b.n	8005c1c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d115      	bne.n	8005bf2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bc6:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	0211      	lsls	r1, r2, #8
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6912      	ldr	r2, [r2, #16]
 8005bd8:	0852      	lsrs	r2, r2, #1
 8005bda:	3a01      	subs	r2, #1
 8005bdc:	0552      	lsls	r2, r2, #21
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6852      	ldr	r2, [r2, #4]
 8005be4:	3a01      	subs	r2, #1
 8005be6:	0112      	lsls	r2, r2, #4
 8005be8:	430a      	orrs	r2, r1
 8005bea:	4921      	ldr	r1, [pc, #132]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
 8005bf0:	e014      	b.n	8005c1c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bf2:	4b1f      	ldr	r3, [pc, #124]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6892      	ldr	r2, [r2, #8]
 8005bfe:	0211      	lsls	r1, r2, #8
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6952      	ldr	r2, [r2, #20]
 8005c04:	0852      	lsrs	r2, r2, #1
 8005c06:	3a01      	subs	r2, #1
 8005c08:	0652      	lsls	r2, r2, #25
 8005c0a:	4311      	orrs	r1, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6852      	ldr	r2, [r2, #4]
 8005c10:	3a01      	subs	r2, #1
 8005c12:	0112      	lsls	r2, r2, #4
 8005c14:	430a      	orrs	r2, r1
 8005c16:	4916      	ldr	r1, [pc, #88]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c1c:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7fc f8e6 	bl	8001df8 <HAL_GetTick>
 8005c2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c2e:	e009      	b.n	8005c44 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c30:	f7fc f8e2 	bl	8001df8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d902      	bls.n	8005c44 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	73fb      	strb	r3, [r7, #15]
          break;
 8005c42:	e005      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ef      	beq.n	8005c30 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	4904      	ldr	r1, [pc, #16]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	07ff800f 	.word	0x07ff800f
 8005c78:	ff9f800f 	.word	0xff9f800f
 8005c7c:	f9ff800f 	.word	0xf9ff800f

08005c80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c8e:	4b72      	ldr	r3, [pc, #456]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c9a:	4b6f      	ldr	r3, [pc, #444]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0203 	and.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d103      	bne.n	8005cb2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
       ||
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d142      	bne.n	8005d38 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
 8005cb6:	e03f      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d018      	beq.n	8005cf2 <RCCEx_PLLSAI2_Config+0x72>
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d825      	bhi.n	8005d10 <RCCEx_PLLSAI2_Config+0x90>
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d002      	beq.n	8005cce <RCCEx_PLLSAI2_Config+0x4e>
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d009      	beq.n	8005ce0 <RCCEx_PLLSAI2_Config+0x60>
 8005ccc:	e020      	b.n	8005d10 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cce:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11d      	bne.n	8005d16 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cde:	e01a      	b.n	8005d16 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ce0:	4b5d      	ldr	r3, [pc, #372]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d116      	bne.n	8005d1a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf0:	e013      	b.n	8005d1a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cf2:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cfe:	4b56      	ldr	r3, [pc, #344]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d0e:	e006      	b.n	8005d1e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
      break;
 8005d14:	e004      	b.n	8005d20 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005d26:	4b4c      	ldr	r3, [pc, #304]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f023 0203 	bic.w	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4949      	ldr	r1, [pc, #292]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 8086 	bne.w	8005e4c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d40:	4b45      	ldr	r3, [pc, #276]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a44      	ldr	r2, [pc, #272]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4c:	f7fc f854 	bl	8001df8 <HAL_GetTick>
 8005d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d52:	e009      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d54:	f7fc f850 	bl	8001df8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d902      	bls.n	8005d68 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	73fb      	strb	r3, [r7, #15]
        break;
 8005d66:	e005      	b.n	8005d74 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d68:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ef      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d168      	bne.n	8005e4c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d113      	bne.n	8005da8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d80:	4b35      	ldr	r3, [pc, #212]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6892      	ldr	r2, [r2, #8]
 8005d8c:	0211      	lsls	r1, r2, #8
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68d2      	ldr	r2, [r2, #12]
 8005d92:	06d2      	lsls	r2, r2, #27
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6852      	ldr	r2, [r2, #4]
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	0112      	lsls	r2, r2, #4
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	492d      	ldr	r1, [pc, #180]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	614b      	str	r3, [r1, #20]
 8005da6:	e02d      	b.n	8005e04 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d115      	bne.n	8005dda <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dae:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	4b2b      	ldr	r3, [pc, #172]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6892      	ldr	r2, [r2, #8]
 8005dba:	0211      	lsls	r1, r2, #8
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6912      	ldr	r2, [r2, #16]
 8005dc0:	0852      	lsrs	r2, r2, #1
 8005dc2:	3a01      	subs	r2, #1
 8005dc4:	0552      	lsls	r2, r2, #21
 8005dc6:	4311      	orrs	r1, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6852      	ldr	r2, [r2, #4]
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	4921      	ldr	r1, [pc, #132]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	614b      	str	r3, [r1, #20]
 8005dd8:	e014      	b.n	8005e04 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dda:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	4b21      	ldr	r3, [pc, #132]	; (8005e64 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6892      	ldr	r2, [r2, #8]
 8005de6:	0211      	lsls	r1, r2, #8
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6952      	ldr	r2, [r2, #20]
 8005dec:	0852      	lsrs	r2, r2, #1
 8005dee:	3a01      	subs	r2, #1
 8005df0:	0652      	lsls	r2, r2, #25
 8005df2:	4311      	orrs	r1, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6852      	ldr	r2, [r2, #4]
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	0112      	lsls	r2, r2, #4
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	4916      	ldr	r1, [pc, #88]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e04:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e10:	f7fb fff2 	bl	8001df8 <HAL_GetTick>
 8005e14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e16:	e009      	b.n	8005e2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e18:	f7fb ffee 	bl	8001df8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d902      	bls.n	8005e2c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	73fb      	strb	r3, [r7, #15]
          break;
 8005e2a:	e005      	b.n	8005e38 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0ef      	beq.n	8005e18 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e40:	695a      	ldr	r2, [r3, #20]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	4904      	ldr	r1, [pc, #16]	; (8005e58 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	07ff800f 	.word	0x07ff800f
 8005e60:	ff9f800f 	.word	0xff9f800f
 8005e64:	f9ff800f 	.word	0xf9ff800f

08005e68 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d10b      	bne.n	8005e9e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e86:	4b7e      	ldr	r3, [pc, #504]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e90:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d112      	bne.n	8005ebe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e98:	4b7a      	ldr	r3, [pc, #488]	; (8006084 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e00f      	b.n	8005ebe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea4:	d10b      	bne.n	8005ebe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ea6:	4b76      	ldr	r3, [pc, #472]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eb0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb8:	d101      	bne.n	8005ebe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005eba:	4b72      	ldr	r3, [pc, #456]	; (8006084 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005ebc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 80d6 	bne.w	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d003      	beq.n	8005ed8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed6:	d13b      	bne.n	8005f50 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005ed8:	4b69      	ldr	r3, [pc, #420]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee4:	f040 80c4 	bne.w	8006070 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005ee8:	4b65      	ldr	r3, [pc, #404]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80bd 	beq.w	8006070 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ef6:	4b62      	ldr	r3, [pc, #392]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	3301      	adds	r3, #1
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f0a:	4b5d      	ldr	r3, [pc, #372]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005f16:	4b5a      	ldr	r3, [pc, #360]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	0edb      	lsrs	r3, r3, #27
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005f28:	4b55      	ldr	r3, [pc, #340]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005f34:	2311      	movs	r3, #17
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e001      	b.n	8005f3e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	fb03 f202 	mul.w	r2, r3, r2
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005f4e:	e08f      	b.n	8006070 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d13a      	bne.n	8005fcc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005f56:	4b4a      	ldr	r3, [pc, #296]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f62:	f040 8086 	bne.w	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005f66:	4b46      	ldr	r3, [pc, #280]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d07f      	beq.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f72:	4b43      	ldr	r3, [pc, #268]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f86:	4b3e      	ldr	r3, [pc, #248]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f90:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005f92:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	0edb      	lsrs	r3, r3, #27
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005fa4:	4b36      	ldr	r3, [pc, #216]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005fb0:	2311      	movs	r3, #17
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e001      	b.n	8005fba <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005fb6:	2307      	movs	r3, #7
 8005fb8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	fb03 f202 	mul.w	r2, r3, r2
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e052      	b.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d003      	beq.n	8005fda <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd8:	d109      	bne.n	8005fee <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fda:	4b29      	ldr	r3, [pc, #164]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe6:	d144      	bne.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005fe8:	4b27      	ldr	r3, [pc, #156]	; (8006088 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005fea:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fec:	e041      	b.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d003      	beq.n	8005ffc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffa:	d13a      	bne.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005ffc:	4b20      	ldr	r3, [pc, #128]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006008:	d133      	bne.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d02d      	beq.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	091b      	lsrs	r3, r3, #4
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	3301      	adds	r3, #1
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800602a:	4b15      	ldr	r3, [pc, #84]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006034:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	0edb      	lsrs	r3, r3, #27
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006048:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006054:	2311      	movs	r3, #17
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e001      	b.n	800605e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800605a:	2307      	movs	r3, #7
 800605c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	fb03 f202 	mul.w	r2, r3, r2
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	e000      	b.n	8006072 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006070:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006072:	69fb      	ldr	r3, [r7, #28]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3724      	adds	r7, #36	; 0x24
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40021000 	.word	0x40021000
 8006084:	001fff68 	.word	0x001fff68
 8006088:	00f42400 	.word	0x00f42400

0800608c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d904      	bls.n	80060aa <HAL_SAI_InitProtocol+0x1e>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3b03      	subs	r3, #3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d812      	bhi.n	80060ce <HAL_SAI_InitProtocol+0x42>
 80060a8:	e008      	b.n	80060bc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f9fb 	bl	80064ac <SAI_InitI2S>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ba:	e00b      	b.n	80060d4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 faa4 	bl	8006610 <SAI_InitPCM>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	e002      	b.n	80060d4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
      break;
 80060d2:	bf00      	nop
  }

  if (status == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f808 	bl	80060f0 <HAL_SAI_Init>
 80060e0:	4603      	mov	r3, r0
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e1c7      	b.n	8006492 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10e      	bne.n	800612a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a81      	ldr	r2, [pc, #516]	; (8006318 <HAL_SAI_Init+0x228>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d107      	bne.n	8006126 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800611a:	2b01      	cmp	r3, #1
 800611c:	d103      	bne.n	8006126 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e1b3      	b.n	8006492 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fb fd12 	bl	8001b68 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fae5 	bl	8006714 <SAI_Disable>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e19e      	b.n	8006492 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d00c      	beq.n	800617e <HAL_SAI_Init+0x8e>
 8006164:	2b02      	cmp	r3, #2
 8006166:	d80d      	bhi.n	8006184 <HAL_SAI_Init+0x94>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SAI_Init+0x82>
 800616c:	2b01      	cmp	r3, #1
 800616e:	d003      	beq.n	8006178 <HAL_SAI_Init+0x88>
 8006170:	e008      	b.n	8006184 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006176:	e008      	b.n	800618a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006178:	2310      	movs	r3, #16
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800617c:	e005      	b.n	800618a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800617e:	2320      	movs	r3, #32
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006182:	e002      	b.n	800618a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006188:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d81d      	bhi.n	80061ce <HAL_SAI_Init+0xde>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_SAI_Init+0xa8>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061a9 	.word	0x080061a9
 800619c:	080061af 	.word	0x080061af
 80061a0:	080061b7 	.word	0x080061b7
 80061a4:	080061bf 	.word	0x080061bf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61fb      	str	r3, [r7, #28]
      break;
 80061ac:	e012      	b.n	80061d4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80061ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b2:	61fb      	str	r3, [r7, #28]
      break;
 80061b4:	e00e      	b.n	80061d4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80061b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061ba:	61fb      	str	r3, [r7, #28]
      break;
 80061bc:	e00a      	b.n	80061d4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80061be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061c2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80061cc:	e002      	b.n	80061d4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
      break;
 80061d2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a4f      	ldr	r2, [pc, #316]	; (8006318 <HAL_SAI_Init+0x228>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_SAI_Init+0xf8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a4e      	ldr	r2, [pc, #312]	; (800631c <HAL_SAI_Init+0x22c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80061e8:	4a4d      	ldr	r2, [pc, #308]	; (8006320 <HAL_SAI_Init+0x230>)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e002      	b.n	80061f6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80061f0:	4a4c      	ldr	r2, [pc, #304]	; (8006324 <HAL_SAI_Init+0x234>)
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d073      	beq.n	80062e6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a45      	ldr	r2, [pc, #276]	; (8006318 <HAL_SAI_Init+0x228>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_SAI_Init+0x122>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_SAI_Init+0x22c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d105      	bne.n	800621e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006212:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006216:	f7fe fd0d 	bl	8004c34 <HAL_RCCEx_GetPeriphCLKFreq>
 800621a:	61b8      	str	r0, [r7, #24]
 800621c:	e004      	b.n	8006228 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800621e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006222:	f7fe fd07 	bl	8004c34 <HAL_RCCEx_GetPeriphCLKFreq>
 8006226:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006230:	d120      	bne.n	8006274 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	2b04      	cmp	r3, #4
 8006238:	d102      	bne.n	8006240 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800623a:	2340      	movs	r3, #64	; 0x40
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	e00a      	b.n	8006256 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	2b08      	cmp	r3, #8
 8006246:	d103      	bne.n	8006250 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	e002      	b.n	8006256 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4619      	mov	r1, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	fb02 f303 	mul.w	r3, r2, r3
 800626c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	e017      	b.n	80062a4 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627c:	d101      	bne.n	8006282 <HAL_SAI_Init+0x192>
 800627e:	2302      	movs	r3, #2
 8006280:	e000      	b.n	8006284 <HAL_SAI_Init+0x194>
 8006282:	2301      	movs	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	4619      	mov	r1, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	fb02 f303 	mul.w	r3, r2, r3
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	fbb1 f3f3 	udiv	r3, r1, r3
 80062a2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_SAI_Init+0x238>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	08da      	lsrs	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80062b2:	6979      	ldr	r1, [r7, #20]
 80062b4:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <HAL_SAI_Init+0x238>)
 80062b6:	fba3 2301 	umull	r2, r3, r3, r1
 80062ba:	08da      	lsrs	r2, r3, #3
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	1aca      	subs	r2, r1, r3
 80062c6:	2a08      	cmp	r2, #8
 80062c8:	d904      	bls.n	80062d4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d104      	bne.n	80062e6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	085a      	lsrs	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_SAI_Init+0x206>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d109      	bne.n	800630a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_SAI_Init+0x212>
 80062fe:	2300      	movs	r3, #0
 8006300:	e001      	b.n	8006306 <HAL_SAI_Init+0x216>
 8006302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	e012      	b.n	8006330 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10c      	bne.n	800632c <HAL_SAI_Init+0x23c>
 8006312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006316:	e00a      	b.n	800632e <HAL_SAI_Init+0x23e>
 8006318:	40015404 	.word	0x40015404
 800631c:	40015424 	.word	0x40015424
 8006320:	40015400 	.word	0x40015400
 8006324:	40015800 	.word	0x40015800
 8006328:	cccccccd 	.word	0xcccccccd
 800632c:	2300      	movs	r3, #0
 800632e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b58      	ldr	r3, [pc, #352]	; (800649c <HAL_SAI_Init+0x3ac>)
 800633c:	400b      	ands	r3, r1
 800633e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006354:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	431a      	orrs	r2, r3
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006368:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006374:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	051b      	lsls	r3, r3, #20
 800637c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006382:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800639a:	f023 030f 	bic.w	r3, r3, #15
 800639e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b35      	ldr	r3, [pc, #212]	; (80064a0 <HAL_SAI_Init+0x3b0>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6899      	ldr	r1, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80063e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80063ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	3b01      	subs	r3, #1
 80063f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80063f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68d9      	ldr	r1, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f24f 0320 	movw	r3, #61472	; 0xf020
 800640c:	400b      	ands	r3, r1
 800640e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68d9      	ldr	r1, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800641e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006426:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642c:	3b01      	subs	r3, #1
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <HAL_SAI_Init+0x3b4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d119      	bne.n	8006478 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006444:	4b18      	ldr	r3, [pc, #96]	; (80064a8 <HAL_SAI_Init+0x3b8>)
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <HAL_SAI_Init+0x3b8>)
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006456:	2b01      	cmp	r3, #1
 8006458:	d10e      	bne.n	8006478 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	3b01      	subs	r3, #1
 8006464:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006466:	4910      	ldr	r1, [pc, #64]	; (80064a8 <HAL_SAI_Init+0x3b8>)
 8006468:	4313      	orrs	r3, r2
 800646a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <HAL_SAI_Init+0x3b8>)
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <HAL_SAI_Init+0x3b8>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3728      	adds	r7, #40	; 0x28
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	f805c010 	.word	0xf805c010
 80064a0:	fff88000 	.word	0xfff88000
 80064a4:	40015404 	.word	0x40015404
 80064a8:	40015400 	.word	0x40015400

080064ac <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <SAI_InitI2S+0x2e>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d103      	bne.n	80064e2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	64da      	str	r2, [r3, #76]	; 0x4c
 80064e0:	e002      	b.n	80064e8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064ee:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064f6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e077      	b.n	8006602 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006524:	661a      	str	r2, [r3, #96]	; 0x60
 8006526:	e006      	b.n	8006536 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800652e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d84f      	bhi.n	80065dc <SAI_InitI2S+0x130>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <SAI_InitI2S+0x98>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006555 	.word	0x08006555
 8006548:	08006577 	.word	0x08006577
 800654c:	08006599 	.word	0x08006599
 8006550:	080065bb 	.word	0x080065bb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	085b      	lsrs	r3, r3, #1
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2240      	movs	r2, #64	; 0x40
 8006572:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006574:	e035      	b.n	80065e2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	019a      	lsls	r2, r3, #6
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006596:	e024      	b.n	80065e2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22c0      	movs	r2, #192	; 0xc0
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	019a      	lsls	r2, r3, #6
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2280      	movs	r2, #128	; 0x80
 80065b6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80065b8:	e013      	b.n	80065e2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	22e0      	movs	r2, #224	; 0xe0
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	019a      	lsls	r2, r3, #6
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2280      	movs	r2, #128	; 0x80
 80065d8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80065da:	e002      	b.n	80065e2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]
      break;
 80065e0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d10b      	bne.n	8006600 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d102      	bne.n	80065f4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2210      	movs	r2, #16
 80065f2:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d102      	bne.n	8006600 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2208      	movs	r2, #8
 80065fe:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <SAI_InitPCM+0x2e>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d103      	bne.n	8006646 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	64da      	str	r2, [r3, #76]	; 0x4c
 8006644:	e002      	b.n	800664c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006658:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006660:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006674:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d103      	bne.n	8006684 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
 8006682:	e002      	b.n	800668a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	220d      	movs	r2, #13
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d837      	bhi.n	8006700 <SAI_InitPCM+0xf0>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <SAI_InitPCM+0x88>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066bf 	.word	0x080066bf
 80066a0:	080066d5 	.word	0x080066d5
 80066a4:	080066eb 	.word	0x080066eb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2280      	movs	r2, #128	; 0x80
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	011a      	lsls	r2, r3, #4
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2240      	movs	r2, #64	; 0x40
 80066ba:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80066bc:	e023      	b.n	8006706 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2280      	movs	r2, #128	; 0x80
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2280      	movs	r2, #128	; 0x80
 80066d0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80066d2:	e018      	b.n	8006706 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22c0      	movs	r2, #192	; 0xc0
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2280      	movs	r2, #128	; 0x80
 80066e6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80066e8:	e00d      	b.n	8006706 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22e0      	movs	r2, #224	; 0xe0
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2280      	movs	r2, #128	; 0x80
 80066fc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80066fe:	e002      	b.n	8006706 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	75fb      	strb	r3, [r7, #23]
      break;
 8006704:	bf00      	nop
  }

  return status;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800671c:	4b18      	ldr	r3, [pc, #96]	; (8006780 <SAI_Disable+0x6c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a18      	ldr	r2, [pc, #96]	; (8006784 <SAI_Disable+0x70>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	0b1b      	lsrs	r3, r3, #12
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800673e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	72fb      	strb	r3, [r7, #11]
      break;
 800675a:	e009      	b.n	8006770 <SAI_Disable+0x5c>
    }
    count--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e7      	bne.n	8006740 <SAI_Disable+0x2c>

  return status;
 8006770:	7afb      	ldrb	r3, [r7, #11]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20000000 	.word	0x20000000
 8006784:	95cbec1b 	.word	0x95cbec1b

08006788 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e0aa      	b.n	80068f0 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fa fef8 	bl	80015a0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695a      	ldr	r2, [r3, #20]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067e2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067f2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067fc:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800680c:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d012      	beq.n	800683c <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d107      	bne.n	800682e <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800682a:	609a      	str	r2, [r3, #8]
 800682c:	e006      	b.n	800683c <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800683a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d104      	bne.n	800684e <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800684c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800685c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006860:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1a      	ldr	r2, [r3, #32]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800688a:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800689c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800689e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068a8:	d110      	bne.n	80068cc <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80068b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ba:	d107      	bne.n	80068cc <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80068ca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800690e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006918:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800691a:	2180      	movs	r1, #128	; 0x80
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f805 	bl	800692c <SMBUS_Enable_IRQ>

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006952:	2b38      	cmp	r3, #56	; 0x38
 8006954:	d103      	bne.n	800695e <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800695c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006964:	2bf2      	cmp	r3, #242	; 0xf2
 8006966:	d103      	bne.n	8006970 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8006976:	2bd4      	cmp	r3, #212	; 0xd4
 8006978:	d103      	bne.n	8006982 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006980:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6819      	ldr	r1, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	430a      	orrs	r2, r1
 8006990:	601a      	str	r2, [r3, #0]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e095      	b.n	8006adc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d108      	bne.n	80069ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c0:	d009      	beq.n	80069d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	61da      	str	r2, [r3, #28]
 80069c8:	e005      	b.n	80069d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fa ff1f 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a16:	d902      	bls.n	8006a1e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e002      	b.n	8006a24 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a2c:	d007      	beq.n	8006a3e <HAL_SPI_Init+0xa0>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a36:	d002      	beq.n	8006a3e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	ea42 0103 	orr.w	r1, r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0204 	and.w	r2, r3, #4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006aba:	ea42 0103 	orr.w	r1, r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e049      	b.n	8006b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa ff06 	bl	800191c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 f94a 	bl	8006dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e0ff      	b.n	8006db2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b14      	cmp	r3, #20
 8006bbe:	f200 80f0 	bhi.w	8006da2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006da3 	.word	0x08006da3
 8006bd0:	08006da3 	.word	0x08006da3
 8006bd4:	08006da3 	.word	0x08006da3
 8006bd8:	08006c5d 	.word	0x08006c5d
 8006bdc:	08006da3 	.word	0x08006da3
 8006be0:	08006da3 	.word	0x08006da3
 8006be4:	08006da3 	.word	0x08006da3
 8006be8:	08006c9f 	.word	0x08006c9f
 8006bec:	08006da3 	.word	0x08006da3
 8006bf0:	08006da3 	.word	0x08006da3
 8006bf4:	08006da3 	.word	0x08006da3
 8006bf8:	08006cdf 	.word	0x08006cdf
 8006bfc:	08006da3 	.word	0x08006da3
 8006c00:	08006da3 	.word	0x08006da3
 8006c04:	08006da3 	.word	0x08006da3
 8006c08:	08006d21 	.word	0x08006d21
 8006c0c:	08006da3 	.word	0x08006da3
 8006c10:	08006da3 	.word	0x08006da3
 8006c14:	08006da3 	.word	0x08006da3
 8006c18:	08006d61 	.word	0x08006d61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f964 	bl	8006ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0204 	bic.w	r2, r2, #4
 8006c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6999      	ldr	r1, [r3, #24]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	619a      	str	r2, [r3, #24]
      break;
 8006c5a:	e0a5      	b.n	8006da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 f9d4 	bl	8007010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	619a      	str	r2, [r3, #24]
      break;
 8006c9c:	e084      	b.n	8006da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fa3d 	bl	8007124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0208 	orr.w	r2, r2, #8
 8006cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0204 	bic.w	r2, r2, #4
 8006cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69d9      	ldr	r1, [r3, #28]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	61da      	str	r2, [r3, #28]
      break;
 8006cdc:	e064      	b.n	8006da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 faa5 	bl	8007234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69d9      	ldr	r1, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	021a      	lsls	r2, r3, #8
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	61da      	str	r2, [r3, #28]
      break;
 8006d1e:	e043      	b.n	8006da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 faee 	bl	8007308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0208 	orr.w	r2, r2, #8
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0204 	bic.w	r2, r2, #4
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d5e:	e023      	b.n	8006da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fb32 	bl	80073d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	021a      	lsls	r2, r3, #8
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006da0:	e002      	b.n	8006da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	75fb      	strb	r3, [r7, #23]
      break;
 8006da6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop

08006dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a40      	ldr	r2, [pc, #256]	; (8006ed0 <TIM_Base_SetConfig+0x114>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <TIM_Base_SetConfig+0x40>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dda:	d00f      	beq.n	8006dfc <TIM_Base_SetConfig+0x40>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a3d      	ldr	r2, [pc, #244]	; (8006ed4 <TIM_Base_SetConfig+0x118>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00b      	beq.n	8006dfc <TIM_Base_SetConfig+0x40>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a3c      	ldr	r2, [pc, #240]	; (8006ed8 <TIM_Base_SetConfig+0x11c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <TIM_Base_SetConfig+0x40>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a3b      	ldr	r2, [pc, #236]	; (8006edc <TIM_Base_SetConfig+0x120>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0x40>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a3a      	ldr	r2, [pc, #232]	; (8006ee0 <TIM_Base_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d108      	bne.n	8006e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a2f      	ldr	r2, [pc, #188]	; (8006ed0 <TIM_Base_SetConfig+0x114>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01f      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1c:	d01b      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <TIM_Base_SetConfig+0x118>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d017      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2b      	ldr	r2, [pc, #172]	; (8006ed8 <TIM_Base_SetConfig+0x11c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <TIM_Base_SetConfig+0x120>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00f      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <TIM_Base_SetConfig+0x124>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00b      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <TIM_Base_SetConfig+0x128>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d007      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_Base_SetConfig+0x12c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_Base_SetConfig+0x9a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <TIM_Base_SetConfig+0x130>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d108      	bne.n	8006e68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <TIM_Base_SetConfig+0x114>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00f      	beq.n	8006eb4 <TIM_Base_SetConfig+0xf8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a12      	ldr	r2, [pc, #72]	; (8006ee0 <TIM_Base_SetConfig+0x124>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00b      	beq.n	8006eb4 <TIM_Base_SetConfig+0xf8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a11      	ldr	r2, [pc, #68]	; (8006ee4 <TIM_Base_SetConfig+0x128>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <TIM_Base_SetConfig+0xf8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a10      	ldr	r2, [pc, #64]	; (8006ee8 <TIM_Base_SetConfig+0x12c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_Base_SetConfig+0xf8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a0f      	ldr	r2, [pc, #60]	; (8006eec <TIM_Base_SetConfig+0x130>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d103      	bne.n	8006ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	615a      	str	r2, [r3, #20]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40000400 	.word	0x40000400
 8006ed8:	40000800 	.word	0x40000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	40013400 	.word	0x40013400
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40014400 	.word	0x40014400
 8006eec:	40014800 	.word	0x40014800

08006ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	f023 0201 	bic.w	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0303 	bic.w	r3, r3, #3
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 0302 	bic.w	r3, r3, #2
 8006f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a2c      	ldr	r2, [pc, #176]	; (8006ffc <TIM_OC1_SetConfig+0x10c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC1_SetConfig+0x80>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a2b      	ldr	r2, [pc, #172]	; (8007000 <TIM_OC1_SetConfig+0x110>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC1_SetConfig+0x80>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2a      	ldr	r2, [pc, #168]	; (8007004 <TIM_OC1_SetConfig+0x114>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC1_SetConfig+0x80>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a29      	ldr	r2, [pc, #164]	; (8007008 <TIM_OC1_SetConfig+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC1_SetConfig+0x80>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a28      	ldr	r2, [pc, #160]	; (800700c <TIM_OC1_SetConfig+0x11c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10c      	bne.n	8006f8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0308 	bic.w	r3, r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f023 0304 	bic.w	r3, r3, #4
 8006f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a1b      	ldr	r2, [pc, #108]	; (8006ffc <TIM_OC1_SetConfig+0x10c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00f      	beq.n	8006fb2 <TIM_OC1_SetConfig+0xc2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1a      	ldr	r2, [pc, #104]	; (8007000 <TIM_OC1_SetConfig+0x110>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00b      	beq.n	8006fb2 <TIM_OC1_SetConfig+0xc2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <TIM_OC1_SetConfig+0x114>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d007      	beq.n	8006fb2 <TIM_OC1_SetConfig+0xc2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a18      	ldr	r2, [pc, #96]	; (8007008 <TIM_OC1_SetConfig+0x118>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d003      	beq.n	8006fb2 <TIM_OC1_SetConfig+0xc2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a17      	ldr	r2, [pc, #92]	; (800700c <TIM_OC1_SetConfig+0x11c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d111      	bne.n	8006fd6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	621a      	str	r2, [r3, #32]
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40013400 	.word	0x40013400
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0210 	bic.w	r2, r3, #16
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0320 	bic.w	r3, r3, #32
 800705e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a28      	ldr	r2, [pc, #160]	; (8007110 <TIM_OC2_SetConfig+0x100>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC2_SetConfig+0x6c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a27      	ldr	r2, [pc, #156]	; (8007114 <TIM_OC2_SetConfig+0x104>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d10d      	bne.n	8007098 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <TIM_OC2_SetConfig+0x100>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00f      	beq.n	80070c0 <TIM_OC2_SetConfig+0xb0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <TIM_OC2_SetConfig+0x104>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00b      	beq.n	80070c0 <TIM_OC2_SetConfig+0xb0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <TIM_OC2_SetConfig+0x108>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_OC2_SetConfig+0xb0>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a1a      	ldr	r2, [pc, #104]	; (800711c <TIM_OC2_SetConfig+0x10c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_OC2_SetConfig+0xb0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a19      	ldr	r2, [pc, #100]	; (8007120 <TIM_OC2_SetConfig+0x110>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d113      	bne.n	80070e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800

08007124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a27      	ldr	r2, [pc, #156]	; (8007220 <TIM_OC3_SetConfig+0xfc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_OC3_SetConfig+0x6a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a26      	ldr	r2, [pc, #152]	; (8007224 <TIM_OC3_SetConfig+0x100>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d10d      	bne.n	80071aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a1c      	ldr	r2, [pc, #112]	; (8007220 <TIM_OC3_SetConfig+0xfc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00f      	beq.n	80071d2 <TIM_OC3_SetConfig+0xae>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1b      	ldr	r2, [pc, #108]	; (8007224 <TIM_OC3_SetConfig+0x100>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00b      	beq.n	80071d2 <TIM_OC3_SetConfig+0xae>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1a      	ldr	r2, [pc, #104]	; (8007228 <TIM_OC3_SetConfig+0x104>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d007      	beq.n	80071d2 <TIM_OC3_SetConfig+0xae>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a19      	ldr	r2, [pc, #100]	; (800722c <TIM_OC3_SetConfig+0x108>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_OC3_SetConfig+0xae>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a18      	ldr	r2, [pc, #96]	; (8007230 <TIM_OC3_SetConfig+0x10c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d113      	bne.n	80071fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	621a      	str	r2, [r3, #32]
}
 8007214:	bf00      	nop
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800

08007234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	031b      	lsls	r3, r3, #12
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <TIM_OC4_SetConfig+0xc0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00f      	beq.n	80072b8 <TIM_OC4_SetConfig+0x84>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <TIM_OC4_SetConfig+0xc4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00b      	beq.n	80072b8 <TIM_OC4_SetConfig+0x84>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a16      	ldr	r2, [pc, #88]	; (80072fc <TIM_OC4_SetConfig+0xc8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d007      	beq.n	80072b8 <TIM_OC4_SetConfig+0x84>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a15      	ldr	r2, [pc, #84]	; (8007300 <TIM_OC4_SetConfig+0xcc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC4_SetConfig+0x84>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a14      	ldr	r2, [pc, #80]	; (8007304 <TIM_OC4_SetConfig+0xd0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d109      	bne.n	80072cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	019b      	lsls	r3, r3, #6
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40013400 	.word	0x40013400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800

08007308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800734c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a17      	ldr	r2, [pc, #92]	; (80073bc <TIM_OC5_SetConfig+0xb4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00f      	beq.n	8007382 <TIM_OC5_SetConfig+0x7a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <TIM_OC5_SetConfig+0xb8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00b      	beq.n	8007382 <TIM_OC5_SetConfig+0x7a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <TIM_OC5_SetConfig+0xbc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d007      	beq.n	8007382 <TIM_OC5_SetConfig+0x7a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <TIM_OC5_SetConfig+0xc0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC5_SetConfig+0x7a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a13      	ldr	r2, [pc, #76]	; (80073cc <TIM_OC5_SetConfig+0xc4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d109      	bne.n	8007396 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	621a      	str	r2, [r3, #32]
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40013400 	.word	0x40013400
 80073c4:	40014000 	.word	0x40014000
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800

080073d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	051b      	lsls	r3, r3, #20
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <TIM_OC6_SetConfig+0xb8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00f      	beq.n	800744c <TIM_OC6_SetConfig+0x7c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a17      	ldr	r2, [pc, #92]	; (800748c <TIM_OC6_SetConfig+0xbc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00b      	beq.n	800744c <TIM_OC6_SetConfig+0x7c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a16      	ldr	r2, [pc, #88]	; (8007490 <TIM_OC6_SetConfig+0xc0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d007      	beq.n	800744c <TIM_OC6_SetConfig+0x7c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a15      	ldr	r2, [pc, #84]	; (8007494 <TIM_OC6_SetConfig+0xc4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <TIM_OC6_SetConfig+0x7c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a14      	ldr	r2, [pc, #80]	; (8007498 <TIM_OC6_SetConfig+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d109      	bne.n	8007460 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007452:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	029b      	lsls	r3, r3, #10
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40012c00 	.word	0x40012c00
 800748c:	40013400 	.word	0x40013400
 8007490:	40014000 	.word	0x40014000
 8007494:	40014400 	.word	0x40014400
 8007498:	40014800 	.word	0x40014800

0800749c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e068      	b.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2e      	ldr	r2, [pc, #184]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2d      	ldr	r2, [pc, #180]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007500:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01d      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d018      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1b      	ldr	r2, [pc, #108]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1a      	ldr	r2, [pc, #104]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a13      	ldr	r2, [pc, #76]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10c      	bne.n	8007574 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40012c00 	.word	0x40012c00
 8007598:	40013400 	.word	0x40013400
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	40014000 	.word	0x40014000

080075ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e042      	b.n	8007644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fa f889 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2224      	movs	r2, #36	; 0x24
 80075da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f82c 	bl	800764c <UART_SetConfig>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e022      	b.n	8007644 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb1c 	bl	8007c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800761a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800762a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fba3 	bl	8007d88 <UART_CheckIdleState>
 8007642:	4603      	mov	r3, r0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800764c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007650:	b08c      	sub	sp, #48	; 0x30
 8007652:	af00      	add	r7, sp, #0
 8007654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	431a      	orrs	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	431a      	orrs	r2, r3
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	4313      	orrs	r3, r2
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4baa      	ldr	r3, [pc, #680]	; (8007924 <UART_SetConfig+0x2d8>)
 800767c:	4013      	ands	r3, r2
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007684:	430b      	orrs	r3, r1
 8007686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a9f      	ldr	r2, [pc, #636]	; (8007928 <UART_SetConfig+0x2dc>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b4:	4313      	orrs	r3, r2
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	f023 010f 	bic.w	r1, r3, #15
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a90      	ldr	r2, [pc, #576]	; (800792c <UART_SetConfig+0x2e0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d125      	bne.n	800773c <UART_SetConfig+0xf0>
 80076f0:	4b8f      	ldr	r3, [pc, #572]	; (8007930 <UART_SetConfig+0x2e4>)
 80076f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d81a      	bhi.n	8007734 <UART_SetConfig+0xe8>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0xb8>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007715 	.word	0x08007715
 8007708:	08007725 	.word	0x08007725
 800770c:	0800771d 	.word	0x0800771d
 8007710:	0800772d 	.word	0x0800772d
 8007714:	2301      	movs	r3, #1
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771a:	e116      	b.n	800794a <UART_SetConfig+0x2fe>
 800771c:	2302      	movs	r3, #2
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007722:	e112      	b.n	800794a <UART_SetConfig+0x2fe>
 8007724:	2304      	movs	r3, #4
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772a:	e10e      	b.n	800794a <UART_SetConfig+0x2fe>
 800772c:	2308      	movs	r3, #8
 800772e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007732:	e10a      	b.n	800794a <UART_SetConfig+0x2fe>
 8007734:	2310      	movs	r3, #16
 8007736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800773a:	e106      	b.n	800794a <UART_SetConfig+0x2fe>
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a7c      	ldr	r2, [pc, #496]	; (8007934 <UART_SetConfig+0x2e8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d138      	bne.n	80077b8 <UART_SetConfig+0x16c>
 8007746:	4b7a      	ldr	r3, [pc, #488]	; (8007930 <UART_SetConfig+0x2e4>)
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774c:	f003 030c 	and.w	r3, r3, #12
 8007750:	2b0c      	cmp	r3, #12
 8007752:	d82d      	bhi.n	80077b0 <UART_SetConfig+0x164>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <UART_SetConfig+0x110>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	08007791 	.word	0x08007791
 8007760:	080077b1 	.word	0x080077b1
 8007764:	080077b1 	.word	0x080077b1
 8007768:	080077b1 	.word	0x080077b1
 800776c:	080077a1 	.word	0x080077a1
 8007770:	080077b1 	.word	0x080077b1
 8007774:	080077b1 	.word	0x080077b1
 8007778:	080077b1 	.word	0x080077b1
 800777c:	08007799 	.word	0x08007799
 8007780:	080077b1 	.word	0x080077b1
 8007784:	080077b1 	.word	0x080077b1
 8007788:	080077b1 	.word	0x080077b1
 800778c:	080077a9 	.word	0x080077a9
 8007790:	2300      	movs	r3, #0
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007796:	e0d8      	b.n	800794a <UART_SetConfig+0x2fe>
 8007798:	2302      	movs	r3, #2
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800779e:	e0d4      	b.n	800794a <UART_SetConfig+0x2fe>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077a6:	e0d0      	b.n	800794a <UART_SetConfig+0x2fe>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ae:	e0cc      	b.n	800794a <UART_SetConfig+0x2fe>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077b6:	e0c8      	b.n	800794a <UART_SetConfig+0x2fe>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a5e      	ldr	r2, [pc, #376]	; (8007938 <UART_SetConfig+0x2ec>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d125      	bne.n	800780e <UART_SetConfig+0x1c2>
 80077c2:	4b5b      	ldr	r3, [pc, #364]	; (8007930 <UART_SetConfig+0x2e4>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077cc:	2b30      	cmp	r3, #48	; 0x30
 80077ce:	d016      	beq.n	80077fe <UART_SetConfig+0x1b2>
 80077d0:	2b30      	cmp	r3, #48	; 0x30
 80077d2:	d818      	bhi.n	8007806 <UART_SetConfig+0x1ba>
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d00a      	beq.n	80077ee <UART_SetConfig+0x1a2>
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d814      	bhi.n	8007806 <UART_SetConfig+0x1ba>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <UART_SetConfig+0x19a>
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d008      	beq.n	80077f6 <UART_SetConfig+0x1aa>
 80077e4:	e00f      	b.n	8007806 <UART_SetConfig+0x1ba>
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ec:	e0ad      	b.n	800794a <UART_SetConfig+0x2fe>
 80077ee:	2302      	movs	r3, #2
 80077f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f4:	e0a9      	b.n	800794a <UART_SetConfig+0x2fe>
 80077f6:	2304      	movs	r3, #4
 80077f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077fc:	e0a5      	b.n	800794a <UART_SetConfig+0x2fe>
 80077fe:	2308      	movs	r3, #8
 8007800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007804:	e0a1      	b.n	800794a <UART_SetConfig+0x2fe>
 8007806:	2310      	movs	r3, #16
 8007808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800780c:	e09d      	b.n	800794a <UART_SetConfig+0x2fe>
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a4a      	ldr	r2, [pc, #296]	; (800793c <UART_SetConfig+0x2f0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d125      	bne.n	8007864 <UART_SetConfig+0x218>
 8007818:	4b45      	ldr	r3, [pc, #276]	; (8007930 <UART_SetConfig+0x2e4>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007822:	2bc0      	cmp	r3, #192	; 0xc0
 8007824:	d016      	beq.n	8007854 <UART_SetConfig+0x208>
 8007826:	2bc0      	cmp	r3, #192	; 0xc0
 8007828:	d818      	bhi.n	800785c <UART_SetConfig+0x210>
 800782a:	2b80      	cmp	r3, #128	; 0x80
 800782c:	d00a      	beq.n	8007844 <UART_SetConfig+0x1f8>
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d814      	bhi.n	800785c <UART_SetConfig+0x210>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <UART_SetConfig+0x1f0>
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d008      	beq.n	800784c <UART_SetConfig+0x200>
 800783a:	e00f      	b.n	800785c <UART_SetConfig+0x210>
 800783c:	2300      	movs	r3, #0
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007842:	e082      	b.n	800794a <UART_SetConfig+0x2fe>
 8007844:	2302      	movs	r3, #2
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e07e      	b.n	800794a <UART_SetConfig+0x2fe>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007852:	e07a      	b.n	800794a <UART_SetConfig+0x2fe>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785a:	e076      	b.n	800794a <UART_SetConfig+0x2fe>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007862:	e072      	b.n	800794a <UART_SetConfig+0x2fe>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a35      	ldr	r2, [pc, #212]	; (8007940 <UART_SetConfig+0x2f4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d12a      	bne.n	80078c4 <UART_SetConfig+0x278>
 800786e:	4b30      	ldr	r3, [pc, #192]	; (8007930 <UART_SetConfig+0x2e4>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800787c:	d01a      	beq.n	80078b4 <UART_SetConfig+0x268>
 800787e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007882:	d81b      	bhi.n	80078bc <UART_SetConfig+0x270>
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d00c      	beq.n	80078a4 <UART_SetConfig+0x258>
 800788a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788e:	d815      	bhi.n	80078bc <UART_SetConfig+0x270>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <UART_SetConfig+0x250>
 8007894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007898:	d008      	beq.n	80078ac <UART_SetConfig+0x260>
 800789a:	e00f      	b.n	80078bc <UART_SetConfig+0x270>
 800789c:	2300      	movs	r3, #0
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a2:	e052      	b.n	800794a <UART_SetConfig+0x2fe>
 80078a4:	2302      	movs	r3, #2
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078aa:	e04e      	b.n	800794a <UART_SetConfig+0x2fe>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078b2:	e04a      	b.n	800794a <UART_SetConfig+0x2fe>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ba:	e046      	b.n	800794a <UART_SetConfig+0x2fe>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078c2:	e042      	b.n	800794a <UART_SetConfig+0x2fe>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a17      	ldr	r2, [pc, #92]	; (8007928 <UART_SetConfig+0x2dc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d13a      	bne.n	8007944 <UART_SetConfig+0x2f8>
 80078ce:	4b18      	ldr	r3, [pc, #96]	; (8007930 <UART_SetConfig+0x2e4>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078dc:	d01a      	beq.n	8007914 <UART_SetConfig+0x2c8>
 80078de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078e2:	d81b      	bhi.n	800791c <UART_SetConfig+0x2d0>
 80078e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e8:	d00c      	beq.n	8007904 <UART_SetConfig+0x2b8>
 80078ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ee:	d815      	bhi.n	800791c <UART_SetConfig+0x2d0>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <UART_SetConfig+0x2b0>
 80078f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f8:	d008      	beq.n	800790c <UART_SetConfig+0x2c0>
 80078fa:	e00f      	b.n	800791c <UART_SetConfig+0x2d0>
 80078fc:	2300      	movs	r3, #0
 80078fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007902:	e022      	b.n	800794a <UART_SetConfig+0x2fe>
 8007904:	2302      	movs	r3, #2
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790a:	e01e      	b.n	800794a <UART_SetConfig+0x2fe>
 800790c:	2304      	movs	r3, #4
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007912:	e01a      	b.n	800794a <UART_SetConfig+0x2fe>
 8007914:	2308      	movs	r3, #8
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800791a:	e016      	b.n	800794a <UART_SetConfig+0x2fe>
 800791c:	2310      	movs	r3, #16
 800791e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007922:	e012      	b.n	800794a <UART_SetConfig+0x2fe>
 8007924:	cfff69f3 	.word	0xcfff69f3
 8007928:	40008000 	.word	0x40008000
 800792c:	40013800 	.word	0x40013800
 8007930:	40021000 	.word	0x40021000
 8007934:	40004400 	.word	0x40004400
 8007938:	40004800 	.word	0x40004800
 800793c:	40004c00 	.word	0x40004c00
 8007940:	40005000 	.word	0x40005000
 8007944:	2310      	movs	r3, #16
 8007946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4aae      	ldr	r2, [pc, #696]	; (8007c08 <UART_SetConfig+0x5bc>)
 8007950:	4293      	cmp	r3, r2
 8007952:	f040 8097 	bne.w	8007a84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007956:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800795a:	2b08      	cmp	r3, #8
 800795c:	d823      	bhi.n	80079a6 <UART_SetConfig+0x35a>
 800795e:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <UART_SetConfig+0x318>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	08007989 	.word	0x08007989
 8007968:	080079a7 	.word	0x080079a7
 800796c:	08007991 	.word	0x08007991
 8007970:	080079a7 	.word	0x080079a7
 8007974:	08007997 	.word	0x08007997
 8007978:	080079a7 	.word	0x080079a7
 800797c:	080079a7 	.word	0x080079a7
 8007980:	080079a7 	.word	0x080079a7
 8007984:	0800799f 	.word	0x0800799f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007988:	f7fc fd38 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800798c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800798e:	e010      	b.n	80079b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007990:	4b9e      	ldr	r3, [pc, #632]	; (8007c0c <UART_SetConfig+0x5c0>)
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007994:	e00d      	b.n	80079b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007996:	f7fc fc99 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800799a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800799c:	e009      	b.n	80079b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079a4:	e005      	b.n	80079b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80079b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8130 	beq.w	8007c1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	4a94      	ldr	r2, [pc, #592]	; (8007c10 <UART_SetConfig+0x5c4>)
 80079c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c4:	461a      	mov	r2, r3
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	4413      	add	r3, r2
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d305      	bcc.n	80079ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d903      	bls.n	80079f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079f0:	e113      	b.n	8007c1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	2200      	movs	r2, #0
 80079f6:	60bb      	str	r3, [r7, #8]
 80079f8:	60fa      	str	r2, [r7, #12]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	4a84      	ldr	r2, [pc, #528]	; (8007c10 <UART_SetConfig+0x5c4>)
 8007a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2200      	movs	r2, #0
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a14:	f7f8 fbf2 	bl	80001fc <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	020b      	lsls	r3, r1, #8
 8007a2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a2e:	0202      	lsls	r2, r0, #8
 8007a30:	6979      	ldr	r1, [r7, #20]
 8007a32:	6849      	ldr	r1, [r1, #4]
 8007a34:	0849      	lsrs	r1, r1, #1
 8007a36:	2000      	movs	r0, #0
 8007a38:	460c      	mov	r4, r1
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	eb12 0804 	adds.w	r8, r2, r4
 8007a40:	eb43 0905 	adc.w	r9, r3, r5
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	469a      	mov	sl, r3
 8007a4c:	4693      	mov	fp, r2
 8007a4e:	4652      	mov	r2, sl
 8007a50:	465b      	mov	r3, fp
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	f7f8 fbd1 	bl	80001fc <__aeabi_uldivmod>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4613      	mov	r3, r2
 8007a60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a68:	d308      	bcc.n	8007a7c <UART_SetConfig+0x430>
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a70:	d204      	bcs.n	8007a7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	e0ce      	b.n	8007c1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a82:	e0ca      	b.n	8007c1a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8c:	d166      	bne.n	8007b5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d827      	bhi.n	8007ae6 <UART_SetConfig+0x49a>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <UART_SetConfig+0x450>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ae7 	.word	0x08007ae7
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007ae7 	.word	0x08007ae7
 8007ab8:	08007ae7 	.word	0x08007ae7
 8007abc:	08007adf 	.word	0x08007adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac0:	f7fc fc9c 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8007ac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ac6:	e014      	b.n	8007af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fc fcae 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8007acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ace:	e010      	b.n	8007af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad0:	4b4e      	ldr	r3, [pc, #312]	; (8007c0c <UART_SetConfig+0x5c0>)
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ad4:	e00d      	b.n	8007af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad6:	f7fc fbf9 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8007ada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007adc:	e009      	b.n	8007af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ae4:	e005      	b.n	8007af2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8090 	beq.w	8007c1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	4a44      	ldr	r2, [pc, #272]	; (8007c10 <UART_SetConfig+0x5c4>)
 8007b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0c:	005a      	lsls	r2, r3, #1
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	441a      	add	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b0f      	cmp	r3, #15
 8007b24:	d916      	bls.n	8007b54 <UART_SetConfig+0x508>
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2c:	d212      	bcs.n	8007b54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f023 030f 	bic.w	r3, r3, #15
 8007b36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	8bfb      	ldrh	r3, [r7, #30]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	8bfa      	ldrh	r2, [r7, #30]
 8007b50:	60da      	str	r2, [r3, #12]
 8007b52:	e062      	b.n	8007c1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b5a:	e05e      	b.n	8007c1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d828      	bhi.n	8007bb6 <UART_SetConfig+0x56a>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <UART_SetConfig+0x520>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	08007bb7 	.word	0x08007bb7
 8007b7c:	08007ba7 	.word	0x08007ba7
 8007b80:	08007bb7 	.word	0x08007bb7
 8007b84:	08007bb7 	.word	0x08007bb7
 8007b88:	08007bb7 	.word	0x08007bb7
 8007b8c:	08007baf 	.word	0x08007baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b90:	f7fc fc34 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8007b94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b96:	e014      	b.n	8007bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b98:	f7fc fc46 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b9e:	e010      	b.n	8007bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <UART_SetConfig+0x5c0>)
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ba4:	e00d      	b.n	8007bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba6:	f7fc fb91 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8007baa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bac:	e009      	b.n	8007bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bb4:	e005      	b.n	8007bc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d028      	beq.n	8007c1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	4a10      	ldr	r2, [pc, #64]	; (8007c10 <UART_SetConfig+0x5c4>)
 8007bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	441a      	add	r2, r3
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d910      	bls.n	8007c14 <UART_SetConfig+0x5c8>
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf8:	d20c      	bcs.n	8007c14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60da      	str	r2, [r3, #12]
 8007c04:	e009      	b.n	8007c1a <UART_SetConfig+0x5ce>
 8007c06:	bf00      	nop
 8007c08:	40008000 	.word	0x40008000
 8007c0c:	00f42400 	.word	0x00f42400
 8007c10:	0800829c 	.word	0x0800829c
      }
      else
      {
        ret = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2200      	movs	r2, #0
 8007c34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007c36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3730      	adds	r7, #48	; 0x30
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01a      	beq.n	8007d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d42:	d10a      	bne.n	8007d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	605a      	str	r2, [r3, #4]
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d98:	f7fa f82e 	bl	8001df8 <HAL_GetTick>
 8007d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d10e      	bne.n	8007dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f82f 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e025      	b.n	8007e16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d10e      	bne.n	8007df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f819 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e00f      	b.n	8007e16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b09c      	sub	sp, #112	; 0x70
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	603b      	str	r3, [r7, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e2e:	e0a9      	b.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	f000 80a5 	beq.w	8007f84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3a:	f7f9 ffdd 	bl	8001df8 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d302      	bcc.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d140      	bne.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e64:	667b      	str	r3, [r7, #100]	; 0x64
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e6      	bne.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	f023 0301 	bic.w	r3, r3, #1
 8007e98:	663b      	str	r3, [r7, #96]	; 0x60
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ea2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e069      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d051      	beq.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eee:	d149      	bne.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f4c:	623a      	str	r2, [r7, #32]
 8007f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	69f9      	ldr	r1, [r7, #28]
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e010      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69da      	ldr	r2, [r3, #28]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	f43f af46 	beq.w	8007e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3770      	adds	r7, #112	; 0x70
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e027      	b.n	8008014 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2224      	movs	r2, #36	; 0x24
 8007fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ff2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008034:	2302      	movs	r3, #2
 8008036:	e02d      	b.n	8008094 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2224      	movs	r2, #36	; 0x24
 8008044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f84f 	bl	8008118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e02d      	b.n	8008110 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	; 0x24
 80080c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f811 	bl	8008118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008124:	2b00      	cmp	r3, #0
 8008126:	d108      	bne.n	800813a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008138:	e031      	b.n	800819e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800813a:	2308      	movs	r3, #8
 800813c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800813e:	2308      	movs	r3, #8
 8008140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	0e5b      	lsrs	r3, r3, #25
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	0f5b      	lsrs	r3, r3, #29
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	7b3a      	ldrb	r2, [r7, #12]
 8008166:	4911      	ldr	r1, [pc, #68]	; (80081ac <UARTEx_SetNbDataToProcess+0x94>)
 8008168:	5c8a      	ldrb	r2, [r1, r2]
 800816a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800816e:	7b3a      	ldrb	r2, [r7, #12]
 8008170:	490f      	ldr	r1, [pc, #60]	; (80081b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008174:	fb93 f3f2 	sdiv	r3, r3, r2
 8008178:	b29a      	uxth	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	7b7a      	ldrb	r2, [r7, #13]
 8008184:	4909      	ldr	r1, [pc, #36]	; (80081ac <UARTEx_SetNbDataToProcess+0x94>)
 8008186:	5c8a      	ldrb	r2, [r1, r2]
 8008188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800818c:	7b7a      	ldrb	r2, [r7, #13]
 800818e:	4908      	ldr	r1, [pc, #32]	; (80081b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008192:	fb93 f3f2 	sdiv	r3, r3, r2
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	080082b4 	.word	0x080082b4
 80081b0:	080082bc 	.word	0x080082bc

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4d0d      	ldr	r5, [pc, #52]	; (80081ec <__libc_init_array+0x38>)
 80081b8:	4c0d      	ldr	r4, [pc, #52]	; (80081f0 <__libc_init_array+0x3c>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	2600      	movs	r6, #0
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	4d0b      	ldr	r5, [pc, #44]	; (80081f4 <__libc_init_array+0x40>)
 80081c6:	4c0c      	ldr	r4, [pc, #48]	; (80081f8 <__libc_init_array+0x44>)
 80081c8:	f000 f820 	bl	800820c <_init>
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	10a4      	asrs	r4, r4, #2
 80081d0:	2600      	movs	r6, #0
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	080082cc 	.word	0x080082cc
 80081f0:	080082cc 	.word	0x080082cc
 80081f4:	080082cc 	.word	0x080082cc
 80081f8:	080082d0 	.word	0x080082d0

080081fc <memset>:
 80081fc:	4402      	add	r2, r0
 80081fe:	4603      	mov	r3, r0
 8008200:	4293      	cmp	r3, r2
 8008202:	d100      	bne.n	8008206 <memset+0xa>
 8008204:	4770      	bx	lr
 8008206:	f803 1b01 	strb.w	r1, [r3], #1
 800820a:	e7f9      	b.n	8008200 <memset+0x4>

0800820c <_init>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr

08008218 <_fini>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr
