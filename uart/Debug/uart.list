
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd4  08003cd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cdc  08003cdc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003cf0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003cf0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdbe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a16  00000000  00000000  0002cdfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002e810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028917  00000000  00000000  0002faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1b0  00000000  00000000  0005840f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb047  00000000  00000000  000645bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  0015f658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003bc4 	.word	0x08003bc4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003bc4 	.word	0x08003bc4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0a6      	sub	sp, #152	; 0x98
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fcc0 	bl	8000e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f8f9 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f989 	bl	8000824 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000512:	f000 f93b 	bl	800078c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
    uint8_t data[10] = "\c (0x10)";
 8000516:	4a6c      	ldr	r2, [pc, #432]	; (80006c8 <main+0x1c8>)
 8000518:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800051c:	ca07      	ldmia	r2, {r0, r1, r2}
 800051e:	c303      	stmia	r3!, {r0, r1}
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t data1[10] = "0x7C";
 8000528:	4a68      	ldr	r2, [pc, #416]	; (80006cc <main+0x1cc>)
 800052a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800052e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000532:	6018      	str	r0, [r3, #0]
 8000534:	3304      	adds	r3, #4
 8000536:	7019      	strb	r1, [r3, #0]
 8000538:	f107 0385 	add.w	r3, r7, #133	; 0x85
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	711a      	strb	r2, [r3, #4]
    uint8_t data2[10] = "0x0C";
 8000542:	4a63      	ldr	r2, [pc, #396]	; (80006d0 <main+0x1d0>)
 8000544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054c:	6018      	str	r0, [r3, #0]
 800054e:	3304      	adds	r3, #4
 8000550:	7019      	strb	r1, [r3, #0]
 8000552:	f107 0379 	add.w	r3, r7, #121	; 0x79
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	711a      	strb	r2, [r3, #4]
    uint8_t data3[10] = "0x00";
 800055c:	4a5d      	ldr	r2, [pc, #372]	; (80006d4 <main+0x1d4>)
 800055e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000566:	6018      	str	r0, [r3, #0]
 8000568:	3304      	adds	r3, #4
 800056a:	7019      	strb	r1, [r3, #0]
 800056c:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	711a      	strb	r2, [r3, #4]
    uint8_t data4[10] = "0x0A";
 8000576:	4a58      	ldr	r2, [pc, #352]	; (80006d8 <main+0x1d8>)
 8000578:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	6018      	str	r0, [r3, #0]
 8000582:	3304      	adds	r3, #4
 8000584:	7019      	strb	r1, [r3, #0]
 8000586:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	711a      	strb	r2, [r3, #4]
    uint8_t data5[10] = "0x32";
 8000590:	4a52      	ldr	r2, [pc, #328]	; (80006dc <main+0x1dc>)
 8000592:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059a:	6018      	str	r0, [r3, #0]
 800059c:	3304      	adds	r3, #4
 800059e:	7019      	strb	r1, [r3, #0]
 80005a0:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	711a      	strb	r2, [r3, #4]
    uint8_t data6[10] = "0x3C";
 80005aa:	4a4d      	ldr	r2, [pc, #308]	; (80006e0 <main+0x1e0>)
 80005ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b4:	6018      	str	r0, [r3, #0]
 80005b6:	3304      	adds	r3, #4
 80005b8:	7019      	strb	r1, [r3, #0]
 80005ba:	f107 0349 	add.w	r3, r7, #73	; 0x49
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	711a      	strb	r2, [r3, #4]
    uint8_t data7[10] = "0x01";
 80005c4:	4a47      	ldr	r2, [pc, #284]	; (80006e4 <main+0x1e4>)
 80005c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	7019      	strb	r1, [r3, #0]
 80005d4:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	711a      	strb	r2, [r3, #4]
//    0x7C 0x0C 0x00 (x1) 0x0A (y1) 0x32 (x2) 0x3C (y2) 0x01
    uint8_t clear[2] = {0x7C,0x00};
 80005de:	237c      	movs	r3, #124	; 0x7c
 80005e0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t buff[10] = {0x7C, 0x0C, 0x00 , 0x0A , 0x32 , 0x3C, 0x01};
 80005e2:	4a41      	ldr	r2, [pc, #260]	; (80006e8 <main+0x1e8>)
 80005e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80005f0:	2300      	movs	r3, #0
 80005f2:	863b      	strh	r3, [r7, #48]	; 0x30
    uint8_t circle[10] = { 0x7C, 0x03, 0x50 ,0x40, 0x0A, 0x01};
 80005f4:	4a3d      	ldr	r2, [pc, #244]	; (80006ec <main+0x1ec>)
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fe:	6018      	str	r0, [r3, #0]
 8000600:	3304      	adds	r3, #4
 8000602:	8019      	strh	r1, [r3, #0]
 8000604:	3302      	adds	r3, #2
 8000606:	0c0a      	lsrs	r2, r1, #16
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
 8000612:	709a      	strb	r2, [r3, #2]
    //0x7C 0x18 0x50
    uint8_t xoff[5] = {0x7C, 0x18, 0x50};
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <main+0x1f0>)
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	2300      	movs	r3, #0
 800061a:	763b      	strb	r3, [r7, #24]
    uint8_t Jazib[10] = {0x4A,0x41, 0x5A,0x49, 0x42};
 800061c:	4a35      	ldr	r2, [pc, #212]	; (80006f4 <main+0x1f4>)
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000626:	6018      	str	r0, [r3, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	8019      	strh	r1, [r3, #0]
 800062c:	f107 030e 	add.w	r3, r7, #14
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
    uint8_t demo[3] = {0x7C, 0x12 };
 8000634:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <main+0x1f8>)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	4611      	mov	r1, r2
 800063c:	8019      	strh	r1, [r3, #0]
 800063e:	3302      	adds	r3, #2
 8000640:	0c12      	lsrs	r2, r2, #16
 8000642:	701a      	strb	r2, [r3, #0]
	  //sprintf("\c (0x10)", buff);

	 // HAL_UART_Transmit (&huart3, (uint8_t*), strlen((const char*)buff), 10);


	  HAL_UART_Transmit (&huart3, clear, sizeof (clear), 150);
 8000644:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000648:	2396      	movs	r3, #150	; 0x96
 800064a:	2202      	movs	r2, #2
 800064c:	482b      	ldr	r0, [pc, #172]	; (80006fc <main+0x1fc>)
 800064e:	f002 fc41 	bl	8002ed4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f000 fc8d 	bl	8000f74 <HAL_Delay>
	  HAL_UART_Transmit (&huart3, buff, sizeof (buff), 150);
 800065a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800065e:	2396      	movs	r3, #150	; 0x96
 8000660:	220a      	movs	r2, #10
 8000662:	4826      	ldr	r0, [pc, #152]	; (80006fc <main+0x1fc>)
 8000664:	f002 fc36 	bl	8002ed4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f000 fc82 	bl	8000f74 <HAL_Delay>


	  HAL_UART_Transmit (&huart3, circle, sizeof (circle), 150);
 8000670:	f107 011c 	add.w	r1, r7, #28
 8000674:	2396      	movs	r3, #150	; 0x96
 8000676:	220a      	movs	r2, #10
 8000678:	4820      	ldr	r0, [pc, #128]	; (80006fc <main+0x1fc>)
 800067a:	f002 fc2b 	bl	8002ed4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000682:	f000 fc77 	bl	8000f74 <HAL_Delay>


	  HAL_UART_Transmit (&huart3, xoff, sizeof (xoff), 150);
 8000686:	f107 0114 	add.w	r1, r7, #20
 800068a:	2396      	movs	r3, #150	; 0x96
 800068c:	2205      	movs	r2, #5
 800068e:	481b      	ldr	r0, [pc, #108]	; (80006fc <main+0x1fc>)
 8000690:	f002 fc20 	bl	8002ed4 <HAL_UART_Transmit>
	 	  HAL_Delay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f000 fc6c 	bl	8000f74 <HAL_Delay>


	 	  HAL_UART_Transmit (&huart3, Jazib, sizeof (Jazib), 150);
 800069c:	f107 0108 	add.w	r1, r7, #8
 80006a0:	2396      	movs	r3, #150	; 0x96
 80006a2:	220a      	movs	r2, #10
 80006a4:	4815      	ldr	r0, [pc, #84]	; (80006fc <main+0x1fc>)
 80006a6:	f002 fc15 	bl	8002ed4 <HAL_UART_Transmit>
	 	  HAL_Delay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ae:	f000 fc61 	bl	8000f74 <HAL_Delay>

	 	 HAL_UART_Transmit (&huart3, demo, sizeof (demo), 150);
 80006b2:	1d39      	adds	r1, r7, #4
 80006b4:	2396      	movs	r3, #150	; 0x96
 80006b6:	2203      	movs	r2, #3
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <main+0x1fc>)
 80006ba:	f002 fc0b 	bl	8002ed4 <HAL_UART_Transmit>
	 		 	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f000 fc57 	bl	8000f74 <HAL_Delay>
	  HAL_UART_Transmit (&huart3, clear, sizeof (clear), 150);
 80006c6:	e7bd      	b.n	8000644 <main+0x144>
 80006c8:	08003bdc 	.word	0x08003bdc
 80006cc:	08003be8 	.word	0x08003be8
 80006d0:	08003bf4 	.word	0x08003bf4
 80006d4:	08003c00 	.word	0x08003c00
 80006d8:	08003c0c 	.word	0x08003c0c
 80006dc:	08003c18 	.word	0x08003c18
 80006e0:	08003c24 	.word	0x08003c24
 80006e4:	08003c30 	.word	0x08003c30
 80006e8:	08003c3c 	.word	0x08003c3c
 80006ec:	08003c48 	.word	0x08003c48
 80006f0:	0050187c 	.word	0x0050187c
 80006f4:	08003c54 	.word	0x08003c54
 80006f8:	08003c60 	.word	0x08003c60
 80006fc:	20000028 	.word	0x20000028

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2244      	movs	r2, #68	; 0x44
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fa50 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000722:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000726:	f000 fee1 	bl	80014ec <HAL_PWREx_ControlVoltageScaling>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000730:	f000 fabe 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000734:	2310      	movs	r3, #16
 8000736:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000740:	2360      	movs	r3, #96	; 0x60
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4618      	mov	r0, r3
 800074e:	f000 ff81 	bl	8001654 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000758:	f000 faaa 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fb87 	bl	8001e88 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000780:	f000 fa96 	bl	8000cb0 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3758      	adds	r7, #88	; 0x58
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_USART3_UART_Init+0x90>)
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <MX_USART3_UART_Init+0x94>)
 8000794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_USART3_UART_Init+0x90>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007d6:	f002 fb2d 	bl	8002e34 <HAL_UART_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 fa66 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007e8:	f003 f8f6 	bl	80039d8 <HAL_UARTEx_SetTxFifoThreshold>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007f2:	f000 fa5d 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <MX_USART3_UART_Init+0x90>)
 80007fa:	f003 f92b 	bl	8003a54 <HAL_UARTEx_SetRxFifoThreshold>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000804:	f000 fa54 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_USART3_UART_Init+0x90>)
 800080a:	f003 f8ac 	bl	8003966 <HAL_UARTEx_DisableFifoMode>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000814:	f000 fa4c 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000028 	.word	0x20000028
 8000820:	40004800 	.word	0x40004800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	4bb2      	ldr	r3, [pc, #712]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4ab1      	ldr	r2, [pc, #708]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4baf      	ldr	r3, [pc, #700]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4bac      	ldr	r3, [pc, #688]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4aab      	ldr	r2, [pc, #684]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4ba9      	ldr	r3, [pc, #676]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	4ba6      	ldr	r3, [pc, #664]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4aa5      	ldr	r2, [pc, #660]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4ba3      	ldr	r3, [pc, #652]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4ba0      	ldr	r3, [pc, #640]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a9f      	ldr	r2, [pc, #636]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b9d      	ldr	r3, [pc, #628]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b9a      	ldr	r3, [pc, #616]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a99      	ldr	r2, [pc, #612]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b97      	ldr	r3, [pc, #604]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b94      	ldr	r3, [pc, #592]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a93      	ldr	r2, [pc, #588]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b91      	ldr	r3, [pc, #580]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b8e      	ldr	r3, [pc, #568]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a8d      	ldr	r2, [pc, #564]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b8b      	ldr	r3, [pc, #556]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b88      	ldr	r3, [pc, #544]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a87      	ldr	r2, [pc, #540]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b85      	ldr	r3, [pc, #532]	; (8000b04 <MX_GPIO_Init+0x2e0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008fa:	f000 fe9b 	bl	8001634 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fe:	230c      	movs	r3, #12
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800090e:	230d      	movs	r3, #13
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	487b      	ldr	r0, [pc, #492]	; (8000b08 <MX_GPIO_Init+0x2e4>)
 800091a:	f000 fc35 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800091e:	2307      	movs	r3, #7
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000922:	2312      	movs	r3, #18
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800092e:	2304      	movs	r3, #4
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4874      	ldr	r0, [pc, #464]	; (8000b0c <MX_GPIO_Init+0x2e8>)
 800093a:	f000 fc25 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800094e:	230d      	movs	r3, #13
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	486c      	ldr	r0, [pc, #432]	; (8000b0c <MX_GPIO_Init+0x2e8>)
 800095a:	f000 fc15 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800095e:	233f      	movs	r3, #63	; 0x3f
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000962:	230b      	movs	r3, #11
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	4867      	ldr	r0, [pc, #412]	; (8000b10 <MX_GPIO_Init+0x2ec>)
 8000972:	f000 fc09 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000976:	2301      	movs	r3, #1
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000986:	2301      	movs	r3, #1
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 fbf8 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000998:	230a      	movs	r3, #10
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800099c:	230b      	movs	r3, #11
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 fbeb 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009b2:	23f0      	movs	r3, #240	; 0xf0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c2:	2305      	movs	r3, #5
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fbda 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d4:	2301      	movs	r3, #1
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009e4:	2302      	movs	r3, #2
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4849      	ldr	r0, [pc, #292]	; (8000b14 <MX_GPIO_Init+0x2f0>)
 80009f0:	f000 fbca 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009f4:	2302      	movs	r3, #2
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009f8:	230b      	movs	r3, #11
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4843      	ldr	r0, [pc, #268]	; (8000b14 <MX_GPIO_Init+0x2f0>)
 8000a08:	f000 fbbe 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000a0c:	2344      	movs	r3, #68	; 0x44
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	483d      	ldr	r0, [pc, #244]	; (8000b14 <MX_GPIO_Init+0x2f0>)
 8000a20:	f000 fbb2 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a24:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4831      	ldr	r0, [pc, #196]	; (8000b08 <MX_GPIO_Init+0x2e4>)
 8000a42:	f000 fba1 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4829      	ldr	r0, [pc, #164]	; (8000b08 <MX_GPIO_Init+0x2e4>)
 8000a64:	f000 fb90 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4823      	ldr	r0, [pc, #140]	; (8000b14 <MX_GPIO_Init+0x2f0>)
 8000a86:	f000 fb7f 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a8a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a9c:	230d      	movs	r3, #13
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481b      	ldr	r0, [pc, #108]	; (8000b14 <MX_GPIO_Init+0x2f0>)
 8000aa8:	f000 fb6e 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000abe:	230e      	movs	r3, #14
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_GPIO_Init+0x2f0>)
 8000aca:	f000 fb5d 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ace:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0x2f4>)
 8000aec:	f000 fb4c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000af0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	e00c      	b.n	8000b1c <MX_GPIO_Init+0x2f8>
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48001000 	.word	0x48001000
 8000b0c:	48001400 	.word	0x48001400
 8000b10:	48000800 	.word	0x48000800
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	485c      	ldr	r0, [pc, #368]	; (8000c9c <MX_GPIO_Init+0x478>)
 8000b2a:	f000 fb2d 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b3e:	230d      	movs	r3, #13
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4855      	ldr	r0, [pc, #340]	; (8000ca0 <MX_GPIO_Init+0x47c>)
 8000b4a:	f000 fb1d 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <MX_GPIO_Init+0x47c>)
 8000b6a:	f000 fb0d 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b6e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b80:	230c      	movs	r3, #12
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4845      	ldr	r0, [pc, #276]	; (8000ca0 <MX_GPIO_Init+0x47c>)
 8000b8c:	f000 fafc 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000b90:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f000 faea 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f000 fadc 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000be0:	2309      	movs	r3, #9
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <MX_GPIO_Init+0x480>)
 8000bec:	f000 facc 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c00:	230c      	movs	r3, #12
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x480>)
 8000c0c:	f000 fabc 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c10:	2378      	movs	r3, #120	; 0x78
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <MX_GPIO_Init+0x480>)
 8000c2c:	f000 faac 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c30:	2338      	movs	r3, #56	; 0x38
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c40:	2306      	movs	r3, #6
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MX_GPIO_Init+0x484>)
 8000c4c:	f000 fa9c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c56:	2312      	movs	r3, #18
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c62:	2304      	movs	r3, #4
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <MX_GPIO_Init+0x484>)
 8000c6e:	f000 fa8b 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c72:	2301      	movs	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c82:	2302      	movs	r3, #2
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_GPIO_Init+0x488>)
 8000c8e:	f000 fa7b 	bl	8001188 <HAL_GPIO_Init>

}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	; 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	48001800 	.word	0x48001800
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	48000c00 	.word	0x48000c00
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48001000 	.word	0x48001000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ae      	sub	sp, #184	; 0xb8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2294      	movs	r2, #148	; 0x94
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 ff45 	bl	8003bb4 <memset>
  if(huart->Instance==USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <HAL_UART_MspInit+0xb0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13b      	bne.n	8000dac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d34:	2304      	movs	r3, #4
 8000d36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fb5f 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d4c:	f7ff ffb0 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000da8:	f000 f9ee 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	37b8      	adds	r7, #184	; 0xb8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004800 	.word	0x40004800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000c00 	.word	0x48000c00

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f892 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	; (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 fe81 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fb49 	bl	8000500 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e7c:	08003ce4 	.word	0x08003ce4
  ldr r2, =_sbss
 8000e80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e84:	200000bc 	.word	0x200000bc

08000e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>

08000e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f943 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f80e 	bl	8000ebc <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	e001      	b.n	8000eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eac:	f7ff ff06 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d023      	beq.n	8000f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_InitTick+0x70>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_InitTick+0x6c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f941 	bl	800116e <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d809      	bhi.n	8000f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f919 	bl	8001136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_InitTick+0x74>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e004      	b.n	8000f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e001      	b.n	8000f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	200000b8 	.word	0x200000b8

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200000b8 	.word	0x200000b8

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff47 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff5c 	bl	8001004 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb0 	bl	80010dc <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e166      	b.n	8001466 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8158 	beq.w	8001460 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80b2 	beq.w	8001460 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	4a60      	ldr	r2, [pc, #384]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6613      	str	r3, [r2, #96]	; 0x60
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 800130a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001314:	4a5c      	ldr	r2, [pc, #368]	; (8001488 <HAL_GPIO_Init+0x300>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d02b      	beq.n	8001398 <HAL_GPIO_Init+0x210>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a52      	ldr	r2, [pc, #328]	; (800148c <HAL_GPIO_Init+0x304>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d025      	beq.n	8001394 <HAL_GPIO_Init+0x20c>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x308>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d01f      	beq.n	8001390 <HAL_GPIO_Init+0x208>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_GPIO_Init+0x30c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d019      	beq.n	800138c <HAL_GPIO_Init+0x204>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <HAL_GPIO_Init+0x310>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d013      	beq.n	8001388 <HAL_GPIO_Init+0x200>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_GPIO_Init+0x314>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00d      	beq.n	8001384 <HAL_GPIO_Init+0x1fc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x318>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0x1f8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_GPIO_Init+0x31c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_GPIO_Init+0x1f4>
 8001378:	2307      	movs	r3, #7
 800137a:	e00e      	b.n	800139a <HAL_GPIO_Init+0x212>
 800137c:	2308      	movs	r3, #8
 800137e:	e00c      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001380:	2306      	movs	r3, #6
 8001382:	e00a      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001384:	2305      	movs	r3, #5
 8001386:	e008      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001388:	2304      	movs	r3, #4
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x212>
 800138c:	2303      	movs	r3, #3
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001398:	2300      	movs	r3, #0
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013aa:	4937      	ldr	r1, [pc, #220]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_GPIO_Init+0x320>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013dc:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_GPIO_Init+0x320>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_GPIO_Init+0x320>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x320>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_GPIO_Init+0x320>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_GPIO_Init+0x320>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_GPIO_Init+0x320>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_GPIO_Init+0x320>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f ae91 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	48000400 	.word	0x48000400
 8001490:	48000800 	.word	0x48000800
 8001494:	48000c00 	.word	0x48000c00
 8001498:	48001000 	.word	0x48001000
 800149c:	48001400 	.word	0x48001400
 80014a0:	48001800 	.word	0x48001800
 80014a4:	48001c00 	.word	0x48001c00
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014bc:	d102      	bne.n	80014c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80014be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c2:	e00b      	b.n	80014dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80014c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d2:	d102      	bne.n	80014da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	e000      	b.n	80014dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d141      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014fa:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001506:	d131      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150e:	4a46      	ldr	r2, [pc, #280]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001520:	4a41      	ldr	r2, [pc, #260]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2232      	movs	r2, #50	; 0x32
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153e:	e002      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3b01      	subs	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d102      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f2      	bne.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d158      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e057      	b.n	800161c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800156c:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800157c:	e04d      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001584:	d141      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	d131      	bne.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2232      	movs	r2, #50	; 0x32
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ca:	e002      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015de:	d102      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f2      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d112      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e011      	b.n	800161c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001608:	e007      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001618:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40007000 	.word	0x40007000
 800162c:	20000000 	.word	0x20000000
 8001630:	431bde83 	.word	0x431bde83

08001634 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_PWREx_EnableVddIO2+0x1c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_PWREx_EnableVddIO2+0x1c>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6053      	str	r3, [r2, #4]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40007000 	.word	0x40007000

08001654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	f000 bc08 	b.w	8001e78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001668:	4b96      	ldr	r3, [pc, #600]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001672:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80e4 	beq.w	8001852 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4c>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	f040 808b 	bne.w	80017ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b01      	cmp	r3, #1
 800169c:	f040 8087 	bne.w	80017ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a0:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x64>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e3df      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <HAL_RCC_OscConfig+0x7e>
 80016c8:	4b7e      	ldr	r3, [pc, #504]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d0:	e005      	b.n	80016de <HAL_RCC_OscConfig+0x8a>
 80016d2:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016de:	4293      	cmp	r3, r2
 80016e0:	d223      	bcs.n	800172a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fdcc 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e3c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f6:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a72      	ldr	r2, [pc, #456]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	496d      	ldr	r1, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001714:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	4968      	ldr	r1, [pc, #416]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	e025      	b.n	8001776 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172a:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a65      	ldr	r2, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4960      	ldr	r1, [pc, #384]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	495b      	ldr	r1, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd8c 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e380      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001776:	f000 fcc1 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	4950      	ldr	r1, [pc, #320]	; (80018c8 <HAL_RCC_OscConfig+0x274>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_RCC_OscConfig+0x278>)
 8001794:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <HAL_RCC_OscConfig+0x27c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fb8e 	bl	8000ebc <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d052      	beq.n	8001850 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	e364      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d032      	beq.n	800181c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fbcb 	bl	8000f5c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ca:	f7ff fbc7 	bl	8000f5c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e34d      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4930      	ldr	r1, [pc, #192]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	492b      	ldr	r1, [pc, #172]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
 800181a:	e01a      	b.n	8001852 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb98 	bl	8000f5c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001830:	f7ff fb94 	bl	8000f5c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e31a      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1dc>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d073      	beq.n	8001946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x21c>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d10e      	bne.n	8001888 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d063      	beq.n	8001944 <HAL_RCC_OscConfig+0x2f0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d15f      	bne.n	8001944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e2f7      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d106      	bne.n	80018a0 <HAL_RCC_OscConfig+0x24c>
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e025      	b.n	80018ec <HAL_RCC_OscConfig+0x298>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d114      	bne.n	80018d4 <HAL_RCC_OscConfig+0x280>
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a02      	ldr	r2, [pc, #8]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e013      	b.n	80018ec <HAL_RCC_OscConfig+0x298>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08003c64 	.word	0x08003c64
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004
 80018d4:	4ba0      	ldr	r3, [pc, #640]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a9f      	ldr	r2, [pc, #636]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b9d      	ldr	r3, [pc, #628]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9c      	ldr	r2, [pc, #624]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb32 	bl	8000f5c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb2e 	bl	8000f5c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e2b4      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190e:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x2a8>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fb1e 	bl	8000f5c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb1a 	bl	8000f5c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e2a0      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001936:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d0>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d060      	beq.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x310>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d119      	bne.n	8001992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d116      	bne.n	8001992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x328>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e27d      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4973      	ldr	r1, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	e040      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d023      	beq.n	80019e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199a:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fad9 	bl	8000f5c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fad5 	bl	8000f5c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e25b      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	495f      	ldr	r1, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e018      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5c      	ldr	r2, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fab5 	bl	8000f5c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fab1 	bl	8000f5c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e237      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d03c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a28:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fa90 	bl	8000f5c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fa8c 	bl	8000f5c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e212      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ef      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3ec>
 8001a60:	e01b      	b.n	8001a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a68:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff fa73 	bl	8000f5c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fa6f 	bl	8000f5c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1f5      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a6 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d118      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fa36 	bl	8000f5c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af4:	f7ff fa32 	bl	8000f5c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1b8      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d8>
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2a:	e029      	b.n	8001b80 <HAL_RCC_OscConfig+0x52c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d115      	bne.n	8001b60 <HAL_RCC_OscConfig+0x50c>
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x52c>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	4b9d      	ldr	r3, [pc, #628]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a9c      	ldr	r2, [pc, #624]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	4b99      	ldr	r3, [pc, #612]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	4a98      	ldr	r2, [pc, #608]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d016      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f9e8 	bl	8000f5c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff f9e4 	bl	8000f5c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e168      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba6:	4b8c      	ldr	r3, [pc, #560]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ed      	beq.n	8001b90 <HAL_RCC_OscConfig+0x53c>
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f9d1 	bl	8000f5c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f9cd 	bl	8000f5c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e151      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ed      	bne.n	8001bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d03c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0e:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f9a0 	bl	8000f5c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c20:	f7ff f99c 	bl	8000f5c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e122      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c32:	4b69      	ldr	r3, [pc, #420]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ef      	beq.n	8001c20 <HAL_RCC_OscConfig+0x5cc>
 8001c40:	e01b      	b.n	8001c7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c42:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c48:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7ff f983 	bl	8000f5c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5a:	f7ff f97f 	bl	8000f5c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e105      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ef      	bne.n	8001c5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80f9 	beq.w	8001e76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	f040 80cf 	bne.w	8001e2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c8e:	4b52      	ldr	r3, [pc, #328]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d12c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	3b01      	subs	r3, #1
 8001cae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d123      	bne.n	8001cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d11b      	bne.n	8001cfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d113      	bne.n	8001cfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d071      	beq.n	8001de0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d068      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d0e:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0ac      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d2a:	f7ff f917 	bl	8000f5c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff f913 	bl	8000f5c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e099      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x788>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d60:	3a01      	subs	r2, #1
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d6a:	0212      	lsls	r2, r2, #8
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d72:	0852      	lsrs	r2, r2, #1
 8001d74:	3a01      	subs	r2, #1
 8001d76:	0552      	lsls	r2, r2, #21
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7e:	0852      	lsrs	r2, r2, #1
 8001d80:	3a01      	subs	r2, #1
 8001d82:	0652      	lsls	r2, r2, #25
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d8a:	06d2      	lsls	r2, r2, #27
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	4912      	ldr	r1, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dac:	f7ff f8d6 	bl	8000f5c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f8d2 	bl	8000f5c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e058      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd2:	e050      	b.n	8001e76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04f      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d144      	bne.n	8001e76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e04:	f7ff f8aa 	bl	8000f5c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f8a6 	bl	8000f5c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e02c      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x7b8>
 8001e2a:	e024      	b.n	8001e76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d01f      	beq.n	8001e72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f88d 	bl	8000f5c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f889 	bl	8000f5c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e00f      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4905      	ldr	r1, [pc, #20]	; (8001e80 <HAL_RCC_OscConfig+0x82c>)
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x830>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
 8001e70:	e001      	b.n	8001e76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	feeefffc 	.word	0xfeeefffc

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e11d      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 020f 	bic.w	r2, r3, #15
 8001eb6:	498b      	ldr	r1, [pc, #556]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e105      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d908      	bls.n	8001efe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	497b      	ldr	r1, [pc, #492]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d079      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d11e      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0dc      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f22:	f000 fa09 	bl	8002338 <RCC_GetSysClockFreqFromPLLSource>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a70      	ldr	r2, [pc, #448]	; (80020ec <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d946      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d140      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f3a:	4b6b      	ldr	r3, [pc, #428]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f42:	4a69      	ldr	r2, [pc, #420]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e035      	b.n	8001fbc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d115      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b9      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0ad      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0a5      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f90:	f000 f8b4 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a55      	ldr	r2, [pc, #340]	; (80020ec <HAL_RCC_ClockConfig+0x264>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d90f      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f9c:	4b52      	ldr	r3, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 0203 	bic.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4947      	ldr	r1, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fce:	f7fe ffc5 	bl	8000f5c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd6:	f7fe ffc1 	bl	8000f5c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e077      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 020c 	and.w	r2, r3, #12
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d1eb      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b80      	cmp	r3, #128	; 0x80
 8002002:	d105      	bne.n	8002010 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800200a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800200e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002028:	429a      	cmp	r2, r3
 800202a:	d208      	bcs.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	492b      	ldr	r1, [pc, #172]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d210      	bcs.n	800206e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 020f 	bic.w	r2, r3, #15
 8002054:	4923      	ldr	r1, [pc, #140]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e036      	b.n	80020dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4918      	ldr	r1, [pc, #96]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4910      	ldr	r1, [pc, #64]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ac:	f000 f826 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <HAL_RCC_ClockConfig+0x268>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x26c>)
 80020ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fef3 	bl	8000ebc <HAL_InitTick>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	04c4b400 	.word	0x04c4b400
 80020f0:	08003c64 	.word	0x08003c64
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x34>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d121      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d11e      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e005      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d102      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e004      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d101      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d134      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d003      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xac>
 80021a0:	e005      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_GetSysClockFreq+0x114>)
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e002      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3301      	adds	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0e5b      	lsrs	r3, r3, #25
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	3301      	adds	r3, #1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f4:	69bb      	ldr	r3, [r7, #24]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08003c7c 	.word	0x08003c7c
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002230:	f7ff fff0 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4904      	ldr	r1, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	08003c74 	.word	0x08003c74

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800225c:	f7ff ffda 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0adb      	lsrs	r3, r3, #11
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	08003c74 	.word	0x08003c74

08002284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800229c:	f7ff f906 	bl	80014ac <HAL_PWREx_GetVoltageRange>
 80022a0:	6178      	str	r0, [r7, #20]
 80022a2:	e014      	b.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022bc:	f7ff f8f6 	bl	80014ac <HAL_PWREx_GetVoltageRange>
 80022c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a1a      	ldr	r2, [pc, #104]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d4:	d10b      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d913      	bls.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2ba0      	cmp	r3, #160	; 0xa0
 80022e0:	d902      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e2:	2302      	movs	r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e00d      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e00a      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b7f      	cmp	r3, #127	; 0x7f
 80022f2:	d902      	bls.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80022f4:	2302      	movs	r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e004      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d101      	bne.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 020f 	bic.w	r2, r3, #15
 800230c:	4909      	ldr	r1, [pc, #36]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	40022000 	.word	0x40022000

08002338 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d00b      	beq.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d825      	bhi.n	80023a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d008      	beq.n	800236c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d11f      	bne.n	80023a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002362:	613b      	str	r3, [r7, #16]
    break;
 8002364:	e01f      	b.n	80023a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002368:	613b      	str	r3, [r7, #16]
    break;
 800236a:	e01c      	b.n	80023a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800237a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e005      	b.n	8002394 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002394:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	613b      	str	r3, [r7, #16]
    break;
 800239e:	e002      	b.n	80023a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
    break;
 80023a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	3301      	adds	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	fb03 f202 	mul.w	r2, r3, r2
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0e5b      	lsrs	r3, r3, #25
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023e6:	683b      	ldr	r3, [r7, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	08003c7c 	.word	0x08003c7c

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800240c:	2300      	movs	r3, #0
 800240e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002410:	2300      	movs	r3, #0
 8002412:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241c:	2b00      	cmp	r3, #0
 800241e:	d040      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d02a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d825      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800242c:	2b60      	cmp	r3, #96	; 0x60
 800242e:	d026      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002430:	2b60      	cmp	r3, #96	; 0x60
 8002432:	d821      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d006      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d81d      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002440:	2b20      	cmp	r3, #32
 8002442:	d010      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002444:	e018      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a88      	ldr	r2, [pc, #544]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002452:	e015      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb02 	bl	8002a64 <RCCEx_PLLSAI1_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002464:	e00c      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3320      	adds	r3, #32
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fbed 	bl	8002c4c <RCCEx_PLLSAI2_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002476:	e003      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	74fb      	strb	r3, [r7, #19]
      break;
 800247c:	e000      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800247e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002486:	4b79      	ldr	r3, [pc, #484]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800248c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002494:	4975      	ldr	r1, [pc, #468]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800249c:	e001      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d047      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b6:	d030      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024bc:	d82a      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c2:	d02a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c8:	d824      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ce:	d008      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d81e      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024de:	d010      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024e0:	e018      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ee:	e015      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fab4 	bl	8002a64 <RCCEx_PLLSAI1_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002500:	e00c      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fb9f 	bl	8002c4c <RCCEx_PLLSAI2_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002512:	e003      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	74fb      	strb	r3, [r7, #19]
      break;
 8002518:	e000      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800251a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	494e      	ldr	r1, [pc, #312]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002538:	e001      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 809f 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a40      	ldr	r2, [pc, #256]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3a      	ldr	r2, [pc, #232]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800258e:	f7fe fce5 	bl	8000f5c <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002594:	e009      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7fe fce1 	bl	8000f5c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d902      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	74fb      	strb	r3, [r7, #19]
        break;
 80025a8:	e005      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ef      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d15b      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01f      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d019      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	4a1f      	ldr	r2, [pc, #124]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002606:	4a19      	ldr	r2, [pc, #100]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d016      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fca0 	bl	8000f5c <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261e:	e00b      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe fc9c 	bl	8000f5c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d902      	bls.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	74fb      	strb	r3, [r7, #19]
            break;
 8002636:	e006      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ec      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002664:	e008      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	74bb      	strb	r3, [r7, #18]
 800266a:	e005      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002678:	7c7b      	ldrb	r3, [r7, #17]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4ba0      	ldr	r3, [pc, #640]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	4a9f      	ldr	r2, [pc, #636]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002696:	4b9a      	ldr	r3, [pc, #616]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f023 0203 	bic.w	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	4996      	ldr	r1, [pc, #600]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 020c 	bic.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	498e      	ldr	r1, [pc, #568]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026da:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	4985      	ldr	r1, [pc, #532]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fc:	4b80      	ldr	r3, [pc, #512]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270a:	497d      	ldr	r1, [pc, #500]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800271e:	4b78      	ldr	r3, [pc, #480]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	4974      	ldr	r1, [pc, #464]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	496c      	ldr	r1, [pc, #432]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002762:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002770:	4963      	ldr	r1, [pc, #396]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	495b      	ldr	r1, [pc, #364]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a6:	4b56      	ldr	r3, [pc, #344]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	4952      	ldr	r1, [pc, #328]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c8:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	494a      	ldr	r1, [pc, #296]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ea:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	4941      	ldr	r1, [pc, #260]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800280c:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800280e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	4939      	ldr	r1, [pc, #228]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d028      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283c:	4930      	ldr	r1, [pc, #192]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284c:	d106      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002858:	60d3      	str	r3, [r2, #12]
 800285a:	e011      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002864:	d10c      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2101      	movs	r1, #1
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f8f9 	bl	8002a64 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d04d      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002894:	d108      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800289c:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028a6:	e012      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e020      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ee:	d109      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a02      	ldr	r2, [pc, #8]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	60d3      	str	r3, [r2, #12]
 80028fc:	e014      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f8a5 	bl	8002a64 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d028      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002942:	4947      	ldr	r1, [pc, #284]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002952:	d106      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a41      	ldr	r2, [pc, #260]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295e:	60d3      	str	r3, [r2, #12]
 8002960:	e011      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296a:	d10c      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f876 	bl	8002a64 <RCCEx_PLLSAI1_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01e      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002992:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a2:	492f      	ldr	r1, [pc, #188]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2102      	movs	r1, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f851 	bl	8002a64 <RCCEx_PLLSAI1_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029e2:	f023 0204 	bic.w	r2, r3, #4
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ec:	491c      	ldr	r1, [pc, #112]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a06:	f023 0218 	bic.w	r2, r3, #24
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	4913      	ldr	r1, [pc, #76]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a34:	490a      	ldr	r1, [pc, #40]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a54:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a72:	4b72      	ldr	r3, [pc, #456]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00e      	beq.n	8002a9c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d103      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
       ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d142      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e03f      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d018      	beq.n	8002ad6 <RCCEx_PLLSAI1_Config+0x72>
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d825      	bhi.n	8002af4 <RCCEx_PLLSAI1_Config+0x90>
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d002      	beq.n	8002ab2 <RCCEx_PLLSAI1_Config+0x4e>
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d009      	beq.n	8002ac4 <RCCEx_PLLSAI1_Config+0x60>
 8002ab0:	e020      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ab2:	4b62      	ldr	r3, [pc, #392]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11d      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac2:	e01a      	b.n	8002afa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ac4:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad4:	e013      	b.n	8002afe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ad6:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10f      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ae2:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002af2:	e006      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      break;
 8002af8:	e004      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4949      	ldr	r1, [pc, #292]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8086 	bne.w	8002c30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b24:	4b45      	ldr	r3, [pc, #276]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a44      	ldr	r2, [pc, #272]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe fa14 	bl	8000f5c <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b36:	e009      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b38:	f7fe fa10 	bl	8000f5c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	73fb      	strb	r3, [r7, #15]
        break;
 8002b4a:	e005      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ef      	bne.n	8002b38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d168      	bne.n	8002c30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d113      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b64:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6892      	ldr	r2, [r2, #8]
 8002b70:	0211      	lsls	r1, r2, #8
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	06d2      	lsls	r2, r2, #27
 8002b78:	4311      	orrs	r1, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6852      	ldr	r2, [r2, #4]
 8002b7e:	3a01      	subs	r2, #1
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	430a      	orrs	r2, r1
 8002b84:	492d      	ldr	r1, [pc, #180]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	610b      	str	r3, [r1, #16]
 8002b8a:	e02d      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d115      	bne.n	8002bbe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
 8002b9e:	0211      	lsls	r1, r2, #8
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6912      	ldr	r2, [r2, #16]
 8002ba4:	0852      	lsrs	r2, r2, #1
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	0552      	lsls	r2, r2, #21
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6852      	ldr	r2, [r2, #4]
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4921      	ldr	r1, [pc, #132]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	610b      	str	r3, [r1, #16]
 8002bbc:	e014      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	0211      	lsls	r1, r2, #8
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6952      	ldr	r2, [r2, #20]
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0652      	lsls	r2, r2, #25
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6852      	ldr	r2, [r2, #4]
 8002bdc:	3a01      	subs	r2, #1
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4916      	ldr	r1, [pc, #88]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f9b2 	bl	8000f5c <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bfa:	e009      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bfc:	f7fe f9ae 	bl	8000f5c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d902      	bls.n	8002c10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c0e:	e005      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	4904      	ldr	r1, [pc, #16]	; (8002c3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	07ff800f 	.word	0x07ff800f
 8002c44:	ff9f800f 	.word	0xff9f800f
 8002c48:	f9ff800f 	.word	0xf9ff800f

08002c4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00e      	beq.n	8002c84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c66:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d103      	bne.n	8002c7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
       ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d142      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e03f      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d018      	beq.n	8002cbe <RCCEx_PLLSAI2_Config+0x72>
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d825      	bhi.n	8002cdc <RCCEx_PLLSAI2_Config+0x90>
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d002      	beq.n	8002c9a <RCCEx_PLLSAI2_Config+0x4e>
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d009      	beq.n	8002cac <RCCEx_PLLSAI2_Config+0x60>
 8002c98:	e020      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c9a:	4b62      	ldr	r3, [pc, #392]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11d      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002caa:	e01a      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cac:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d116      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbc:	e013      	b.n	8002ce6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cbe:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cda:	e006      	b.n	8002cea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	e004      	b.n	8002cec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e002      	b.n	8002cec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4949      	ldr	r1, [pc, #292]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8086 	bne.w	8002e18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d0c:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a44      	ldr	r2, [pc, #272]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d18:	f7fe f920 	bl	8000f5c <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d1e:	e009      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d20:	f7fe f91c 	bl	8000f5c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d902      	bls.n	8002d34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	73fb      	strb	r3, [r7, #15]
        break;
 8002d32:	e005      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ef      	bne.n	8002d20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d168      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d113      	bne.n	8002d74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6892      	ldr	r2, [r2, #8]
 8002d58:	0211      	lsls	r1, r2, #8
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68d2      	ldr	r2, [r2, #12]
 8002d5e:	06d2      	lsls	r2, r2, #27
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6852      	ldr	r2, [r2, #4]
 8002d66:	3a01      	subs	r2, #1
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	492d      	ldr	r1, [pc, #180]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	614b      	str	r3, [r1, #20]
 8002d72:	e02d      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d115      	bne.n	8002da6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6892      	ldr	r2, [r2, #8]
 8002d86:	0211      	lsls	r1, r2, #8
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6912      	ldr	r2, [r2, #16]
 8002d8c:	0852      	lsrs	r2, r2, #1
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	0552      	lsls	r2, r2, #21
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6852      	ldr	r2, [r2, #4]
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	4921      	ldr	r1, [pc, #132]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	614b      	str	r3, [r1, #20]
 8002da4:	e014      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da6:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	0211      	lsls	r1, r2, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6952      	ldr	r2, [r2, #20]
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0652      	lsls	r2, r2, #25
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6852      	ldr	r2, [r2, #4]
 8002dc4:	3a01      	subs	r2, #1
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4916      	ldr	r1, [pc, #88]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe f8be 	bl	8000f5c <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de2:	e009      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002de4:	f7fe f8ba 	bl	8000f5c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d902      	bls.n	8002df8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	73fb      	strb	r3, [r7, #15]
          break;
 8002df6:	e005      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	07ff800f 	.word	0x07ff800f
 8002e2c:	ff9f800f 	.word	0xff9f800f
 8002e30:	f9ff800f 	.word	0xf9ff800f

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e042      	b.n	8002ecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd ff53 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2224      	movs	r2, #36	; 0x24
 8002e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8c4 	bl	8003004 <UART_SetConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e022      	b.n	8002ecc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fbb4 	bl	80035fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fc3b 	bl	8003740 <UART_CheckIdleState>
 8002eca:	4603      	mov	r3, r0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	f040 8084 	bne.w	8002ff8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Transmit+0x28>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e07c      	b.n	8002ffa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Transmit+0x3a>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e075      	b.n	8002ffa <HAL_UART_Transmit+0x126>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f26:	f7fe f819 	bl	8000f5c <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d108      	bne.n	8002f58 <HAL_UART_Transmit+0x84>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	e003      	b.n	8002f60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002f68:	e02d      	b.n	8002fc6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fc2e 	bl	80037d6 <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e03a      	b.n	8002ffa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10b      	bne.n	8002fa2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	881a      	ldrh	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f96:	b292      	uxth	r2, r2
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	e008      	b.n	8002fb4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b292      	uxth	r2, r2
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1cb      	bne.n	8002f6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2140      	movs	r1, #64	; 0x40
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fbfa 	bl	80037d6 <UART_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e006      	b.n	8002ffa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003008:	b08c      	sub	sp, #48	; 0x30
 800300a:	af00      	add	r7, sp, #0
 800300c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	431a      	orrs	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4313      	orrs	r3, r2
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4baa      	ldr	r3, [pc, #680]	; (80032dc <UART_SetConfig+0x2d8>)
 8003034:	4013      	ands	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800303c:	430b      	orrs	r3, r1
 800303e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a9f      	ldr	r2, [pc, #636]	; (80032e0 <UART_SetConfig+0x2dc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306c:	4313      	orrs	r3, r2
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800307a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	430b      	orrs	r3, r1
 8003086:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f023 010f 	bic.w	r1, r3, #15
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <UART_SetConfig+0x2e0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d125      	bne.n	80030f4 <UART_SetConfig+0xf0>
 80030a8:	4b8f      	ldr	r3, [pc, #572]	; (80032e8 <UART_SetConfig+0x2e4>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d81a      	bhi.n	80030ec <UART_SetConfig+0xe8>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <UART_SetConfig+0xb8>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030dd 	.word	0x080030dd
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030e5 	.word	0x080030e5
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d2:	e116      	b.n	8003302 <UART_SetConfig+0x2fe>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030da:	e112      	b.n	8003302 <UART_SetConfig+0x2fe>
 80030dc:	2304      	movs	r3, #4
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e2:	e10e      	b.n	8003302 <UART_SetConfig+0x2fe>
 80030e4:	2308      	movs	r3, #8
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ea:	e10a      	b.n	8003302 <UART_SetConfig+0x2fe>
 80030ec:	2310      	movs	r3, #16
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f2:	e106      	b.n	8003302 <UART_SetConfig+0x2fe>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7c      	ldr	r2, [pc, #496]	; (80032ec <UART_SetConfig+0x2e8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d138      	bne.n	8003170 <UART_SetConfig+0x16c>
 80030fe:	4b7a      	ldr	r3, [pc, #488]	; (80032e8 <UART_SetConfig+0x2e4>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b0c      	cmp	r3, #12
 800310a:	d82d      	bhi.n	8003168 <UART_SetConfig+0x164>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <UART_SetConfig+0x110>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003149 	.word	0x08003149
 8003118:	08003169 	.word	0x08003169
 800311c:	08003169 	.word	0x08003169
 8003120:	08003169 	.word	0x08003169
 8003124:	08003159 	.word	0x08003159
 8003128:	08003169 	.word	0x08003169
 800312c:	08003169 	.word	0x08003169
 8003130:	08003169 	.word	0x08003169
 8003134:	08003151 	.word	0x08003151
 8003138:	08003169 	.word	0x08003169
 800313c:	08003169 	.word	0x08003169
 8003140:	08003169 	.word	0x08003169
 8003144:	08003161 	.word	0x08003161
 8003148:	2300      	movs	r3, #0
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e0d8      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003150:	2302      	movs	r3, #2
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003156:	e0d4      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003158:	2304      	movs	r3, #4
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315e:	e0d0      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003160:	2308      	movs	r3, #8
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003166:	e0cc      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003168:	2310      	movs	r3, #16
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316e:	e0c8      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <UART_SetConfig+0x2ec>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d125      	bne.n	80031c6 <UART_SetConfig+0x1c2>
 800317a:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <UART_SetConfig+0x2e4>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003184:	2b30      	cmp	r3, #48	; 0x30
 8003186:	d016      	beq.n	80031b6 <UART_SetConfig+0x1b2>
 8003188:	2b30      	cmp	r3, #48	; 0x30
 800318a:	d818      	bhi.n	80031be <UART_SetConfig+0x1ba>
 800318c:	2b20      	cmp	r3, #32
 800318e:	d00a      	beq.n	80031a6 <UART_SetConfig+0x1a2>
 8003190:	2b20      	cmp	r3, #32
 8003192:	d814      	bhi.n	80031be <UART_SetConfig+0x1ba>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <UART_SetConfig+0x19a>
 8003198:	2b10      	cmp	r3, #16
 800319a:	d008      	beq.n	80031ae <UART_SetConfig+0x1aa>
 800319c:	e00f      	b.n	80031be <UART_SetConfig+0x1ba>
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a4:	e0ad      	b.n	8003302 <UART_SetConfig+0x2fe>
 80031a6:	2302      	movs	r3, #2
 80031a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ac:	e0a9      	b.n	8003302 <UART_SetConfig+0x2fe>
 80031ae:	2304      	movs	r3, #4
 80031b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b4:	e0a5      	b.n	8003302 <UART_SetConfig+0x2fe>
 80031b6:	2308      	movs	r3, #8
 80031b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031bc:	e0a1      	b.n	8003302 <UART_SetConfig+0x2fe>
 80031be:	2310      	movs	r3, #16
 80031c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c4:	e09d      	b.n	8003302 <UART_SetConfig+0x2fe>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <UART_SetConfig+0x2f0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d125      	bne.n	800321c <UART_SetConfig+0x218>
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <UART_SetConfig+0x2e4>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031da:	2bc0      	cmp	r3, #192	; 0xc0
 80031dc:	d016      	beq.n	800320c <UART_SetConfig+0x208>
 80031de:	2bc0      	cmp	r3, #192	; 0xc0
 80031e0:	d818      	bhi.n	8003214 <UART_SetConfig+0x210>
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	d00a      	beq.n	80031fc <UART_SetConfig+0x1f8>
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d814      	bhi.n	8003214 <UART_SetConfig+0x210>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <UART_SetConfig+0x1f0>
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d008      	beq.n	8003204 <UART_SetConfig+0x200>
 80031f2:	e00f      	b.n	8003214 <UART_SetConfig+0x210>
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fa:	e082      	b.n	8003302 <UART_SetConfig+0x2fe>
 80031fc:	2302      	movs	r3, #2
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003202:	e07e      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003204:	2304      	movs	r3, #4
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320a:	e07a      	b.n	8003302 <UART_SetConfig+0x2fe>
 800320c:	2308      	movs	r3, #8
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003212:	e076      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003214:	2310      	movs	r3, #16
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800321a:	e072      	b.n	8003302 <UART_SetConfig+0x2fe>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <UART_SetConfig+0x2f4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12a      	bne.n	800327c <UART_SetConfig+0x278>
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <UART_SetConfig+0x2e4>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003234:	d01a      	beq.n	800326c <UART_SetConfig+0x268>
 8003236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800323a:	d81b      	bhi.n	8003274 <UART_SetConfig+0x270>
 800323c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003240:	d00c      	beq.n	800325c <UART_SetConfig+0x258>
 8003242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003246:	d815      	bhi.n	8003274 <UART_SetConfig+0x270>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <UART_SetConfig+0x250>
 800324c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003250:	d008      	beq.n	8003264 <UART_SetConfig+0x260>
 8003252:	e00f      	b.n	8003274 <UART_SetConfig+0x270>
 8003254:	2300      	movs	r3, #0
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325a:	e052      	b.n	8003302 <UART_SetConfig+0x2fe>
 800325c:	2302      	movs	r3, #2
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003262:	e04e      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003264:	2304      	movs	r3, #4
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326a:	e04a      	b.n	8003302 <UART_SetConfig+0x2fe>
 800326c:	2308      	movs	r3, #8
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003272:	e046      	b.n	8003302 <UART_SetConfig+0x2fe>
 8003274:	2310      	movs	r3, #16
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800327a:	e042      	b.n	8003302 <UART_SetConfig+0x2fe>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <UART_SetConfig+0x2dc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d13a      	bne.n	80032fc <UART_SetConfig+0x2f8>
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <UART_SetConfig+0x2e4>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003294:	d01a      	beq.n	80032cc <UART_SetConfig+0x2c8>
 8003296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800329a:	d81b      	bhi.n	80032d4 <UART_SetConfig+0x2d0>
 800329c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a0:	d00c      	beq.n	80032bc <UART_SetConfig+0x2b8>
 80032a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a6:	d815      	bhi.n	80032d4 <UART_SetConfig+0x2d0>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <UART_SetConfig+0x2b0>
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b0:	d008      	beq.n	80032c4 <UART_SetConfig+0x2c0>
 80032b2:	e00f      	b.n	80032d4 <UART_SetConfig+0x2d0>
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ba:	e022      	b.n	8003302 <UART_SetConfig+0x2fe>
 80032bc:	2302      	movs	r3, #2
 80032be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032c2:	e01e      	b.n	8003302 <UART_SetConfig+0x2fe>
 80032c4:	2304      	movs	r3, #4
 80032c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ca:	e01a      	b.n	8003302 <UART_SetConfig+0x2fe>
 80032cc:	2308      	movs	r3, #8
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032d2:	e016      	b.n	8003302 <UART_SetConfig+0x2fe>
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032da:	e012      	b.n	8003302 <UART_SetConfig+0x2fe>
 80032dc:	cfff69f3 	.word	0xcfff69f3
 80032e0:	40008000 	.word	0x40008000
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40004400 	.word	0x40004400
 80032f0:	40004800 	.word	0x40004800
 80032f4:	40004c00 	.word	0x40004c00
 80032f8:	40005000 	.word	0x40005000
 80032fc:	2310      	movs	r3, #16
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4aae      	ldr	r2, [pc, #696]	; (80035c0 <UART_SetConfig+0x5bc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	f040 8097 	bne.w	800343c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800330e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003312:	2b08      	cmp	r3, #8
 8003314:	d823      	bhi.n	800335e <UART_SetConfig+0x35a>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <UART_SetConfig+0x318>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	08003341 	.word	0x08003341
 8003320:	0800335f 	.word	0x0800335f
 8003324:	08003349 	.word	0x08003349
 8003328:	0800335f 	.word	0x0800335f
 800332c:	0800334f 	.word	0x0800334f
 8003330:	0800335f 	.word	0x0800335f
 8003334:	0800335f 	.word	0x0800335f
 8003338:	0800335f 	.word	0x0800335f
 800333c:	08003357 	.word	0x08003357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003340:	f7fe ff74 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8003344:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003346:	e010      	b.n	800336a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003348:	4b9e      	ldr	r3, [pc, #632]	; (80035c4 <UART_SetConfig+0x5c0>)
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800334c:	e00d      	b.n	800336a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334e:	f7fe fed5 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003354:	e009      	b.n	800336a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800335c:	e005      	b.n	800336a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8130 	beq.w	80035d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	4a94      	ldr	r2, [pc, #592]	; (80035c8 <UART_SetConfig+0x5c4>)
 8003378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800337c:	461a      	mov	r2, r3
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	fbb3 f3f2 	udiv	r3, r3, r2
 8003384:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	429a      	cmp	r2, r3
 8003394:	d305      	bcc.n	80033a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d903      	bls.n	80033aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033a8:	e113      	b.n	80035d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	2200      	movs	r2, #0
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	60fa      	str	r2, [r7, #12]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	4a84      	ldr	r2, [pc, #528]	; (80035c8 <UART_SetConfig+0x5c4>)
 80033b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033cc:	f7fc ff16 	bl	80001fc <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	020b      	lsls	r3, r1, #8
 80033e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033e6:	0202      	lsls	r2, r0, #8
 80033e8:	6979      	ldr	r1, [r7, #20]
 80033ea:	6849      	ldr	r1, [r1, #4]
 80033ec:	0849      	lsrs	r1, r1, #1
 80033ee:	2000      	movs	r0, #0
 80033f0:	460c      	mov	r4, r1
 80033f2:	4605      	mov	r5, r0
 80033f4:	eb12 0804 	adds.w	r8, r2, r4
 80033f8:	eb43 0905 	adc.w	r9, r3, r5
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	469a      	mov	sl, r3
 8003404:	4693      	mov	fp, r2
 8003406:	4652      	mov	r2, sl
 8003408:	465b      	mov	r3, fp
 800340a:	4640      	mov	r0, r8
 800340c:	4649      	mov	r1, r9
 800340e:	f7fc fef5 	bl	80001fc <__aeabi_uldivmod>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4613      	mov	r3, r2
 8003418:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003420:	d308      	bcc.n	8003434 <UART_SetConfig+0x430>
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003428:	d204      	bcs.n	8003434 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a3a      	ldr	r2, [r7, #32]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	e0ce      	b.n	80035d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800343a:	e0ca      	b.n	80035d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d166      	bne.n	8003514 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800344a:	2b08      	cmp	r3, #8
 800344c:	d827      	bhi.n	800349e <UART_SetConfig+0x49a>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0x450>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003479 	.word	0x08003479
 8003458:	08003481 	.word	0x08003481
 800345c:	08003489 	.word	0x08003489
 8003460:	0800349f 	.word	0x0800349f
 8003464:	0800348f 	.word	0x0800348f
 8003468:	0800349f 	.word	0x0800349f
 800346c:	0800349f 	.word	0x0800349f
 8003470:	0800349f 	.word	0x0800349f
 8003474:	08003497 	.word	0x08003497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003478:	f7fe fed8 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800347e:	e014      	b.n	80034aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7fe feea 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003484:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003486:	e010      	b.n	80034aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003488:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <UART_SetConfig+0x5c0>)
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800348c:	e00d      	b.n	80034aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348e:	f7fe fe35 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8003492:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003494:	e009      	b.n	80034aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800349c:	e005      	b.n	80034aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8090 	beq.w	80035d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	4a44      	ldr	r2, [pc, #272]	; (80035c8 <UART_SetConfig+0x5c4>)
 80034b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034bc:	461a      	mov	r2, r3
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034c4:	005a      	lsls	r2, r3, #1
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	441a      	add	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	d916      	bls.n	800350c <UART_SetConfig+0x508>
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d212      	bcs.n	800350c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f023 030f 	bic.w	r3, r3, #15
 80034ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	8bfb      	ldrh	r3, [r7, #30]
 80034fe:	4313      	orrs	r3, r2
 8003500:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	8bfa      	ldrh	r2, [r7, #30]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	e062      	b.n	80035d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003512:	e05e      	b.n	80035d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003518:	2b08      	cmp	r3, #8
 800351a:	d828      	bhi.n	800356e <UART_SetConfig+0x56a>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0x520>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003549 	.word	0x08003549
 8003528:	08003551 	.word	0x08003551
 800352c:	08003559 	.word	0x08003559
 8003530:	0800356f 	.word	0x0800356f
 8003534:	0800355f 	.word	0x0800355f
 8003538:	0800356f 	.word	0x0800356f
 800353c:	0800356f 	.word	0x0800356f
 8003540:	0800356f 	.word	0x0800356f
 8003544:	08003567 	.word	0x08003567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003548:	f7fe fe70 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 800354c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800354e:	e014      	b.n	800357a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7fe fe82 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003556:	e010      	b.n	800357a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <UART_SetConfig+0x5c0>)
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800355c:	e00d      	b.n	800357a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355e:	f7fe fdcd 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003564:	e009      	b.n	800357a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800356c:	e005      	b.n	800357a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003578:	bf00      	nop
    }

    if (pclk != 0U)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	2b00      	cmp	r3, #0
 800357e:	d028      	beq.n	80035d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <UART_SetConfig+0x5c4>)
 8003586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800358a:	461a      	mov	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	441a      	add	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	d910      	bls.n	80035cc <UART_SetConfig+0x5c8>
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d20c      	bcs.n	80035cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	e009      	b.n	80035d2 <UART_SetConfig+0x5ce>
 80035be:	bf00      	nop
 80035c0:	40008000 	.word	0x40008000
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	08003cac 	.word	0x08003cac
      }
      else
      {
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2201      	movs	r2, #1
 80035de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80035ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3730      	adds	r7, #48	; 0x30
 80035f6:	46bd      	mov	sp, r7
 80035f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01a      	beq.n	8003712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fa:	d10a      	bne.n	8003712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003750:	f7fd fc04 	bl	8000f5c <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d10e      	bne.n	8003782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f82f 	bl	80037d6 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e025      	b.n	80037ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d10e      	bne.n	80037ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f819 	bl	80037d6 <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e00f      	b.n	80037ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b09c      	sub	sp, #112	; 0x70
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e6:	e0a9      	b.n	800393c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	f000 80a5 	beq.w	800393c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fd fbb3 	bl	8000f5c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <UART_WaitOnFlagUntilTimeout+0x32>
 8003802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003804:	2b00      	cmp	r3, #0
 8003806:	d140      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800381c:	667b      	str	r3, [r7, #100]	; 0x64
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003828:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800382c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e6      	bne.n	8003808 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3308      	adds	r3, #8
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	663b      	str	r3, [r7, #96]	; 0x60
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800385a:	64ba      	str	r2, [r7, #72]	; 0x48
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e069      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d051      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a6:	d149      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
 80038d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e6      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	613b      	str	r3, [r7, #16]
   return(result);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003904:	623a      	str	r2, [r7, #32]
 8003906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	69f9      	ldr	r1, [r7, #28]
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	61bb      	str	r3, [r7, #24]
   return(result);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e010      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	429a      	cmp	r2, r3
 8003958:	f43f af46 	beq.w	80037e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3770      	adds	r7, #112	; 0x70
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UARTEx_DisableFifoMode+0x16>
 8003978:	2302      	movs	r3, #2
 800397a:	e027      	b.n	80039cc <HAL_UARTEx_DisableFifoMode+0x66>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e02d      	b.n	8003a4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	; 0x24
 80039fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f84f 	bl	8003ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e02d      	b.n	8003ac8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f811 	bl	8003ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d108      	bne.n	8003af2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003af0:	e031      	b.n	8003b56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003af2:	2308      	movs	r3, #8
 8003af4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003af6:	2308      	movs	r3, #8
 8003af8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	0e5b      	lsrs	r3, r3, #25
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	0f5b      	lsrs	r3, r3, #29
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b1a:	7bbb      	ldrb	r3, [r7, #14]
 8003b1c:	7b3a      	ldrb	r2, [r7, #12]
 8003b1e:	4911      	ldr	r1, [pc, #68]	; (8003b64 <UARTEx_SetNbDataToProcess+0x94>)
 8003b20:	5c8a      	ldrb	r2, [r1, r2]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b26:	7b3a      	ldrb	r2, [r7, #12]
 8003b28:	490f      	ldr	r1, [pc, #60]	; (8003b68 <UARTEx_SetNbDataToProcess+0x98>)
 8003b2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	7b7a      	ldrb	r2, [r7, #13]
 8003b3c:	4909      	ldr	r1, [pc, #36]	; (8003b64 <UARTEx_SetNbDataToProcess+0x94>)
 8003b3e:	5c8a      	ldrb	r2, [r1, r2]
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b44:	7b7a      	ldrb	r2, [r7, #13]
 8003b46:	4908      	ldr	r1, [pc, #32]	; (8003b68 <UARTEx_SetNbDataToProcess+0x98>)
 8003b48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	08003cc4 	.word	0x08003cc4
 8003b68:	08003ccc 	.word	0x08003ccc

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ba4 <__libc_init_array+0x38>)
 8003b70:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	2600      	movs	r6, #0
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	4d0b      	ldr	r5, [pc, #44]	; (8003bac <__libc_init_array+0x40>)
 8003b7e:	4c0c      	ldr	r4, [pc, #48]	; (8003bb0 <__libc_init_array+0x44>)
 8003b80:	f000 f820 	bl	8003bc4 <_init>
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	2600      	movs	r6, #0
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08003cdc 	.word	0x08003cdc
 8003ba8:	08003cdc 	.word	0x08003cdc
 8003bac:	08003cdc 	.word	0x08003cdc
 8003bb0:	08003ce0 	.word	0x08003ce0

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_init>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr

08003bd0 <_fini>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr
