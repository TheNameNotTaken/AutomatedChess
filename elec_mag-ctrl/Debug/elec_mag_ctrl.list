
elec_mag_ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003158  08003158  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003158  08003158  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003158  08003158  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800316c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800316c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab09  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017af  00000000  00000000  0002ab45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd0  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c01e  00000000  00000000  000566b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed96  00000000  00000000  000626ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb0  00000000  00000000  001614b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003100 	.word	0x08003100

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003100 	.word	0x08003100

080001fc <Set_Direction>:


#include "main.h"
#include "elec_mag_ctrl.h"

void Set_Direction(int direction){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if (direction == BLACK){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d10c      	bne.n	8000224 <Set_Direction+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800020a:	2201      	movs	r2, #1
 800020c:	2120      	movs	r1, #32
 800020e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000212:	f000 ff69 	bl	80010e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000216:	2200      	movs	r2, #0
 8000218:	2140      	movs	r1, #64	; 0x40
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f000 ff63 	bl	80010e8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
	}
}
 8000222:	e00b      	b.n	800023c <Set_Direction+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2120      	movs	r1, #32
 8000228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022c:	f000 ff5c 	bl	80010e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000238:	f000 ff56 	bl	80010e8 <HAL_GPIO_WritePin>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <Set_Magnitude>:


void Set_Magnitude(uint16_t magnitude){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR3 = magnitude;
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <Set_Magnitude+0x1c>)
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40000800 	.word	0x40000800

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fc51 	bl	8000b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f812 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f8ee 	bl	8000450 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000274:	f000 f854 	bl	8000320 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000278:	2108      	movs	r1, #8
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0x2c>)
 800027c:	f001 ff78 	bl	8002170 <HAL_TIM_PWM_Start>
  Set_Direction(WHITE);
 8000280:	2001      	movs	r0, #1
 8000282:	f7ff ffbb 	bl	80001fc <Set_Direction>
  Set_Magnitude(1024);
 8000286:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800028a:	f7ff ffdb 	bl	8000244 <Set_Magnitude>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028e:	e7fe      	b.n	800028e <main+0x2a>
 8000290:	20000028 	.word	0x20000028

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b096      	sub	sp, #88	; 0x58
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2244      	movs	r2, #68	; 0x44
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 ff24 	bl	80030f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ba:	f000 ff4d 	bl	8001158 <HAL_PWREx_ControlVoltageScaling>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c4:	f000 faf8 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c8:	2310      	movs	r3, #16
 80002ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d4:	2360      	movs	r3, #96	; 0x60
 80002d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 ffed 	bl	80012c0 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002ec:	f000 fae4 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fbf3 	bl	8001af4 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000314:	f000 fad0 	bl	80008b8 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3758      	adds	r7, #88	; 0x58
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08e      	sub	sp, #56	; 0x38
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000352:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <MX_TIM4_Init+0x128>)
 8000354:	4a3d      	ldr	r2, [pc, #244]	; (800044c <MX_TIM4_Init+0x12c>)
 8000356:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <MX_TIM4_Init+0x128>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b3a      	ldr	r3, [pc, #232]	; (8000448 <MX_TIM4_Init+0x128>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096;
 8000364:	4b38      	ldr	r3, [pc, #224]	; (8000448 <MX_TIM4_Init+0x128>)
 8000366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800036a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	4b36      	ldr	r3, [pc, #216]	; (8000448 <MX_TIM4_Init+0x128>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	4b35      	ldr	r3, [pc, #212]	; (8000448 <MX_TIM4_Init+0x128>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000378:	4833      	ldr	r0, [pc, #204]	; (8000448 <MX_TIM4_Init+0x128>)
 800037a:	f001 fe41 	bl	8002000 <HAL_TIM_Base_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000384:	f000 fa98 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800038c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800038e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000392:	4619      	mov	r1, r3
 8000394:	482c      	ldr	r0, [pc, #176]	; (8000448 <MX_TIM4_Init+0x128>)
 8000396:	f002 f905 	bl	80025a4 <HAL_TIM_ConfigClockSource>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80003a0:	f000 fa8a 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80003a4:	4828      	ldr	r0, [pc, #160]	; (8000448 <MX_TIM4_Init+0x128>)
 80003a6:	f001 fe82 	bl	80020ae <HAL_TIM_PWM_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80003b0:	f000 fa82 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80003bc:	f107 031c 	add.w	r3, r7, #28
 80003c0:	4619      	mov	r1, r3
 80003c2:	4821      	ldr	r0, [pc, #132]	; (8000448 <MX_TIM4_Init+0x128>)
 80003c4:	f002 fde8 	bl	8002f98 <HAL_TIMEx_MasterConfigSynchronization>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80003ce:	f000 fa73 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d2:	2360      	movs	r3, #96	; 0x60
 80003d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <MX_TIM4_Init+0x128>)
 80003ea:	f001 ffc7 	bl	800237c <HAL_TIM_PWM_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80003f4:	f000 fa60 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	2204      	movs	r2, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4812      	ldr	r0, [pc, #72]	; (8000448 <MX_TIM4_Init+0x128>)
 8000400:	f001 ffbc 	bl	800237c <HAL_TIM_PWM_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800040a:	f000 fa55 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800040e:	463b      	mov	r3, r7
 8000410:	2208      	movs	r2, #8
 8000412:	4619      	mov	r1, r3
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <MX_TIM4_Init+0x128>)
 8000416:	f001 ffb1 	bl	800237c <HAL_TIM_PWM_ConfigChannel>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000420:	f000 fa4a 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000424:	463b      	mov	r3, r7
 8000426:	220c      	movs	r2, #12
 8000428:	4619      	mov	r1, r3
 800042a:	4807      	ldr	r0, [pc, #28]	; (8000448 <MX_TIM4_Init+0x128>)
 800042c:	f001 ffa6 	bl	800237c <HAL_TIM_PWM_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000436:	f000 fa3f 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <MX_TIM4_Init+0x128>)
 800043c:	f000 faaa 	bl	8000994 <HAL_TIM_MspPostInit>

}
 8000440:	bf00      	nop
 8000442:	3738      	adds	r7, #56	; 0x38
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000028 	.word	0x20000028
 800044c:	40000800 	.word	0x40000800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08e      	sub	sp, #56	; 0x38
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000466:	4bb3      	ldr	r3, [pc, #716]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	4ab2      	ldr	r2, [pc, #712]	; (8000734 <MX_GPIO_Init+0x2e4>)
 800046c:	f043 0310 	orr.w	r3, r3, #16
 8000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000472:	4bb0      	ldr	r3, [pc, #704]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	f003 0310 	and.w	r3, r3, #16
 800047a:	623b      	str	r3, [r7, #32]
 800047c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4bad      	ldr	r3, [pc, #692]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4aac      	ldr	r2, [pc, #688]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4baa      	ldr	r3, [pc, #680]	; (8000734 <MX_GPIO_Init+0x2e4>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	61fb      	str	r3, [r7, #28]
 8000494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000496:	4ba7      	ldr	r3, [pc, #668]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4aa6      	ldr	r2, [pc, #664]	; (8000734 <MX_GPIO_Init+0x2e4>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4ba4      	ldr	r3, [pc, #656]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0320 	and.w	r3, r3, #32
 80004aa:	61bb      	str	r3, [r7, #24]
 80004ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ae:	4ba1      	ldr	r3, [pc, #644]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4aa0      	ldr	r2, [pc, #640]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b9e      	ldr	r3, [pc, #632]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b9b      	ldr	r3, [pc, #620]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a9a      	ldr	r2, [pc, #616]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b98      	ldr	r3, [pc, #608]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b95      	ldr	r3, [pc, #596]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a94      	ldr	r2, [pc, #592]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004e4:	f043 0302 	orr.w	r3, r3, #2
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b92      	ldr	r3, [pc, #584]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	4b8f      	ldr	r3, [pc, #572]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a8e      	ldr	r2, [pc, #568]	; (8000734 <MX_GPIO_Init+0x2e4>)
 80004fc:	f043 0308 	orr.w	r3, r3, #8
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b8c      	ldr	r3, [pc, #560]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0308 	and.w	r3, r3, #8
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800050e:	4b89      	ldr	r3, [pc, #548]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a88      	ldr	r2, [pc, #544]	; (8000734 <MX_GPIO_Init+0x2e4>)
 8000514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b86      	ldr	r3, [pc, #536]	; (8000734 <MX_GPIO_Init+0x2e4>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000526:	f000 febb 	bl	80012a0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2160      	movs	r1, #96	; 0x60
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fdd9 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000536:	230c      	movs	r3, #12
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000546:	230d      	movs	r3, #13
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054e:	4619      	mov	r1, r3
 8000550:	4879      	ldr	r0, [pc, #484]	; (8000738 <MX_GPIO_Init+0x2e8>)
 8000552:	f000 fc37 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000556:	2307      	movs	r3, #7
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055a:	2312      	movs	r3, #18
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000566:	2304      	movs	r3, #4
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800056a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056e:	4619      	mov	r1, r3
 8000570:	4872      	ldr	r0, [pc, #456]	; (800073c <MX_GPIO_Init+0x2ec>)
 8000572:	f000 fc27 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000586:	230d      	movs	r3, #13
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	4619      	mov	r1, r3
 8000590:	486a      	ldr	r0, [pc, #424]	; (800073c <MX_GPIO_Init+0x2ec>)
 8000592:	f000 fc17 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000596:	233f      	movs	r3, #63	; 0x3f
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800059a:	230b      	movs	r3, #11
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a6:	4619      	mov	r1, r3
 80005a8:	4865      	ldr	r0, [pc, #404]	; (8000740 <MX_GPIO_Init+0x2f0>)
 80005aa:	f000 fc0b 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ae:	2301      	movs	r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005be:	2301      	movs	r3, #1
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fbfa 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80005d0:	230a      	movs	r3, #10
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005d4:	230b      	movs	r3, #11
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e0:	4619      	mov	r1, r3
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f000 fbed 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80005ea:	2390      	movs	r3, #144	; 0x90
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f6:	2303      	movs	r3, #3
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005fa:	2305      	movs	r3, #5
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 fbdc 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800060c:	2360      	movs	r3, #96	; 0x60
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000620:	4619      	mov	r1, r3
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f000 fbcd 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062a:	2301      	movs	r3, #1
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	4619      	mov	r1, r3
 8000644:	483f      	ldr	r0, [pc, #252]	; (8000744 <MX_GPIO_Init+0x2f4>)
 8000646:	f000 fbbd 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800064a:	2302      	movs	r3, #2
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800064e:	230b      	movs	r3, #11
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	4619      	mov	r1, r3
 800065c:	4839      	ldr	r0, [pc, #228]	; (8000744 <MX_GPIO_Init+0x2f4>)
 800065e:	f000 fbb1 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000662:	2344      	movs	r3, #68	; 0x44
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000666:	2303      	movs	r3, #3
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	4619      	mov	r1, r3
 8000674:	4833      	ldr	r0, [pc, #204]	; (8000744 <MX_GPIO_Init+0x2f4>)
 8000676:	f000 fba5 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800067a:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800068c:	2301      	movs	r3, #1
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4828      	ldr	r0, [pc, #160]	; (8000738 <MX_GPIO_Init+0x2e8>)
 8000698:	f000 fb94 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80006ae:	2303      	movs	r3, #3
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	4619      	mov	r1, r3
 80006b8:	481f      	ldr	r0, [pc, #124]	; (8000738 <MX_GPIO_Init+0x2e8>)
 80006ba:	f000 fb83 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006d0:	2301      	movs	r3, #1
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <MX_GPIO_Init+0x2f4>)
 80006dc:	f000 fb72 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80006e0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80006f2:	230d      	movs	r3, #13
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4811      	ldr	r0, [pc, #68]	; (8000744 <MX_GPIO_Init+0x2f4>)
 80006fe:	f000 fb61 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000714:	230e      	movs	r3, #14
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4619      	mov	r1, r3
 800071e:	4809      	ldr	r0, [pc, #36]	; (8000744 <MX_GPIO_Init+0x2f4>)
 8000720:	f000 fb50 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000732:	e009      	b.n	8000748 <MX_GPIO_Init+0x2f8>
 8000734:	40021000 	.word	0x40021000
 8000738:	48001000 	.word	0x48001000
 800073c:	48001400 	.word	0x48001400
 8000740:	48000800 	.word	0x48000800
 8000744:	48000400 	.word	0x48000400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800074c:	2307      	movs	r3, #7
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	4854      	ldr	r0, [pc, #336]	; (80008a8 <MX_GPIO_Init+0x458>)
 8000758:	f000 fb34 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800075c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800076e:	2308      	movs	r3, #8
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	484c      	ldr	r0, [pc, #304]	; (80008ac <MX_GPIO_Init+0x45c>)
 800077a:	f000 fb23 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800078e:	230d      	movs	r3, #13
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4845      	ldr	r0, [pc, #276]	; (80008b0 <MX_GPIO_Init+0x460>)
 800079a:	f000 fb13 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007ae:	2302      	movs	r3, #2
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	483d      	ldr	r0, [pc, #244]	; (80008b0 <MX_GPIO_Init+0x460>)
 80007ba:	f000 fb03 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007d0:	230c      	movs	r3, #12
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4835      	ldr	r0, [pc, #212]	; (80008b0 <MX_GPIO_Init+0x460>)
 80007dc:	f000 faf2 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80007e0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007f2:	230a      	movs	r3, #10
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f000 fae0 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f000 fad2 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000830:	2309      	movs	r3, #9
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_GPIO_Init+0x458>)
 800083c:	f000 fac2 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000850:	230c      	movs	r3, #12
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_GPIO_Init+0x458>)
 800085c:	f000 fab2 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000860:	2378      	movs	r3, #120	; 0x78
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000870:	2307      	movs	r3, #7
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	480b      	ldr	r0, [pc, #44]	; (80008a8 <MX_GPIO_Init+0x458>)
 800087c:	f000 faa2 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000880:	2338      	movs	r3, #56	; 0x38
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000890:	2306      	movs	r3, #6
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_GPIO_Init+0x464>)
 800089c:	f000 fa92 	bl	8000dc4 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	48000c00 	.word	0x48000c00
 80008ac:	48001800 	.word	0x48001800
 80008b0:	48000800 	.word	0x48000800
 80008b4:	48000400 	.word	0x48000400

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x44>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6613      	str	r3, [r2, #96]	; 0x60
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x44>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6593      	str	r3, [r2, #88]	; 0x58
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_TIM_Base_MspInit+0x7c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d127      	bne.n	800097e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_TIM_Base_MspInit+0x80>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_TIM_Base_MspInit+0x80>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_TIM_Base_MspInit+0x80>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_TIM_Base_MspInit+0x80>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_TIM_Base_MspInit+0x80>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_TIM_Base_MspInit+0x80>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800096e:	2302      	movs	r3, #2
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_TIM_Base_MspInit+0x84>)
 800097a:	f000 fa23 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40000800 	.word	0x40000800
 800098c:	40021000 	.word	0x40021000
 8000990:	48001000 	.word	0x48001000

08000994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <HAL_TIM_MspPostInit+0xa0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d139      	bne.n	8000a2a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_TIM_MspPostInit+0xa4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <HAL_TIM_MspPostInit+0xa4>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_TIM_MspPostInit+0xa4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_TIM_MspPostInit+0xa4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_TIM_MspPostInit+0xa4>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_TIM_MspPostInit+0xa4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80009e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <HAL_TIM_MspPostInit+0xa8>)
 8000a04:	f000 f9de 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_TIM_MspPostInit+0xac>)
 8000a26:	f000 f9cd 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40000800 	.word	0x40000800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000c00 	.word	0x48000c00
 8000a40:	48000400 	.word	0x48000400

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f892 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff ffea 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 fadd 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aee:	f7ff fbb9 	bl	8000264 <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b00:	08003160 	.word	0x08003160
  ldr r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b08:	20000078 	.word	0x20000078

08000b0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_IRQHandler>

08000b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f91f 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f80e 	bl	8000b40 <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e001      	b.n	8000b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b30:	f7ff fec8 	bl	80008c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d023      	beq.n	8000b9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x6c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f91d 	bl	8000daa <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10f      	bne.n	8000b96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d809      	bhi.n	8000b90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f8f5 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0x74>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e007      	b.n	8000ba0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e001      	b.n	8000ba0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000074 	.word	0x20000074

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000074 	.word	0x20000074

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff47 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff5c 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb0 	bl	8000d18 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e166      	b.n	80010a2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8158 	beq.w	800109c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 0201 	and.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d123      	bne.n	8000ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0203 	and.w	r2, r3, #3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80b2 	beq.w	800109c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3c:	4a60      	ldr	r2, [pc, #384]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6613      	str	r3, [r2, #96]	; 0x60
 8000f44:	4b5e      	ldr	r3, [pc, #376]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f50:	4a5c      	ldr	r2, [pc, #368]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7a:	d02b      	beq.n	8000fd4 <HAL_GPIO_Init+0x210>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d025      	beq.n	8000fd0 <HAL_GPIO_Init+0x20c>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a51      	ldr	r2, [pc, #324]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d01f      	beq.n	8000fcc <HAL_GPIO_Init+0x208>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_GPIO_Init+0x30c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d019      	beq.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_GPIO_Init+0x310>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d013      	beq.n	8000fc4 <HAL_GPIO_Init+0x200>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <HAL_GPIO_Init+0x314>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1fc>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <HAL_GPIO_Init+0x318>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_GPIO_Init+0x1f4>
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	e00e      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fb8:	2308      	movs	r3, #8
 8000fba:	e00c      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	e00a      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	e008      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	e006      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	f002 0203 	and.w	r2, r2, #3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe6:	4937      	ldr	r1, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001018:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <HAL_GPIO_Init+0x320>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001042:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_GPIO_Init+0x320>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_GPIO_Init+0x320>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f47f ae91 	bne.w	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	48001000 	.word	0x48001000
 80010d8:	48001400 	.word	0x48001400
 80010dc:	48001800 	.word	0x48001800
 80010e0:	48001c00 	.word	0x48001c00
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001104:	e002      	b.n	800110c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_PWREx_GetVoltageRange+0x3c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001128:	d102      	bne.n	8001130 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	e00b      	b.n	8001148 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113e:	d102      	bne.n	8001146 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	e000      	b.n	8001148 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001146:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d141      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001172:	d131      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800118c:	4a41      	ldr	r2, [pc, #260]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2232      	movs	r2, #50	; 0x32
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a3f      	ldr	r2, [pc, #252]	; (800129c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0c9b      	lsrs	r3, r3, #18
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011aa:	e002      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011be:	d102      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f2      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d2:	d158      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e057      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011e8:	e04d      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f0:	d141      	bne.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d131      	bne.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2232      	movs	r2, #50	; 0x32
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9b      	lsrs	r3, r3, #18
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001236:	e002      	b.n	800123e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124a:	d102      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f2      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d112      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e011      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001274:	e007      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001284:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40007000 	.word	0x40007000
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6053      	str	r3, [r2, #4]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40007000 	.word	0x40007000

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f000 bc08 	b.w	8001ae4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d4:	4b96      	ldr	r3, [pc, #600]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012de:	4b94      	ldr	r3, [pc, #592]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80e4 	beq.w	80014be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_RCC_OscConfig+0x4c>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	f040 808b 	bne.w	800141a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 8087 	bne.w	800141a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x64>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e3df      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_RCC_OscConfig+0x7e>
 8001334:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800133c:	e005      	b.n	800134a <HAL_RCC_OscConfig+0x8a>
 800133e:	4b7c      	ldr	r3, [pc, #496]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134a:	4293      	cmp	r3, r2
 800134c:	d223      	bcs.n	8001396 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd94 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e3c0      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001362:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a72      	ldr	r2, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	496d      	ldr	r1, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001380:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	4968      	ldr	r1, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	e025      	b.n	80013e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4960      	ldr	r1, [pc, #384]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	495b      	ldr	r1, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fd54 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e380      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013e2:	f000 fcc1 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4950      	ldr	r1, [pc, #320]	; (8001534 <HAL_RCC_OscConfig+0x274>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	4a4e      	ldr	r2, [pc, #312]	; (8001538 <HAL_RCC_OscConfig+0x278>)
 8001400:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001402:	4b4e      	ldr	r3, [pc, #312]	; (800153c <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb9a 	bl	8000b40 <HAL_InitTick>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d052      	beq.n	80014bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	e364      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d032      	beq.n	8001488 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a42      	ldr	r2, [pc, #264]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142e:	f7ff fbd7 	bl	8000be0 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001436:	f7ff fbd3 	bl	8000be0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e34d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a35      	ldr	r2, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4930      	ldr	r1, [pc, #192]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	492b      	ldr	r1, [pc, #172]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
 8001486:	e01a      	b.n	80014be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001494:	f7ff fba4 	bl	8000be0 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800149c:	f7ff fba0 	bl	8000be0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e31a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x1dc>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d073      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x21c>
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d10e      	bne.n	80014f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d10b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d063      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d15f      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e2f7      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fc:	d106      	bne.n	800150c <HAL_RCC_OscConfig+0x24c>
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e025      	b.n	8001558 <HAL_RCC_OscConfig+0x298>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001514:	d114      	bne.n	8001540 <HAL_RCC_OscConfig+0x280>
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a02      	ldr	r2, [pc, #8]	; (8001530 <HAL_RCC_OscConfig+0x270>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e013      	b.n	8001558 <HAL_RCC_OscConfig+0x298>
 8001530:	40021000 	.word	0x40021000
 8001534:	08003118 	.word	0x08003118
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004
 8001540:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a9f      	ldr	r2, [pc, #636]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a9c      	ldr	r2, [pc, #624]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fb3e 	bl	8000be0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fb3a 	bl	8000be0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e2b4      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157a:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x2a8>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb2a 	bl	8000be0 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb26 	bl	8000be0 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e2a0      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d0>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d060      	beq.n	8001680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x310>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d116      	bne.n	80015fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	4b7c      	ldr	r3, [pc, #496]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x328>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e27d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	4973      	ldr	r1, [pc, #460]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	e040      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d023      	beq.n	800164e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001606:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fae5 	bl	8000be0 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fae1 	bl	8000be0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e25b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	495f      	ldr	r1, [pc, #380]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a5c      	ldr	r2, [pc, #368]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fac1 	bl	8000be0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fabd 	bl	8000be0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e237      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d03c      	beq.n	8001706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01c      	beq.n	80016ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa9c 	bl	8000be0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fa98 	bl	8000be0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e212      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ef      	beq.n	80016ac <HAL_RCC_OscConfig+0x3ec>
 80016cc:	e01b      	b.n	8001706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa7f 	bl	8000be0 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fa7b 	bl	8000be0 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1f5      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ef      	bne.n	80016e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a6 	beq.w	8001860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10d      	bne.n	8001740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173c:	2301      	movs	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x508>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d118      	bne.n	800177e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_RCC_OscConfig+0x508>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x508>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001758:	f7ff fa42 	bl	8000be0 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001760:	f7ff fa3e 	bl	8000be0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1b8      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x508>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x4d8>
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001796:	e029      	b.n	80017ec <HAL_RCC_OscConfig+0x52c>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d115      	bne.n	80017cc <HAL_RCC_OscConfig+0x50c>
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a6:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x52c>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	4b9d      	ldr	r3, [pc, #628]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a9c      	ldr	r2, [pc, #624]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	4b99      	ldr	r3, [pc, #612]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a98      	ldr	r2, [pc, #608]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80017e4:	f023 0304 	bic.w	r3, r3, #4
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d016      	beq.n	8001822 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff f9f4 	bl	8000be0 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff f9f0 	bl	8000be0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e168      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	4b8c      	ldr	r3, [pc, #560]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ed      	beq.n	80017fc <HAL_RCC_OscConfig+0x53c>
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff f9dd 	bl	8000be0 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f9d9 	bl	8000be0 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e151      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ed      	bne.n	800182a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01c      	beq.n	80018ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001874:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f9ac 	bl	8000be0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188c:	f7ff f9a8 	bl	8000be0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e122      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189e:	4b69      	ldr	r3, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80018a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ef      	beq.n	800188c <HAL_RCC_OscConfig+0x5cc>
 80018ac:	e01b      	b.n	80018e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80018b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b4:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f98f 	bl	8000be0 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c6:	f7ff f98b 	bl	8000be0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e105      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80018da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ef      	bne.n	80018c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80f9 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	f040 80cf 	bne.w	8001a98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018fa:	4b52      	ldr	r3, [pc, #328]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	429a      	cmp	r2, r3
 800190c:	d12c      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	3b01      	subs	r3, #1
 800191a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d123      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d11b      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d113      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d109      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	3b01      	subs	r3, #1
 8001962:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d071      	beq.n	8001a4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d068      	beq.n	8001a40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0ac      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2d      	ldr	r2, [pc, #180]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001996:	f7ff f923 	bl	8000be0 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f91f 	bl	8000be0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e099      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x788>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0552      	lsls	r2, r2, #21
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0652      	lsls	r2, r2, #25
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f6:	06d2      	lsls	r2, r2, #27
 80019f8:	430a      	orrs	r2, r1
 80019fa:	4912      	ldr	r1, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a18:	f7ff f8e2 	bl	8000be0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f8de 	bl	8000be0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e058      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_OscConfig+0x784>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3e:	e050      	b.n	8001ae2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e04f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
 8001a44:	40021000 	.word	0x40021000
 8001a48:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d144      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a23      	ldr	r2, [pc, #140]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a70:	f7ff f8b6 	bl	8000be0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f8b2 	bl	8000be0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e02c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x7b8>
 8001a96:	e024      	b.n	8001ae2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d01f      	beq.n	8001ade <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f899 	bl	8000be0 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f895 	bl	8000be0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e00f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4905      	ldr	r1, [pc, #20]	; (8001aec <HAL_RCC_OscConfig+0x82c>)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x830>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
 8001adc:	e001      	b.n	8001ae2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	feeefffc 	.word	0xfeeefffc

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e11d      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b90      	ldr	r3, [pc, #576]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d910      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 020f 	bic.w	r2, r3, #15
 8001b22:	498b      	ldr	r1, [pc, #556]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b89      	ldr	r3, [pc, #548]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e105      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d010      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d908      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b7e      	ldr	r3, [pc, #504]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	497b      	ldr	r1, [pc, #492]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d079      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d11e      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0dc      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001b8e:	f000 f9d1 	bl	8001f34 <RCC_GetSysClockFreqFromPLLSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a70      	ldr	r2, [pc, #448]	; (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d946      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d140      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ba6:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bae:	4a69      	ldr	r2, [pc, #420]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e035      	b.n	8001c28 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc4:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d115      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0b9      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bdc:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ad      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0a5      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001bfc:	f000 f8b4 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d90f      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 0203 	bic.w	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4947      	ldr	r1, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c3a:	f7fe ffd1 	bl	8000be0 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c42:	f7fe ffcd 	bl	8000be0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e077      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 020c 	and.w	r2, r3, #12
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d1eb      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a37      	ldr	r2, [pc, #220]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	492b      	ldr	r1, [pc, #172]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 020f 	bic.w	r2, r3, #15
 8001cc0:	4923      	ldr	r1, [pc, #140]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4918      	ldr	r1, [pc, #96]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4910      	ldr	r1, [pc, #64]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d18:	f000 f826 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <HAL_RCC_ClockConfig+0x268>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x26c>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe feff 	bl	8000b40 <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]

  return status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	04c4b400 	.word	0x04c4b400
 8001d5c:	08003118 	.word	0x08003118
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x34>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11e      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d9c:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de0:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	e004      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d134      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d003      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xac>
 8001e0c:	e005      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	e005      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e16:	617b      	str	r3, [r7, #20]
      break;
 8001e18:	e002      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	617b      	str	r3, [r7, #20]
      break;
 8001e1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	fb03 f202 	mul.w	r2, r3, r2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0e5b      	lsrs	r3, r3, #25
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	3301      	adds	r3, #1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e60:	69bb      	ldr	r3, [r7, #24]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08003128 	.word	0x08003128
 8001e78:	00f42400 	.word	0x00f42400
 8001e7c:	007a1200 	.word	0x007a1200

08001e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e98:	f7ff f93e 	bl	8001118 <HAL_PWREx_GetVoltageRange>
 8001e9c:	6178      	str	r0, [r7, #20]
 8001e9e:	e014      	b.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f92e 	bl	8001118 <HAL_PWREx_GetVoltageRange>
 8001ebc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed0:	d10b      	bne.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d913      	bls.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2ba0      	cmp	r3, #160	; 0xa0
 8001edc:	d902      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ede:	2302      	movs	r3, #2
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e00d      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e00a      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b7f      	cmp	r3, #127	; 0x7f
 8001eee:	d902      	bls.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e004      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b70      	cmp	r3, #112	; 0x70
 8001efa:	d101      	bne.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 020f 	bic.w	r2, r3, #15
 8001f08:	4909      	ldr	r1, [pc, #36]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40022000 	.word	0x40022000

08001f34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d00b      	beq.n	8001f62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d825      	bhi.n	8001f9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d008      	beq.n	8001f68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11f      	bne.n	8001f9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f5e:	613b      	str	r3, [r7, #16]
    break;
 8001f60:	e01f      	b.n	8001fa2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001f64:	613b      	str	r3, [r7, #16]
    break;
 8001f66:	e01c      	b.n	8001fa2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e005      	b.n	8001f90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
    break;
 8001f9a:	e002      	b.n	8001fa2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
    break;
 8001fa0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	3301      	adds	r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	fb03 f202 	mul.w	r2, r3, r2
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0e5b      	lsrs	r3, r3, #25
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001fe2:	683b      	ldr	r3, [r7, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200
 8001ffc:	08003128 	.word	0x08003128

08002000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e049      	b.n	80020a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fc70 	bl	800090c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f000 fb7a 	bl	8002738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e049      	b.n	8002154 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f841 	bl	800215c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f000 fb23 	bl	8002738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_TIM_PWM_Start+0x24>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e03c      	b.n	800220e <HAL_TIM_PWM_Start+0x9e>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d109      	bne.n	80021ae <HAL_TIM_PWM_Start+0x3e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	e02f      	b.n	800220e <HAL_TIM_PWM_Start+0x9e>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d109      	bne.n	80021c8 <HAL_TIM_PWM_Start+0x58>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e022      	b.n	800220e <HAL_TIM_PWM_Start+0x9e>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d109      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x72>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	bf14      	ite	ne
 80021da:	2301      	movne	r3, #1
 80021dc:	2300      	moveq	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e015      	b.n	800220e <HAL_TIM_PWM_Start+0x9e>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d109      	bne.n	80021fc <HAL_TIM_PWM_Start+0x8c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e008      	b.n	800220e <HAL_TIM_PWM_Start+0x9e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e09c      	b.n	8002350 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <HAL_TIM_PWM_Start+0xb6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002224:	e023      	b.n	800226e <HAL_TIM_PWM_Start+0xfe>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d104      	bne.n	8002236 <HAL_TIM_PWM_Start+0xc6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002234:	e01b      	b.n	800226e <HAL_TIM_PWM_Start+0xfe>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PWM_Start+0xd6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002244:	e013      	b.n	800226e <HAL_TIM_PWM_Start+0xfe>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d104      	bne.n	8002256 <HAL_TIM_PWM_Start+0xe6>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002254:	e00b      	b.n	800226e <HAL_TIM_PWM_Start+0xfe>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d104      	bne.n	8002266 <HAL_TIM_PWM_Start+0xf6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002264:	e003      	b.n	800226e <HAL_TIM_PWM_Start+0xfe>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fe68 	bl	8002f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_TIM_PWM_Start+0x1e8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_TIM_PWM_Start+0x13e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <HAL_TIM_PWM_Start+0x1ec>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <HAL_TIM_PWM_Start+0x13e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_TIM_PWM_Start+0x1f0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_TIM_PWM_Start+0x13e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a31      	ldr	r2, [pc, #196]	; (8002364 <HAL_TIM_PWM_Start+0x1f4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_TIM_PWM_Start+0x13e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <HAL_TIM_PWM_Start+0x1f8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_PWM_Start+0x142>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_PWM_Start+0x144>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_TIM_PWM_Start+0x1e8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01d      	beq.n	800230e <HAL_TIM_PWM_Start+0x19e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022da:	d018      	beq.n	800230e <HAL_TIM_PWM_Start+0x19e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a22      	ldr	r2, [pc, #136]	; (800236c <HAL_TIM_PWM_Start+0x1fc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_TIM_PWM_Start+0x19e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <HAL_TIM_PWM_Start+0x200>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_TIM_PWM_Start+0x19e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_TIM_PWM_Start+0x204>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_TIM_PWM_Start+0x19e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_TIM_PWM_Start+0x1ec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_TIM_PWM_Start+0x19e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_TIM_PWM_Start+0x1f0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d115      	bne.n	800233a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_TIM_PWM_Start+0x208>)
 8002316:	4013      	ands	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d015      	beq.n	800234c <HAL_TIM_PWM_Start+0x1dc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002326:	d011      	beq.n	800234c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002338:	e008      	b.n	800234c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e000      	b.n	800234e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40013400 	.word	0x40013400
 8002360:	40014000 	.word	0x40014000
 8002364:	40014400 	.word	0x40014400
 8002368:	40014800 	.word	0x40014800
 800236c:	40000400 	.word	0x40000400
 8002370:	40000800 	.word	0x40000800
 8002374:	40000c00 	.word	0x40000c00
 8002378:	00010007 	.word	0x00010007

0800237c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002396:	2302      	movs	r3, #2
 8002398:	e0ff      	b.n	800259a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b14      	cmp	r3, #20
 80023a6:	f200 80f0 	bhi.w	800258a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	08002405 	.word	0x08002405
 80023b4:	0800258b 	.word	0x0800258b
 80023b8:	0800258b 	.word	0x0800258b
 80023bc:	0800258b 	.word	0x0800258b
 80023c0:	08002445 	.word	0x08002445
 80023c4:	0800258b 	.word	0x0800258b
 80023c8:	0800258b 	.word	0x0800258b
 80023cc:	0800258b 	.word	0x0800258b
 80023d0:	08002487 	.word	0x08002487
 80023d4:	0800258b 	.word	0x0800258b
 80023d8:	0800258b 	.word	0x0800258b
 80023dc:	0800258b 	.word	0x0800258b
 80023e0:	080024c7 	.word	0x080024c7
 80023e4:	0800258b 	.word	0x0800258b
 80023e8:	0800258b 	.word	0x0800258b
 80023ec:	0800258b 	.word	0x0800258b
 80023f0:	08002509 	.word	0x08002509
 80023f4:	0800258b 	.word	0x0800258b
 80023f8:	0800258b 	.word	0x0800258b
 80023fc:	0800258b 	.word	0x0800258b
 8002400:	08002549 	.word	0x08002549
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa2e 	bl	800286c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0208 	orr.w	r2, r2, #8
 800241e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0204 	bic.w	r2, r2, #4
 800242e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6999      	ldr	r1, [r3, #24]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	619a      	str	r2, [r3, #24]
      break;
 8002442:	e0a5      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fa9e 	bl	800298c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6999      	ldr	r1, [r3, #24]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	021a      	lsls	r2, r3, #8
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	619a      	str	r2, [r3, #24]
      break;
 8002484:	e084      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fb07 	bl	8002aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0208 	orr.w	r2, r2, #8
 80024a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0204 	bic.w	r2, r2, #4
 80024b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69d9      	ldr	r1, [r3, #28]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	61da      	str	r2, [r3, #28]
      break;
 80024c4:	e064      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fb6f 	bl	8002bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	021a      	lsls	r2, r3, #8
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	61da      	str	r2, [r3, #28]
      break;
 8002506:	e043      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fbb8 	bl	8002c84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0208 	orr.w	r2, r2, #8
 8002522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002546:	e023      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fbfc 	bl	8002d4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002562:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	021a      	lsls	r2, r3, #8
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002588:	e002      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
      break;
 800258e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002598:	7dfb      	ldrb	r3, [r7, #23]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop

080025a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_TIM_ConfigClockSource+0x1c>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0b6      	b.n	800272e <HAL_TIM_ConfigClockSource+0x18a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d03e      	beq.n	800267c <HAL_TIM_ConfigClockSource+0xd8>
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	f200 8087 	bhi.w	8002714 <HAL_TIM_ConfigClockSource+0x170>
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	f000 8086 	beq.w	800271a <HAL_TIM_ConfigClockSource+0x176>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	d87f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d01a      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xaa>
 8002618:	2b70      	cmp	r3, #112	; 0x70
 800261a:	d87b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 800261c:	2b60      	cmp	r3, #96	; 0x60
 800261e:	d050      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x11e>
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d877      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 8002624:	2b50      	cmp	r3, #80	; 0x50
 8002626:	d03c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0xfe>
 8002628:	2b50      	cmp	r3, #80	; 0x50
 800262a:	d873      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d058      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x13e>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d86f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	d064      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15e>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15e>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d867      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15e>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d05a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15e>
 800264c:	e062      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 fc55 	bl	8002f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	609a      	str	r2, [r3, #8]
      break;
 800267a:	e04f      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 fc3e 	bl	8002f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 fbb2 	bl	8002e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fc0b 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 fbd1 	bl	8002e76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fbfb 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 fb92 	bl	8002e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fbeb 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fbe2 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002712:	e003      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      break;
 8002718:	e000      	b.n	800271c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800271a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a40      	ldr	r2, [pc, #256]	; (800284c <TIM_Base_SetConfig+0x114>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <TIM_Base_SetConfig+0x40>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d00f      	beq.n	8002778 <TIM_Base_SetConfig+0x40>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3d      	ldr	r2, [pc, #244]	; (8002850 <TIM_Base_SetConfig+0x118>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x40>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <TIM_Base_SetConfig+0x11c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <TIM_Base_SetConfig+0x120>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3a      	ldr	r2, [pc, #232]	; (800285c <TIM_Base_SetConfig+0x124>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2f      	ldr	r2, [pc, #188]	; (800284c <TIM_Base_SetConfig+0x114>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01f      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d01b      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <TIM_Base_SetConfig+0x118>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d017      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2b      	ldr	r2, [pc, #172]	; (8002854 <TIM_Base_SetConfig+0x11c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <TIM_Base_SetConfig+0x120>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00f      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <TIM_Base_SetConfig+0x124>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00b      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a28      	ldr	r2, [pc, #160]	; (8002860 <TIM_Base_SetConfig+0x128>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <TIM_Base_SetConfig+0x12c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d003      	beq.n	80027d2 <TIM_Base_SetConfig+0x9a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a26      	ldr	r2, [pc, #152]	; (8002868 <TIM_Base_SetConfig+0x130>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d108      	bne.n	80027e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <TIM_Base_SetConfig+0x114>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00f      	beq.n	8002830 <TIM_Base_SetConfig+0xf8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <TIM_Base_SetConfig+0x124>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00b      	beq.n	8002830 <TIM_Base_SetConfig+0xf8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <TIM_Base_SetConfig+0x128>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <TIM_Base_SetConfig+0xf8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <TIM_Base_SetConfig+0x12c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0xf8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <TIM_Base_SetConfig+0x130>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d103      	bne.n	8002838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	615a      	str	r2, [r3, #20]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800
 8002858:	40000c00 	.word	0x40000c00
 800285c:	40013400 	.word	0x40013400
 8002860:	40014000 	.word	0x40014000
 8002864:	40014400 	.word	0x40014400
 8002868:	40014800 	.word	0x40014800

0800286c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 0302 	bic.w	r3, r3, #2
 80028b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2c      	ldr	r2, [pc, #176]	; (8002978 <TIM_OC1_SetConfig+0x10c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00f      	beq.n	80028ec <TIM_OC1_SetConfig+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2b      	ldr	r2, [pc, #172]	; (800297c <TIM_OC1_SetConfig+0x110>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_OC1_SetConfig+0x80>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a2a      	ldr	r2, [pc, #168]	; (8002980 <TIM_OC1_SetConfig+0x114>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_OC1_SetConfig+0x80>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a29      	ldr	r2, [pc, #164]	; (8002984 <TIM_OC1_SetConfig+0x118>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_OC1_SetConfig+0x80>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a28      	ldr	r2, [pc, #160]	; (8002988 <TIM_OC1_SetConfig+0x11c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d10c      	bne.n	8002906 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0308 	bic.w	r3, r3, #8
 80028f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <TIM_OC1_SetConfig+0x10c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00f      	beq.n	800292e <TIM_OC1_SetConfig+0xc2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1a      	ldr	r2, [pc, #104]	; (800297c <TIM_OC1_SetConfig+0x110>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00b      	beq.n	800292e <TIM_OC1_SetConfig+0xc2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <TIM_OC1_SetConfig+0x114>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <TIM_OC1_SetConfig+0xc2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <TIM_OC1_SetConfig+0x118>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_OC1_SetConfig+0xc2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <TIM_OC1_SetConfig+0x11c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40013400 	.word	0x40013400
 8002980:	40014000 	.word	0x40014000
 8002984:	40014400 	.word	0x40014400
 8002988:	40014800 	.word	0x40014800

0800298c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0210 	bic.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0320 	bic.w	r3, r3, #32
 80029da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <TIM_OC2_SetConfig+0x100>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_OC2_SetConfig+0x6c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <TIM_OC2_SetConfig+0x104>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10d      	bne.n	8002a14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <TIM_OC2_SetConfig+0x100>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00f      	beq.n	8002a3c <TIM_OC2_SetConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <TIM_OC2_SetConfig+0x104>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <TIM_OC2_SetConfig+0xb0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <TIM_OC2_SetConfig+0x108>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <TIM_OC2_SetConfig+0xb0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <TIM_OC2_SetConfig+0x10c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_OC2_SetConfig+0xb0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <TIM_OC2_SetConfig+0x110>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d113      	bne.n	8002a64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	621a      	str	r2, [r3, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40013400 	.word	0x40013400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <TIM_OC3_SetConfig+0xfc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d003      	beq.n	8002b0a <TIM_OC3_SetConfig+0x6a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <TIM_OC3_SetConfig+0x100>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10d      	bne.n	8002b26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <TIM_OC3_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00f      	beq.n	8002b4e <TIM_OC3_SetConfig+0xae>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <TIM_OC3_SetConfig+0x100>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_OC3_SetConfig+0xae>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <TIM_OC3_SetConfig+0x104>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_OC3_SetConfig+0xae>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <TIM_OC3_SetConfig+0x108>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_OC3_SetConfig+0xae>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <TIM_OC3_SetConfig+0x10c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d113      	bne.n	8002b76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	621a      	str	r2, [r3, #32]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40013400 	.word	0x40013400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800

08002bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	031b      	lsls	r3, r3, #12
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <TIM_OC4_SetConfig+0xc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00f      	beq.n	8002c34 <TIM_OC4_SetConfig+0x84>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <TIM_OC4_SetConfig+0xc4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <TIM_OC4_SetConfig+0x84>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <TIM_OC4_SetConfig+0xc8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <TIM_OC4_SetConfig+0x84>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <TIM_OC4_SetConfig+0xcc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_OC4_SetConfig+0x84>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <TIM_OC4_SetConfig+0xd0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d109      	bne.n	8002c48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40013400 	.word	0x40013400
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40014400 	.word	0x40014400
 8002c80:	40014800 	.word	0x40014800

08002c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <TIM_OC5_SetConfig+0xb4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_OC5_SetConfig+0x7a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <TIM_OC5_SetConfig+0xb8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_OC5_SetConfig+0x7a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <TIM_OC5_SetConfig+0xbc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_OC5_SetConfig+0x7a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <TIM_OC5_SetConfig+0xc0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_OC5_SetConfig+0x7a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <TIM_OC5_SetConfig+0xc4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d109      	bne.n	8002d12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	621a      	str	r2, [r3, #32]
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40013400 	.word	0x40013400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <TIM_OC6_SetConfig+0xb8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00f      	beq.n	8002dc8 <TIM_OC6_SetConfig+0x7c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <TIM_OC6_SetConfig+0xbc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <TIM_OC6_SetConfig+0x7c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <TIM_OC6_SetConfig+0xc0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <TIM_OC6_SetConfig+0x7c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <TIM_OC6_SetConfig+0xc4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC6_SetConfig+0x7c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <TIM_OC6_SetConfig+0xc8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800

08002e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0201 	bic.w	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f023 030a 	bic.w	r3, r3, #10
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0210 	bic.w	r2, r3, #16
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	031b      	lsls	r3, r3, #12
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f043 0307 	orr.w	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2201      	movs	r2, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e068      	b.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2d      	ldr	r2, [pc, #180]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d108      	bne.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d018      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10c      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40013400 	.word	0x40013400
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40014000 	.word	0x40014000

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	; (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	; (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	; (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	; (80030ec <__libc_init_array+0x44>)
 80030bc:	f000 f820 	bl	8003100 <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003158 	.word	0x08003158
 80030e4:	08003158 	.word	0x08003158
 80030e8:	08003158 	.word	0x08003158
 80030ec:	0800315c 	.word	0x0800315c

080030f0 <memset>:
 80030f0:	4402      	add	r2, r0
 80030f2:	4603      	mov	r3, r0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d100      	bne.n	80030fa <memset+0xa>
 80030f8:	4770      	bx	lr
 80030fa:	f803 1b01 	strb.w	r1, [r3], #1
 80030fe:	e7f9      	b.n	80030f4 <memset+0x4>

08003100 <_init>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr

0800310c <_fini>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr
