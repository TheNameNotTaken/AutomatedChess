
motorDriving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dec  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001fa8  08001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001ffc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004db3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001063  00000000  00000000  00024def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00025e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000518  00000000  00000000  00026408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027be3  00000000  00000000  00026920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e21  00000000  00000000  0004e503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f42c8  00000000  00000000  00054324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001485ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014fc  00000000  00000000  0014863c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001f90 	.word	0x08001f90

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001f90 	.word	0x08001f90

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fbfc 	bl	80009fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f88b 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f8cf 	bl	80003ac <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(rstBigPort, rstBig, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	2101      	movs	r1, #1
 8000212:	4841      	ldr	r0, [pc, #260]	; (8000318 <main+0x11c>)
 8000214:	f000 ff04 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(slpBigPort, slpBig, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2108      	movs	r1, #8
 800021c:	483e      	ldr	r0, [pc, #248]	; (8000318 <main+0x11c>)
 800021e:	f000 feff 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2110      	movs	r1, #16
 8000226:	483c      	ldr	r0, [pc, #240]	; (8000318 <main+0x11c>)
 8000228:	f000 fefa 	bl	8001020 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(rstSmallPort, rstSmall, 1);
 800022c:	2201      	movs	r2, #1
 800022e:	2110      	movs	r1, #16
 8000230:	483a      	ldr	r0, [pc, #232]	; (800031c <main+0x120>)
 8000232:	f000 fef5 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(slpSmallPort, slpSmall, 1);
 8000236:	2201      	movs	r2, #1
 8000238:	2120      	movs	r1, #32
 800023a:	4838      	ldr	r0, [pc, #224]	; (800031c <main+0x120>)
 800023c:	f000 fef0 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2180      	movs	r1, #128	; 0x80
 8000244:	4835      	ldr	r0, [pc, #212]	; (800031c <main+0x120>)
 8000246:	f000 feeb 	bl	8001020 <HAL_GPIO_WritePin>


//  HAL_GPIO_WritePin(GPIOC, turnOff, 0);
//  for(int j=0; j<4; j++){

	for(int j=0; j<5; j+=1){
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	e05e      	b.n	800030e <main+0x112>
		  HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 8000250:	2200      	movs	r2, #0
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	4831      	ldr	r0, [pc, #196]	; (800031c <main+0x120>)
 8000256:	f000 fee3 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 800025a:	2200      	movs	r2, #0
 800025c:	2110      	movs	r1, #16
 800025e:	482e      	ldr	r0, [pc, #184]	; (8000318 <main+0x11c>)
 8000260:	f000 fede 	bl	8001020 <HAL_GPIO_WritePin>
		  for(int i=0; i<400;i++){
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
 8000268:	e01c      	b.n	80002a4 <main+0xa8>
		//		  GPIO_PinState maxSwitch = HAL_GPIO_ReadPin(GPIOC, switchPin);
		//		  if(maxSwitch){
		//		  		  HAL_GPIO_WritePin(GPIOB, turnOff, 0);
		//		  	  }
			  HAL_GPIO_WritePin(stepBigPort, stepBig, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	2102      	movs	r1, #2
 800026e:	482a      	ldr	r0, [pc, #168]	; (8000318 <main+0x11c>)
 8000270:	f000 fed6 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(stepSmallPort, stepSmall, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	2140      	movs	r1, #64	; 0x40
 8000278:	4828      	ldr	r0, [pc, #160]	; (800031c <main+0x120>)
 800027a:	f000 fed1 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fc32 	bl	8000ae8 <HAL_Delay>
			  HAL_GPIO_WritePin(stepBigPort, stepBig, 0);
 8000284:	2200      	movs	r2, #0
 8000286:	2102      	movs	r1, #2
 8000288:	4823      	ldr	r0, [pc, #140]	; (8000318 <main+0x11c>)
 800028a:	f000 fec9 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(stepSmallPort, stepSmall, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	4822      	ldr	r0, [pc, #136]	; (800031c <main+0x120>)
 8000294:	f000 fec4 	bl	8001020 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 8000298:	2001      	movs	r0, #1
 800029a:	f000 fc25 	bl	8000ae8 <HAL_Delay>
		  for(int i=0; i<400;i++){
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80002aa:	dbde      	blt.n	800026a <main+0x6e>
		  }
		  HAL_GPIO_WritePin(dirSmallPort, dirSmall, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	481a      	ldr	r0, [pc, #104]	; (800031c <main+0x120>)
 80002b2:	f000 feb5 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(dirBigPort, dirBig, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	4817      	ldr	r0, [pc, #92]	; (8000318 <main+0x11c>)
 80002bc:	f000 feb0 	bl	8001020 <HAL_GPIO_WritePin>
		  for(int i=0; i<400;i++){
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	e01c      	b.n	8000300 <main+0x104>
		  		//		  GPIO_PinState maxSwitch = HAL_GPIO_ReadPin(GPIOC, switchPin);
		  		//		  if(maxSwitch){
		  		//		  		  HAL_GPIO_WritePin(GPIOB, turnOff, 0);
		  		//		  	  }
		  			  HAL_GPIO_WritePin(stepBigPort, stepBig, 1);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2102      	movs	r1, #2
 80002ca:	4813      	ldr	r0, [pc, #76]	; (8000318 <main+0x11c>)
 80002cc:	f000 fea8 	bl	8001020 <HAL_GPIO_WritePin>
		  			  HAL_GPIO_WritePin(stepSmallPort, stepSmall, 1);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	4811      	ldr	r0, [pc, #68]	; (800031c <main+0x120>)
 80002d6:	f000 fea3 	bl	8001020 <HAL_GPIO_WritePin>
		  			  HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fc04 	bl	8000ae8 <HAL_Delay>
		  			  HAL_GPIO_WritePin(stepBigPort, stepBig, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2102      	movs	r1, #2
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <main+0x11c>)
 80002e6:	f000 fe9b 	bl	8001020 <HAL_GPIO_WritePin>
		  			  HAL_GPIO_WritePin(stepSmallPort, stepSmall, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2140      	movs	r1, #64	; 0x40
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <main+0x120>)
 80002f0:	f000 fe96 	bl	8001020 <HAL_GPIO_WritePin>
		  			  HAL_Delay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fbf7 	bl	8000ae8 <HAL_Delay>
		  for(int i=0; i<400;i++){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3301      	adds	r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000306:	dbde      	blt.n	80002c6 <main+0xca>
	for(int j=0; j<5; j+=1){
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2b04      	cmp	r3, #4
 8000312:	dd9d      	ble.n	8000250 <main+0x54>
		  		  }
	}


  while (1)
 8000314:	e7fe      	b.n	8000314 <main+0x118>
 8000316:	bf00      	nop
 8000318:	48000800 	.word	0x48000800
 800031c:	48000c00 	.word	0x48000c00

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	; 0x58
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	2244      	movs	r2, #68	; 0x44
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fe26 	bl	8001f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000346:	f000 fea3 	bl	8001090 <HAL_PWREx_ControlVoltageScaling>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000350:	f000 fac6 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000354:	2310      	movs	r3, #16
 8000356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000360:	2360      	movs	r3, #96	; 0x60
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000364:	2300      	movs	r3, #0
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	4618      	mov	r0, r3
 800036e:	f000 ff43 	bl	80011f8 <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000378:	f000 fab2 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	230f      	movs	r3, #15
 800037e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fb49 	bl	8001a2c <HAL_RCC_ClockConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003a0:	f000 fa9e 	bl	80008e0 <Error_Handler>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3758      	adds	r7, #88	; 0x58
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08e      	sub	sp, #56	; 0x38
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003c2:	4bb3      	ldr	r3, [pc, #716]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4ab2      	ldr	r2, [pc, #712]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003c8:	f043 0310 	orr.w	r3, r3, #16
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ce:	4bb0      	ldr	r3, [pc, #704]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	f003 0310 	and.w	r3, r3, #16
 80003d6:	623b      	str	r3, [r7, #32]
 80003d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003da:	4bad      	ldr	r3, [pc, #692]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4aac      	ldr	r2, [pc, #688]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003e0:	f043 0304 	orr.w	r3, r3, #4
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4baa      	ldr	r3, [pc, #680]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0304 	and.w	r3, r3, #4
 80003ee:	61fb      	str	r3, [r7, #28]
 80003f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f2:	4ba7      	ldr	r3, [pc, #668]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4aa6      	ldr	r2, [pc, #664]	; (8000690 <MX_GPIO_Init+0x2e4>)
 80003f8:	f043 0320 	orr.w	r3, r3, #32
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4ba4      	ldr	r3, [pc, #656]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0320 	and.w	r3, r3, #32
 8000406:	61bb      	str	r3, [r7, #24]
 8000408:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800040a:	4ba1      	ldr	r3, [pc, #644]	; (8000690 <MX_GPIO_Init+0x2e4>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4aa0      	ldr	r2, [pc, #640]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b9e      	ldr	r3, [pc, #632]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b9b      	ldr	r3, [pc, #620]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a9a      	ldr	r2, [pc, #616]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b98      	ldr	r3, [pc, #608]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	613b      	str	r3, [r7, #16]
 8000438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043a:	4b95      	ldr	r3, [pc, #596]	; (8000690 <MX_GPIO_Init+0x2e4>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a94      	ldr	r2, [pc, #592]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000440:	f043 0302 	orr.w	r3, r3, #2
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b92      	ldr	r3, [pc, #584]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0302 	and.w	r3, r3, #2
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000452:	4b8f      	ldr	r3, [pc, #572]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a8e      	ldr	r2, [pc, #568]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000458:	f043 0308 	orr.w	r3, r3, #8
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b8c      	ldr	r3, [pc, #560]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0308 	and.w	r3, r3, #8
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800046a:	4b89      	ldr	r3, [pc, #548]	; (8000690 <MX_GPIO_Init+0x2e4>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	4a88      	ldr	r2, [pc, #544]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000476:	4b86      	ldr	r3, [pc, #536]	; (8000690 <MX_GPIO_Init+0x2e4>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000482:	f000 fea9 	bl	80011d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	211b      	movs	r1, #27
 800048a:	4882      	ldr	r0, [pc, #520]	; (8000694 <MX_GPIO_Init+0x2e8>)
 800048c:	f000 fdc8 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2104      	movs	r1, #4
 8000494:	4880      	ldr	r0, [pc, #512]	; (8000698 <MX_GPIO_Init+0x2ec>)
 8000496:	f000 fdc3 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	21f0      	movs	r1, #240	; 0xf0
 800049e:	487f      	ldr	r0, [pc, #508]	; (800069c <MX_GPIO_Init+0x2f0>)
 80004a0:	f000 fdbe 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004a4:	230c      	movs	r3, #12
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	2302      	movs	r3, #2
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004b4:	230d      	movs	r3, #13
 80004b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004bc:	4619      	mov	r1, r3
 80004be:	4878      	ldr	r0, [pc, #480]	; (80006a0 <MX_GPIO_Init+0x2f4>)
 80004c0:	f000 fc1c 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80004c4:	2307      	movs	r3, #7
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c8:	2312      	movs	r3, #18
 80004ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80004d4:	2304      	movs	r3, #4
 80004d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004dc:	4619      	mov	r1, r3
 80004de:	4871      	ldr	r0, [pc, #452]	; (80006a4 <MX_GPIO_Init+0x2f8>)
 80004e0:	f000 fc0c 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004f4:	230d      	movs	r3, #13
 80004f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fc:	4619      	mov	r1, r3
 80004fe:	4869      	ldr	r0, [pc, #420]	; (80006a4 <MX_GPIO_Init+0x2f8>)
 8000500:	f000 fbfc 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000504:	231b      	movs	r3, #27
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000518:	4619      	mov	r1, r3
 800051a:	485e      	ldr	r0, [pc, #376]	; (8000694 <MX_GPIO_Init+0x2e8>)
 800051c:	f000 fbee 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000520:	2304      	movs	r3, #4
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000524:	230b      	movs	r3, #11
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000530:	4619      	mov	r1, r3
 8000532:	4858      	ldr	r0, [pc, #352]	; (8000694 <MX_GPIO_Init+0x2e8>)
 8000534:	f000 fbe2 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000538:	2301      	movs	r3, #1
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053c:	2302      	movs	r3, #2
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000548:	2301      	movs	r3, #1
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000550:	4619      	mov	r1, r3
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f000 fbd1 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800055a:	230a      	movs	r3, #10
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800055e:	230b      	movs	r3, #11
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 fbc4 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000574:	23f0      	movs	r3, #240	; 0xf0
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000584:	2305      	movs	r3, #5
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fbb3 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000596:	2320      	movs	r3, #32
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059a:	2300      	movs	r3, #0
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a6:	4619      	mov	r1, r3
 80005a8:	483a      	ldr	r0, [pc, #232]	; (8000694 <MX_GPIO_Init+0x2e8>)
 80005aa:	f000 fba7 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ae:	2301      	movs	r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	4619      	mov	r1, r3
 80005c8:	4833      	ldr	r0, [pc, #204]	; (8000698 <MX_GPIO_Init+0x2ec>)
 80005ca:	f000 fb97 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005ce:	2302      	movs	r3, #2
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005d2:	230b      	movs	r3, #11
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005de:	4619      	mov	r1, r3
 80005e0:	482d      	ldr	r0, [pc, #180]	; (8000698 <MX_GPIO_Init+0x2ec>)
 80005e2:	f000 fb8b 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005e6:	2304      	movs	r3, #4
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	4619      	mov	r1, r3
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <MX_GPIO_Init+0x2ec>)
 80005fe:	f000 fb7d 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000602:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000614:	2301      	movs	r3, #1
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061c:	4619      	mov	r1, r3
 800061e:	4820      	ldr	r0, [pc, #128]	; (80006a0 <MX_GPIO_Init+0x2f4>)
 8000620:	f000 fb6c 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000624:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000636:	2303      	movs	r3, #3
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	4619      	mov	r1, r3
 8000640:	4817      	ldr	r0, [pc, #92]	; (80006a0 <MX_GPIO_Init+0x2f4>)
 8000642:	f000 fb5b 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000658:	2301      	movs	r3, #1
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	4619      	mov	r1, r3
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_GPIO_Init+0x2ec>)
 8000664:	f000 fb4a 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000668:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800067a:	230d      	movs	r3, #13
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	4619      	mov	r1, r3
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_GPIO_Init+0x2ec>)
 8000686:	f000 fb39 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800068a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800068e:	e00b      	b.n	80006a8 <MX_GPIO_Init+0x2fc>
 8000690:	40021000 	.word	0x40021000
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400
 800069c:	48000c00 	.word	0x48000c00
 80006a0:	48001000 	.word	0x48001000
 80006a4:	48001400 	.word	0x48001400
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80006b6:	230e      	movs	r3, #14
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	4619      	mov	r1, r3
 80006c0:	4882      	ldr	r0, [pc, #520]	; (80008cc <MX_GPIO_Init+0x520>)
 80006c2:	f000 fb1b 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006d8:	2307      	movs	r3, #7
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e0:	4619      	mov	r1, r3
 80006e2:	487b      	ldr	r0, [pc, #492]	; (80008d0 <MX_GPIO_Init+0x524>)
 80006e4:	f000 fb0a 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80006fa:	2302      	movs	r3, #2
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	4619      	mov	r1, r3
 8000704:	4872      	ldr	r0, [pc, #456]	; (80008d0 <MX_GPIO_Init+0x524>)
 8000706:	f000 faf9 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800070a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800071c:	2308      	movs	r3, #8
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	486b      	ldr	r0, [pc, #428]	; (80008d4 <MX_GPIO_Init+0x528>)
 8000728:	f000 fae8 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800073c:	230d      	movs	r3, #13
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000744:	4619      	mov	r1, r3
 8000746:	4864      	ldr	r0, [pc, #400]	; (80008d8 <MX_GPIO_Init+0x52c>)
 8000748:	f000 fad8 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800075c:	2302      	movs	r3, #2
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4619      	mov	r1, r3
 8000766:	485c      	ldr	r0, [pc, #368]	; (80008d8 <MX_GPIO_Init+0x52c>)
 8000768:	f000 fac8 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800076c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800077e:	230c      	movs	r3, #12
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	4853      	ldr	r0, [pc, #332]	; (80008d8 <MX_GPIO_Init+0x52c>)
 800078a:	f000 fab7 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800078e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007a0:	230a      	movs	r3, #10
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 faa5 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 fa97 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ce:	2301      	movs	r3, #1
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007de:	2309      	movs	r3, #9
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	4619      	mov	r1, r3
 80007e8:	4839      	ldr	r0, [pc, #228]	; (80008d0 <MX_GPIO_Init+0x524>)
 80007ea:	f000 fa87 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ee:	2304      	movs	r3, #4
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007fe:	230c      	movs	r3, #12
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	4831      	ldr	r0, [pc, #196]	; (80008d0 <MX_GPIO_Init+0x524>)
 800080a:	f000 fa77 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	4829      	ldr	r0, [pc, #164]	; (80008d0 <MX_GPIO_Init+0x524>)
 800082a:	f000 fa67 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800082e:	23f0      	movs	r3, #240	; 0xf0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	4619      	mov	r1, r3
 8000844:	4822      	ldr	r0, [pc, #136]	; (80008d0 <MX_GPIO_Init+0x524>)
 8000846:	f000 fa59 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800084a:	2338      	movs	r3, #56	; 0x38
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085a:	2306      	movs	r3, #6
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4819      	ldr	r0, [pc, #100]	; (80008cc <MX_GPIO_Init+0x520>)
 8000866:	f000 fa49 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_GPIO_Init+0x520>)
 800087e:	f000 fa3d 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000888:	2312      	movs	r3, #18
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000894:	2304      	movs	r3, #4
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x520>)
 80008a0:	f000 fa2c 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a4:	2301      	movs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008b4:	2302      	movs	r3, #2
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_GPIO_Init+0x530>)
 80008c0:	f000 fa1c 	bl	8000cfc <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3738      	adds	r7, #56	; 0x38
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	48000400 	.word	0x48000400
 80008d0:	48000c00 	.word	0x48000c00
 80008d4:	48001800 	.word	0x48001800
 80008d8:	48000800 	.word	0x48000800
 80008dc:	48001000 	.word	0x48001000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f892 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f001 faad 	bl	8001f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fc0d 	bl	80001fc <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f0:	08001ff0 	.word	0x08001ff0
  ldr r2, =_sbss
 80009f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f8:	2000002c 	.word	0x2000002c

080009fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_IRQHandler>

080009fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f943 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f80e 	bl	8000a30 <HAL_InitTick>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	e001      	b.n	8000a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a20:	f7ff ff64 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a24:	79fb      	ldrb	r3, [r7, #7]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_InitTick+0x6c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d023      	beq.n	8000a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_InitTick+0x70>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_InitTick+0x6c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f941 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10f      	bne.n	8000a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d809      	bhi.n	8000a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f919 	bl	8000caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_InitTick+0x74>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e007      	b.n	8000a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e004      	b.n	8000a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	e001      	b.n	8000a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000028 	.word	0x20000028

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000028 	.word	0x20000028

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffde 	bl	8000ad0 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff47 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff5c 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffb0 	bl	8000c50 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0a:	e166      	b.n	8000fda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8158 	beq.w	8000fd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_GPIO_Init+0x40>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 0201 	and.w	r2, r3, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d017      	beq.n	8000dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d123      	bne.n	8000e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	6939      	ldr	r1, [r7, #16]
 8000e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0203 	and.w	r2, r3, #3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80b2 	beq.w	8000fd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b61      	ldr	r3, [pc, #388]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e74:	4a60      	ldr	r2, [pc, #384]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e88:	4a5c      	ldr	r2, [pc, #368]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eb2:	d02b      	beq.n	8000f0c <HAL_GPIO_Init+0x210>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d025      	beq.n	8000f08 <HAL_GPIO_Init+0x20c>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a51      	ldr	r2, [pc, #324]	; (8001004 <HAL_GPIO_Init+0x308>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d01f      	beq.n	8000f04 <HAL_GPIO_Init+0x208>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a50      	ldr	r2, [pc, #320]	; (8001008 <HAL_GPIO_Init+0x30c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d019      	beq.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x310>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x200>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <HAL_GPIO_Init+0x314>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1fc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4d      	ldr	r2, [pc, #308]	; (8001014 <HAL_GPIO_Init+0x318>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1f8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x31c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1f4>
 8000eec:	2307      	movs	r3, #7
 8000eee:	e00e      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	e00c      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef8:	2305      	movs	r3, #5
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f50:	4a32      	ldr	r2, [pc, #200]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7a:	4a28      	ldr	r2, [pc, #160]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_GPIO_Init+0x320>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_GPIO_Init+0x320>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <HAL_GPIO_Init+0x320>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae91 	bne.w	8000d0c <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	48001800 	.word	0x48001800
 8001018:	48001c00 	.word	0x48001c00
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800103c:	e002      	b.n	8001044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800105c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001060:	d102      	bne.n	8001068 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001066:	e00b      	b.n	8001080 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_PWREx_GetVoltageRange+0x3c>)
 800106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001076:	d102      	bne.n	800107e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107c:	e000      	b.n	8001080 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800107e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40007000 	.word	0x40007000

08001090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d141      	bne.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010aa:	d131      	bne.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010ac:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010c4:	4a41      	ldr	r2, [pc, #260]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2232      	movs	r2, #50	; 0x32
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	0c9b      	lsrs	r3, r3, #18
 80010de:	3301      	adds	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e2:	e002      	b.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f6:	d102      	bne.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f2      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110a:	d158      	bne.n	80011be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e057      	b.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001116:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800111c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001120:	e04d      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001128:	d141      	bne.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001136:	d131      	bne.n	800119c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2232      	movs	r2, #50	; 0x32
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	0c9b      	lsrs	r3, r3, #18
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116e:	e002      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3b01      	subs	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001182:	d102      	bne.n	800118a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f2      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001196:	d112      	bne.n	80011be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e011      	b.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011ac:	e007      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40007000 	.word	0x40007000
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6053      	str	r3, [r2, #4]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	f000 bc08 	b.w	8001a1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120c:	4b96      	ldr	r3, [pc, #600]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001216:	4b94      	ldr	r3, [pc, #592]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80e4 	beq.w	80013f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_RCC_OscConfig+0x4c>
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	f040 808b 	bne.w	8001352 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b01      	cmp	r3, #1
 8001240:	f040 8087 	bne.w	8001352 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001244:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x64>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e3df      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	4b81      	ldr	r3, [pc, #516]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <HAL_RCC_OscConfig+0x7e>
 800126c:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001274:	e005      	b.n	8001282 <HAL_RCC_OscConfig+0x8a>
 8001276:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001282:	4293      	cmp	r3, r2
 8001284:	d223      	bcs.n	80012ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fd94 	bl	8001db8 <RCC_SetFlashLatencyFromMSIRange>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e3c0      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	496d      	ldr	r1, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4968      	ldr	r1, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e025      	b.n	800131a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ce:	4b66      	ldr	r3, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4960      	ldr	r1, [pc, #384]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	495b      	ldr	r1, [pc, #364]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fd54 	bl	8001db8 <RCC_SetFlashLatencyFromMSIRange>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e380      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800131a:	f000 fcc1 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 800131e:	4602      	mov	r2, r0
 8001320:	4b51      	ldr	r3, [pc, #324]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4950      	ldr	r1, [pc, #320]	; (800146c <HAL_RCC_OscConfig+0x274>)
 800132c:	5ccb      	ldrb	r3, [r1, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_RCC_OscConfig+0x278>)
 8001338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800133a:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <HAL_RCC_OscConfig+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb76 	bl	8000a30 <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d052      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	e364      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d032      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a42      	ldr	r2, [pc, #264]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001366:	f7ff fbb3 	bl	8000ad0 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136e:	f7ff fbaf 	bl	8000ad0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e34d      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a35      	ldr	r2, [pc, #212]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	492b      	ldr	r1, [pc, #172]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e01a      	b.n	80013f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a28      	ldr	r2, [pc, #160]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb80 	bl	8000ad0 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb7c 	bl	8000ad0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e31a      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1dc>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d073      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x21c>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d10e      	bne.n	800142c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d063      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d15f      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e2f7      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x24c>
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e025      	b.n	8001490 <HAL_RCC_OscConfig+0x298>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d114      	bne.n	8001478 <HAL_RCC_OscConfig+0x280>
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a02      	ldr	r2, [pc, #8]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0x298>
 8001468:	40021000 	.word	0x40021000
 800146c:	08001fa8 	.word	0x08001fa8
 8001470:	20000000 	.word	0x20000000
 8001474:	20000004 	.word	0x20000004
 8001478:	4ba0      	ldr	r3, [pc, #640]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a9f      	ldr	r2, [pc, #636]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b9d      	ldr	r3, [pc, #628]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a9c      	ldr	r2, [pc, #624]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb1a 	bl	8000ad0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb16 	bl	8000ad0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2b4      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	4b92      	ldr	r3, [pc, #584]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2a8>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb06 	bl	8000ad0 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fb02 	bl	8000ad0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2a0      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d0>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d060      	beq.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x310>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d119      	bne.n	8001536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d116      	bne.n	8001536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x328>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e27d      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	4973      	ldr	r1, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	e040      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d023      	beq.n	8001586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fac1 	bl	8000ad0 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fabd 	bl	8000ad0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e25b      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4b65      	ldr	r3, [pc, #404]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b62      	ldr	r3, [pc, #392]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	495f      	ldr	r1, [pc, #380]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800158c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fa9d 	bl	8000ad0 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fa99 	bl	8000ad0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e237      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d03c      	beq.n	800163e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01c      	beq.n	8001606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015cc:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa78 	bl	8000ad0 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa74 	bl	8000ad0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e212      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ef      	beq.n	80015e4 <HAL_RCC_OscConfig+0x3ec>
 8001604:	e01b      	b.n	800163e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	4a3b      	ldr	r2, [pc, #236]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fa5b 	bl	8000ad0 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fa57 	bl	8000ad0 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1f5      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ef      	bne.n	800161e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80a6 	beq.w	8001798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10d      	bne.n	8001678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	; 0x58
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001674:	2301      	movs	r3, #1
 8001676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d118      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001690:	f7ff fa1e 	bl	8000ad0 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001698:	f7ff fa1a 	bl	8000ad0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1b8      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4d8>
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ce:	e029      	b.n	8001724 <HAL_RCC_OscConfig+0x52c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d115      	bne.n	8001704 <HAL_RCC_OscConfig+0x50c>
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x52c>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40007000 	.word	0x40007000
 8001704:	4b9d      	ldr	r3, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	4a9c      	ldr	r2, [pc, #624]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a98      	ldr	r2, [pc, #608]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d016      	beq.n	800175a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f9d0 	bl	8000ad0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff f9cc 	bl	8000ad0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e168      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174a:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ed      	beq.n	8001734 <HAL_RCC_OscConfig+0x53c>
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff f9b9 	bl	8000ad0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff f9b5 	bl	8000ad0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e151      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001778:	4b80      	ldr	r3, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ed      	bne.n	8001762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	4a7a      	ldr	r2, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001796:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d03c      	beq.n	800181e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017ac:	4b73      	ldr	r3, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80017ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b2:	4a72      	ldr	r2, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff f988 	bl	8000ad0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c4:	f7ff f984 	bl	8000ad0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e122      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017d6:	4b69      	ldr	r3, [pc, #420]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80017d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ef      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5cc>
 80017e4:	e01b      	b.n	800181e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80017e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ec:	4a63      	ldr	r2, [pc, #396]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff f96b 	bl	8000ad0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fe:	f7ff f967 	bl	8000ad0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e105      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80f9 	beq.w	8001a1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 80cf 	bne.w	80019d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001832:	4b52      	ldr	r3, [pc, #328]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0203 	and.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	429a      	cmp	r2, r3
 8001844:	d12c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	3b01      	subs	r3, #1
 8001852:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d123      	bne.n	80018a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d11b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d113      	bne.n	80018a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d109      	bne.n	80018a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	085b      	lsrs	r3, r3, #1
 8001898:	3b01      	subs	r3, #1
 800189a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d071      	beq.n	8001984 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d068      	beq.n	8001978 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0ac      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a2d      	ldr	r2, [pc, #180]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80018c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ce:	f7ff f8ff 	bl	8000ad0 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff f8fb 	bl	8000ad0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e099      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_OscConfig+0x784>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x788>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001904:	3a01      	subs	r2, #1
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800190e:	0212      	lsls	r2, r2, #8
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001916:	0852      	lsrs	r2, r2, #1
 8001918:	3a01      	subs	r2, #1
 800191a:	0552      	lsls	r2, r2, #21
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001922:	0852      	lsrs	r2, r2, #1
 8001924:	3a01      	subs	r2, #1
 8001926:	0652      	lsls	r2, r2, #25
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800192e:	06d2      	lsls	r2, r2, #27
 8001930:	430a      	orrs	r2, r1
 8001932:	4912      	ldr	r1, [pc, #72]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x784>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001950:	f7ff f8be 	bl	8000ad0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f8ba 	bl	8000ad0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e058      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001976:	e050      	b.n	8001a1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e04f      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
 800197c:	40021000 	.word	0x40021000
 8001980:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d144      	bne.n	8001a1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a8:	f7ff f892 	bl	8000ad0 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f88e 	bl	8000ad0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e02c      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x7b8>
 80019ce:	e024      	b.n	8001a1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d01f      	beq.n	8001a16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 80019dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff f875 	bl	8000ad0 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f871 	bl	8000ad0 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e00f      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4905      	ldr	r1, [pc, #20]	; (8001a24 <HAL_RCC_OscConfig+0x82c>)
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_RCC_OscConfig+0x830>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	60cb      	str	r3, [r1, #12]
 8001a14:	e001      	b.n	8001a1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	feeefffc 	.word	0xfeeefffc

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e11d      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 020f 	bic.w	r2, r3, #15
 8001a5a:	498b      	ldr	r1, [pc, #556]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e105      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	497b      	ldr	r1, [pc, #492]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d079      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d11e      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0dc      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ac6:	f000 f9d1 	bl	8001e6c <RCC_GetSysClockFreqFromPLLSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a70      	ldr	r2, [pc, #448]	; (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d946      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d140      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ade:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ae6:	4a69      	ldr	r2, [pc, #420]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e035      	b.n	8001b60 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afc:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d115      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b9      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b14:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0ad      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0a5      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b34:	f000 f8b4 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a55      	ldr	r2, [pc, #340]	; (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d90f      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b40:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b54:	4a4d      	ldr	r2, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b60:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 0203 	bic.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4947      	ldr	r1, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b72:	f7fe ffad 	bl	8000ad0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7fe ffa9 	bl	8000ad0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e077      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b90:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 020c 	and.w	r2, r3, #12
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d1eb      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b80      	cmp	r3, #128	; 0x80
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a37      	ldr	r2, [pc, #220]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d208      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	492b      	ldr	r1, [pc, #172]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d210      	bcs.n	8001c12 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 020f 	bic.w	r2, r3, #15
 8001bf8:	4923      	ldr	r1, [pc, #140]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_RCC_ClockConfig+0x25c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e036      	b.n	8001c80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4918      	ldr	r1, [pc, #96]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4910      	ldr	r1, [pc, #64]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c50:	f000 f826 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <HAL_RCC_ClockConfig+0x268>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x26c>)
 8001c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fedb 	bl	8000a30 <HAL_InitTick>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	04c4b400 	.word	0x04c4b400
 8001c94:	08001fa8 	.word	0x08001fa8
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d121      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11e      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd4:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e005      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e004      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d134      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d003      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xac>
 8001d44:	e005      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d48:	617b      	str	r3, [r7, #20]
      break;
 8001d4a:	e005      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	617b      	str	r3, [r7, #20]
      break;
 8001d50:	e002      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	fb03 f202 	mul.w	r2, r3, r2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	0e5b      	lsrs	r3, r3, #25
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d98:	69bb      	ldr	r3, [r7, #24]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08001fb8 	.word	0x08001fb8
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd0:	f7ff f93e 	bl	8001050 <HAL_PWREx_GetVoltageRange>
 8001dd4:	6178      	str	r0, [r7, #20]
 8001dd6:	e014      	b.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	; 0x58
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df0:	f7ff f92e 	bl	8001050 <HAL_PWREx_GetVoltageRange>
 8001df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e08:	d10b      	bne.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d913      	bls.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2ba0      	cmp	r3, #160	; 0xa0
 8001e14:	d902      	bls.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e00d      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e00a      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b7f      	cmp	r3, #127	; 0x7f
 8001e26:	d902      	bls.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e28:	2302      	movs	r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e004      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b70      	cmp	r3, #112	; 0x70
 8001e32:	d101      	bne.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e34:	2301      	movs	r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 020f 	bic.w	r2, r3, #15
 8001e40:	4909      	ldr	r1, [pc, #36]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40022000 	.word	0x40022000

08001e6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d00b      	beq.n	8001e9a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d825      	bhi.n	8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d008      	beq.n	8001ea0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d11f      	bne.n	8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e96:	613b      	str	r3, [r7, #16]
    break;
 8001e98:	e01f      	b.n	8001eda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001e9c:	613b      	str	r3, [r7, #16]
    break;
 8001e9e:	e01c      	b.n	8001eda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e005      	b.n	8001ec8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	613b      	str	r3, [r7, #16]
    break;
 8001ed2:	e002      	b.n	8001eda <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
    break;
 8001ed8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	fb03 f202 	mul.w	r2, r3, r2
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0e5b      	lsrs	r3, r3, #25
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f1a:	683b      	ldr	r3, [r7, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	007a1200 	.word	0x007a1200
 8001f34:	08001fb8 	.word	0x08001fb8

08001f38 <__libc_init_array>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	4d0d      	ldr	r5, [pc, #52]	; (8001f70 <__libc_init_array+0x38>)
 8001f3c:	4c0d      	ldr	r4, [pc, #52]	; (8001f74 <__libc_init_array+0x3c>)
 8001f3e:	1b64      	subs	r4, r4, r5
 8001f40:	10a4      	asrs	r4, r4, #2
 8001f42:	2600      	movs	r6, #0
 8001f44:	42a6      	cmp	r6, r4
 8001f46:	d109      	bne.n	8001f5c <__libc_init_array+0x24>
 8001f48:	4d0b      	ldr	r5, [pc, #44]	; (8001f78 <__libc_init_array+0x40>)
 8001f4a:	4c0c      	ldr	r4, [pc, #48]	; (8001f7c <__libc_init_array+0x44>)
 8001f4c:	f000 f820 	bl	8001f90 <_init>
 8001f50:	1b64      	subs	r4, r4, r5
 8001f52:	10a4      	asrs	r4, r4, #2
 8001f54:	2600      	movs	r6, #0
 8001f56:	42a6      	cmp	r6, r4
 8001f58:	d105      	bne.n	8001f66 <__libc_init_array+0x2e>
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
 8001f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f60:	4798      	blx	r3
 8001f62:	3601      	adds	r6, #1
 8001f64:	e7ee      	b.n	8001f44 <__libc_init_array+0xc>
 8001f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f6a:	4798      	blx	r3
 8001f6c:	3601      	adds	r6, #1
 8001f6e:	e7f2      	b.n	8001f56 <__libc_init_array+0x1e>
 8001f70:	08001fe8 	.word	0x08001fe8
 8001f74:	08001fe8 	.word	0x08001fe8
 8001f78:	08001fe8 	.word	0x08001fe8
 8001f7c:	08001fec 	.word	0x08001fec

08001f80 <memset>:
 8001f80:	4402      	add	r2, r0
 8001f82:	4603      	mov	r3, r0
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d100      	bne.n	8001f8a <memset+0xa>
 8001f88:	4770      	bx	lr
 8001f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f8e:	e7f9      	b.n	8001f84 <memset+0x4>

08001f90 <_init>:
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f92:	bf00      	nop
 8001f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f96:	bc08      	pop	{r3}
 8001f98:	469e      	mov	lr, r3
 8001f9a:	4770      	bx	lr

08001f9c <_fini>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	bf00      	nop
 8001fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa2:	bc08      	pop	{r3}
 8001fa4:	469e      	mov	lr, r3
 8001fa6:	4770      	bx	lr
