
motorDriving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  080072d8  080072d8  000172d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800775c  0800775c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007764  08007764  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800776c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  08007948  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08007948  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d877  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e58  00000000  00000000  0002da83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6a8  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da6b  00000000  00000000  0005b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001007d2  00000000  00000000  00068eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016967d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  001696d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080072c0 	.word	0x080072c0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080072c0 	.word	0x080072c0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <__io_putchar+0x20>)
 8000eee:	f002 fd95 	bl	8003a1c <HAL_UART_Transmit>
  return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fd70 	bl	80019ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f81b 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f8ab 	bl	8001068 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 f85d 	bl	8000fd0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  struct coordinate coord = convertToCoord("A4");
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <main+0x3c>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fb33 	bl	8001588 <convertToCoord>
  coord = convertToCoord("P7");
 8000f22:	463b      	mov	r3, r7
 8000f24:	4906      	ldr	r1, [pc, #24]	; (8000f40 <main+0x40>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb2e 	bl	8001588 <convertToCoord>
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	463a      	mov	r2, r7
 8000f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f36:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <main+0x3a>
 8000f3c:	080072d8 	.word	0x080072d8
 8000f40:	080072dc 	.word	0x080072dc

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	; 0x58
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2244      	movs	r2, #68	; 0x44
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fbf0 	bl	8004738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6a:	f001 f863 	bl	8002034 <HAL_PWREx_ControlVoltageScaling>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f74:	f000 fb02 	bl	800157c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f84:	2360      	movs	r3, #96	; 0x60
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f903 	bl	800219c <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 faee 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fd09 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fc4:	f000 fada 	bl	800157c <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3758      	adds	r7, #88	; 0x58
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_USART2_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_USART2_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001018:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_USART2_UART_Init+0x90>)
 800101a:	f002 fcaf 	bl	800397c <HAL_UART_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001024:	f000 faaa 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_USART2_UART_Init+0x90>)
 800102c:	f003 fa78 	bl	8004520 <HAL_UARTEx_SetTxFifoThreshold>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001036:	f000 faa1 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <MX_USART2_UART_Init+0x90>)
 800103e:	f003 faad 	bl	800459c <HAL_UARTEx_SetRxFifoThreshold>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001048:	f000 fa98 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_USART2_UART_Init+0x90>)
 800104e:	f003 fa2e 	bl	80044ae <HAL_UARTEx_DisableFifoMode>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001058:	f000 fa90 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200001f8 	.word	0x200001f8
 8001064:	40004400 	.word	0x40004400

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	4bb3      	ldr	r3, [pc, #716]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4ab2      	ldr	r2, [pc, #712]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4bb0      	ldr	r3, [pc, #704]	; (800134c <MX_GPIO_Init+0x2e4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4bad      	ldr	r3, [pc, #692]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4aac      	ldr	r2, [pc, #688]	; (800134c <MX_GPIO_Init+0x2e4>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4baa      	ldr	r3, [pc, #680]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ae:	4ba7      	ldr	r3, [pc, #668]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4aa6      	ldr	r2, [pc, #664]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4ba4      	ldr	r3, [pc, #656]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	4ba1      	ldr	r3, [pc, #644]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4aa0      	ldr	r2, [pc, #640]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b9e      	ldr	r3, [pc, #632]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b9b      	ldr	r3, [pc, #620]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a9a      	ldr	r2, [pc, #616]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b98      	ldr	r3, [pc, #608]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b95      	ldr	r3, [pc, #596]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a94      	ldr	r2, [pc, #592]	; (800134c <MX_GPIO_Init+0x2e4>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b92      	ldr	r3, [pc, #584]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b8f      	ldr	r3, [pc, #572]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a8e      	ldr	r2, [pc, #568]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b8c      	ldr	r3, [pc, #560]	; (800134c <MX_GPIO_Init+0x2e4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001126:	4b89      	ldr	r3, [pc, #548]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a88      	ldr	r2, [pc, #544]	; (800134c <MX_GPIO_Init+0x2e4>)
 800112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b86      	ldr	r3, [pc, #536]	; (800134c <MX_GPIO_Init+0x2e4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800113e:	f001 f81d 	bl	800217c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	211b      	movs	r1, #27
 8001146:	4882      	ldr	r0, [pc, #520]	; (8001350 <MX_GPIO_Init+0x2e8>)
 8001148:	f000 ff3c 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2104      	movs	r1, #4
 8001150:	4880      	ldr	r0, [pc, #512]	; (8001354 <MX_GPIO_Init+0x2ec>)
 8001152:	f000 ff37 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	21f0      	movs	r1, #240	; 0xf0
 800115a:	487f      	ldr	r0, [pc, #508]	; (8001358 <MX_GPIO_Init+0x2f0>)
 800115c:	f000 ff32 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001160:	230c      	movs	r3, #12
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001170:	230d      	movs	r3, #13
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4878      	ldr	r0, [pc, #480]	; (800135c <MX_GPIO_Init+0x2f4>)
 800117c:	f000 fd90 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001180:	2307      	movs	r3, #7
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001190:	2304      	movs	r3, #4
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	4871      	ldr	r0, [pc, #452]	; (8001360 <MX_GPIO_Init+0x2f8>)
 800119c:	f000 fd80 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011b0:	230d      	movs	r3, #13
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4869      	ldr	r0, [pc, #420]	; (8001360 <MX_GPIO_Init+0x2f8>)
 80011bc:	f000 fd70 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80011c0:	231b      	movs	r3, #27
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	485e      	ldr	r0, [pc, #376]	; (8001350 <MX_GPIO_Init+0x2e8>)
 80011d8:	f000 fd62 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011dc:	2304      	movs	r3, #4
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e0:	230b      	movs	r3, #11
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4858      	ldr	r0, [pc, #352]	; (8001350 <MX_GPIO_Init+0x2e8>)
 80011f0:	f000 fd56 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f4:	2301      	movs	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001204:	2301      	movs	r3, #1
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f000 fd45 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001216:	2302      	movs	r3, #2
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800121a:	230b      	movs	r3, #11
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f000 fd38 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001230:	23f0      	movs	r3, #240	; 0xf0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001240:	2305      	movs	r3, #5
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f000 fd27 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001252:	2320      	movs	r3, #32
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	483a      	ldr	r0, [pc, #232]	; (8001350 <MX_GPIO_Init+0x2e8>)
 8001266:	f000 fd1b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127a:	2302      	movs	r3, #2
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4833      	ldr	r0, [pc, #204]	; (8001354 <MX_GPIO_Init+0x2ec>)
 8001286:	f000 fd0b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800128e:	230b      	movs	r3, #11
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	482d      	ldr	r0, [pc, #180]	; (8001354 <MX_GPIO_Init+0x2ec>)
 800129e:	f000 fcff 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a2:	2304      	movs	r3, #4
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <MX_GPIO_Init+0x2ec>)
 80012ba:	f000 fcf1 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012be:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_GPIO_Init+0x2f4>)
 80012dc:	f000 fce0 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80012f2:	2303      	movs	r3, #3
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4817      	ldr	r0, [pc, #92]	; (800135c <MX_GPIO_Init+0x2f4>)
 80012fe:	f000 fccf 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001314:	2301      	movs	r3, #1
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_GPIO_Init+0x2ec>)
 8001320:	f000 fcbe 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001324:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001336:	230d      	movs	r3, #13
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_GPIO_Init+0x2ec>)
 8001342:	f000 fcad 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134a:	e00b      	b.n	8001364 <MX_GPIO_Init+0x2fc>
 800134c:	40021000 	.word	0x40021000
 8001350:	48000800 	.word	0x48000800
 8001354:	48000400 	.word	0x48000400
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	48001400 	.word	0x48001400
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001372:	230e      	movs	r3, #14
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	487a      	ldr	r0, [pc, #488]	; (8001568 <MX_GPIO_Init+0x500>)
 800137e:	f000 fc8f 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4873      	ldr	r0, [pc, #460]	; (800156c <MX_GPIO_Init+0x504>)
 80013a0:	f000 fc7e 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013b6:	2302      	movs	r3, #2
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	486a      	ldr	r0, [pc, #424]	; (800156c <MX_GPIO_Init+0x504>)
 80013c2:	f000 fc6d 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013d8:	2308      	movs	r3, #8
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	4863      	ldr	r0, [pc, #396]	; (8001570 <MX_GPIO_Init+0x508>)
 80013e4:	f000 fc5c 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e8:	2340      	movs	r3, #64	; 0x40
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80013f8:	230d      	movs	r3, #13
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	485c      	ldr	r0, [pc, #368]	; (8001574 <MX_GPIO_Init+0x50c>)
 8001404:	f000 fc4c 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001418:	2302      	movs	r3, #2
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4854      	ldr	r0, [pc, #336]	; (8001574 <MX_GPIO_Init+0x50c>)
 8001424:	f000 fc3c 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001428:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800143a:	230c      	movs	r3, #12
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	484b      	ldr	r0, [pc, #300]	; (8001574 <MX_GPIO_Init+0x50c>)
 8001446:	f000 fc2b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800144a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800145c:	230a      	movs	r3, #10
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f000 fc19 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f000 fc0b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800148a:	2301      	movs	r3, #1
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800149a:	2309      	movs	r3, #9
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_GPIO_Init+0x504>)
 80014a6:	f000 fbfb 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014aa:	2304      	movs	r3, #4
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014ba:	230c      	movs	r3, #12
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4829      	ldr	r0, [pc, #164]	; (800156c <MX_GPIO_Init+0x504>)
 80014c6:	f000 fbeb 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ca:	23f0      	movs	r3, #240	; 0xf0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	4822      	ldr	r0, [pc, #136]	; (800156c <MX_GPIO_Init+0x504>)
 80014e2:	f000 fbdd 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014e6:	2338      	movs	r3, #56	; 0x38
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f6:	2306      	movs	r3, #6
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4819      	ldr	r0, [pc, #100]	; (8001568 <MX_GPIO_Init+0x500>)
 8001502:	f000 fbcd 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_GPIO_Init+0x500>)
 800151a:	f000 fbc1 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001530:	2304      	movs	r3, #4
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <MX_GPIO_Init+0x500>)
 800153c:	f000 fbb0 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001550:	2302      	movs	r3, #2
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_GPIO_Init+0x510>)
 800155c:	f000 fba0 	bl	8001ca0 <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3738      	adds	r7, #56	; 0x38
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	48000400 	.word	0x48000400
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48001800 	.word	0x48001800
 8001574:	48000800 	.word	0x48000800
 8001578:	48001000 	.word	0x48001000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <convertToCoord>:
	HAL_GPIO_WritePin(rstSmallPort, rstSmall, 1);
	HAL_GPIO_WritePin(slpSmallPort, slpSmall, 1);
	HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
}

struct coordinate convertToCoord(char* square){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	struct coordinate coord;
	coord.x = (2*(square[0] - 'A') + 1)*(bigLength/16.0);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b41      	subs	r3, #65	; 0x41
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	3301      	adds	r3, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd9 	bl	8000554 <__aeabi_i2d>
 80015a2:	a326      	add	r3, pc, #152	; (adr r3, 800163c <convertToCoord+0xb4>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f83e 	bl	8000628 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fae8 	bl	8000b88 <__aeabi_d2iz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	60bb      	str	r3, [r7, #8]
	coord.y = (2*(atoi(&square[1])-1) + 1)*(smallLength/16.0);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 f877 	bl	80046b4 <atoi>
 80015c6:	4603      	mov	r3, r0
 80015c8:	3b01      	subs	r3, #1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	3301      	adds	r3, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffc0 	bl	8000554 <__aeabi_i2d>
 80015d4:	a31b      	add	r3, pc, #108	; (adr r3, 8001644 <convertToCoord+0xbc>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f825 	bl	8000628 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff facf 	bl	8000b88 <__aeabi_d2iz>
 80015ea:	4603      	mov	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]
	if(coord.x<0 || coord.x>bigLength || coord.y<0 || coord.y>smallLength){
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0c      	blt.n	800160e <convertToCoord+0x86>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f640 025c 	movw	r2, #2140	; 0x85c
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dc07      	bgt.n	800160e <convertToCoord+0x86>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db04      	blt.n	800160e <convertToCoord+0x86>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f640 022a 	movw	r2, #2090	; 0x82a
 800160a:	4293      	cmp	r3, r2
 800160c:	dd06      	ble.n	800161c <convertToCoord+0x94>
		printf("square %s doesn't exist or handled incorrectly", square);
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <convertToCoord+0xb0>)
 8001612:	f003 fd03 	bl	800501c <iprintf>
		//TODO shut off motor
		exit(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f003 f856 	bl	80046c8 <exit>
	}
	return coord;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001628:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	080072e0 	.word	0x080072e0
 800163c:	00000000 	.word	0x00000000
 8001640:	4060b800 	.word	0x4060b800
 8001644:	00000000 	.word	0x00000000
 8001648:	40605400 	.word	0x40605400

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0b0      	sub	sp, #192	; 0xc0
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	2294      	movs	r2, #148	; 0x94
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f83f 	bl	8004738 <memset>
  if(huart->Instance==USART2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_UART_MspInit+0xf4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d15c      	bne.n	800177e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fc3b 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016dc:	f7ff ff4e 	bl	800157c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_UART_MspInit+0xf8>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	4a29      	ldr	r2, [pc, #164]	; (800178c <HAL_UART_MspInit+0xf8>)
 80016e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ea:	6593      	str	r3, [r2, #88]	; 0x58
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_UART_MspInit+0xf8>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_UART_MspInit+0xf8>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_UART_MspInit+0xf8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_UART_MspInit+0xf8>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_UART_MspInit+0xf8>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_UART_MspInit+0xf8>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_UART_MspInit+0xf8>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD3     ------> USART2_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001728:	230c      	movs	r3, #12
 800172a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001740:	2307      	movs	r3, #7
 8001742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f000 faa6 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001754:	2308      	movs	r3, #8
 8001756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176c:	2307      	movs	r3, #7
 800176e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001772:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_UART_MspInit+0xfc>)
 800177a:	f000 fa91 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	37c0      	adds	r7, #192	; 0xc0
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004400 	.word	0x40004400
 800178c:	40021000 	.word	0x40021000
 8001790:	48000c00 	.word	0x48000c00

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f958 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_kill>:

int _kill(int pid, int sig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001802:	f002 ff5b 	bl	80046bc <__errno>
 8001806:	4603      	mov	r3, r0
 8001808:	2216      	movs	r2, #22
 800180a:	601a      	str	r2, [r3, #0]
	return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_exit>:

void _exit (int status)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800182a:	e7fe      	b.n	800182a <_exit+0x12>

0800182c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00a      	b.n	8001854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800183e:	f3af 8000 	nop.w
 8001842:	4601      	mov	r1, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf0      	blt.n	800183e <_read+0x12>
	}

return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e009      	b.n	800188c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fb2b 	bl	8000edc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf1      	blt.n	8001878 <_write+0x12>
	}
	return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_close>:

int _close(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
	return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c6:	605a      	str	r2, [r3, #4]
	return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_isatty>:

int _isatty(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
	return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f002 fec0 	bl	80046bc <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200a0000 	.word	0x200a0000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000288 	.word	0x20000288
 8001970:	200002a0 	.word	0x200002a0

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff ffea 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <LoopForever+0xe>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b8:	4c0a      	ldr	r4, [pc, #40]	; (80019e4 <LoopForever+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f002 fe93 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ca:	f7ff fa99 	bl	8000f00 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019dc:	0800776c 	.word	0x0800776c
  ldr r2, =_sbss
 80019e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019e4:	200002a0 	.word	0x200002a0

080019e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_IRQHandler>

080019ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f91f 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f80e 	bl	8001a1c <HAL_InitTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e001      	b.n	8001a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a0c:	f7ff fe1e 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d023      	beq.n	8001a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_InitTick+0x70>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f91d 	bl	8001c86 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d809      	bhi.n	8001a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f8f5 	bl	8001c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <HAL_InitTick+0x74>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e004      	b.n	8001a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e001      	b.n	8001a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	2000028c 	.word	0x2000028c

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000028c 	.word	0x2000028c

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff47 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff5c 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffb0 	bl	8001bf4 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	e166      	b.n	8001f7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8158 	beq.w	8001f78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d005      	beq.n	8001ce0 <HAL_GPIO_Init+0x40>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d130      	bne.n	8001d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d16:	2201      	movs	r2, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0201 	and.w	r2, r3, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d017      	beq.n	8001d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d123      	bne.n	8001dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80b2 	beq.w	8001f78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	4a60      	ldr	r2, [pc, #384]	; (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e20:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e2c:	4a5c      	ldr	r2, [pc, #368]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e56:	d02b      	beq.n	8001eb0 <HAL_GPIO_Init+0x210>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d025      	beq.n	8001eac <HAL_GPIO_Init+0x20c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_GPIO_Init+0x308>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01f      	beq.n	8001ea8 <HAL_GPIO_Init+0x208>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_GPIO_Init+0x30c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d019      	beq.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a4f      	ldr	r2, [pc, #316]	; (8001fb0 <HAL_GPIO_Init+0x310>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_GPIO_Init+0x200>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a4e      	ldr	r2, [pc, #312]	; (8001fb4 <HAL_GPIO_Init+0x314>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_Init+0x1fc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <HAL_GPIO_Init+0x318>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x1f8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a4c      	ldr	r2, [pc, #304]	; (8001fbc <HAL_GPIO_Init+0x31c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_Init+0x1f4>
 8001e90:	2307      	movs	r3, #7
 8001e92:	e00e      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e94:	2308      	movs	r3, #8
 8001e96:	e00c      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e98:	2306      	movs	r3, #6
 8001e9a:	e00a      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	e008      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e004      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec2:	4937      	ldr	r1, [pc, #220]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef4:	4a32      	ldr	r2, [pc, #200]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f ae91 	bne.w	8001cb0 <HAL_GPIO_Init+0x10>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	48000800 	.word	0x48000800
 8001fac:	48000c00 	.word	0x48000c00
 8001fb0:	48001000 	.word	0x48001000
 8001fb4:	48001400 	.word	0x48001400
 8001fb8:	48001800 	.word	0x48001800
 8001fbc:	48001c00 	.word	0x48001c00
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002004:	d102      	bne.n	800200c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	e00b      	b.n	8002024 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_PWREx_GetVoltageRange+0x3c>)
 800200e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201a:	d102      	bne.n	8002022 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800201c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002020:	e000      	b.n	8002024 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002022:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40007000 	.word	0x40007000

08002034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d141      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002042:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d131      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002056:	4a46      	ldr	r2, [pc, #280]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800205c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002068:	4a41      	ldr	r2, [pc, #260]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2232      	movs	r2, #50	; 0x32
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	4a3f      	ldr	r2, [pc, #252]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	3301      	adds	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002086:	e002      	b.n	800208e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3b01      	subs	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d102      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f2      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d158      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e057      	b.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ba:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020c4:	e04d      	b.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020cc:	d141      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020da:	d131      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2232      	movs	r2, #50	; 0x32
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002112:	e002      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3b01      	subs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d102      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f2      	bne.n	8002114 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213a:	d112      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e011      	b.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002150:	e007      	b.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002160:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40007000 	.word	0x40007000
 8002174:	20000000 	.word	0x20000000
 8002178:	431bde83 	.word	0x431bde83

0800217c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6053      	str	r3, [r2, #4]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f000 bc08 	b.w	80029c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b0:	4b96      	ldr	r3, [pc, #600]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ba:	4b94      	ldr	r3, [pc, #592]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80e4 	beq.w	800239a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4c>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	f040 808b 	bne.w	80022f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	f040 8087 	bne.w	80022f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e8:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x64>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e3df      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <HAL_RCC_OscConfig+0x7e>
 8002210:	4b7e      	ldr	r3, [pc, #504]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002218:	e005      	b.n	8002226 <HAL_RCC_OscConfig+0x8a>
 800221a:	4b7c      	ldr	r3, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002226:	4293      	cmp	r3, r2
 8002228:	d223      	bcs.n	8002272 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fdcc 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e3c0      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a72      	ldr	r2, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b70      	ldr	r3, [pc, #448]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	496d      	ldr	r1, [pc, #436]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800225c:	4b6b      	ldr	r3, [pc, #428]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	4968      	ldr	r1, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	e025      	b.n	80022be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002272:	4b66      	ldr	r3, [pc, #408]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4960      	ldr	r1, [pc, #384]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002290:	4b5e      	ldr	r3, [pc, #376]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	495b      	ldr	r1, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fd8c 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e380      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022be:	f000 fcc1 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b51      	ldr	r3, [pc, #324]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4950      	ldr	r1, [pc, #320]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	4a4e      	ldr	r2, [pc, #312]	; (8002414 <HAL_RCC_OscConfig+0x278>)
 80022dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022de:	4b4e      	ldr	r3, [pc, #312]	; (8002418 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb9a 	bl	8001a1c <HAL_InitTick>
 80022e8:	4603      	mov	r3, r0
 80022ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d052      	beq.n	8002398 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	e364      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d032      	beq.n	8002364 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a42      	ldr	r2, [pc, #264]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800230a:	f7ff fbd7 	bl	8001abc <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002312:	f7ff fbd3 	bl	8001abc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e34d      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a35      	ldr	r2, [pc, #212]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4930      	ldr	r1, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	492b      	ldr	r1, [pc, #172]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
 8002362:	e01a      	b.n	800239a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002370:	f7ff fba4 	bl	8001abc <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002378:	f7ff fba0 	bl	8001abc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e31a      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x1dc>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d073      	beq.n	800248e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_OscConfig+0x21c>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d10e      	bne.n	80023d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d063      	beq.n	800248c <HAL_RCC_OscConfig+0x2f0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d15f      	bne.n	800248c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e2f7      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x24c>
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e025      	b.n	8002434 <HAL_RCC_OscConfig+0x298>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d114      	bne.n	800241c <HAL_RCC_OscConfig+0x280>
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_RCC_OscConfig+0x270>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a02      	ldr	r2, [pc, #8]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0x298>
 800240c:	40021000 	.word	0x40021000
 8002410:	08007310 	.word	0x08007310
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004
 800241c:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a9f      	ldr	r2, [pc, #636]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b9d      	ldr	r3, [pc, #628]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a9c      	ldr	r2, [pc, #624]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff fb3e 	bl	8001abc <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fb3a 	bl	8001abc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e2b4      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002456:	4b92      	ldr	r3, [pc, #584]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x2a8>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff fb2a 	bl	8001abc <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fb26 	bl	8001abc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e2a0      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x2d0>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d060      	beq.n	800255c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x310>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d119      	bne.n	80024da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d116      	bne.n	80024da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ac:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_OscConfig+0x328>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e27d      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	4973      	ldr	r1, [pc, #460]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d8:	e040      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d023      	beq.n	800252a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e2:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7ff fae5 	bl	8001abc <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7ff fae1 	bl	8001abc <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e25b      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b62      	ldr	r3, [pc, #392]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	495f      	ldr	r1, [pc, #380]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
 8002528:	e018      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7ff fac1 	bl	8001abc <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff fabd 	bl	8001abc <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e237      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d03c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01c      	beq.n	80025aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002570:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	4a4a      	ldr	r2, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7ff fa9c 	bl	8001abc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff fa98 	bl	8001abc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e212      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800259c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ef      	beq.n	8002588 <HAL_RCC_OscConfig+0x3ec>
 80025a8:	e01b      	b.n	80025e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025aa:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b0:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7ff fa7f 	bl	8001abc <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c2:	f7ff fa7b 	bl	8001abc <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1f5      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ef      	bne.n	80025c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80a6 	beq.w	800273c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	6593      	str	r3, [r2, #88]	; 0x58
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002618:	2301      	movs	r3, #1
 800261a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_OscConfig+0x508>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d118      	bne.n	800265a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_RCC_OscConfig+0x508>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_RCC_OscConfig+0x508>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002634:	f7ff fa42 	bl	8001abc <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7ff fa3e 	bl	8001abc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1b8      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_RCC_OscConfig+0x508>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d108      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d8>
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002672:	e029      	b.n	80026c8 <HAL_RCC_OscConfig+0x52c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d115      	bne.n	80026a8 <HAL_RCC_OscConfig+0x50c>
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_RCC_OscConfig+0x504>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800269c:	e014      	b.n	80026c8 <HAL_RCC_OscConfig+0x52c>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40007000 	.word	0x40007000
 80026a8:	4b9d      	ldr	r3, [pc, #628]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	4a9c      	ldr	r2, [pc, #624]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b8:	4b99      	ldr	r3, [pc, #612]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	4a98      	ldr	r2, [pc, #608]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7ff f9f4 	bl	8001abc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7ff f9f0 	bl	8001abc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e168      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ed      	beq.n	80026d8 <HAL_RCC_OscConfig+0x53c>
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7ff f9dd 	bl	8001abc <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7ff f9d9 	bl	8001abc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e151      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ed      	bne.n	8002706 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272a:	7ffb      	ldrb	r3, [r7, #31]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d03c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01c      	beq.n	800278a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002750:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002756:	4a72      	ldr	r2, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff f9ac 	bl	8001abc <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002768:	f7ff f9a8 	bl	8001abc <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e122      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800277a:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800277c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ef      	beq.n	8002768 <HAL_RCC_OscConfig+0x5cc>
 8002788:	e01b      	b.n	80027c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800278a:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800278c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002790:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7ff f98f 	bl	8001abc <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a2:	f7ff f98b 	bl	8001abc <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e105      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b4:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80027b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ef      	bne.n	80027a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80f9 	beq.w	80029be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f040 80cf 	bne.w	8002974 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027d6:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d12c      	bne.n	8002844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	3b01      	subs	r3, #1
 80027f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d123      	bne.n	8002844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d11b      	bne.n	8002844 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d113      	bne.n	8002844 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d109      	bne.n	8002844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d071      	beq.n	8002928 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d068      	beq.n	800291c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800284a:	4b35      	ldr	r3, [pc, #212]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002856:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0ac      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002866:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800286c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002872:	f7ff f923 	bl	8001abc <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff f91f 	bl	8001abc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e099      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x788>)
 800289e:	4013      	ands	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a8:	3a01      	subs	r2, #1
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	4311      	orrs	r1, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b2:	0212      	lsls	r2, r2, #8
 80028b4:	4311      	orrs	r1, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ba:	0852      	lsrs	r2, r2, #1
 80028bc:	3a01      	subs	r2, #1
 80028be:	0552      	lsls	r2, r2, #21
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0652      	lsls	r2, r2, #25
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d2:	06d2      	lsls	r2, r2, #27
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4912      	ldr	r1, [pc, #72]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f4:	f7ff f8e2 	bl	8001abc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7ff f8de 	bl	8001abc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e058      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HAL_RCC_OscConfig+0x784>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291a:	e050      	b.n	80029be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04f      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
 8002920:	40021000 	.word	0x40021000
 8002924:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d144      	bne.n	80029be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294c:	f7ff f8b6 	bl	8001abc <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7ff f8b2 	bl	8001abc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e02c      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x7b8>
 8002972:	e024      	b.n	80029be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d01f      	beq.n	80029ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 8002980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff f899 	bl	8001abc <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7ff f895 	bl	8001abc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e00f      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4905      	ldr	r1, [pc, #20]	; (80029c8 <HAL_RCC_OscConfig+0x82c>)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x830>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
 80029b8:	e001      	b.n	80029be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	feeefffc 	.word	0xfeeefffc

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e11d      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b90      	ldr	r3, [pc, #576]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b8d      	ldr	r3, [pc, #564]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	498b      	ldr	r1, [pc, #556]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b89      	ldr	r3, [pc, #548]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e105      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b7e      	ldr	r3, [pc, #504]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	497b      	ldr	r1, [pc, #492]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d079      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d11e      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	4b75      	ldr	r3, [pc, #468]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0dc      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a6a:	f000 fa09 	bl	8002e80 <RCC_GetSysClockFreqFromPLLSource>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a70      	ldr	r2, [pc, #448]	; (8002c34 <HAL_RCC_ClockConfig+0x264>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d946      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a76:	4b6e      	ldr	r3, [pc, #440]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d140      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a82:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8a:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e035      	b.n	8002b04 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa0:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0b9      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab8:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0ad      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac8:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0a5      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ad8:	f000 f8b4 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_RCC_ClockConfig+0x264>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d90f      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002af0:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af8:	4a4d      	ldr	r2, [pc, #308]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b04:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 0203 	bic.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4947      	ldr	r1, [pc, #284]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b16:	f7fe ffd1 	bl	8001abc <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1e:	f7fe ffcd 	bl	8001abc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e077      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b34:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 020c 	and.w	r2, r3, #12
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d1eb      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a37      	ldr	r2, [pc, #220]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b56:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d010      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d208      	bcs.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	492b      	ldr	r1, [pc, #172]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d210      	bcs.n	8002bb6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 020f 	bic.w	r2, r3, #15
 8002b9c:	4923      	ldr	r1, [pc, #140]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCC_ClockConfig+0x25c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e036      	b.n	8002c24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4918      	ldr	r1, [pc, #96]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4910      	ldr	r1, [pc, #64]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf4:	f000 f826 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <HAL_RCC_ClockConfig+0x268>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x26c>)
 8002c12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe feff 	bl	8001a1c <HAL_InitTick>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	40021000 	.word	0x40021000
 8002c34:	04c4b400 	.word	0x04c4b400
 8002c38:	08007310 	.word	0x08007310
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d121      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d11e      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c94:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e004      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cc8:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d134      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0xa6>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cec:	617b      	str	r3, [r7, #20]
      break;
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf2:	617b      	str	r3, [r7, #20]
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	3301      	adds	r3, #1
 8002d08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	fb03 f202 	mul.w	r2, r3, r2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	0e5b      	lsrs	r3, r3, #25
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08007328 	.word	0x08007328
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4904      	ldr	r1, [pc, #16]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08007320 	.word	0x08007320

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002da4:	f7ff ffda 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0adb      	lsrs	r3, r3, #11
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08007320 	.word	0x08007320

08002dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de4:	f7ff f906 	bl	8001ff4 <HAL_PWREx_GetVoltageRange>
 8002de8:	6178      	str	r0, [r7, #20]
 8002dea:	e014      	b.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df6:	6593      	str	r3, [r2, #88]	; 0x58
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e04:	f7ff f8f6 	bl	8001ff4 <HAL_PWREx_GetVoltageRange>
 8002e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1c:	d10b      	bne.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d913      	bls.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2ba0      	cmp	r3, #160	; 0xa0
 8002e28:	d902      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e00d      	b.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e00a      	b.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b7f      	cmp	r3, #127	; 0x7f
 8002e3a:	d902      	bls.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e004      	b.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b70      	cmp	r3, #112	; 0x70
 8002e46:	d101      	bne.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e48:	2301      	movs	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 020f 	bic.w	r2, r3, #15
 8002e54:	4909      	ldr	r1, [pc, #36]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d001      	beq.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40022000 	.word	0x40022000

08002e80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d00b      	beq.n	8002eae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d825      	bhi.n	8002ee8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d008      	beq.n	8002eb4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d11f      	bne.n	8002ee8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002eaa:	613b      	str	r3, [r7, #16]
    break;
 8002eac:	e01f      	b.n	8002eee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002eb0:	613b      	str	r3, [r7, #16]
    break;
 8002eb2:	e01c      	b.n	8002eee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e005      	b.n	8002edc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002edc:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	613b      	str	r3, [r7, #16]
    break;
 8002ee6:	e002      	b.n	8002eee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
    break;
 8002eec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	fb03 f202 	mul.w	r2, r3, r2
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0e5b      	lsrs	r3, r3, #25
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f2e:	683b      	ldr	r3, [r7, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200
 8002f48:	08007328 	.word	0x08007328

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f54:	2300      	movs	r3, #0
 8002f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d040      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d02a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d825      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f74:	2b60      	cmp	r3, #96	; 0x60
 8002f76:	d026      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f78:	2b60      	cmp	r3, #96	; 0x60
 8002f7a:	d821      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d006      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d81d      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d010      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f8c:	e018      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f8e:	4b89      	ldr	r3, [pc, #548]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a88      	ldr	r2, [pc, #544]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f9a:	e015      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fb02 	bl	80035ac <RCCEx_PLLSAI1_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fac:	e00c      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3320      	adds	r3, #32
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fbed 	bl	8003794 <RCCEx_PLLSAI2_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	74fb      	strb	r3, [r7, #19]
      break;
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fce:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fd4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fdc:	4975      	ldr	r1, [pc, #468]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fe4:	e001      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d047      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d030      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003004:	d82a      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300a:	d02a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800300c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003010:	d824      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003016:	d008      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301c:	d81e      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003026:	d010      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003028:	e018      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800302a:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003036:	e015      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fab4 	bl	80035ac <RCCEx_PLLSAI1_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003048:	e00c      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3320      	adds	r3, #32
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fb9f 	bl	8003794 <RCCEx_PLLSAI2_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	74fb      	strb	r3, [r7, #19]
      break;
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800306a:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	494e      	ldr	r1, [pc, #312]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003080:	e001      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 809f 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003098:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a40      	ldr	r2, [pc, #256]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	; 0x58
 80030ba:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ca:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d6:	f7fe fcf1 	bl	8001abc <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030dc:	e009      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fced 	bl	8001abc <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74fb      	strb	r3, [r7, #19]
        break;
 80030f0:	e005      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ef      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d15b      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01f      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d019      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313e:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800314e:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d016      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fcac 	bl	8001abc <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003166:	e00b      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fe fca8 	bl	8001abc <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d902      	bls.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	74fb      	strb	r3, [r7, #19]
            break;
 800317e:	e006      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ec      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10c      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ac:	e008      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	74bb      	strb	r3, [r7, #18]
 80031b2:	e005      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c0:	7c7b      	ldrb	r3, [r7, #17]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4ba0      	ldr	r3, [pc, #640]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	4a9f      	ldr	r2, [pc, #636]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031de:	4b9a      	ldr	r3, [pc, #616]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f023 0203 	bic.w	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	4996      	ldr	r1, [pc, #600]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003200:	4b91      	ldr	r3, [pc, #580]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f023 020c 	bic.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	498e      	ldr	r1, [pc, #568]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	4985      	ldr	r1, [pc, #532]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003244:	4b80      	ldr	r3, [pc, #512]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003252:	497d      	ldr	r1, [pc, #500]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003266:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4974      	ldr	r1, [pc, #464]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	496c      	ldr	r1, [pc, #432]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b8:	4963      	ldr	r1, [pc, #396]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032cc:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032da:	495b      	ldr	r1, [pc, #364]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ee:	4b56      	ldr	r3, [pc, #344]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	4952      	ldr	r1, [pc, #328]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003310:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	494a      	ldr	r1, [pc, #296]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003332:	4b45      	ldr	r3, [pc, #276]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	4941      	ldr	r1, [pc, #260]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003362:	4939      	ldr	r1, [pc, #228]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d028      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003384:	4930      	ldr	r1, [pc, #192]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003394:	d106      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a0:	60d3      	str	r3, [r2, #12]
 80033a2:	e011      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f8f9 	bl	80035ac <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d04d      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033dc:	d108      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e4:	4a18      	ldr	r2, [pc, #96]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033ee:	e012      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f6:	4a14      	ldr	r2, [pc, #80]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800340e:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341e:	d106      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342a:	60d3      	str	r3, [r2, #12]
 800342c:	e020      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003436:	d109      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a02      	ldr	r2, [pc, #8]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	60d3      	str	r3, [r2, #12]
 8003444:	e014      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f8a5 	bl	80035ac <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d028      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348a:	4947      	ldr	r1, [pc, #284]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d106      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e011      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b2:	d10c      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f876 	bl	80035ac <RCCEx_PLLSAI1_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ea:	492f      	ldr	r1, [pc, #188]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f851 	bl	80035ac <RCCEx_PLLSAI1_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800352a:	f023 0204 	bic.w	r2, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003534:	491c      	ldr	r1, [pc, #112]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800354e:	f023 0218 	bic.w	r2, r3, #24
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	4913      	ldr	r1, [pc, #76]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357c:	490a      	ldr	r1, [pc, #40]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800359c:	7cbb      	ldrb	r3, [r7, #18]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b72      	ldr	r3, [pc, #456]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c6:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d103      	bne.n	80035de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d142      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e03f      	b.n	8003664 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d018      	beq.n	800361e <RCCEx_PLLSAI1_Config+0x72>
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d825      	bhi.n	800363c <RCCEx_PLLSAI1_Config+0x90>
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x4e>
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d009      	beq.n	800360c <RCCEx_PLLSAI1_Config+0x60>
 80035f8:	e020      	b.n	800363c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035fa:	4b62      	ldr	r3, [pc, #392]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360a:	e01a      	b.n	8003642 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800360c:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e013      	b.n	8003646 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361e:	4b59      	ldr	r3, [pc, #356]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800362a:	4b56      	ldr	r3, [pc, #344]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800363a:	e006      	b.n	800364a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e004      	b.n	800364c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800364a:	bf00      	nop
    }

    if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003652:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4949      	ldr	r1, [pc, #292]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 8086 	bne.w	8003778 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a44      	ldr	r2, [pc, #272]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003678:	f7fe fa20 	bl	8001abc <HAL_GetTick>
 800367c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367e:	e009      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003680:	f7fe fa1c 	bl	8001abc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d902      	bls.n	8003694 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	73fb      	strb	r3, [r7, #15]
        break;
 8003692:	e005      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003694:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ef      	bne.n	8003680 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d168      	bne.n	8003778 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d113      	bne.n	80036d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	4b35      	ldr	r3, [pc, #212]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	0211      	lsls	r1, r2, #8
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68d2      	ldr	r2, [r2, #12]
 80036be:	06d2      	lsls	r2, r2, #27
 80036c0:	4311      	orrs	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	3a01      	subs	r2, #1
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	430a      	orrs	r2, r1
 80036cc:	492d      	ldr	r1, [pc, #180]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]
 80036d2:	e02d      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d115      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	0211      	lsls	r1, r2, #8
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6912      	ldr	r2, [r2, #16]
 80036ec:	0852      	lsrs	r2, r2, #1
 80036ee:	3a01      	subs	r2, #1
 80036f0:	0552      	lsls	r2, r2, #21
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6852      	ldr	r2, [r2, #4]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	430a      	orrs	r2, r1
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
 8003704:	e014      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	0211      	lsls	r1, r2, #8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6952      	ldr	r2, [r2, #20]
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	3a01      	subs	r2, #1
 800371c:	0652      	lsls	r2, r2, #25
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	3a01      	subs	r2, #1
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	430a      	orrs	r2, r1
 800372a:	4916      	ldr	r1, [pc, #88]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800373a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe f9be 	bl	8001abc <HAL_GetTick>
 8003740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003742:	e009      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003744:	f7fe f9ba 	bl	8001abc <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d902      	bls.n	8003758 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	73fb      	strb	r3, [r7, #15]
          break;
 8003756:	e005      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ef      	beq.n	8003744 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	4904      	ldr	r1, [pc, #16]	; (8003784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003778:	7bfb      	ldrb	r3, [r7, #15]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	07ff800f 	.word	0x07ff800f
 800378c:	ff9f800f 	.word	0xff9f800f
 8003790:	f9ff800f 	.word	0xf9ff800f

08003794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a2:	4b72      	ldr	r3, [pc, #456]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ae:	4b6f      	ldr	r3, [pc, #444]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0203 	and.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d103      	bne.n	80037c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
       ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d142      	bne.n	800384c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e03f      	b.n	800384c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d018      	beq.n	8003806 <RCCEx_PLLSAI2_Config+0x72>
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d825      	bhi.n	8003824 <RCCEx_PLLSAI2_Config+0x90>
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d002      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x4e>
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d009      	beq.n	80037f4 <RCCEx_PLLSAI2_Config+0x60>
 80037e0:	e020      	b.n	8003824 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037e2:	4b62      	ldr	r3, [pc, #392]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11d      	bne.n	800382a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f2:	e01a      	b.n	800382a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f4:	4b5d      	ldr	r3, [pc, #372]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d116      	bne.n	800382e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003804:	e013      	b.n	800382e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003812:	4b56      	ldr	r3, [pc, #344]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003822:	e006      	b.n	8003832 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      break;
 8003828:	e004      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003832:	bf00      	nop
    }

    if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800383a:	4b4c      	ldr	r3, [pc, #304]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4949      	ldr	r1, [pc, #292]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8086 	bne.w	8003960 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a44      	ldr	r2, [pc, #272]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 800385a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fe f92c 	bl	8001abc <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003866:	e009      	b.n	800387c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003868:	f7fe f928 	bl	8001abc <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d902      	bls.n	800387c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	73fb      	strb	r3, [r7, #15]
        break;
 800387a:	e005      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ef      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d168      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d113      	bne.n	80038bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003894:	4b35      	ldr	r3, [pc, #212]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	4b35      	ldr	r3, [pc, #212]	; (8003970 <RCCEx_PLLSAI2_Config+0x1dc>)
 800389a:	4013      	ands	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	0211      	lsls	r1, r2, #8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	06d2      	lsls	r2, r2, #27
 80038a8:	4311      	orrs	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6852      	ldr	r2, [r2, #4]
 80038ae:	3a01      	subs	r2, #1
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	430a      	orrs	r2, r1
 80038b4:	492d      	ldr	r1, [pc, #180]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	614b      	str	r3, [r1, #20]
 80038ba:	e02d      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d115      	bne.n	80038ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c2:	4b2a      	ldr	r3, [pc, #168]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	0211      	lsls	r1, r2, #8
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6912      	ldr	r2, [r2, #16]
 80038d4:	0852      	lsrs	r2, r2, #1
 80038d6:	3a01      	subs	r2, #1
 80038d8:	0552      	lsls	r2, r2, #21
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6852      	ldr	r2, [r2, #4]
 80038e0:	3a01      	subs	r2, #1
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	430a      	orrs	r2, r1
 80038e6:	4921      	ldr	r1, [pc, #132]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	614b      	str	r3, [r1, #20]
 80038ec:	e014      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <RCCEx_PLLSAI2_Config+0x1e4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	0211      	lsls	r1, r2, #8
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6952      	ldr	r2, [r2, #20]
 8003900:	0852      	lsrs	r2, r2, #1
 8003902:	3a01      	subs	r2, #1
 8003904:	0652      	lsls	r2, r2, #25
 8003906:	4311      	orrs	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6852      	ldr	r2, [r2, #4]
 800390c:	3a01      	subs	r2, #1
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	430a      	orrs	r2, r1
 8003912:	4916      	ldr	r1, [pc, #88]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a13      	ldr	r2, [pc, #76]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe f8ca 	bl	8001abc <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800392c:	f7fe f8c6 	bl	8001abc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
          break;
 800393e:	e005      	b.n	800394c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <RCCEx_PLLSAI2_Config+0x1d8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	07ff800f 	.word	0x07ff800f
 8003974:	ff9f800f 	.word	0xff9f800f
 8003978:	f9ff800f 	.word	0xf9ff800f

0800397c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e042      	b.n	8003a14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd fe77 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8c4 	bl	8003b4c <UART_SetConfig>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e022      	b.n	8003a14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fbb4 	bl	8004144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fc3b 	bl	8004288 <UART_CheckIdleState>
 8003a12:	4603      	mov	r3, r0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	f040 8084 	bne.w	8003b40 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Transmit+0x28>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e07c      	b.n	8003b42 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Transmit+0x3a>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e075      	b.n	8003b42 <HAL_UART_Transmit+0x126>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2221      	movs	r2, #33	; 0x21
 8003a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe f825 	bl	8001abc <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x84>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ab0:	e02d      	b.n	8003b0e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fc2e 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e03a      	b.n	8003b42 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ade:	b292      	uxth	r2, r2
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e008      	b.n	8003afc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b292      	uxth	r2, r2
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1cb      	bne.n	8003ab2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2140      	movs	r1, #64	; 0x40
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fbfa 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e006      	b.n	8003b42 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b08c      	sub	sp, #48	; 0x30
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4baa      	ldr	r3, [pc, #680]	; (8003e24 <UART_SetConfig+0x2d8>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a9f      	ldr	r2, [pc, #636]	; (8003e28 <UART_SetConfig+0x2dc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f023 010f 	bic.w	r1, r3, #15
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a90      	ldr	r2, [pc, #576]	; (8003e2c <UART_SetConfig+0x2e0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d125      	bne.n	8003c3c <UART_SetConfig+0xf0>
 8003bf0:	4b8f      	ldr	r3, [pc, #572]	; (8003e30 <UART_SetConfig+0x2e4>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d81a      	bhi.n	8003c34 <UART_SetConfig+0xe8>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0xb8>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c25 	.word	0x08003c25
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c2d 	.word	0x08003c2d
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e116      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c22:	e112      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003c24:	2304      	movs	r3, #4
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2a:	e10e      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c32:	e10a      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003c34:	2310      	movs	r3, #16
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3a:	e106      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7c      	ldr	r2, [pc, #496]	; (8003e34 <UART_SetConfig+0x2e8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d138      	bne.n	8003cb8 <UART_SetConfig+0x16c>
 8003c46:	4b7a      	ldr	r3, [pc, #488]	; (8003e30 <UART_SetConfig+0x2e4>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	d82d      	bhi.n	8003cb0 <UART_SetConfig+0x164>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <UART_SetConfig+0x110>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003cb1 	.word	0x08003cb1
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb1 	.word	0x08003cb1
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	08003cb1 	.word	0x08003cb1
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	08003ca9 	.word	0x08003ca9
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e0d8      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e0d4      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e0d0      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e0cc      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e0c8      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a5e      	ldr	r2, [pc, #376]	; (8003e38 <UART_SetConfig+0x2ec>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d125      	bne.n	8003d0e <UART_SetConfig+0x1c2>
 8003cc2:	4b5b      	ldr	r3, [pc, #364]	; (8003e30 <UART_SetConfig+0x2e4>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d016      	beq.n	8003cfe <UART_SetConfig+0x1b2>
 8003cd0:	2b30      	cmp	r3, #48	; 0x30
 8003cd2:	d818      	bhi.n	8003d06 <UART_SetConfig+0x1ba>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d00a      	beq.n	8003cee <UART_SetConfig+0x1a2>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d814      	bhi.n	8003d06 <UART_SetConfig+0x1ba>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <UART_SetConfig+0x19a>
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d008      	beq.n	8003cf6 <UART_SetConfig+0x1aa>
 8003ce4:	e00f      	b.n	8003d06 <UART_SetConfig+0x1ba>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cec:	e0ad      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf4:	e0a9      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfc:	e0a5      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d04:	e0a1      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d06:	2310      	movs	r3, #16
 8003d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0c:	e09d      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <UART_SetConfig+0x2f0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d125      	bne.n	8003d64 <UART_SetConfig+0x218>
 8003d18:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <UART_SetConfig+0x2e4>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d22:	2bc0      	cmp	r3, #192	; 0xc0
 8003d24:	d016      	beq.n	8003d54 <UART_SetConfig+0x208>
 8003d26:	2bc0      	cmp	r3, #192	; 0xc0
 8003d28:	d818      	bhi.n	8003d5c <UART_SetConfig+0x210>
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d00a      	beq.n	8003d44 <UART_SetConfig+0x1f8>
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d814      	bhi.n	8003d5c <UART_SetConfig+0x210>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <UART_SetConfig+0x1f0>
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d008      	beq.n	8003d4c <UART_SetConfig+0x200>
 8003d3a:	e00f      	b.n	8003d5c <UART_SetConfig+0x210>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d42:	e082      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4a:	e07e      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d52:	e07a      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d54:	2308      	movs	r3, #8
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5a:	e076      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d62:	e072      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a35      	ldr	r2, [pc, #212]	; (8003e40 <UART_SetConfig+0x2f4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d12a      	bne.n	8003dc4 <UART_SetConfig+0x278>
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <UART_SetConfig+0x2e4>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7c:	d01a      	beq.n	8003db4 <UART_SetConfig+0x268>
 8003d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d82:	d81b      	bhi.n	8003dbc <UART_SetConfig+0x270>
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d88:	d00c      	beq.n	8003da4 <UART_SetConfig+0x258>
 8003d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8e:	d815      	bhi.n	8003dbc <UART_SetConfig+0x270>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <UART_SetConfig+0x250>
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d98:	d008      	beq.n	8003dac <UART_SetConfig+0x260>
 8003d9a:	e00f      	b.n	8003dbc <UART_SetConfig+0x270>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e052      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003daa:	e04e      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db2:	e04a      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dba:	e046      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc2:	e042      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <UART_SetConfig+0x2dc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d13a      	bne.n	8003e44 <UART_SetConfig+0x2f8>
 8003dce:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <UART_SetConfig+0x2e4>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ddc:	d01a      	beq.n	8003e14 <UART_SetConfig+0x2c8>
 8003dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003de2:	d81b      	bhi.n	8003e1c <UART_SetConfig+0x2d0>
 8003de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de8:	d00c      	beq.n	8003e04 <UART_SetConfig+0x2b8>
 8003dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dee:	d815      	bhi.n	8003e1c <UART_SetConfig+0x2d0>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <UART_SetConfig+0x2b0>
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d008      	beq.n	8003e0c <UART_SetConfig+0x2c0>
 8003dfa:	e00f      	b.n	8003e1c <UART_SetConfig+0x2d0>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e02:	e022      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0a:	e01e      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e12:	e01a      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1a:	e016      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e22:	e012      	b.n	8003e4a <UART_SetConfig+0x2fe>
 8003e24:	cfff69f3 	.word	0xcfff69f3
 8003e28:	40008000 	.word	0x40008000
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40004400 	.word	0x40004400
 8003e38:	40004800 	.word	0x40004800
 8003e3c:	40004c00 	.word	0x40004c00
 8003e40:	40005000 	.word	0x40005000
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4aae      	ldr	r2, [pc, #696]	; (8004108 <UART_SetConfig+0x5bc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	f040 8097 	bne.w	8003f84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d823      	bhi.n	8003ea6 <UART_SetConfig+0x35a>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0x318>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003ea7 	.word	0x08003ea7
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003ea7 	.word	0x08003ea7
 8003e74:	08003e97 	.word	0x08003e97
 8003e78:	08003ea7 	.word	0x08003ea7
 8003e7c:	08003ea7 	.word	0x08003ea7
 8003e80:	08003ea7 	.word	0x08003ea7
 8003e84:	08003e9f 	.word	0x08003e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7fe ff74 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e8e:	e010      	b.n	8003eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e90:	4b9e      	ldr	r3, [pc, #632]	; (800410c <UART_SetConfig+0x5c0>)
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e94:	e00d      	b.n	8003eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e96:	f7fe fed5 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e9c:	e009      	b.n	8003eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea4:	e005      	b.n	8003eb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8130 	beq.w	800411a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	4a94      	ldr	r2, [pc, #592]	; (8004110 <UART_SetConfig+0x5c4>)
 8003ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d305      	bcc.n	8003eea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d903      	bls.n	8003ef2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ef0:	e113      	b.n	800411a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	60fa      	str	r2, [r7, #12]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	4a84      	ldr	r2, [pc, #528]	; (8004110 <UART_SetConfig+0x5c4>)
 8003f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2200      	movs	r2, #0
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f14:	f7fc fe60 	bl	8000bd8 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	020b      	lsls	r3, r1, #8
 8003f2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f2e:	0202      	lsls	r2, r0, #8
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	6849      	ldr	r1, [r1, #4]
 8003f34:	0849      	lsrs	r1, r1, #1
 8003f36:	2000      	movs	r0, #0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	eb12 0804 	adds.w	r8, r2, r4
 8003f40:	eb43 0905 	adc.w	r9, r3, r5
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	469a      	mov	sl, r3
 8003f4c:	4693      	mov	fp, r2
 8003f4e:	4652      	mov	r2, sl
 8003f50:	465b      	mov	r3, fp
 8003f52:	4640      	mov	r0, r8
 8003f54:	4649      	mov	r1, r9
 8003f56:	f7fc fe3f 	bl	8000bd8 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4613      	mov	r3, r2
 8003f60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f68:	d308      	bcc.n	8003f7c <UART_SetConfig+0x430>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f70:	d204      	bcs.n	8003f7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a3a      	ldr	r2, [r7, #32]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	e0ce      	b.n	800411a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f82:	e0ca      	b.n	800411a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	d166      	bne.n	800405c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d827      	bhi.n	8003fe6 <UART_SetConfig+0x49a>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x450>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fd1 	.word	0x08003fd1
 8003fa8:	08003fe7 	.word	0x08003fe7
 8003fac:	08003fd7 	.word	0x08003fd7
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fe7 	.word	0x08003fe7
 8003fb8:	08003fe7 	.word	0x08003fe7
 8003fbc:	08003fdf 	.word	0x08003fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe fed8 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc6:	e014      	b.n	8003ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7fe feea 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fce:	e010      	b.n	8003ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd0:	4b4e      	ldr	r3, [pc, #312]	; (800410c <UART_SetConfig+0x5c0>)
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd4:	e00d      	b.n	8003ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7fe fe35 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fdc:	e009      	b.n	8003ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe4:	e005      	b.n	8003ff2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8090 	beq.w	800411a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	4a44      	ldr	r2, [pc, #272]	; (8004110 <UART_SetConfig+0x5c4>)
 8004000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004004:	461a      	mov	r2, r3
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	fbb3 f3f2 	udiv	r3, r3, r2
 800400c:	005a      	lsls	r2, r3, #1
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	441a      	add	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d916      	bls.n	8004054 <UART_SetConfig+0x508>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d212      	bcs.n	8004054 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f023 030f 	bic.w	r3, r3, #15
 8004036:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	b29a      	uxth	r2, r3
 8004044:	8bfb      	ldrh	r3, [r7, #30]
 8004046:	4313      	orrs	r3, r2
 8004048:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	8bfa      	ldrh	r2, [r7, #30]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	e062      	b.n	800411a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800405a:	e05e      	b.n	800411a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004060:	2b08      	cmp	r3, #8
 8004062:	d828      	bhi.n	80040b6 <UART_SetConfig+0x56a>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x520>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fe70 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004096:	e014      	b.n	80040c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe fe82 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800409e:	e010      	b.n	80040c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <UART_SetConfig+0x5c0>)
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040a4:	e00d      	b.n	80040c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7fe fdcd 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 80040aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ac:	e009      	b.n	80040c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b4:	e005      	b.n	80040c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040c0:	bf00      	nop
    }

    if (pclk != 0U)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d028      	beq.n	800411a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	4a10      	ldr	r2, [pc, #64]	; (8004110 <UART_SetConfig+0x5c4>)
 80040ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	441a      	add	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d910      	bls.n	8004114 <UART_SetConfig+0x5c8>
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d20c      	bcs.n	8004114 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e009      	b.n	800411a <UART_SetConfig+0x5ce>
 8004106:	bf00      	nop
 8004108:	40008000 	.word	0x40008000
 800410c:	00f42400 	.word	0x00f42400
 8004110:	08007358 	.word	0x08007358
      }
      else
      {
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2201      	movs	r2, #1
 800411e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2201      	movs	r2, #1
 8004126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004136:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800413a:	4618      	mov	r0, r3
 800413c:	3730      	adds	r7, #48	; 0x30
 800413e:	46bd      	mov	sp, r7
 8004140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01a      	beq.n	800425a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004242:	d10a      	bne.n	800425a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004298:	f7fd fc10 	bl	8001abc <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d10e      	bne.n	80042ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f82f 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e025      	b.n	8004316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d10e      	bne.n	80042f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f819 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e00f      	b.n	8004316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b09c      	sub	sp, #112	; 0x70
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	e0a9      	b.n	8004484 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	f000 80a5 	beq.w	8004484 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7fd fbbf 	bl	8001abc <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <UART_WaitOnFlagUntilTimeout+0x32>
 800434a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434c:	2b00      	cmp	r3, #0
 800434e:	d140      	bne.n	80043d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004364:	667b      	str	r3, [r7, #100]	; 0x64
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004370:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800437c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e6      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3308      	adds	r3, #8
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	663b      	str	r3, [r7, #96]	; 0x60
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e069      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d051      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ee:	d149      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800440e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
 800441a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	613b      	str	r3, [r7, #16]
   return(result);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	66bb      	str	r3, [r7, #104]	; 0x68
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800444c:	623a      	str	r2, [r7, #32]
 800444e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	61bb      	str	r3, [r7, #24]
   return(result);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e010      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	429a      	cmp	r2, r3
 80044a0:	f43f af46 	beq.w	8004330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3770      	adds	r7, #112	; 0x70
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e027      	b.n	8004514 <HAL_UARTEx_DisableFifoMode+0x66>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2224      	movs	r2, #36	; 0x24
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004534:	2302      	movs	r3, #2
 8004536:	e02d      	b.n	8004594 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f84f 	bl	8004618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e02d      	b.n	8004610 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2224      	movs	r2, #36	; 0x24
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f811 	bl	8004618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004638:	e031      	b.n	800469e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800463a:	2308      	movs	r3, #8
 800463c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800463e:	2308      	movs	r3, #8
 8004640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	0e5b      	lsrs	r3, r3, #25
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	0f5b      	lsrs	r3, r3, #29
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	7b3a      	ldrb	r2, [r7, #12]
 8004666:	4911      	ldr	r1, [pc, #68]	; (80046ac <UARTEx_SetNbDataToProcess+0x94>)
 8004668:	5c8a      	ldrb	r2, [r1, r2]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800466e:	7b3a      	ldrb	r2, [r7, #12]
 8004670:	490f      	ldr	r1, [pc, #60]	; (80046b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004674:	fb93 f3f2 	sdiv	r3, r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	7b7a      	ldrb	r2, [r7, #13]
 8004684:	4909      	ldr	r1, [pc, #36]	; (80046ac <UARTEx_SetNbDataToProcess+0x94>)
 8004686:	5c8a      	ldrb	r2, [r1, r2]
 8004688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800468c:	7b7a      	ldrb	r2, [r7, #13]
 800468e:	4908      	ldr	r1, [pc, #32]	; (80046b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004692:	fb93 f3f2 	sdiv	r3, r3, r2
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	08007370 	.word	0x08007370
 80046b0:	08007378 	.word	0x08007378

080046b4 <atoi>:
 80046b4:	220a      	movs	r2, #10
 80046b6:	2100      	movs	r1, #0
 80046b8:	f000 bd4a 	b.w	8005150 <strtol>

080046bc <__errno>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	; (80046c4 <__errno+0x8>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <exit>:
 80046c8:	b508      	push	{r3, lr}
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <exit+0x20>)
 80046cc:	4604      	mov	r4, r0
 80046ce:	b113      	cbz	r3, 80046d6 <exit+0xe>
 80046d0:	2100      	movs	r1, #0
 80046d2:	f3af 8000 	nop.w
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <exit+0x24>)
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80046dc:	b103      	cbz	r3, 80046e0 <exit+0x18>
 80046de:	4798      	blx	r3
 80046e0:	4620      	mov	r0, r4
 80046e2:	f7fd f899 	bl	8001818 <_exit>
 80046e6:	bf00      	nop
 80046e8:	00000000 	.word	0x00000000
 80046ec:	08007380 	.word	0x08007380

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4d0d      	ldr	r5, [pc, #52]	; (8004728 <__libc_init_array+0x38>)
 80046f4:	4c0d      	ldr	r4, [pc, #52]	; (800472c <__libc_init_array+0x3c>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	2600      	movs	r6, #0
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	4d0b      	ldr	r5, [pc, #44]	; (8004730 <__libc_init_array+0x40>)
 8004702:	4c0c      	ldr	r4, [pc, #48]	; (8004734 <__libc_init_array+0x44>)
 8004704:	f002 fddc 	bl	80072c0 <_init>
 8004708:	1b64      	subs	r4, r4, r5
 800470a:	10a4      	asrs	r4, r4, #2
 800470c:	2600      	movs	r6, #0
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	08007764 	.word	0x08007764
 800472c:	08007764 	.word	0x08007764
 8004730:	08007764 	.word	0x08007764
 8004734:	08007768 	.word	0x08007768

08004738 <memset>:
 8004738:	4402      	add	r2, r0
 800473a:	4603      	mov	r3, r0
 800473c:	4293      	cmp	r3, r2
 800473e:	d100      	bne.n	8004742 <memset+0xa>
 8004740:	4770      	bx	lr
 8004742:	f803 1b01 	strb.w	r1, [r3], #1
 8004746:	e7f9      	b.n	800473c <memset+0x4>

08004748 <__cvt>:
 8004748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800474c:	ec55 4b10 	vmov	r4, r5, d0
 8004750:	2d00      	cmp	r5, #0
 8004752:	460e      	mov	r6, r1
 8004754:	4619      	mov	r1, r3
 8004756:	462b      	mov	r3, r5
 8004758:	bfbb      	ittet	lt
 800475a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800475e:	461d      	movlt	r5, r3
 8004760:	2300      	movge	r3, #0
 8004762:	232d      	movlt	r3, #45	; 0x2d
 8004764:	700b      	strb	r3, [r1, #0]
 8004766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004768:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800476c:	4691      	mov	r9, r2
 800476e:	f023 0820 	bic.w	r8, r3, #32
 8004772:	bfbc      	itt	lt
 8004774:	4622      	movlt	r2, r4
 8004776:	4614      	movlt	r4, r2
 8004778:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800477c:	d005      	beq.n	800478a <__cvt+0x42>
 800477e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004782:	d100      	bne.n	8004786 <__cvt+0x3e>
 8004784:	3601      	adds	r6, #1
 8004786:	2102      	movs	r1, #2
 8004788:	e000      	b.n	800478c <__cvt+0x44>
 800478a:	2103      	movs	r1, #3
 800478c:	ab03      	add	r3, sp, #12
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	ab02      	add	r3, sp, #8
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	ec45 4b10 	vmov	d0, r4, r5
 8004798:	4653      	mov	r3, sl
 800479a:	4632      	mov	r2, r6
 800479c:	f000 fd70 	bl	8005280 <_dtoa_r>
 80047a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047a4:	4607      	mov	r7, r0
 80047a6:	d102      	bne.n	80047ae <__cvt+0x66>
 80047a8:	f019 0f01 	tst.w	r9, #1
 80047ac:	d022      	beq.n	80047f4 <__cvt+0xac>
 80047ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047b2:	eb07 0906 	add.w	r9, r7, r6
 80047b6:	d110      	bne.n	80047da <__cvt+0x92>
 80047b8:	783b      	ldrb	r3, [r7, #0]
 80047ba:	2b30      	cmp	r3, #48	; 0x30
 80047bc:	d10a      	bne.n	80047d4 <__cvt+0x8c>
 80047be:	2200      	movs	r2, #0
 80047c0:	2300      	movs	r3, #0
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f7fc f997 	bl	8000af8 <__aeabi_dcmpeq>
 80047ca:	b918      	cbnz	r0, 80047d4 <__cvt+0x8c>
 80047cc:	f1c6 0601 	rsb	r6, r6, #1
 80047d0:	f8ca 6000 	str.w	r6, [sl]
 80047d4:	f8da 3000 	ldr.w	r3, [sl]
 80047d8:	4499      	add	r9, r3
 80047da:	2200      	movs	r2, #0
 80047dc:	2300      	movs	r3, #0
 80047de:	4620      	mov	r0, r4
 80047e0:	4629      	mov	r1, r5
 80047e2:	f7fc f989 	bl	8000af8 <__aeabi_dcmpeq>
 80047e6:	b108      	cbz	r0, 80047ec <__cvt+0xa4>
 80047e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80047ec:	2230      	movs	r2, #48	; 0x30
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	454b      	cmp	r3, r9
 80047f2:	d307      	bcc.n	8004804 <__cvt+0xbc>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f8:	1bdb      	subs	r3, r3, r7
 80047fa:	4638      	mov	r0, r7
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	b004      	add	sp, #16
 8004800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	9103      	str	r1, [sp, #12]
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e7f0      	b.n	80047ee <__cvt+0xa6>

0800480c <__exponent>:
 800480c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800480e:	4603      	mov	r3, r0
 8004810:	2900      	cmp	r1, #0
 8004812:	bfb8      	it	lt
 8004814:	4249      	neglt	r1, r1
 8004816:	f803 2b02 	strb.w	r2, [r3], #2
 800481a:	bfb4      	ite	lt
 800481c:	222d      	movlt	r2, #45	; 0x2d
 800481e:	222b      	movge	r2, #43	; 0x2b
 8004820:	2909      	cmp	r1, #9
 8004822:	7042      	strb	r2, [r0, #1]
 8004824:	dd2a      	ble.n	800487c <__exponent+0x70>
 8004826:	f10d 0407 	add.w	r4, sp, #7
 800482a:	46a4      	mov	ip, r4
 800482c:	270a      	movs	r7, #10
 800482e:	46a6      	mov	lr, r4
 8004830:	460a      	mov	r2, r1
 8004832:	fb91 f6f7 	sdiv	r6, r1, r7
 8004836:	fb07 1516 	mls	r5, r7, r6, r1
 800483a:	3530      	adds	r5, #48	; 0x30
 800483c:	2a63      	cmp	r2, #99	; 0x63
 800483e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004842:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004846:	4631      	mov	r1, r6
 8004848:	dcf1      	bgt.n	800482e <__exponent+0x22>
 800484a:	3130      	adds	r1, #48	; 0x30
 800484c:	f1ae 0502 	sub.w	r5, lr, #2
 8004850:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004854:	1c44      	adds	r4, r0, #1
 8004856:	4629      	mov	r1, r5
 8004858:	4561      	cmp	r1, ip
 800485a:	d30a      	bcc.n	8004872 <__exponent+0x66>
 800485c:	f10d 0209 	add.w	r2, sp, #9
 8004860:	eba2 020e 	sub.w	r2, r2, lr
 8004864:	4565      	cmp	r5, ip
 8004866:	bf88      	it	hi
 8004868:	2200      	movhi	r2, #0
 800486a:	4413      	add	r3, r2
 800486c:	1a18      	subs	r0, r3, r0
 800486e:	b003      	add	sp, #12
 8004870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004876:	f804 2f01 	strb.w	r2, [r4, #1]!
 800487a:	e7ed      	b.n	8004858 <__exponent+0x4c>
 800487c:	2330      	movs	r3, #48	; 0x30
 800487e:	3130      	adds	r1, #48	; 0x30
 8004880:	7083      	strb	r3, [r0, #2]
 8004882:	70c1      	strb	r1, [r0, #3]
 8004884:	1d03      	adds	r3, r0, #4
 8004886:	e7f1      	b.n	800486c <__exponent+0x60>

08004888 <_printf_float>:
 8004888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	ed2d 8b02 	vpush	{d8}
 8004890:	b08d      	sub	sp, #52	; 0x34
 8004892:	460c      	mov	r4, r1
 8004894:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004898:	4616      	mov	r6, r2
 800489a:	461f      	mov	r7, r3
 800489c:	4605      	mov	r5, r0
 800489e:	f001 fbd3 	bl	8006048 <_localeconv_r>
 80048a2:	f8d0 a000 	ldr.w	sl, [r0]
 80048a6:	4650      	mov	r0, sl
 80048a8:	f7fb fcaa 	bl	8000200 <strlen>
 80048ac:	2300      	movs	r3, #0
 80048ae:	930a      	str	r3, [sp, #40]	; 0x28
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	9305      	str	r3, [sp, #20]
 80048b4:	f8d8 3000 	ldr.w	r3, [r8]
 80048b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048bc:	3307      	adds	r3, #7
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	f103 0208 	add.w	r2, r3, #8
 80048c6:	f8c8 2000 	str.w	r2, [r8]
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048da:	9307      	str	r3, [sp, #28]
 80048dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80048e0:	ee08 0a10 	vmov	s16, r0
 80048e4:	4b9f      	ldr	r3, [pc, #636]	; (8004b64 <_printf_float+0x2dc>)
 80048e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048ea:	f04f 32ff 	mov.w	r2, #4294967295
 80048ee:	f7fc f935 	bl	8000b5c <__aeabi_dcmpun>
 80048f2:	bb88      	cbnz	r0, 8004958 <_printf_float+0xd0>
 80048f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f8:	4b9a      	ldr	r3, [pc, #616]	; (8004b64 <_printf_float+0x2dc>)
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	f7fc f90f 	bl	8000b20 <__aeabi_dcmple>
 8004902:	bb48      	cbnz	r0, 8004958 <_printf_float+0xd0>
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	4640      	mov	r0, r8
 800490a:	4649      	mov	r1, r9
 800490c:	f7fc f8fe 	bl	8000b0c <__aeabi_dcmplt>
 8004910:	b110      	cbz	r0, 8004918 <_printf_float+0x90>
 8004912:	232d      	movs	r3, #45	; 0x2d
 8004914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004918:	4b93      	ldr	r3, [pc, #588]	; (8004b68 <_printf_float+0x2e0>)
 800491a:	4894      	ldr	r0, [pc, #592]	; (8004b6c <_printf_float+0x2e4>)
 800491c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004920:	bf94      	ite	ls
 8004922:	4698      	movls	r8, r3
 8004924:	4680      	movhi	r8, r0
 8004926:	2303      	movs	r3, #3
 8004928:	6123      	str	r3, [r4, #16]
 800492a:	9b05      	ldr	r3, [sp, #20]
 800492c:	f023 0204 	bic.w	r2, r3, #4
 8004930:	6022      	str	r2, [r4, #0]
 8004932:	f04f 0900 	mov.w	r9, #0
 8004936:	9700      	str	r7, [sp, #0]
 8004938:	4633      	mov	r3, r6
 800493a:	aa0b      	add	r2, sp, #44	; 0x2c
 800493c:	4621      	mov	r1, r4
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f9d8 	bl	8004cf4 <_printf_common>
 8004944:	3001      	adds	r0, #1
 8004946:	f040 8090 	bne.w	8004a6a <_printf_float+0x1e2>
 800494a:	f04f 30ff 	mov.w	r0, #4294967295
 800494e:	b00d      	add	sp, #52	; 0x34
 8004950:	ecbd 8b02 	vpop	{d8}
 8004954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	4640      	mov	r0, r8
 800495e:	4649      	mov	r1, r9
 8004960:	f7fc f8fc 	bl	8000b5c <__aeabi_dcmpun>
 8004964:	b140      	cbz	r0, 8004978 <_printf_float+0xf0>
 8004966:	464b      	mov	r3, r9
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfbc      	itt	lt
 800496c:	232d      	movlt	r3, #45	; 0x2d
 800496e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004972:	487f      	ldr	r0, [pc, #508]	; (8004b70 <_printf_float+0x2e8>)
 8004974:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <_printf_float+0x2ec>)
 8004976:	e7d1      	b.n	800491c <_printf_float+0x94>
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800497e:	9206      	str	r2, [sp, #24]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	d13f      	bne.n	8004a04 <_printf_float+0x17c>
 8004984:	2306      	movs	r3, #6
 8004986:	6063      	str	r3, [r4, #4]
 8004988:	9b05      	ldr	r3, [sp, #20]
 800498a:	6861      	ldr	r1, [r4, #4]
 800498c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004990:	2300      	movs	r3, #0
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	ab0a      	add	r3, sp, #40	; 0x28
 8004996:	e9cd b301 	strd	fp, r3, [sp, #4]
 800499a:	ab09      	add	r3, sp, #36	; 0x24
 800499c:	ec49 8b10 	vmov	d0, r8, r9
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049a8:	4628      	mov	r0, r5
 80049aa:	f7ff fecd 	bl	8004748 <__cvt>
 80049ae:	9b06      	ldr	r3, [sp, #24]
 80049b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049b2:	2b47      	cmp	r3, #71	; 0x47
 80049b4:	4680      	mov	r8, r0
 80049b6:	d108      	bne.n	80049ca <_printf_float+0x142>
 80049b8:	1cc8      	adds	r0, r1, #3
 80049ba:	db02      	blt.n	80049c2 <_printf_float+0x13a>
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	4299      	cmp	r1, r3
 80049c0:	dd41      	ble.n	8004a46 <_printf_float+0x1be>
 80049c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80049c6:	fa5f fb8b 	uxtb.w	fp, fp
 80049ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049ce:	d820      	bhi.n	8004a12 <_printf_float+0x18a>
 80049d0:	3901      	subs	r1, #1
 80049d2:	465a      	mov	r2, fp
 80049d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049d8:	9109      	str	r1, [sp, #36]	; 0x24
 80049da:	f7ff ff17 	bl	800480c <__exponent>
 80049de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049e0:	1813      	adds	r3, r2, r0
 80049e2:	2a01      	cmp	r2, #1
 80049e4:	4681      	mov	r9, r0
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	dc02      	bgt.n	80049f0 <_printf_float+0x168>
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	07d2      	lsls	r2, r2, #31
 80049ee:	d501      	bpl.n	80049f4 <_printf_float+0x16c>
 80049f0:	3301      	adds	r3, #1
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d09c      	beq.n	8004936 <_printf_float+0xae>
 80049fc:	232d      	movs	r3, #45	; 0x2d
 80049fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a02:	e798      	b.n	8004936 <_printf_float+0xae>
 8004a04:	9a06      	ldr	r2, [sp, #24]
 8004a06:	2a47      	cmp	r2, #71	; 0x47
 8004a08:	d1be      	bne.n	8004988 <_printf_float+0x100>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1bc      	bne.n	8004988 <_printf_float+0x100>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e7b9      	b.n	8004986 <_printf_float+0xfe>
 8004a12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a16:	d118      	bne.n	8004a4a <_printf_float+0x1c2>
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	dd0b      	ble.n	8004a36 <_printf_float+0x1ae>
 8004a1e:	6121      	str	r1, [r4, #16]
 8004a20:	b913      	cbnz	r3, 8004a28 <_printf_float+0x1a0>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	07d0      	lsls	r0, r2, #31
 8004a26:	d502      	bpl.n	8004a2e <_printf_float+0x1a6>
 8004a28:	3301      	adds	r3, #1
 8004a2a:	440b      	add	r3, r1
 8004a2c:	6123      	str	r3, [r4, #16]
 8004a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a30:	f04f 0900 	mov.w	r9, #0
 8004a34:	e7de      	b.n	80049f4 <_printf_float+0x16c>
 8004a36:	b913      	cbnz	r3, 8004a3e <_printf_float+0x1b6>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	07d2      	lsls	r2, r2, #31
 8004a3c:	d501      	bpl.n	8004a42 <_printf_float+0x1ba>
 8004a3e:	3302      	adds	r3, #2
 8004a40:	e7f4      	b.n	8004a2c <_printf_float+0x1a4>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e7f2      	b.n	8004a2c <_printf_float+0x1a4>
 8004a46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	db05      	blt.n	8004a5c <_printf_float+0x1d4>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	6121      	str	r1, [r4, #16]
 8004a54:	07d8      	lsls	r0, r3, #31
 8004a56:	d5ea      	bpl.n	8004a2e <_printf_float+0x1a6>
 8004a58:	1c4b      	adds	r3, r1, #1
 8004a5a:	e7e7      	b.n	8004a2c <_printf_float+0x1a4>
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	bfd4      	ite	le
 8004a60:	f1c1 0202 	rsble	r2, r1, #2
 8004a64:	2201      	movgt	r2, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	e7e0      	b.n	8004a2c <_printf_float+0x1a4>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	055a      	lsls	r2, r3, #21
 8004a6e:	d407      	bmi.n	8004a80 <_printf_float+0x1f8>
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	4642      	mov	r2, r8
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d12c      	bne.n	8004ad8 <_printf_float+0x250>
 8004a7e:	e764      	b.n	800494a <_printf_float+0xc2>
 8004a80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a84:	f240 80e0 	bls.w	8004c48 <_printf_float+0x3c0>
 8004a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f7fc f832 	bl	8000af8 <__aeabi_dcmpeq>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d034      	beq.n	8004b02 <_printf_float+0x27a>
 8004a98:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <_printf_float+0x2f0>)
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f af51 	beq.w	800494a <_printf_float+0xc2>
 8004aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aac:	429a      	cmp	r2, r3
 8004aae:	db02      	blt.n	8004ab6 <_printf_float+0x22e>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	07d8      	lsls	r0, r3, #31
 8004ab4:	d510      	bpl.n	8004ad8 <_printf_float+0x250>
 8004ab6:	ee18 3a10 	vmov	r3, s16
 8004aba:	4652      	mov	r2, sl
 8004abc:	4631      	mov	r1, r6
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b8      	blx	r7
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f43f af41 	beq.w	800494a <_printf_float+0xc2>
 8004ac8:	f04f 0800 	mov.w	r8, #0
 8004acc:	f104 091a 	add.w	r9, r4, #26
 8004ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4543      	cmp	r3, r8
 8004ad6:	dc09      	bgt.n	8004aec <_printf_float+0x264>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	f100 8105 	bmi.w	8004cea <_printf_float+0x462>
 8004ae0:	68e0      	ldr	r0, [r4, #12]
 8004ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	bfb8      	it	lt
 8004ae8:	4618      	movlt	r0, r3
 8004aea:	e730      	b.n	800494e <_printf_float+0xc6>
 8004aec:	2301      	movs	r3, #1
 8004aee:	464a      	mov	r2, r9
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f af27 	beq.w	800494a <_printf_float+0xc2>
 8004afc:	f108 0801 	add.w	r8, r8, #1
 8004b00:	e7e6      	b.n	8004ad0 <_printf_float+0x248>
 8004b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	dc39      	bgt.n	8004b7c <_printf_float+0x2f4>
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <_printf_float+0x2f0>)
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4628      	mov	r0, r5
 8004b10:	47b8      	blx	r7
 8004b12:	3001      	adds	r0, #1
 8004b14:	f43f af19 	beq.w	800494a <_printf_float+0xc2>
 8004b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d102      	bne.n	8004b26 <_printf_float+0x29e>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	07d9      	lsls	r1, r3, #31
 8004b24:	d5d8      	bpl.n	8004ad8 <_printf_float+0x250>
 8004b26:	ee18 3a10 	vmov	r3, s16
 8004b2a:	4652      	mov	r2, sl
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	f43f af09 	beq.w	800494a <_printf_float+0xc2>
 8004b38:	f04f 0900 	mov.w	r9, #0
 8004b3c:	f104 0a1a 	add.w	sl, r4, #26
 8004b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b42:	425b      	negs	r3, r3
 8004b44:	454b      	cmp	r3, r9
 8004b46:	dc01      	bgt.n	8004b4c <_printf_float+0x2c4>
 8004b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b4a:	e792      	b.n	8004a72 <_printf_float+0x1ea>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4631      	mov	r1, r6
 8004b52:	4628      	mov	r0, r5
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	f43f aef7 	beq.w	800494a <_printf_float+0xc2>
 8004b5c:	f109 0901 	add.w	r9, r9, #1
 8004b60:	e7ee      	b.n	8004b40 <_printf_float+0x2b8>
 8004b62:	bf00      	nop
 8004b64:	7fefffff 	.word	0x7fefffff
 8004b68:	08007384 	.word	0x08007384
 8004b6c:	08007388 	.word	0x08007388
 8004b70:	08007390 	.word	0x08007390
 8004b74:	0800738c 	.word	0x0800738c
 8004b78:	08007394 	.word	0x08007394
 8004b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b80:	429a      	cmp	r2, r3
 8004b82:	bfa8      	it	ge
 8004b84:	461a      	movge	r2, r3
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	4691      	mov	r9, r2
 8004b8a:	dc37      	bgt.n	8004bfc <_printf_float+0x374>
 8004b8c:	f04f 0b00 	mov.w	fp, #0
 8004b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b94:	f104 021a 	add.w	r2, r4, #26
 8004b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b9a:	9305      	str	r3, [sp, #20]
 8004b9c:	eba3 0309 	sub.w	r3, r3, r9
 8004ba0:	455b      	cmp	r3, fp
 8004ba2:	dc33      	bgt.n	8004c0c <_printf_float+0x384>
 8004ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	db3b      	blt.n	8004c24 <_printf_float+0x39c>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	07da      	lsls	r2, r3, #31
 8004bb0:	d438      	bmi.n	8004c24 <_printf_float+0x39c>
 8004bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb4:	9a05      	ldr	r2, [sp, #20]
 8004bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bb8:	1a9a      	subs	r2, r3, r2
 8004bba:	eba3 0901 	sub.w	r9, r3, r1
 8004bbe:	4591      	cmp	r9, r2
 8004bc0:	bfa8      	it	ge
 8004bc2:	4691      	movge	r9, r2
 8004bc4:	f1b9 0f00 	cmp.w	r9, #0
 8004bc8:	dc35      	bgt.n	8004c36 <_printf_float+0x3ae>
 8004bca:	f04f 0800 	mov.w	r8, #0
 8004bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bd2:	f104 0a1a 	add.w	sl, r4, #26
 8004bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	eba3 0309 	sub.w	r3, r3, r9
 8004be0:	4543      	cmp	r3, r8
 8004be2:	f77f af79 	ble.w	8004ad8 <_printf_float+0x250>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4652      	mov	r2, sl
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b8      	blx	r7
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	f43f aeaa 	beq.w	800494a <_printf_float+0xc2>
 8004bf6:	f108 0801 	add.w	r8, r8, #1
 8004bfa:	e7ec      	b.n	8004bd6 <_printf_float+0x34e>
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4642      	mov	r2, r8
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	d1c0      	bne.n	8004b8c <_printf_float+0x304>
 8004c0a:	e69e      	b.n	800494a <_printf_float+0xc2>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	9205      	str	r2, [sp, #20]
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f ae97 	beq.w	800494a <_printf_float+0xc2>
 8004c1c:	9a05      	ldr	r2, [sp, #20]
 8004c1e:	f10b 0b01 	add.w	fp, fp, #1
 8004c22:	e7b9      	b.n	8004b98 <_printf_float+0x310>
 8004c24:	ee18 3a10 	vmov	r3, s16
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	d1be      	bne.n	8004bb2 <_printf_float+0x32a>
 8004c34:	e689      	b.n	800494a <_printf_float+0xc2>
 8004c36:	9a05      	ldr	r2, [sp, #20]
 8004c38:	464b      	mov	r3, r9
 8004c3a:	4442      	add	r2, r8
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d1c1      	bne.n	8004bca <_printf_float+0x342>
 8004c46:	e680      	b.n	800494a <_printf_float+0xc2>
 8004c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c4a:	2a01      	cmp	r2, #1
 8004c4c:	dc01      	bgt.n	8004c52 <_printf_float+0x3ca>
 8004c4e:	07db      	lsls	r3, r3, #31
 8004c50:	d538      	bpl.n	8004cc4 <_printf_float+0x43c>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4642      	mov	r2, r8
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f ae74 	beq.w	800494a <_printf_float+0xc2>
 8004c62:	ee18 3a10 	vmov	r3, s16
 8004c66:	4652      	mov	r2, sl
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f ae6b 	beq.w	800494a <_printf_float+0xc2>
 8004c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f7fb ff3c 	bl	8000af8 <__aeabi_dcmpeq>
 8004c80:	b9d8      	cbnz	r0, 8004cba <_printf_float+0x432>
 8004c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c84:	f108 0201 	add.w	r2, r8, #1
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	d10e      	bne.n	8004cb2 <_printf_float+0x42a>
 8004c94:	e659      	b.n	800494a <_printf_float+0xc2>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4652      	mov	r2, sl
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae52 	beq.w	800494a <_printf_float+0xc2>
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	4543      	cmp	r3, r8
 8004cb0:	dcf1      	bgt.n	8004c96 <_printf_float+0x40e>
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cb8:	e6dc      	b.n	8004a74 <_printf_float+0x1ec>
 8004cba:	f04f 0800 	mov.w	r8, #0
 8004cbe:	f104 0a1a 	add.w	sl, r4, #26
 8004cc2:	e7f2      	b.n	8004caa <_printf_float+0x422>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	e7df      	b.n	8004c8a <_printf_float+0x402>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	464a      	mov	r2, r9
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f ae38 	beq.w	800494a <_printf_float+0xc2>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	68e3      	ldr	r3, [r4, #12]
 8004ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ce2:	1a5b      	subs	r3, r3, r1
 8004ce4:	4543      	cmp	r3, r8
 8004ce6:	dcf0      	bgt.n	8004cca <_printf_float+0x442>
 8004ce8:	e6fa      	b.n	8004ae0 <_printf_float+0x258>
 8004cea:	f04f 0800 	mov.w	r8, #0
 8004cee:	f104 0919 	add.w	r9, r4, #25
 8004cf2:	e7f4      	b.n	8004cde <_printf_float+0x456>

08004cf4 <_printf_common>:
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	4699      	mov	r9, r3
 8004cfc:	688a      	ldr	r2, [r1, #8]
 8004cfe:	690b      	ldr	r3, [r1, #16]
 8004d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfb8      	it	lt
 8004d08:	4613      	movlt	r3, r2
 8004d0a:	6033      	str	r3, [r6, #0]
 8004d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d10:	4607      	mov	r7, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	b10a      	cbz	r2, 8004d1a <_printf_common+0x26>
 8004d16:	3301      	adds	r3, #1
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	0699      	lsls	r1, r3, #26
 8004d1e:	bf42      	ittt	mi
 8004d20:	6833      	ldrmi	r3, [r6, #0]
 8004d22:	3302      	addmi	r3, #2
 8004d24:	6033      	strmi	r3, [r6, #0]
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	f015 0506 	ands.w	r5, r5, #6
 8004d2c:	d106      	bne.n	8004d3c <_printf_common+0x48>
 8004d2e:	f104 0a19 	add.w	sl, r4, #25
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	6832      	ldr	r2, [r6, #0]
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	dc26      	bgt.n	8004d8a <_printf_common+0x96>
 8004d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d40:	1e13      	subs	r3, r2, #0
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	bf18      	it	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	0692      	lsls	r2, r2, #26
 8004d4a:	d42b      	bmi.n	8004da4 <_printf_common+0xb0>
 8004d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d50:	4649      	mov	r1, r9
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d01e      	beq.n	8004d98 <_printf_common+0xa4>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	68e5      	ldr	r5, [r4, #12]
 8004d5e:	6832      	ldr	r2, [r6, #0]
 8004d60:	f003 0306 	and.w	r3, r3, #6
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	bf08      	it	eq
 8004d68:	1aad      	subeq	r5, r5, r2
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	bf0c      	ite	eq
 8004d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d74:	2500      	movne	r5, #0
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bfc4      	itt	gt
 8004d7a:	1a9b      	subgt	r3, r3, r2
 8004d7c:	18ed      	addgt	r5, r5, r3
 8004d7e:	2600      	movs	r6, #0
 8004d80:	341a      	adds	r4, #26
 8004d82:	42b5      	cmp	r5, r6
 8004d84:	d11a      	bne.n	8004dbc <_printf_common+0xc8>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e008      	b.n	8004d9c <_printf_common+0xa8>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4638      	mov	r0, r7
 8004d92:	47c0      	blx	r8
 8004d94:	3001      	adds	r0, #1
 8004d96:	d103      	bne.n	8004da0 <_printf_common+0xac>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	3501      	adds	r5, #1
 8004da2:	e7c6      	b.n	8004d32 <_printf_common+0x3e>
 8004da4:	18e1      	adds	r1, r4, r3
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	2030      	movs	r0, #48	; 0x30
 8004daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dae:	4422      	add	r2, r4
 8004db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004db8:	3302      	adds	r3, #2
 8004dba:	e7c7      	b.n	8004d4c <_printf_common+0x58>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d0e6      	beq.n	8004d98 <_printf_common+0xa4>
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7d9      	b.n	8004d82 <_printf_common+0x8e>
	...

08004dd0 <_printf_i>:
 8004dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	7e0f      	ldrb	r7, [r1, #24]
 8004dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dd8:	2f78      	cmp	r7, #120	; 0x78
 8004dda:	4691      	mov	r9, r2
 8004ddc:	4680      	mov	r8, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	469a      	mov	sl, r3
 8004de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004de6:	d807      	bhi.n	8004df8 <_printf_i+0x28>
 8004de8:	2f62      	cmp	r7, #98	; 0x62
 8004dea:	d80a      	bhi.n	8004e02 <_printf_i+0x32>
 8004dec:	2f00      	cmp	r7, #0
 8004dee:	f000 80d8 	beq.w	8004fa2 <_printf_i+0x1d2>
 8004df2:	2f58      	cmp	r7, #88	; 0x58
 8004df4:	f000 80a3 	beq.w	8004f3e <_printf_i+0x16e>
 8004df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e00:	e03a      	b.n	8004e78 <_printf_i+0xa8>
 8004e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e06:	2b15      	cmp	r3, #21
 8004e08:	d8f6      	bhi.n	8004df8 <_printf_i+0x28>
 8004e0a:	a101      	add	r1, pc, #4	; (adr r1, 8004e10 <_printf_i+0x40>)
 8004e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e10:	08004e69 	.word	0x08004e69
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004df9 	.word	0x08004df9
 8004e1c:	08004df9 	.word	0x08004df9
 8004e20:	08004df9 	.word	0x08004df9
 8004e24:	08004df9 	.word	0x08004df9
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004df9 	.word	0x08004df9
 8004e30:	08004df9 	.word	0x08004df9
 8004e34:	08004df9 	.word	0x08004df9
 8004e38:	08004df9 	.word	0x08004df9
 8004e3c:	08004f89 	.word	0x08004f89
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004f6b 	.word	0x08004f6b
 8004e48:	08004df9 	.word	0x08004df9
 8004e4c:	08004df9 	.word	0x08004df9
 8004e50:	08004fab 	.word	0x08004fab
 8004e54:	08004df9 	.word	0x08004df9
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004df9 	.word	0x08004df9
 8004e60:	08004df9 	.word	0x08004df9
 8004e64:	08004f73 	.word	0x08004f73
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	602a      	str	r2, [r5, #0]
 8004e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0a3      	b.n	8004fc4 <_printf_i+0x1f4>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	6829      	ldr	r1, [r5, #0]
 8004e80:	0606      	lsls	r6, r0, #24
 8004e82:	f101 0304 	add.w	r3, r1, #4
 8004e86:	d50a      	bpl.n	8004e9e <_printf_i+0xce>
 8004e88:	680e      	ldr	r6, [r1, #0]
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	2e00      	cmp	r6, #0
 8004e8e:	da03      	bge.n	8004e98 <_printf_i+0xc8>
 8004e90:	232d      	movs	r3, #45	; 0x2d
 8004e92:	4276      	negs	r6, r6
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e98:	485e      	ldr	r0, [pc, #376]	; (8005014 <_printf_i+0x244>)
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	e019      	b.n	8004ed2 <_printf_i+0x102>
 8004e9e:	680e      	ldr	r6, [r1, #0]
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ea6:	bf18      	it	ne
 8004ea8:	b236      	sxthne	r6, r6
 8004eaa:	e7ef      	b.n	8004e8c <_printf_i+0xbc>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	1d19      	adds	r1, r3, #4
 8004eb2:	6029      	str	r1, [r5, #0]
 8004eb4:	0601      	lsls	r1, r0, #24
 8004eb6:	d501      	bpl.n	8004ebc <_printf_i+0xec>
 8004eb8:	681e      	ldr	r6, [r3, #0]
 8004eba:	e002      	b.n	8004ec2 <_printf_i+0xf2>
 8004ebc:	0646      	lsls	r6, r0, #25
 8004ebe:	d5fb      	bpl.n	8004eb8 <_printf_i+0xe8>
 8004ec0:	881e      	ldrh	r6, [r3, #0]
 8004ec2:	4854      	ldr	r0, [pc, #336]	; (8005014 <_printf_i+0x244>)
 8004ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2308      	moveq	r3, #8
 8004eca:	230a      	movne	r3, #10
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ed2:	6865      	ldr	r5, [r4, #4]
 8004ed4:	60a5      	str	r5, [r4, #8]
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	bfa2      	ittt	ge
 8004eda:	6821      	ldrge	r1, [r4, #0]
 8004edc:	f021 0104 	bicge.w	r1, r1, #4
 8004ee0:	6021      	strge	r1, [r4, #0]
 8004ee2:	b90e      	cbnz	r6, 8004ee8 <_printf_i+0x118>
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	d04d      	beq.n	8004f84 <_printf_i+0x1b4>
 8004ee8:	4615      	mov	r5, r2
 8004eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eee:	fb03 6711 	mls	r7, r3, r1, r6
 8004ef2:	5dc7      	ldrb	r7, [r0, r7]
 8004ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ef8:	4637      	mov	r7, r6
 8004efa:	42bb      	cmp	r3, r7
 8004efc:	460e      	mov	r6, r1
 8004efe:	d9f4      	bls.n	8004eea <_printf_i+0x11a>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d10b      	bne.n	8004f1c <_printf_i+0x14c>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	07de      	lsls	r6, r3, #31
 8004f08:	d508      	bpl.n	8004f1c <_printf_i+0x14c>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	6861      	ldr	r1, [r4, #4]
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	bfde      	ittt	le
 8004f12:	2330      	movle	r3, #48	; 0x30
 8004f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f1c:	1b52      	subs	r2, r2, r5
 8004f1e:	6122      	str	r2, [r4, #16]
 8004f20:	f8cd a000 	str.w	sl, [sp]
 8004f24:	464b      	mov	r3, r9
 8004f26:	aa03      	add	r2, sp, #12
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7ff fee2 	bl	8004cf4 <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d14c      	bne.n	8004fce <_printf_i+0x1fe>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	b004      	add	sp, #16
 8004f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3e:	4835      	ldr	r0, [pc, #212]	; (8005014 <_printf_i+0x244>)
 8004f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f44:	6829      	ldr	r1, [r5, #0]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f4c:	6029      	str	r1, [r5, #0]
 8004f4e:	061d      	lsls	r5, r3, #24
 8004f50:	d514      	bpl.n	8004f7c <_printf_i+0x1ac>
 8004f52:	07df      	lsls	r7, r3, #31
 8004f54:	bf44      	itt	mi
 8004f56:	f043 0320 	orrmi.w	r3, r3, #32
 8004f5a:	6023      	strmi	r3, [r4, #0]
 8004f5c:	b91e      	cbnz	r6, 8004f66 <_printf_i+0x196>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f023 0320 	bic.w	r3, r3, #32
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	2310      	movs	r3, #16
 8004f68:	e7b0      	b.n	8004ecc <_printf_i+0xfc>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f043 0320 	orr.w	r3, r3, #32
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	2378      	movs	r3, #120	; 0x78
 8004f74:	4828      	ldr	r0, [pc, #160]	; (8005018 <_printf_i+0x248>)
 8004f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f7a:	e7e3      	b.n	8004f44 <_printf_i+0x174>
 8004f7c:	0659      	lsls	r1, r3, #25
 8004f7e:	bf48      	it	mi
 8004f80:	b2b6      	uxthmi	r6, r6
 8004f82:	e7e6      	b.n	8004f52 <_printf_i+0x182>
 8004f84:	4615      	mov	r5, r2
 8004f86:	e7bb      	b.n	8004f00 <_printf_i+0x130>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	6826      	ldr	r6, [r4, #0]
 8004f8c:	6961      	ldr	r1, [r4, #20]
 8004f8e:	1d18      	adds	r0, r3, #4
 8004f90:	6028      	str	r0, [r5, #0]
 8004f92:	0635      	lsls	r5, r6, #24
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0x1cc>
 8004f98:	6019      	str	r1, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_printf_i+0x1d2>
 8004f9c:	0670      	lsls	r0, r6, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0x1c8>
 8004fa0:	8019      	strh	r1, [r3, #0]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	4615      	mov	r5, r2
 8004fa8:	e7ba      	b.n	8004f20 <_printf_i+0x150>
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	1d1a      	adds	r2, r3, #4
 8004fae:	602a      	str	r2, [r5, #0]
 8004fb0:	681d      	ldr	r5, [r3, #0]
 8004fb2:	6862      	ldr	r2, [r4, #4]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7fb f92a 	bl	8000210 <memchr>
 8004fbc:	b108      	cbz	r0, 8004fc2 <_printf_i+0x1f2>
 8004fbe:	1b40      	subs	r0, r0, r5
 8004fc0:	6060      	str	r0, [r4, #4]
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	6123      	str	r3, [r4, #16]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fcc:	e7a8      	b.n	8004f20 <_printf_i+0x150>
 8004fce:	6923      	ldr	r3, [r4, #16]
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	47d0      	blx	sl
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d0ab      	beq.n	8004f34 <_printf_i+0x164>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	079b      	lsls	r3, r3, #30
 8004fe0:	d413      	bmi.n	800500a <_printf_i+0x23a>
 8004fe2:	68e0      	ldr	r0, [r4, #12]
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	4298      	cmp	r0, r3
 8004fe8:	bfb8      	it	lt
 8004fea:	4618      	movlt	r0, r3
 8004fec:	e7a4      	b.n	8004f38 <_printf_i+0x168>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	47d0      	blx	sl
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d09b      	beq.n	8004f34 <_printf_i+0x164>
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	9903      	ldr	r1, [sp, #12]
 8005002:	1a5b      	subs	r3, r3, r1
 8005004:	42ab      	cmp	r3, r5
 8005006:	dcf2      	bgt.n	8004fee <_printf_i+0x21e>
 8005008:	e7eb      	b.n	8004fe2 <_printf_i+0x212>
 800500a:	2500      	movs	r5, #0
 800500c:	f104 0619 	add.w	r6, r4, #25
 8005010:	e7f5      	b.n	8004ffe <_printf_i+0x22e>
 8005012:	bf00      	nop
 8005014:	08007396 	.word	0x08007396
 8005018:	080073a7 	.word	0x080073a7

0800501c <iprintf>:
 800501c:	b40f      	push	{r0, r1, r2, r3}
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <iprintf+0x2c>)
 8005020:	b513      	push	{r0, r1, r4, lr}
 8005022:	681c      	ldr	r4, [r3, #0]
 8005024:	b124      	cbz	r4, 8005030 <iprintf+0x14>
 8005026:	69a3      	ldr	r3, [r4, #24]
 8005028:	b913      	cbnz	r3, 8005030 <iprintf+0x14>
 800502a:	4620      	mov	r0, r4
 800502c:	f000 ff6e 	bl	8005f0c <__sinit>
 8005030:	ab05      	add	r3, sp, #20
 8005032:	9a04      	ldr	r2, [sp, #16]
 8005034:	68a1      	ldr	r1, [r4, #8]
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	4620      	mov	r0, r4
 800503a:	f001 fcc7 	bl	80069cc <_vfiprintf_r>
 800503e:	b002      	add	sp, #8
 8005040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005044:	b004      	add	sp, #16
 8005046:	4770      	bx	lr
 8005048:	2000000c 	.word	0x2000000c

0800504c <_strtol_l.constprop.0>:
 800504c:	2b01      	cmp	r3, #1
 800504e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005052:	d001      	beq.n	8005058 <_strtol_l.constprop.0+0xc>
 8005054:	2b24      	cmp	r3, #36	; 0x24
 8005056:	d906      	bls.n	8005066 <_strtol_l.constprop.0+0x1a>
 8005058:	f7ff fb30 	bl	80046bc <__errno>
 800505c:	2316      	movs	r3, #22
 800505e:	6003      	str	r3, [r0, #0]
 8005060:	2000      	movs	r0, #0
 8005062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005066:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800514c <_strtol_l.constprop.0+0x100>
 800506a:	460d      	mov	r5, r1
 800506c:	462e      	mov	r6, r5
 800506e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005072:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005076:	f017 0708 	ands.w	r7, r7, #8
 800507a:	d1f7      	bne.n	800506c <_strtol_l.constprop.0+0x20>
 800507c:	2c2d      	cmp	r4, #45	; 0x2d
 800507e:	d132      	bne.n	80050e6 <_strtol_l.constprop.0+0x9a>
 8005080:	782c      	ldrb	r4, [r5, #0]
 8005082:	2701      	movs	r7, #1
 8005084:	1cb5      	adds	r5, r6, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d05b      	beq.n	8005142 <_strtol_l.constprop.0+0xf6>
 800508a:	2b10      	cmp	r3, #16
 800508c:	d109      	bne.n	80050a2 <_strtol_l.constprop.0+0x56>
 800508e:	2c30      	cmp	r4, #48	; 0x30
 8005090:	d107      	bne.n	80050a2 <_strtol_l.constprop.0+0x56>
 8005092:	782c      	ldrb	r4, [r5, #0]
 8005094:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005098:	2c58      	cmp	r4, #88	; 0x58
 800509a:	d14d      	bne.n	8005138 <_strtol_l.constprop.0+0xec>
 800509c:	786c      	ldrb	r4, [r5, #1]
 800509e:	2310      	movs	r3, #16
 80050a0:	3502      	adds	r5, #2
 80050a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80050a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80050aa:	f04f 0c00 	mov.w	ip, #0
 80050ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80050b2:	4666      	mov	r6, ip
 80050b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80050b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80050bc:	f1be 0f09 	cmp.w	lr, #9
 80050c0:	d816      	bhi.n	80050f0 <_strtol_l.constprop.0+0xa4>
 80050c2:	4674      	mov	r4, lr
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	dd24      	ble.n	8005112 <_strtol_l.constprop.0+0xc6>
 80050c8:	f1bc 0f00 	cmp.w	ip, #0
 80050cc:	db1e      	blt.n	800510c <_strtol_l.constprop.0+0xc0>
 80050ce:	45b1      	cmp	r9, r6
 80050d0:	d31c      	bcc.n	800510c <_strtol_l.constprop.0+0xc0>
 80050d2:	d101      	bne.n	80050d8 <_strtol_l.constprop.0+0x8c>
 80050d4:	45a2      	cmp	sl, r4
 80050d6:	db19      	blt.n	800510c <_strtol_l.constprop.0+0xc0>
 80050d8:	fb06 4603 	mla	r6, r6, r3, r4
 80050dc:	f04f 0c01 	mov.w	ip, #1
 80050e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050e4:	e7e8      	b.n	80050b8 <_strtol_l.constprop.0+0x6c>
 80050e6:	2c2b      	cmp	r4, #43	; 0x2b
 80050e8:	bf04      	itt	eq
 80050ea:	782c      	ldrbeq	r4, [r5, #0]
 80050ec:	1cb5      	addeq	r5, r6, #2
 80050ee:	e7ca      	b.n	8005086 <_strtol_l.constprop.0+0x3a>
 80050f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80050f4:	f1be 0f19 	cmp.w	lr, #25
 80050f8:	d801      	bhi.n	80050fe <_strtol_l.constprop.0+0xb2>
 80050fa:	3c37      	subs	r4, #55	; 0x37
 80050fc:	e7e2      	b.n	80050c4 <_strtol_l.constprop.0+0x78>
 80050fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005102:	f1be 0f19 	cmp.w	lr, #25
 8005106:	d804      	bhi.n	8005112 <_strtol_l.constprop.0+0xc6>
 8005108:	3c57      	subs	r4, #87	; 0x57
 800510a:	e7db      	b.n	80050c4 <_strtol_l.constprop.0+0x78>
 800510c:	f04f 3cff 	mov.w	ip, #4294967295
 8005110:	e7e6      	b.n	80050e0 <_strtol_l.constprop.0+0x94>
 8005112:	f1bc 0f00 	cmp.w	ip, #0
 8005116:	da05      	bge.n	8005124 <_strtol_l.constprop.0+0xd8>
 8005118:	2322      	movs	r3, #34	; 0x22
 800511a:	6003      	str	r3, [r0, #0]
 800511c:	4646      	mov	r6, r8
 800511e:	b942      	cbnz	r2, 8005132 <_strtol_l.constprop.0+0xe6>
 8005120:	4630      	mov	r0, r6
 8005122:	e79e      	b.n	8005062 <_strtol_l.constprop.0+0x16>
 8005124:	b107      	cbz	r7, 8005128 <_strtol_l.constprop.0+0xdc>
 8005126:	4276      	negs	r6, r6
 8005128:	2a00      	cmp	r2, #0
 800512a:	d0f9      	beq.n	8005120 <_strtol_l.constprop.0+0xd4>
 800512c:	f1bc 0f00 	cmp.w	ip, #0
 8005130:	d000      	beq.n	8005134 <_strtol_l.constprop.0+0xe8>
 8005132:	1e69      	subs	r1, r5, #1
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	e7f3      	b.n	8005120 <_strtol_l.constprop.0+0xd4>
 8005138:	2430      	movs	r4, #48	; 0x30
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1b1      	bne.n	80050a2 <_strtol_l.constprop.0+0x56>
 800513e:	2308      	movs	r3, #8
 8005140:	e7af      	b.n	80050a2 <_strtol_l.constprop.0+0x56>
 8005142:	2c30      	cmp	r4, #48	; 0x30
 8005144:	d0a5      	beq.n	8005092 <_strtol_l.constprop.0+0x46>
 8005146:	230a      	movs	r3, #10
 8005148:	e7ab      	b.n	80050a2 <_strtol_l.constprop.0+0x56>
 800514a:	bf00      	nop
 800514c:	080073b9 	.word	0x080073b9

08005150 <strtol>:
 8005150:	4613      	mov	r3, r2
 8005152:	460a      	mov	r2, r1
 8005154:	4601      	mov	r1, r0
 8005156:	4802      	ldr	r0, [pc, #8]	; (8005160 <strtol+0x10>)
 8005158:	6800      	ldr	r0, [r0, #0]
 800515a:	f7ff bf77 	b.w	800504c <_strtol_l.constprop.0>
 800515e:	bf00      	nop
 8005160:	2000000c 	.word	0x2000000c

08005164 <quorem>:
 8005164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005168:	6903      	ldr	r3, [r0, #16]
 800516a:	690c      	ldr	r4, [r1, #16]
 800516c:	42a3      	cmp	r3, r4
 800516e:	4607      	mov	r7, r0
 8005170:	f2c0 8081 	blt.w	8005276 <quorem+0x112>
 8005174:	3c01      	subs	r4, #1
 8005176:	f101 0814 	add.w	r8, r1, #20
 800517a:	f100 0514 	add.w	r5, r0, #20
 800517e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800518c:	3301      	adds	r3, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005194:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005198:	fbb2 f6f3 	udiv	r6, r2, r3
 800519c:	d331      	bcc.n	8005202 <quorem+0x9e>
 800519e:	f04f 0e00 	mov.w	lr, #0
 80051a2:	4640      	mov	r0, r8
 80051a4:	46ac      	mov	ip, r5
 80051a6:	46f2      	mov	sl, lr
 80051a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80051ac:	b293      	uxth	r3, r2
 80051ae:	fb06 e303 	mla	r3, r6, r3, lr
 80051b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	ebaa 0303 	sub.w	r3, sl, r3
 80051bc:	f8dc a000 	ldr.w	sl, [ip]
 80051c0:	0c12      	lsrs	r2, r2, #16
 80051c2:	fa13 f38a 	uxtah	r3, r3, sl
 80051c6:	fb06 e202 	mla	r2, r6, r2, lr
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	9b00      	ldr	r3, [sp, #0]
 80051ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051d2:	b292      	uxth	r2, r2
 80051d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80051e0:	4581      	cmp	r9, r0
 80051e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051e6:	f84c 3b04 	str.w	r3, [ip], #4
 80051ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051ee:	d2db      	bcs.n	80051a8 <quorem+0x44>
 80051f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80051f4:	b92b      	cbnz	r3, 8005202 <quorem+0x9e>
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	3b04      	subs	r3, #4
 80051fa:	429d      	cmp	r5, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	d32e      	bcc.n	800525e <quorem+0xfa>
 8005200:	613c      	str	r4, [r7, #16]
 8005202:	4638      	mov	r0, r7
 8005204:	f001 f9c0 	bl	8006588 <__mcmp>
 8005208:	2800      	cmp	r0, #0
 800520a:	db24      	blt.n	8005256 <quorem+0xf2>
 800520c:	3601      	adds	r6, #1
 800520e:	4628      	mov	r0, r5
 8005210:	f04f 0c00 	mov.w	ip, #0
 8005214:	f858 2b04 	ldr.w	r2, [r8], #4
 8005218:	f8d0 e000 	ldr.w	lr, [r0]
 800521c:	b293      	uxth	r3, r2
 800521e:	ebac 0303 	sub.w	r3, ip, r3
 8005222:	0c12      	lsrs	r2, r2, #16
 8005224:	fa13 f38e 	uxtah	r3, r3, lr
 8005228:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800522c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005236:	45c1      	cmp	r9, r8
 8005238:	f840 3b04 	str.w	r3, [r0], #4
 800523c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005240:	d2e8      	bcs.n	8005214 <quorem+0xb0>
 8005242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800524a:	b922      	cbnz	r2, 8005256 <quorem+0xf2>
 800524c:	3b04      	subs	r3, #4
 800524e:	429d      	cmp	r5, r3
 8005250:	461a      	mov	r2, r3
 8005252:	d30a      	bcc.n	800526a <quorem+0x106>
 8005254:	613c      	str	r4, [r7, #16]
 8005256:	4630      	mov	r0, r6
 8005258:	b003      	add	sp, #12
 800525a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	3b04      	subs	r3, #4
 8005262:	2a00      	cmp	r2, #0
 8005264:	d1cc      	bne.n	8005200 <quorem+0x9c>
 8005266:	3c01      	subs	r4, #1
 8005268:	e7c7      	b.n	80051fa <quorem+0x96>
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	3b04      	subs	r3, #4
 800526e:	2a00      	cmp	r2, #0
 8005270:	d1f0      	bne.n	8005254 <quorem+0xf0>
 8005272:	3c01      	subs	r4, #1
 8005274:	e7eb      	b.n	800524e <quorem+0xea>
 8005276:	2000      	movs	r0, #0
 8005278:	e7ee      	b.n	8005258 <quorem+0xf4>
 800527a:	0000      	movs	r0, r0
 800527c:	0000      	movs	r0, r0
	...

08005280 <_dtoa_r>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	ed2d 8b04 	vpush	{d8-d9}
 8005288:	ec57 6b10 	vmov	r6, r7, d0
 800528c:	b093      	sub	sp, #76	; 0x4c
 800528e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005290:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005294:	9106      	str	r1, [sp, #24]
 8005296:	ee10 aa10 	vmov	sl, s0
 800529a:	4604      	mov	r4, r0
 800529c:	9209      	str	r2, [sp, #36]	; 0x24
 800529e:	930c      	str	r3, [sp, #48]	; 0x30
 80052a0:	46bb      	mov	fp, r7
 80052a2:	b975      	cbnz	r5, 80052c2 <_dtoa_r+0x42>
 80052a4:	2010      	movs	r0, #16
 80052a6:	f000 fed7 	bl	8006058 <malloc>
 80052aa:	4602      	mov	r2, r0
 80052ac:	6260      	str	r0, [r4, #36]	; 0x24
 80052ae:	b920      	cbnz	r0, 80052ba <_dtoa_r+0x3a>
 80052b0:	4ba7      	ldr	r3, [pc, #668]	; (8005550 <_dtoa_r+0x2d0>)
 80052b2:	21ea      	movs	r1, #234	; 0xea
 80052b4:	48a7      	ldr	r0, [pc, #668]	; (8005554 <_dtoa_r+0x2d4>)
 80052b6:	f001 fddf 	bl	8006e78 <__assert_func>
 80052ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052be:	6005      	str	r5, [r0, #0]
 80052c0:	60c5      	str	r5, [r0, #12]
 80052c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	b151      	cbz	r1, 80052de <_dtoa_r+0x5e>
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	604a      	str	r2, [r1, #4]
 80052cc:	2301      	movs	r3, #1
 80052ce:	4093      	lsls	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 ff16 	bl	8006104 <_Bfree>
 80052d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	1e3b      	subs	r3, r7, #0
 80052e0:	bfaa      	itet	ge
 80052e2:	2300      	movge	r3, #0
 80052e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80052e8:	f8c8 3000 	strge.w	r3, [r8]
 80052ec:	4b9a      	ldr	r3, [pc, #616]	; (8005558 <_dtoa_r+0x2d8>)
 80052ee:	bfbc      	itt	lt
 80052f0:	2201      	movlt	r2, #1
 80052f2:	f8c8 2000 	strlt.w	r2, [r8]
 80052f6:	ea33 030b 	bics.w	r3, r3, fp
 80052fa:	d11b      	bne.n	8005334 <_dtoa_r+0xb4>
 80052fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005308:	4333      	orrs	r3, r6
 800530a:	f000 8592 	beq.w	8005e32 <_dtoa_r+0xbb2>
 800530e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005310:	b963      	cbnz	r3, 800532c <_dtoa_r+0xac>
 8005312:	4b92      	ldr	r3, [pc, #584]	; (800555c <_dtoa_r+0x2dc>)
 8005314:	e022      	b.n	800535c <_dtoa_r+0xdc>
 8005316:	4b92      	ldr	r3, [pc, #584]	; (8005560 <_dtoa_r+0x2e0>)
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	3308      	adds	r3, #8
 800531c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	9801      	ldr	r0, [sp, #4]
 8005322:	b013      	add	sp, #76	; 0x4c
 8005324:	ecbd 8b04 	vpop	{d8-d9}
 8005328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532c:	4b8b      	ldr	r3, [pc, #556]	; (800555c <_dtoa_r+0x2dc>)
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	3303      	adds	r3, #3
 8005332:	e7f3      	b.n	800531c <_dtoa_r+0x9c>
 8005334:	2200      	movs	r2, #0
 8005336:	2300      	movs	r3, #0
 8005338:	4650      	mov	r0, sl
 800533a:	4659      	mov	r1, fp
 800533c:	f7fb fbdc 	bl	8000af8 <__aeabi_dcmpeq>
 8005340:	ec4b ab19 	vmov	d9, sl, fp
 8005344:	4680      	mov	r8, r0
 8005346:	b158      	cbz	r0, 8005360 <_dtoa_r+0xe0>
 8005348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800534a:	2301      	movs	r3, #1
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 856b 	beq.w	8005e2c <_dtoa_r+0xbac>
 8005356:	4883      	ldr	r0, [pc, #524]	; (8005564 <_dtoa_r+0x2e4>)
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	1e43      	subs	r3, r0, #1
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	e7df      	b.n	8005320 <_dtoa_r+0xa0>
 8005360:	ec4b ab10 	vmov	d0, sl, fp
 8005364:	aa10      	add	r2, sp, #64	; 0x40
 8005366:	a911      	add	r1, sp, #68	; 0x44
 8005368:	4620      	mov	r0, r4
 800536a:	f001 f9b3 	bl	80066d4 <__d2b>
 800536e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005372:	ee08 0a10 	vmov	s16, r0
 8005376:	2d00      	cmp	r5, #0
 8005378:	f000 8084 	beq.w	8005484 <_dtoa_r+0x204>
 800537c:	ee19 3a90 	vmov	r3, s19
 8005380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005384:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005388:	4656      	mov	r6, sl
 800538a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800538e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005392:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005396:	4b74      	ldr	r3, [pc, #464]	; (8005568 <_dtoa_r+0x2e8>)
 8005398:	2200      	movs	r2, #0
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fa ff8b 	bl	80002b8 <__aeabi_dsub>
 80053a2:	a365      	add	r3, pc, #404	; (adr r3, 8005538 <_dtoa_r+0x2b8>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f93e 	bl	8000628 <__aeabi_dmul>
 80053ac:	a364      	add	r3, pc, #400	; (adr r3, 8005540 <_dtoa_r+0x2c0>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fa ff83 	bl	80002bc <__adddf3>
 80053b6:	4606      	mov	r6, r0
 80053b8:	4628      	mov	r0, r5
 80053ba:	460f      	mov	r7, r1
 80053bc:	f7fb f8ca 	bl	8000554 <__aeabi_i2d>
 80053c0:	a361      	add	r3, pc, #388	; (adr r3, 8005548 <_dtoa_r+0x2c8>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fb f92f 	bl	8000628 <__aeabi_dmul>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4630      	mov	r0, r6
 80053d0:	4639      	mov	r1, r7
 80053d2:	f7fa ff73 	bl	80002bc <__adddf3>
 80053d6:	4606      	mov	r6, r0
 80053d8:	460f      	mov	r7, r1
 80053da:	f7fb fbd5 	bl	8000b88 <__aeabi_d2iz>
 80053de:	2200      	movs	r2, #0
 80053e0:	9000      	str	r0, [sp, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	4630      	mov	r0, r6
 80053e6:	4639      	mov	r1, r7
 80053e8:	f7fb fb90 	bl	8000b0c <__aeabi_dcmplt>
 80053ec:	b150      	cbz	r0, 8005404 <_dtoa_r+0x184>
 80053ee:	9800      	ldr	r0, [sp, #0]
 80053f0:	f7fb f8b0 	bl	8000554 <__aeabi_i2d>
 80053f4:	4632      	mov	r2, r6
 80053f6:	463b      	mov	r3, r7
 80053f8:	f7fb fb7e 	bl	8000af8 <__aeabi_dcmpeq>
 80053fc:	b910      	cbnz	r0, 8005404 <_dtoa_r+0x184>
 80053fe:	9b00      	ldr	r3, [sp, #0]
 8005400:	3b01      	subs	r3, #1
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	9b00      	ldr	r3, [sp, #0]
 8005406:	2b16      	cmp	r3, #22
 8005408:	d85a      	bhi.n	80054c0 <_dtoa_r+0x240>
 800540a:	9a00      	ldr	r2, [sp, #0]
 800540c:	4b57      	ldr	r3, [pc, #348]	; (800556c <_dtoa_r+0x2ec>)
 800540e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	ec51 0b19 	vmov	r0, r1, d9
 800541a:	f7fb fb77 	bl	8000b0c <__aeabi_dcmplt>
 800541e:	2800      	cmp	r0, #0
 8005420:	d050      	beq.n	80054c4 <_dtoa_r+0x244>
 8005422:	9b00      	ldr	r3, [sp, #0]
 8005424:	3b01      	subs	r3, #1
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	930b      	str	r3, [sp, #44]	; 0x2c
 800542c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800542e:	1b5d      	subs	r5, r3, r5
 8005430:	1e6b      	subs	r3, r5, #1
 8005432:	9305      	str	r3, [sp, #20]
 8005434:	bf45      	ittet	mi
 8005436:	f1c5 0301 	rsbmi	r3, r5, #1
 800543a:	9304      	strmi	r3, [sp, #16]
 800543c:	2300      	movpl	r3, #0
 800543e:	2300      	movmi	r3, #0
 8005440:	bf4c      	ite	mi
 8005442:	9305      	strmi	r3, [sp, #20]
 8005444:	9304      	strpl	r3, [sp, #16]
 8005446:	9b00      	ldr	r3, [sp, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db3d      	blt.n	80054c8 <_dtoa_r+0x248>
 800544c:	9b05      	ldr	r3, [sp, #20]
 800544e:	9a00      	ldr	r2, [sp, #0]
 8005450:	920a      	str	r2, [sp, #40]	; 0x28
 8005452:	4413      	add	r3, r2
 8005454:	9305      	str	r3, [sp, #20]
 8005456:	2300      	movs	r3, #0
 8005458:	9307      	str	r3, [sp, #28]
 800545a:	9b06      	ldr	r3, [sp, #24]
 800545c:	2b09      	cmp	r3, #9
 800545e:	f200 8089 	bhi.w	8005574 <_dtoa_r+0x2f4>
 8005462:	2b05      	cmp	r3, #5
 8005464:	bfc4      	itt	gt
 8005466:	3b04      	subgt	r3, #4
 8005468:	9306      	strgt	r3, [sp, #24]
 800546a:	9b06      	ldr	r3, [sp, #24]
 800546c:	f1a3 0302 	sub.w	r3, r3, #2
 8005470:	bfcc      	ite	gt
 8005472:	2500      	movgt	r5, #0
 8005474:	2501      	movle	r5, #1
 8005476:	2b03      	cmp	r3, #3
 8005478:	f200 8087 	bhi.w	800558a <_dtoa_r+0x30a>
 800547c:	e8df f003 	tbb	[pc, r3]
 8005480:	59383a2d 	.word	0x59383a2d
 8005484:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005488:	441d      	add	r5, r3
 800548a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800548e:	2b20      	cmp	r3, #32
 8005490:	bfc1      	itttt	gt
 8005492:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005496:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800549a:	fa0b f303 	lslgt.w	r3, fp, r3
 800549e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054a2:	bfda      	itte	le
 80054a4:	f1c3 0320 	rsble	r3, r3, #32
 80054a8:	fa06 f003 	lslle.w	r0, r6, r3
 80054ac:	4318      	orrgt	r0, r3
 80054ae:	f7fb f841 	bl	8000534 <__aeabi_ui2d>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4606      	mov	r6, r0
 80054b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054ba:	3d01      	subs	r5, #1
 80054bc:	930e      	str	r3, [sp, #56]	; 0x38
 80054be:	e76a      	b.n	8005396 <_dtoa_r+0x116>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e7b2      	b.n	800542a <_dtoa_r+0x1aa>
 80054c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80054c6:	e7b1      	b.n	800542c <_dtoa_r+0x1ac>
 80054c8:	9b04      	ldr	r3, [sp, #16]
 80054ca:	9a00      	ldr	r2, [sp, #0]
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	4253      	negs	r3, r2
 80054d2:	9307      	str	r3, [sp, #28]
 80054d4:	2300      	movs	r3, #0
 80054d6:	930a      	str	r3, [sp, #40]	; 0x28
 80054d8:	e7bf      	b.n	800545a <_dtoa_r+0x1da>
 80054da:	2300      	movs	r3, #0
 80054dc:	9308      	str	r3, [sp, #32]
 80054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc55      	bgt.n	8005590 <_dtoa_r+0x310>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054ea:	461a      	mov	r2, r3
 80054ec:	9209      	str	r2, [sp, #36]	; 0x24
 80054ee:	e00c      	b.n	800550a <_dtoa_r+0x28a>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e7f3      	b.n	80054dc <_dtoa_r+0x25c>
 80054f4:	2300      	movs	r3, #0
 80054f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f8:	9308      	str	r3, [sp, #32]
 80054fa:	9b00      	ldr	r3, [sp, #0]
 80054fc:	4413      	add	r3, r2
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	3301      	adds	r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	bfb8      	it	lt
 8005508:	2301      	movlt	r3, #1
 800550a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800550c:	2200      	movs	r2, #0
 800550e:	6042      	str	r2, [r0, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	f102 0614 	add.w	r6, r2, #20
 8005516:	429e      	cmp	r6, r3
 8005518:	6841      	ldr	r1, [r0, #4]
 800551a:	d93d      	bls.n	8005598 <_dtoa_r+0x318>
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fdb1 	bl	8006084 <_Balloc>
 8005522:	9001      	str	r0, [sp, #4]
 8005524:	2800      	cmp	r0, #0
 8005526:	d13b      	bne.n	80055a0 <_dtoa_r+0x320>
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <_dtoa_r+0x2f0>)
 800552a:	4602      	mov	r2, r0
 800552c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005530:	e6c0      	b.n	80052b4 <_dtoa_r+0x34>
 8005532:	2301      	movs	r3, #1
 8005534:	e7df      	b.n	80054f6 <_dtoa_r+0x276>
 8005536:	bf00      	nop
 8005538:	636f4361 	.word	0x636f4361
 800553c:	3fd287a7 	.word	0x3fd287a7
 8005540:	8b60c8b3 	.word	0x8b60c8b3
 8005544:	3fc68a28 	.word	0x3fc68a28
 8005548:	509f79fb 	.word	0x509f79fb
 800554c:	3fd34413 	.word	0x3fd34413
 8005550:	080074c6 	.word	0x080074c6
 8005554:	080074dd 	.word	0x080074dd
 8005558:	7ff00000 	.word	0x7ff00000
 800555c:	080074c2 	.word	0x080074c2
 8005560:	080074b9 	.word	0x080074b9
 8005564:	08007395 	.word	0x08007395
 8005568:	3ff80000 	.word	0x3ff80000
 800556c:	08007630 	.word	0x08007630
 8005570:	08007538 	.word	0x08007538
 8005574:	2501      	movs	r5, #1
 8005576:	2300      	movs	r3, #0
 8005578:	9306      	str	r3, [sp, #24]
 800557a:	9508      	str	r5, [sp, #32]
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005584:	2200      	movs	r2, #0
 8005586:	2312      	movs	r3, #18
 8005588:	e7b0      	b.n	80054ec <_dtoa_r+0x26c>
 800558a:	2301      	movs	r3, #1
 800558c:	9308      	str	r3, [sp, #32]
 800558e:	e7f5      	b.n	800557c <_dtoa_r+0x2fc>
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005596:	e7b8      	b.n	800550a <_dtoa_r+0x28a>
 8005598:	3101      	adds	r1, #1
 800559a:	6041      	str	r1, [r0, #4]
 800559c:	0052      	lsls	r2, r2, #1
 800559e:	e7b8      	b.n	8005512 <_dtoa_r+0x292>
 80055a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055a2:	9a01      	ldr	r2, [sp, #4]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	2b0e      	cmp	r3, #14
 80055aa:	f200 809d 	bhi.w	80056e8 <_dtoa_r+0x468>
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	f000 809a 	beq.w	80056e8 <_dtoa_r+0x468>
 80055b4:	9b00      	ldr	r3, [sp, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dd32      	ble.n	8005620 <_dtoa_r+0x3a0>
 80055ba:	4ab7      	ldr	r2, [pc, #732]	; (8005898 <_dtoa_r+0x618>)
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055c8:	9b00      	ldr	r3, [sp, #0]
 80055ca:	05d8      	lsls	r0, r3, #23
 80055cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055d0:	d516      	bpl.n	8005600 <_dtoa_r+0x380>
 80055d2:	4bb2      	ldr	r3, [pc, #712]	; (800589c <_dtoa_r+0x61c>)
 80055d4:	ec51 0b19 	vmov	r0, r1, d9
 80055d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055dc:	f7fb f94e 	bl	800087c <__aeabi_ddiv>
 80055e0:	f007 070f 	and.w	r7, r7, #15
 80055e4:	4682      	mov	sl, r0
 80055e6:	468b      	mov	fp, r1
 80055e8:	2503      	movs	r5, #3
 80055ea:	4eac      	ldr	r6, [pc, #688]	; (800589c <_dtoa_r+0x61c>)
 80055ec:	b957      	cbnz	r7, 8005604 <_dtoa_r+0x384>
 80055ee:	4642      	mov	r2, r8
 80055f0:	464b      	mov	r3, r9
 80055f2:	4650      	mov	r0, sl
 80055f4:	4659      	mov	r1, fp
 80055f6:	f7fb f941 	bl	800087c <__aeabi_ddiv>
 80055fa:	4682      	mov	sl, r0
 80055fc:	468b      	mov	fp, r1
 80055fe:	e028      	b.n	8005652 <_dtoa_r+0x3d2>
 8005600:	2502      	movs	r5, #2
 8005602:	e7f2      	b.n	80055ea <_dtoa_r+0x36a>
 8005604:	07f9      	lsls	r1, r7, #31
 8005606:	d508      	bpl.n	800561a <_dtoa_r+0x39a>
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005610:	f7fb f80a 	bl	8000628 <__aeabi_dmul>
 8005614:	3501      	adds	r5, #1
 8005616:	4680      	mov	r8, r0
 8005618:	4689      	mov	r9, r1
 800561a:	107f      	asrs	r7, r7, #1
 800561c:	3608      	adds	r6, #8
 800561e:	e7e5      	b.n	80055ec <_dtoa_r+0x36c>
 8005620:	f000 809b 	beq.w	800575a <_dtoa_r+0x4da>
 8005624:	9b00      	ldr	r3, [sp, #0]
 8005626:	4f9d      	ldr	r7, [pc, #628]	; (800589c <_dtoa_r+0x61c>)
 8005628:	425e      	negs	r6, r3
 800562a:	4b9b      	ldr	r3, [pc, #620]	; (8005898 <_dtoa_r+0x618>)
 800562c:	f006 020f 	and.w	r2, r6, #15
 8005630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	ec51 0b19 	vmov	r0, r1, d9
 800563c:	f7fa fff4 	bl	8000628 <__aeabi_dmul>
 8005640:	1136      	asrs	r6, r6, #4
 8005642:	4682      	mov	sl, r0
 8005644:	468b      	mov	fp, r1
 8005646:	2300      	movs	r3, #0
 8005648:	2502      	movs	r5, #2
 800564a:	2e00      	cmp	r6, #0
 800564c:	d17a      	bne.n	8005744 <_dtoa_r+0x4c4>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1d3      	bne.n	80055fa <_dtoa_r+0x37a>
 8005652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8082 	beq.w	800575e <_dtoa_r+0x4de>
 800565a:	4b91      	ldr	r3, [pc, #580]	; (80058a0 <_dtoa_r+0x620>)
 800565c:	2200      	movs	r2, #0
 800565e:	4650      	mov	r0, sl
 8005660:	4659      	mov	r1, fp
 8005662:	f7fb fa53 	bl	8000b0c <__aeabi_dcmplt>
 8005666:	2800      	cmp	r0, #0
 8005668:	d079      	beq.n	800575e <_dtoa_r+0x4de>
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d076      	beq.n	800575e <_dtoa_r+0x4de>
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	dd36      	ble.n	80056e4 <_dtoa_r+0x464>
 8005676:	9b00      	ldr	r3, [sp, #0]
 8005678:	4650      	mov	r0, sl
 800567a:	4659      	mov	r1, fp
 800567c:	1e5f      	subs	r7, r3, #1
 800567e:	2200      	movs	r2, #0
 8005680:	4b88      	ldr	r3, [pc, #544]	; (80058a4 <_dtoa_r+0x624>)
 8005682:	f7fa ffd1 	bl	8000628 <__aeabi_dmul>
 8005686:	9e02      	ldr	r6, [sp, #8]
 8005688:	4682      	mov	sl, r0
 800568a:	468b      	mov	fp, r1
 800568c:	3501      	adds	r5, #1
 800568e:	4628      	mov	r0, r5
 8005690:	f7fa ff60 	bl	8000554 <__aeabi_i2d>
 8005694:	4652      	mov	r2, sl
 8005696:	465b      	mov	r3, fp
 8005698:	f7fa ffc6 	bl	8000628 <__aeabi_dmul>
 800569c:	4b82      	ldr	r3, [pc, #520]	; (80058a8 <_dtoa_r+0x628>)
 800569e:	2200      	movs	r2, #0
 80056a0:	f7fa fe0c 	bl	80002bc <__adddf3>
 80056a4:	46d0      	mov	r8, sl
 80056a6:	46d9      	mov	r9, fp
 80056a8:	4682      	mov	sl, r0
 80056aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80056ae:	2e00      	cmp	r6, #0
 80056b0:	d158      	bne.n	8005764 <_dtoa_r+0x4e4>
 80056b2:	4b7e      	ldr	r3, [pc, #504]	; (80058ac <_dtoa_r+0x62c>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	4640      	mov	r0, r8
 80056b8:	4649      	mov	r1, r9
 80056ba:	f7fa fdfd 	bl	80002b8 <__aeabi_dsub>
 80056be:	4652      	mov	r2, sl
 80056c0:	465b      	mov	r3, fp
 80056c2:	4680      	mov	r8, r0
 80056c4:	4689      	mov	r9, r1
 80056c6:	f7fb fa3f 	bl	8000b48 <__aeabi_dcmpgt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f040 8295 	bne.w	8005bfa <_dtoa_r+0x97a>
 80056d0:	4652      	mov	r2, sl
 80056d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056d6:	4640      	mov	r0, r8
 80056d8:	4649      	mov	r1, r9
 80056da:	f7fb fa17 	bl	8000b0c <__aeabi_dcmplt>
 80056de:	2800      	cmp	r0, #0
 80056e0:	f040 8289 	bne.w	8005bf6 <_dtoa_r+0x976>
 80056e4:	ec5b ab19 	vmov	sl, fp, d9
 80056e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f2c0 8148 	blt.w	8005980 <_dtoa_r+0x700>
 80056f0:	9a00      	ldr	r2, [sp, #0]
 80056f2:	2a0e      	cmp	r2, #14
 80056f4:	f300 8144 	bgt.w	8005980 <_dtoa_r+0x700>
 80056f8:	4b67      	ldr	r3, [pc, #412]	; (8005898 <_dtoa_r+0x618>)
 80056fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	f280 80d5 	bge.w	80058b4 <_dtoa_r+0x634>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f300 80d1 	bgt.w	80058b4 <_dtoa_r+0x634>
 8005712:	f040 826f 	bne.w	8005bf4 <_dtoa_r+0x974>
 8005716:	4b65      	ldr	r3, [pc, #404]	; (80058ac <_dtoa_r+0x62c>)
 8005718:	2200      	movs	r2, #0
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa ff83 	bl	8000628 <__aeabi_dmul>
 8005722:	4652      	mov	r2, sl
 8005724:	465b      	mov	r3, fp
 8005726:	f7fb fa05 	bl	8000b34 <__aeabi_dcmpge>
 800572a:	9e03      	ldr	r6, [sp, #12]
 800572c:	4637      	mov	r7, r6
 800572e:	2800      	cmp	r0, #0
 8005730:	f040 8245 	bne.w	8005bbe <_dtoa_r+0x93e>
 8005734:	9d01      	ldr	r5, [sp, #4]
 8005736:	2331      	movs	r3, #49	; 0x31
 8005738:	f805 3b01 	strb.w	r3, [r5], #1
 800573c:	9b00      	ldr	r3, [sp, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	e240      	b.n	8005bc6 <_dtoa_r+0x946>
 8005744:	07f2      	lsls	r2, r6, #31
 8005746:	d505      	bpl.n	8005754 <_dtoa_r+0x4d4>
 8005748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574c:	f7fa ff6c 	bl	8000628 <__aeabi_dmul>
 8005750:	3501      	adds	r5, #1
 8005752:	2301      	movs	r3, #1
 8005754:	1076      	asrs	r6, r6, #1
 8005756:	3708      	adds	r7, #8
 8005758:	e777      	b.n	800564a <_dtoa_r+0x3ca>
 800575a:	2502      	movs	r5, #2
 800575c:	e779      	b.n	8005652 <_dtoa_r+0x3d2>
 800575e:	9f00      	ldr	r7, [sp, #0]
 8005760:	9e03      	ldr	r6, [sp, #12]
 8005762:	e794      	b.n	800568e <_dtoa_r+0x40e>
 8005764:	9901      	ldr	r1, [sp, #4]
 8005766:	4b4c      	ldr	r3, [pc, #304]	; (8005898 <_dtoa_r+0x618>)
 8005768:	4431      	add	r1, r6
 800576a:	910d      	str	r1, [sp, #52]	; 0x34
 800576c:	9908      	ldr	r1, [sp, #32]
 800576e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005776:	2900      	cmp	r1, #0
 8005778:	d043      	beq.n	8005802 <_dtoa_r+0x582>
 800577a:	494d      	ldr	r1, [pc, #308]	; (80058b0 <_dtoa_r+0x630>)
 800577c:	2000      	movs	r0, #0
 800577e:	f7fb f87d 	bl	800087c <__aeabi_ddiv>
 8005782:	4652      	mov	r2, sl
 8005784:	465b      	mov	r3, fp
 8005786:	f7fa fd97 	bl	80002b8 <__aeabi_dsub>
 800578a:	9d01      	ldr	r5, [sp, #4]
 800578c:	4682      	mov	sl, r0
 800578e:	468b      	mov	fp, r1
 8005790:	4649      	mov	r1, r9
 8005792:	4640      	mov	r0, r8
 8005794:	f7fb f9f8 	bl	8000b88 <__aeabi_d2iz>
 8005798:	4606      	mov	r6, r0
 800579a:	f7fa fedb 	bl	8000554 <__aeabi_i2d>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7fa fd87 	bl	80002b8 <__aeabi_dsub>
 80057aa:	3630      	adds	r6, #48	; 0x30
 80057ac:	f805 6b01 	strb.w	r6, [r5], #1
 80057b0:	4652      	mov	r2, sl
 80057b2:	465b      	mov	r3, fp
 80057b4:	4680      	mov	r8, r0
 80057b6:	4689      	mov	r9, r1
 80057b8:	f7fb f9a8 	bl	8000b0c <__aeabi_dcmplt>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d163      	bne.n	8005888 <_dtoa_r+0x608>
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	4936      	ldr	r1, [pc, #216]	; (80058a0 <_dtoa_r+0x620>)
 80057c6:	2000      	movs	r0, #0
 80057c8:	f7fa fd76 	bl	80002b8 <__aeabi_dsub>
 80057cc:	4652      	mov	r2, sl
 80057ce:	465b      	mov	r3, fp
 80057d0:	f7fb f99c 	bl	8000b0c <__aeabi_dcmplt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 80b5 	bne.w	8005944 <_dtoa_r+0x6c4>
 80057da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057dc:	429d      	cmp	r5, r3
 80057de:	d081      	beq.n	80056e4 <_dtoa_r+0x464>
 80057e0:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <_dtoa_r+0x624>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	4650      	mov	r0, sl
 80057e6:	4659      	mov	r1, fp
 80057e8:	f7fa ff1e 	bl	8000628 <__aeabi_dmul>
 80057ec:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <_dtoa_r+0x624>)
 80057ee:	4682      	mov	sl, r0
 80057f0:	468b      	mov	fp, r1
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	2200      	movs	r2, #0
 80057f8:	f7fa ff16 	bl	8000628 <__aeabi_dmul>
 80057fc:	4680      	mov	r8, r0
 80057fe:	4689      	mov	r9, r1
 8005800:	e7c6      	b.n	8005790 <_dtoa_r+0x510>
 8005802:	4650      	mov	r0, sl
 8005804:	4659      	mov	r1, fp
 8005806:	f7fa ff0f 	bl	8000628 <__aeabi_dmul>
 800580a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800580c:	9d01      	ldr	r5, [sp, #4]
 800580e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005810:	4682      	mov	sl, r0
 8005812:	468b      	mov	fp, r1
 8005814:	4649      	mov	r1, r9
 8005816:	4640      	mov	r0, r8
 8005818:	f7fb f9b6 	bl	8000b88 <__aeabi_d2iz>
 800581c:	4606      	mov	r6, r0
 800581e:	f7fa fe99 	bl	8000554 <__aeabi_i2d>
 8005822:	3630      	adds	r6, #48	; 0x30
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fa fd44 	bl	80002b8 <__aeabi_dsub>
 8005830:	f805 6b01 	strb.w	r6, [r5], #1
 8005834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005836:	429d      	cmp	r5, r3
 8005838:	4680      	mov	r8, r0
 800583a:	4689      	mov	r9, r1
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	d124      	bne.n	800588c <_dtoa_r+0x60c>
 8005842:	4b1b      	ldr	r3, [pc, #108]	; (80058b0 <_dtoa_r+0x630>)
 8005844:	4650      	mov	r0, sl
 8005846:	4659      	mov	r1, fp
 8005848:	f7fa fd38 	bl	80002bc <__adddf3>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fb f978 	bl	8000b48 <__aeabi_dcmpgt>
 8005858:	2800      	cmp	r0, #0
 800585a:	d173      	bne.n	8005944 <_dtoa_r+0x6c4>
 800585c:	4652      	mov	r2, sl
 800585e:	465b      	mov	r3, fp
 8005860:	4913      	ldr	r1, [pc, #76]	; (80058b0 <_dtoa_r+0x630>)
 8005862:	2000      	movs	r0, #0
 8005864:	f7fa fd28 	bl	80002b8 <__aeabi_dsub>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	f7fb f94c 	bl	8000b0c <__aeabi_dcmplt>
 8005874:	2800      	cmp	r0, #0
 8005876:	f43f af35 	beq.w	80056e4 <_dtoa_r+0x464>
 800587a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800587c:	1e6b      	subs	r3, r5, #1
 800587e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005880:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d0f8      	beq.n	800587a <_dtoa_r+0x5fa>
 8005888:	9700      	str	r7, [sp, #0]
 800588a:	e049      	b.n	8005920 <_dtoa_r+0x6a0>
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <_dtoa_r+0x624>)
 800588e:	f7fa fecb 	bl	8000628 <__aeabi_dmul>
 8005892:	4680      	mov	r8, r0
 8005894:	4689      	mov	r9, r1
 8005896:	e7bd      	b.n	8005814 <_dtoa_r+0x594>
 8005898:	08007630 	.word	0x08007630
 800589c:	08007608 	.word	0x08007608
 80058a0:	3ff00000 	.word	0x3ff00000
 80058a4:	40240000 	.word	0x40240000
 80058a8:	401c0000 	.word	0x401c0000
 80058ac:	40140000 	.word	0x40140000
 80058b0:	3fe00000 	.word	0x3fe00000
 80058b4:	9d01      	ldr	r5, [sp, #4]
 80058b6:	4656      	mov	r6, sl
 80058b8:	465f      	mov	r7, fp
 80058ba:	4642      	mov	r2, r8
 80058bc:	464b      	mov	r3, r9
 80058be:	4630      	mov	r0, r6
 80058c0:	4639      	mov	r1, r7
 80058c2:	f7fa ffdb 	bl	800087c <__aeabi_ddiv>
 80058c6:	f7fb f95f 	bl	8000b88 <__aeabi_d2iz>
 80058ca:	4682      	mov	sl, r0
 80058cc:	f7fa fe42 	bl	8000554 <__aeabi_i2d>
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	f7fa fea8 	bl	8000628 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058e4:	f7fa fce8 	bl	80002b8 <__aeabi_dsub>
 80058e8:	f805 6b01 	strb.w	r6, [r5], #1
 80058ec:	9e01      	ldr	r6, [sp, #4]
 80058ee:	9f03      	ldr	r7, [sp, #12]
 80058f0:	1bae      	subs	r6, r5, r6
 80058f2:	42b7      	cmp	r7, r6
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	d135      	bne.n	8005966 <_dtoa_r+0x6e6>
 80058fa:	f7fa fcdf 	bl	80002bc <__adddf3>
 80058fe:	4642      	mov	r2, r8
 8005900:	464b      	mov	r3, r9
 8005902:	4606      	mov	r6, r0
 8005904:	460f      	mov	r7, r1
 8005906:	f7fb f91f 	bl	8000b48 <__aeabi_dcmpgt>
 800590a:	b9d0      	cbnz	r0, 8005942 <_dtoa_r+0x6c2>
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fb f8f0 	bl	8000af8 <__aeabi_dcmpeq>
 8005918:	b110      	cbz	r0, 8005920 <_dtoa_r+0x6a0>
 800591a:	f01a 0f01 	tst.w	sl, #1
 800591e:	d110      	bne.n	8005942 <_dtoa_r+0x6c2>
 8005920:	4620      	mov	r0, r4
 8005922:	ee18 1a10 	vmov	r1, s16
 8005926:	f000 fbed 	bl	8006104 <_Bfree>
 800592a:	2300      	movs	r3, #0
 800592c:	9800      	ldr	r0, [sp, #0]
 800592e:	702b      	strb	r3, [r5, #0]
 8005930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005932:	3001      	adds	r0, #1
 8005934:	6018      	str	r0, [r3, #0]
 8005936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005938:	2b00      	cmp	r3, #0
 800593a:	f43f acf1 	beq.w	8005320 <_dtoa_r+0xa0>
 800593e:	601d      	str	r5, [r3, #0]
 8005940:	e4ee      	b.n	8005320 <_dtoa_r+0xa0>
 8005942:	9f00      	ldr	r7, [sp, #0]
 8005944:	462b      	mov	r3, r5
 8005946:	461d      	mov	r5, r3
 8005948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800594c:	2a39      	cmp	r2, #57	; 0x39
 800594e:	d106      	bne.n	800595e <_dtoa_r+0x6de>
 8005950:	9a01      	ldr	r2, [sp, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d1f7      	bne.n	8005946 <_dtoa_r+0x6c6>
 8005956:	9901      	ldr	r1, [sp, #4]
 8005958:	2230      	movs	r2, #48	; 0x30
 800595a:	3701      	adds	r7, #1
 800595c:	700a      	strb	r2, [r1, #0]
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	3201      	adds	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e790      	b.n	8005888 <_dtoa_r+0x608>
 8005966:	4ba6      	ldr	r3, [pc, #664]	; (8005c00 <_dtoa_r+0x980>)
 8005968:	2200      	movs	r2, #0
 800596a:	f7fa fe5d 	bl	8000628 <__aeabi_dmul>
 800596e:	2200      	movs	r2, #0
 8005970:	2300      	movs	r3, #0
 8005972:	4606      	mov	r6, r0
 8005974:	460f      	mov	r7, r1
 8005976:	f7fb f8bf 	bl	8000af8 <__aeabi_dcmpeq>
 800597a:	2800      	cmp	r0, #0
 800597c:	d09d      	beq.n	80058ba <_dtoa_r+0x63a>
 800597e:	e7cf      	b.n	8005920 <_dtoa_r+0x6a0>
 8005980:	9a08      	ldr	r2, [sp, #32]
 8005982:	2a00      	cmp	r2, #0
 8005984:	f000 80d7 	beq.w	8005b36 <_dtoa_r+0x8b6>
 8005988:	9a06      	ldr	r2, [sp, #24]
 800598a:	2a01      	cmp	r2, #1
 800598c:	f300 80ba 	bgt.w	8005b04 <_dtoa_r+0x884>
 8005990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005992:	2a00      	cmp	r2, #0
 8005994:	f000 80b2 	beq.w	8005afc <_dtoa_r+0x87c>
 8005998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800599c:	9e07      	ldr	r6, [sp, #28]
 800599e:	9d04      	ldr	r5, [sp, #16]
 80059a0:	9a04      	ldr	r2, [sp, #16]
 80059a2:	441a      	add	r2, r3
 80059a4:	9204      	str	r2, [sp, #16]
 80059a6:	9a05      	ldr	r2, [sp, #20]
 80059a8:	2101      	movs	r1, #1
 80059aa:	441a      	add	r2, r3
 80059ac:	4620      	mov	r0, r4
 80059ae:	9205      	str	r2, [sp, #20]
 80059b0:	f000 fc60 	bl	8006274 <__i2b>
 80059b4:	4607      	mov	r7, r0
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	dd0c      	ble.n	80059d4 <_dtoa_r+0x754>
 80059ba:	9b05      	ldr	r3, [sp, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd09      	ble.n	80059d4 <_dtoa_r+0x754>
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	9a04      	ldr	r2, [sp, #16]
 80059c4:	bfa8      	it	ge
 80059c6:	462b      	movge	r3, r5
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	9204      	str	r2, [sp, #16]
 80059cc:	9a05      	ldr	r2, [sp, #20]
 80059ce:	1aed      	subs	r5, r5, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	9305      	str	r3, [sp, #20]
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	b31b      	cbz	r3, 8005a20 <_dtoa_r+0x7a0>
 80059d8:	9b08      	ldr	r3, [sp, #32]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80af 	beq.w	8005b3e <_dtoa_r+0x8be>
 80059e0:	2e00      	cmp	r6, #0
 80059e2:	dd13      	ble.n	8005a0c <_dtoa_r+0x78c>
 80059e4:	4639      	mov	r1, r7
 80059e6:	4632      	mov	r2, r6
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fd03 	bl	80063f4 <__pow5mult>
 80059ee:	ee18 2a10 	vmov	r2, s16
 80059f2:	4601      	mov	r1, r0
 80059f4:	4607      	mov	r7, r0
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 fc52 	bl	80062a0 <__multiply>
 80059fc:	ee18 1a10 	vmov	r1, s16
 8005a00:	4680      	mov	r8, r0
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 fb7e 	bl	8006104 <_Bfree>
 8005a08:	ee08 8a10 	vmov	s16, r8
 8005a0c:	9b07      	ldr	r3, [sp, #28]
 8005a0e:	1b9a      	subs	r2, r3, r6
 8005a10:	d006      	beq.n	8005a20 <_dtoa_r+0x7a0>
 8005a12:	ee18 1a10 	vmov	r1, s16
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 fcec 	bl	80063f4 <__pow5mult>
 8005a1c:	ee08 0a10 	vmov	s16, r0
 8005a20:	2101      	movs	r1, #1
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 fc26 	bl	8006274 <__i2b>
 8005a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	f340 8088 	ble.w	8005b42 <_dtoa_r+0x8c2>
 8005a32:	461a      	mov	r2, r3
 8005a34:	4601      	mov	r1, r0
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 fcdc 	bl	80063f4 <__pow5mult>
 8005a3c:	9b06      	ldr	r3, [sp, #24]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	4606      	mov	r6, r0
 8005a42:	f340 8081 	ble.w	8005b48 <_dtoa_r+0x8c8>
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	6933      	ldr	r3, [r6, #16]
 8005a4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a50:	6918      	ldr	r0, [r3, #16]
 8005a52:	f000 fbbf 	bl	80061d4 <__hi0bits>
 8005a56:	f1c0 0020 	rsb	r0, r0, #32
 8005a5a:	9b05      	ldr	r3, [sp, #20]
 8005a5c:	4418      	add	r0, r3
 8005a5e:	f010 001f 	ands.w	r0, r0, #31
 8005a62:	f000 8092 	beq.w	8005b8a <_dtoa_r+0x90a>
 8005a66:	f1c0 0320 	rsb	r3, r0, #32
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	f340 808a 	ble.w	8005b84 <_dtoa_r+0x904>
 8005a70:	f1c0 001c 	rsb	r0, r0, #28
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	4403      	add	r3, r0
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	9b05      	ldr	r3, [sp, #20]
 8005a7c:	4403      	add	r3, r0
 8005a7e:	4405      	add	r5, r0
 8005a80:	9305      	str	r3, [sp, #20]
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	dd07      	ble.n	8005a98 <_dtoa_r+0x818>
 8005a88:	ee18 1a10 	vmov	r1, s16
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fd0a 	bl	80064a8 <__lshift>
 8005a94:	ee08 0a10 	vmov	s16, r0
 8005a98:	9b05      	ldr	r3, [sp, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dd05      	ble.n	8005aaa <_dtoa_r+0x82a>
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fd00 	bl	80064a8 <__lshift>
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d06e      	beq.n	8005b8e <_dtoa_r+0x90e>
 8005ab0:	ee18 0a10 	vmov	r0, s16
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	f000 fd67 	bl	8006588 <__mcmp>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	da67      	bge.n	8005b8e <_dtoa_r+0x90e>
 8005abe:	9b00      	ldr	r3, [sp, #0]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	ee18 1a10 	vmov	r1, s16
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	220a      	movs	r2, #10
 8005aca:	2300      	movs	r3, #0
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 fb3b 	bl	8006148 <__multadd>
 8005ad2:	9b08      	ldr	r3, [sp, #32]
 8005ad4:	ee08 0a10 	vmov	s16, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 81b1 	beq.w	8005e40 <_dtoa_r+0xbc0>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	220a      	movs	r2, #10
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fb2f 	bl	8006148 <__multadd>
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	4607      	mov	r7, r0
 8005af0:	f300 808e 	bgt.w	8005c10 <_dtoa_r+0x990>
 8005af4:	9b06      	ldr	r3, [sp, #24]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	dc51      	bgt.n	8005b9e <_dtoa_r+0x91e>
 8005afa:	e089      	b.n	8005c10 <_dtoa_r+0x990>
 8005afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b02:	e74b      	b.n	800599c <_dtoa_r+0x71c>
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	1e5e      	subs	r6, r3, #1
 8005b08:	9b07      	ldr	r3, [sp, #28]
 8005b0a:	42b3      	cmp	r3, r6
 8005b0c:	bfbf      	itttt	lt
 8005b0e:	9b07      	ldrlt	r3, [sp, #28]
 8005b10:	9607      	strlt	r6, [sp, #28]
 8005b12:	1af2      	sublt	r2, r6, r3
 8005b14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b16:	bfb6      	itet	lt
 8005b18:	189b      	addlt	r3, r3, r2
 8005b1a:	1b9e      	subge	r6, r3, r6
 8005b1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	bfb8      	it	lt
 8005b22:	2600      	movlt	r6, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bfb7      	itett	lt
 8005b28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b30:	1a9d      	sublt	r5, r3, r2
 8005b32:	2300      	movlt	r3, #0
 8005b34:	e734      	b.n	80059a0 <_dtoa_r+0x720>
 8005b36:	9e07      	ldr	r6, [sp, #28]
 8005b38:	9d04      	ldr	r5, [sp, #16]
 8005b3a:	9f08      	ldr	r7, [sp, #32]
 8005b3c:	e73b      	b.n	80059b6 <_dtoa_r+0x736>
 8005b3e:	9a07      	ldr	r2, [sp, #28]
 8005b40:	e767      	b.n	8005a12 <_dtoa_r+0x792>
 8005b42:	9b06      	ldr	r3, [sp, #24]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	dc18      	bgt.n	8005b7a <_dtoa_r+0x8fa>
 8005b48:	f1ba 0f00 	cmp.w	sl, #0
 8005b4c:	d115      	bne.n	8005b7a <_dtoa_r+0x8fa>
 8005b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b52:	b993      	cbnz	r3, 8005b7a <_dtoa_r+0x8fa>
 8005b54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b58:	0d1b      	lsrs	r3, r3, #20
 8005b5a:	051b      	lsls	r3, r3, #20
 8005b5c:	b183      	cbz	r3, 8005b80 <_dtoa_r+0x900>
 8005b5e:	9b04      	ldr	r3, [sp, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	9b05      	ldr	r3, [sp, #20]
 8005b66:	3301      	adds	r3, #1
 8005b68:	9305      	str	r3, [sp, #20]
 8005b6a:	f04f 0801 	mov.w	r8, #1
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af6a 	bne.w	8005a4a <_dtoa_r+0x7ca>
 8005b76:	2001      	movs	r0, #1
 8005b78:	e76f      	b.n	8005a5a <_dtoa_r+0x7da>
 8005b7a:	f04f 0800 	mov.w	r8, #0
 8005b7e:	e7f6      	b.n	8005b6e <_dtoa_r+0x8ee>
 8005b80:	4698      	mov	r8, r3
 8005b82:	e7f4      	b.n	8005b6e <_dtoa_r+0x8ee>
 8005b84:	f43f af7d 	beq.w	8005a82 <_dtoa_r+0x802>
 8005b88:	4618      	mov	r0, r3
 8005b8a:	301c      	adds	r0, #28
 8005b8c:	e772      	b.n	8005a74 <_dtoa_r+0x7f4>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc37      	bgt.n	8005c04 <_dtoa_r+0x984>
 8005b94:	9b06      	ldr	r3, [sp, #24]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	dd34      	ble.n	8005c04 <_dtoa_r+0x984>
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	9302      	str	r3, [sp, #8]
 8005b9e:	9b02      	ldr	r3, [sp, #8]
 8005ba0:	b96b      	cbnz	r3, 8005bbe <_dtoa_r+0x93e>
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	2205      	movs	r2, #5
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 face 	bl	8006148 <__multadd>
 8005bac:	4601      	mov	r1, r0
 8005bae:	4606      	mov	r6, r0
 8005bb0:	ee18 0a10 	vmov	r0, s16
 8005bb4:	f000 fce8 	bl	8006588 <__mcmp>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f73f adbb 	bgt.w	8005734 <_dtoa_r+0x4b4>
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	9d01      	ldr	r5, [sp, #4]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	f04f 0800 	mov.w	r8, #0
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 fa99 	bl	8006104 <_Bfree>
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	f43f aea4 	beq.w	8005920 <_dtoa_r+0x6a0>
 8005bd8:	f1b8 0f00 	cmp.w	r8, #0
 8005bdc:	d005      	beq.n	8005bea <_dtoa_r+0x96a>
 8005bde:	45b8      	cmp	r8, r7
 8005be0:	d003      	beq.n	8005bea <_dtoa_r+0x96a>
 8005be2:	4641      	mov	r1, r8
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 fa8d 	bl	8006104 <_Bfree>
 8005bea:	4639      	mov	r1, r7
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fa89 	bl	8006104 <_Bfree>
 8005bf2:	e695      	b.n	8005920 <_dtoa_r+0x6a0>
 8005bf4:	2600      	movs	r6, #0
 8005bf6:	4637      	mov	r7, r6
 8005bf8:	e7e1      	b.n	8005bbe <_dtoa_r+0x93e>
 8005bfa:	9700      	str	r7, [sp, #0]
 8005bfc:	4637      	mov	r7, r6
 8005bfe:	e599      	b.n	8005734 <_dtoa_r+0x4b4>
 8005c00:	40240000 	.word	0x40240000
 8005c04:	9b08      	ldr	r3, [sp, #32]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80ca 	beq.w	8005da0 <_dtoa_r+0xb20>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	dd05      	ble.n	8005c20 <_dtoa_r+0x9a0>
 8005c14:	4639      	mov	r1, r7
 8005c16:	462a      	mov	r2, r5
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fc45 	bl	80064a8 <__lshift>
 8005c1e:	4607      	mov	r7, r0
 8005c20:	f1b8 0f00 	cmp.w	r8, #0
 8005c24:	d05b      	beq.n	8005cde <_dtoa_r+0xa5e>
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 fa2b 	bl	8006084 <_Balloc>
 8005c2e:	4605      	mov	r5, r0
 8005c30:	b928      	cbnz	r0, 8005c3e <_dtoa_r+0x9be>
 8005c32:	4b87      	ldr	r3, [pc, #540]	; (8005e50 <_dtoa_r+0xbd0>)
 8005c34:	4602      	mov	r2, r0
 8005c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c3a:	f7ff bb3b 	b.w	80052b4 <_dtoa_r+0x34>
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	3202      	adds	r2, #2
 8005c42:	0092      	lsls	r2, r2, #2
 8005c44:	f107 010c 	add.w	r1, r7, #12
 8005c48:	300c      	adds	r0, #12
 8005c4a:	f000 fa0d 	bl	8006068 <memcpy>
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4629      	mov	r1, r5
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fc28 	bl	80064a8 <__lshift>
 8005c58:	9b01      	ldr	r3, [sp, #4]
 8005c5a:	f103 0901 	add.w	r9, r3, #1
 8005c5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	f00a 0301 	and.w	r3, sl, #1
 8005c6a:	46b8      	mov	r8, r7
 8005c6c:	9304      	str	r3, [sp, #16]
 8005c6e:	4607      	mov	r7, r0
 8005c70:	4631      	mov	r1, r6
 8005c72:	ee18 0a10 	vmov	r0, s16
 8005c76:	f7ff fa75 	bl	8005164 <quorem>
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	9002      	str	r0, [sp, #8]
 8005c7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c82:	ee18 0a10 	vmov	r0, s16
 8005c86:	f000 fc7f 	bl	8006588 <__mcmp>
 8005c8a:	463a      	mov	r2, r7
 8005c8c:	9003      	str	r0, [sp, #12]
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fc95 	bl	80065c0 <__mdiff>
 8005c96:	68c2      	ldr	r2, [r0, #12]
 8005c98:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	bb02      	cbnz	r2, 8005ce2 <_dtoa_r+0xa62>
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	ee18 0a10 	vmov	r0, s16
 8005ca6:	f000 fc6f 	bl	8006588 <__mcmp>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4629      	mov	r1, r5
 8005cae:	4620      	mov	r0, r4
 8005cb0:	9207      	str	r2, [sp, #28]
 8005cb2:	f000 fa27 	bl	8006104 <_Bfree>
 8005cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005cba:	ea43 0102 	orr.w	r1, r3, r2
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	464d      	mov	r5, r9
 8005cc4:	d10f      	bne.n	8005ce6 <_dtoa_r+0xa66>
 8005cc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cca:	d02a      	beq.n	8005d22 <_dtoa_r+0xaa2>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dd02      	ble.n	8005cd8 <_dtoa_r+0xa58>
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cd8:	f88b a000 	strb.w	sl, [fp]
 8005cdc:	e775      	b.n	8005bca <_dtoa_r+0x94a>
 8005cde:	4638      	mov	r0, r7
 8005ce0:	e7ba      	b.n	8005c58 <_dtoa_r+0x9d8>
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	e7e2      	b.n	8005cac <_dtoa_r+0xa2c>
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db04      	blt.n	8005cf6 <_dtoa_r+0xa76>
 8005cec:	9906      	ldr	r1, [sp, #24]
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	9904      	ldr	r1, [sp, #16]
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	d122      	bne.n	8005d3c <_dtoa_r+0xabc>
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	ddee      	ble.n	8005cd8 <_dtoa_r+0xa58>
 8005cfa:	ee18 1a10 	vmov	r1, s16
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fbd1 	bl	80064a8 <__lshift>
 8005d06:	4631      	mov	r1, r6
 8005d08:	ee08 0a10 	vmov	s16, r0
 8005d0c:	f000 fc3c 	bl	8006588 <__mcmp>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	dc03      	bgt.n	8005d1c <_dtoa_r+0xa9c>
 8005d14:	d1e0      	bne.n	8005cd8 <_dtoa_r+0xa58>
 8005d16:	f01a 0f01 	tst.w	sl, #1
 8005d1a:	d0dd      	beq.n	8005cd8 <_dtoa_r+0xa58>
 8005d1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d20:	d1d7      	bne.n	8005cd2 <_dtoa_r+0xa52>
 8005d22:	2339      	movs	r3, #57	; 0x39
 8005d24:	f88b 3000 	strb.w	r3, [fp]
 8005d28:	462b      	mov	r3, r5
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d32:	2a39      	cmp	r2, #57	; 0x39
 8005d34:	d071      	beq.n	8005e1a <_dtoa_r+0xb9a>
 8005d36:	3201      	adds	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e746      	b.n	8005bca <_dtoa_r+0x94a>
 8005d3c:	2a00      	cmp	r2, #0
 8005d3e:	dd07      	ble.n	8005d50 <_dtoa_r+0xad0>
 8005d40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d44:	d0ed      	beq.n	8005d22 <_dtoa_r+0xaa2>
 8005d46:	f10a 0301 	add.w	r3, sl, #1
 8005d4a:	f88b 3000 	strb.w	r3, [fp]
 8005d4e:	e73c      	b.n	8005bca <_dtoa_r+0x94a>
 8005d50:	9b05      	ldr	r3, [sp, #20]
 8005d52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d56:	4599      	cmp	r9, r3
 8005d58:	d047      	beq.n	8005dea <_dtoa_r+0xb6a>
 8005d5a:	ee18 1a10 	vmov	r1, s16
 8005d5e:	2300      	movs	r3, #0
 8005d60:	220a      	movs	r2, #10
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f9f0 	bl	8006148 <__multadd>
 8005d68:	45b8      	cmp	r8, r7
 8005d6a:	ee08 0a10 	vmov	s16, r0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	f04f 020a 	mov.w	r2, #10
 8005d76:	4641      	mov	r1, r8
 8005d78:	4620      	mov	r0, r4
 8005d7a:	d106      	bne.n	8005d8a <_dtoa_r+0xb0a>
 8005d7c:	f000 f9e4 	bl	8006148 <__multadd>
 8005d80:	4680      	mov	r8, r0
 8005d82:	4607      	mov	r7, r0
 8005d84:	f109 0901 	add.w	r9, r9, #1
 8005d88:	e772      	b.n	8005c70 <_dtoa_r+0x9f0>
 8005d8a:	f000 f9dd 	bl	8006148 <__multadd>
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4680      	mov	r8, r0
 8005d92:	2300      	movs	r3, #0
 8005d94:	220a      	movs	r2, #10
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f9d6 	bl	8006148 <__multadd>
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	e7f1      	b.n	8005d84 <_dtoa_r+0xb04>
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	9302      	str	r3, [sp, #8]
 8005da4:	9d01      	ldr	r5, [sp, #4]
 8005da6:	ee18 0a10 	vmov	r0, s16
 8005daa:	4631      	mov	r1, r6
 8005dac:	f7ff f9da 	bl	8005164 <quorem>
 8005db0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005db4:	9b01      	ldr	r3, [sp, #4]
 8005db6:	f805 ab01 	strb.w	sl, [r5], #1
 8005dba:	1aea      	subs	r2, r5, r3
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	dd09      	ble.n	8005dd6 <_dtoa_r+0xb56>
 8005dc2:	ee18 1a10 	vmov	r1, s16
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	220a      	movs	r2, #10
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f9bc 	bl	8006148 <__multadd>
 8005dd0:	ee08 0a10 	vmov	s16, r0
 8005dd4:	e7e7      	b.n	8005da6 <_dtoa_r+0xb26>
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bfc8      	it	gt
 8005ddc:	461d      	movgt	r5, r3
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	bfd8      	it	le
 8005de2:	2501      	movle	r5, #1
 8005de4:	441d      	add	r5, r3
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	ee18 1a10 	vmov	r1, s16
 8005dee:	2201      	movs	r2, #1
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fb59 	bl	80064a8 <__lshift>
 8005df6:	4631      	mov	r1, r6
 8005df8:	ee08 0a10 	vmov	s16, r0
 8005dfc:	f000 fbc4 	bl	8006588 <__mcmp>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	dc91      	bgt.n	8005d28 <_dtoa_r+0xaa8>
 8005e04:	d102      	bne.n	8005e0c <_dtoa_r+0xb8c>
 8005e06:	f01a 0f01 	tst.w	sl, #1
 8005e0a:	d18d      	bne.n	8005d28 <_dtoa_r+0xaa8>
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	461d      	mov	r5, r3
 8005e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e14:	2a30      	cmp	r2, #48	; 0x30
 8005e16:	d0fa      	beq.n	8005e0e <_dtoa_r+0xb8e>
 8005e18:	e6d7      	b.n	8005bca <_dtoa_r+0x94a>
 8005e1a:	9a01      	ldr	r2, [sp, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d184      	bne.n	8005d2a <_dtoa_r+0xaaa>
 8005e20:	9b00      	ldr	r3, [sp, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	2331      	movs	r3, #49	; 0x31
 8005e28:	7013      	strb	r3, [r2, #0]
 8005e2a:	e6ce      	b.n	8005bca <_dtoa_r+0x94a>
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <_dtoa_r+0xbd4>)
 8005e2e:	f7ff ba95 	b.w	800535c <_dtoa_r+0xdc>
 8005e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f47f aa6e 	bne.w	8005316 <_dtoa_r+0x96>
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <_dtoa_r+0xbd8>)
 8005e3c:	f7ff ba8e 	b.w	800535c <_dtoa_r+0xdc>
 8005e40:	9b02      	ldr	r3, [sp, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dcae      	bgt.n	8005da4 <_dtoa_r+0xb24>
 8005e46:	9b06      	ldr	r3, [sp, #24]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	f73f aea8 	bgt.w	8005b9e <_dtoa_r+0x91e>
 8005e4e:	e7a9      	b.n	8005da4 <_dtoa_r+0xb24>
 8005e50:	08007538 	.word	0x08007538
 8005e54:	08007394 	.word	0x08007394
 8005e58:	080074b9 	.word	0x080074b9

08005e5c <std>:
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	4604      	mov	r4, r0
 8005e62:	e9c0 3300 	strd	r3, r3, [r0]
 8005e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e6a:	6083      	str	r3, [r0, #8]
 8005e6c:	8181      	strh	r1, [r0, #12]
 8005e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e70:	81c2      	strh	r2, [r0, #14]
 8005e72:	6183      	str	r3, [r0, #24]
 8005e74:	4619      	mov	r1, r3
 8005e76:	2208      	movs	r2, #8
 8005e78:	305c      	adds	r0, #92	; 0x5c
 8005e7a:	f7fe fc5d 	bl	8004738 <memset>
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <std+0x38>)
 8005e80:	6263      	str	r3, [r4, #36]	; 0x24
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <std+0x3c>)
 8005e84:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <std+0x40>)
 8005e88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <std+0x44>)
 8005e8c:	6224      	str	r4, [r4, #32]
 8005e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	bf00      	nop
 8005e94:	08006c4d 	.word	0x08006c4d
 8005e98:	08006c6f 	.word	0x08006c6f
 8005e9c:	08006ca7 	.word	0x08006ca7
 8005ea0:	08006ccb 	.word	0x08006ccb

08005ea4 <_cleanup_r>:
 8005ea4:	4901      	ldr	r1, [pc, #4]	; (8005eac <_cleanup_r+0x8>)
 8005ea6:	f000 b8af 	b.w	8006008 <_fwalk_reent>
 8005eaa:	bf00      	nop
 8005eac:	08006fe1 	.word	0x08006fe1

08005eb0 <__sfmoreglue>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	2268      	movs	r2, #104	; 0x68
 8005eb4:	1e4d      	subs	r5, r1, #1
 8005eb6:	4355      	muls	r5, r2
 8005eb8:	460e      	mov	r6, r1
 8005eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ebe:	f000 fce7 	bl	8006890 <_malloc_r>
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	b140      	cbz	r0, 8005ed8 <__sfmoreglue+0x28>
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	e9c0 1600 	strd	r1, r6, [r0]
 8005ecc:	300c      	adds	r0, #12
 8005ece:	60a0      	str	r0, [r4, #8]
 8005ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ed4:	f7fe fc30 	bl	8004738 <memset>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}

08005edc <__sfp_lock_acquire>:
 8005edc:	4801      	ldr	r0, [pc, #4]	; (8005ee4 <__sfp_lock_acquire+0x8>)
 8005ede:	f000 b8b8 	b.w	8006052 <__retarget_lock_acquire_recursive>
 8005ee2:	bf00      	nop
 8005ee4:	20000291 	.word	0x20000291

08005ee8 <__sfp_lock_release>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__sfp_lock_release+0x8>)
 8005eea:	f000 b8b3 	b.w	8006054 <__retarget_lock_release_recursive>
 8005eee:	bf00      	nop
 8005ef0:	20000291 	.word	0x20000291

08005ef4 <__sinit_lock_acquire>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__sinit_lock_acquire+0x8>)
 8005ef6:	f000 b8ac 	b.w	8006052 <__retarget_lock_acquire_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000292 	.word	0x20000292

08005f00 <__sinit_lock_release>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__sinit_lock_release+0x8>)
 8005f02:	f000 b8a7 	b.w	8006054 <__retarget_lock_release_recursive>
 8005f06:	bf00      	nop
 8005f08:	20000292 	.word	0x20000292

08005f0c <__sinit>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	4604      	mov	r4, r0
 8005f10:	f7ff fff0 	bl	8005ef4 <__sinit_lock_acquire>
 8005f14:	69a3      	ldr	r3, [r4, #24]
 8005f16:	b11b      	cbz	r3, 8005f20 <__sinit+0x14>
 8005f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f1c:	f7ff bff0 	b.w	8005f00 <__sinit_lock_release>
 8005f20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f24:	6523      	str	r3, [r4, #80]	; 0x50
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <__sinit+0x68>)
 8005f28:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <__sinit+0x6c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f2e:	42a3      	cmp	r3, r4
 8005f30:	bf04      	itt	eq
 8005f32:	2301      	moveq	r3, #1
 8005f34:	61a3      	streq	r3, [r4, #24]
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f820 	bl	8005f7c <__sfp>
 8005f3c:	6060      	str	r0, [r4, #4]
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 f81c 	bl	8005f7c <__sfp>
 8005f44:	60a0      	str	r0, [r4, #8]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f818 	bl	8005f7c <__sfp>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	60e0      	str	r0, [r4, #12]
 8005f50:	2104      	movs	r1, #4
 8005f52:	6860      	ldr	r0, [r4, #4]
 8005f54:	f7ff ff82 	bl	8005e5c <std>
 8005f58:	68a0      	ldr	r0, [r4, #8]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	2109      	movs	r1, #9
 8005f5e:	f7ff ff7d 	bl	8005e5c <std>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	2202      	movs	r2, #2
 8005f66:	2112      	movs	r1, #18
 8005f68:	f7ff ff78 	bl	8005e5c <std>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	61a3      	str	r3, [r4, #24]
 8005f70:	e7d2      	b.n	8005f18 <__sinit+0xc>
 8005f72:	bf00      	nop
 8005f74:	08007380 	.word	0x08007380
 8005f78:	08005ea5 	.word	0x08005ea5

08005f7c <__sfp>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	4607      	mov	r7, r0
 8005f80:	f7ff ffac 	bl	8005edc <__sfp_lock_acquire>
 8005f84:	4b1e      	ldr	r3, [pc, #120]	; (8006000 <__sfp+0x84>)
 8005f86:	681e      	ldr	r6, [r3, #0]
 8005f88:	69b3      	ldr	r3, [r6, #24]
 8005f8a:	b913      	cbnz	r3, 8005f92 <__sfp+0x16>
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f7ff ffbd 	bl	8005f0c <__sinit>
 8005f92:	3648      	adds	r6, #72	; 0x48
 8005f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	d503      	bpl.n	8005fa4 <__sfp+0x28>
 8005f9c:	6833      	ldr	r3, [r6, #0]
 8005f9e:	b30b      	cbz	r3, 8005fe4 <__sfp+0x68>
 8005fa0:	6836      	ldr	r6, [r6, #0]
 8005fa2:	e7f7      	b.n	8005f94 <__sfp+0x18>
 8005fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fa8:	b9d5      	cbnz	r5, 8005fe0 <__sfp+0x64>
 8005faa:	4b16      	ldr	r3, [pc, #88]	; (8006004 <__sfp+0x88>)
 8005fac:	60e3      	str	r3, [r4, #12]
 8005fae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fb2:	6665      	str	r5, [r4, #100]	; 0x64
 8005fb4:	f000 f84c 	bl	8006050 <__retarget_lock_init_recursive>
 8005fb8:	f7ff ff96 	bl	8005ee8 <__sfp_lock_release>
 8005fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fc4:	6025      	str	r5, [r4, #0]
 8005fc6:	61a5      	str	r5, [r4, #24]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fd0:	f7fe fbb2 	bl	8004738 <memset>
 8005fd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe0:	3468      	adds	r4, #104	; 0x68
 8005fe2:	e7d9      	b.n	8005f98 <__sfp+0x1c>
 8005fe4:	2104      	movs	r1, #4
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f7ff ff62 	bl	8005eb0 <__sfmoreglue>
 8005fec:	4604      	mov	r4, r0
 8005fee:	6030      	str	r0, [r6, #0]
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d1d5      	bne.n	8005fa0 <__sfp+0x24>
 8005ff4:	f7ff ff78 	bl	8005ee8 <__sfp_lock_release>
 8005ff8:	230c      	movs	r3, #12
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	e7ee      	b.n	8005fdc <__sfp+0x60>
 8005ffe:	bf00      	nop
 8006000:	08007380 	.word	0x08007380
 8006004:	ffff0001 	.word	0xffff0001

08006008 <_fwalk_reent>:
 8006008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800600c:	4606      	mov	r6, r0
 800600e:	4688      	mov	r8, r1
 8006010:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006014:	2700      	movs	r7, #0
 8006016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800601a:	f1b9 0901 	subs.w	r9, r9, #1
 800601e:	d505      	bpl.n	800602c <_fwalk_reent+0x24>
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	2c00      	cmp	r4, #0
 8006024:	d1f7      	bne.n	8006016 <_fwalk_reent+0xe>
 8006026:	4638      	mov	r0, r7
 8006028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d907      	bls.n	8006042 <_fwalk_reent+0x3a>
 8006032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006036:	3301      	adds	r3, #1
 8006038:	d003      	beq.n	8006042 <_fwalk_reent+0x3a>
 800603a:	4629      	mov	r1, r5
 800603c:	4630      	mov	r0, r6
 800603e:	47c0      	blx	r8
 8006040:	4307      	orrs	r7, r0
 8006042:	3568      	adds	r5, #104	; 0x68
 8006044:	e7e9      	b.n	800601a <_fwalk_reent+0x12>
	...

08006048 <_localeconv_r>:
 8006048:	4800      	ldr	r0, [pc, #0]	; (800604c <_localeconv_r+0x4>)
 800604a:	4770      	bx	lr
 800604c:	20000160 	.word	0x20000160

08006050 <__retarget_lock_init_recursive>:
 8006050:	4770      	bx	lr

08006052 <__retarget_lock_acquire_recursive>:
 8006052:	4770      	bx	lr

08006054 <__retarget_lock_release_recursive>:
 8006054:	4770      	bx	lr
	...

08006058 <malloc>:
 8006058:	4b02      	ldr	r3, [pc, #8]	; (8006064 <malloc+0xc>)
 800605a:	4601      	mov	r1, r0
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	f000 bc17 	b.w	8006890 <_malloc_r>
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c

08006068 <memcpy>:
 8006068:	440a      	add	r2, r1
 800606a:	4291      	cmp	r1, r2
 800606c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006070:	d100      	bne.n	8006074 <memcpy+0xc>
 8006072:	4770      	bx	lr
 8006074:	b510      	push	{r4, lr}
 8006076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607e:	4291      	cmp	r1, r2
 8006080:	d1f9      	bne.n	8006076 <memcpy+0xe>
 8006082:	bd10      	pop	{r4, pc}

08006084 <_Balloc>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006088:	4604      	mov	r4, r0
 800608a:	460d      	mov	r5, r1
 800608c:	b976      	cbnz	r6, 80060ac <_Balloc+0x28>
 800608e:	2010      	movs	r0, #16
 8006090:	f7ff ffe2 	bl	8006058 <malloc>
 8006094:	4602      	mov	r2, r0
 8006096:	6260      	str	r0, [r4, #36]	; 0x24
 8006098:	b920      	cbnz	r0, 80060a4 <_Balloc+0x20>
 800609a:	4b18      	ldr	r3, [pc, #96]	; (80060fc <_Balloc+0x78>)
 800609c:	4818      	ldr	r0, [pc, #96]	; (8006100 <_Balloc+0x7c>)
 800609e:	2166      	movs	r1, #102	; 0x66
 80060a0:	f000 feea 	bl	8006e78 <__assert_func>
 80060a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060a8:	6006      	str	r6, [r0, #0]
 80060aa:	60c6      	str	r6, [r0, #12]
 80060ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060ae:	68f3      	ldr	r3, [r6, #12]
 80060b0:	b183      	cbz	r3, 80060d4 <_Balloc+0x50>
 80060b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ba:	b9b8      	cbnz	r0, 80060ec <_Balloc+0x68>
 80060bc:	2101      	movs	r1, #1
 80060be:	fa01 f605 	lsl.w	r6, r1, r5
 80060c2:	1d72      	adds	r2, r6, #5
 80060c4:	0092      	lsls	r2, r2, #2
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fb60 	bl	800678c <_calloc_r>
 80060cc:	b160      	cbz	r0, 80060e8 <_Balloc+0x64>
 80060ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060d2:	e00e      	b.n	80060f2 <_Balloc+0x6e>
 80060d4:	2221      	movs	r2, #33	; 0x21
 80060d6:	2104      	movs	r1, #4
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fb57 	bl	800678c <_calloc_r>
 80060de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e0:	60f0      	str	r0, [r6, #12]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e4      	bne.n	80060b2 <_Balloc+0x2e>
 80060e8:	2000      	movs	r0, #0
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	6802      	ldr	r2, [r0, #0]
 80060ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060f2:	2300      	movs	r3, #0
 80060f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060f8:	e7f7      	b.n	80060ea <_Balloc+0x66>
 80060fa:	bf00      	nop
 80060fc:	080074c6 	.word	0x080074c6
 8006100:	080075ac 	.word	0x080075ac

08006104 <_Bfree>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006108:	4605      	mov	r5, r0
 800610a:	460c      	mov	r4, r1
 800610c:	b976      	cbnz	r6, 800612c <_Bfree+0x28>
 800610e:	2010      	movs	r0, #16
 8006110:	f7ff ffa2 	bl	8006058 <malloc>
 8006114:	4602      	mov	r2, r0
 8006116:	6268      	str	r0, [r5, #36]	; 0x24
 8006118:	b920      	cbnz	r0, 8006124 <_Bfree+0x20>
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <_Bfree+0x3c>)
 800611c:	4809      	ldr	r0, [pc, #36]	; (8006144 <_Bfree+0x40>)
 800611e:	218a      	movs	r1, #138	; 0x8a
 8006120:	f000 feaa 	bl	8006e78 <__assert_func>
 8006124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006128:	6006      	str	r6, [r0, #0]
 800612a:	60c6      	str	r6, [r0, #12]
 800612c:	b13c      	cbz	r4, 800613e <_Bfree+0x3a>
 800612e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006130:	6862      	ldr	r2, [r4, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006138:	6021      	str	r1, [r4, #0]
 800613a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	080074c6 	.word	0x080074c6
 8006144:	080075ac 	.word	0x080075ac

08006148 <__multadd>:
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	690d      	ldr	r5, [r1, #16]
 800614e:	4607      	mov	r7, r0
 8006150:	460c      	mov	r4, r1
 8006152:	461e      	mov	r6, r3
 8006154:	f101 0c14 	add.w	ip, r1, #20
 8006158:	2000      	movs	r0, #0
 800615a:	f8dc 3000 	ldr.w	r3, [ip]
 800615e:	b299      	uxth	r1, r3
 8006160:	fb02 6101 	mla	r1, r2, r1, r6
 8006164:	0c1e      	lsrs	r6, r3, #16
 8006166:	0c0b      	lsrs	r3, r1, #16
 8006168:	fb02 3306 	mla	r3, r2, r6, r3
 800616c:	b289      	uxth	r1, r1
 800616e:	3001      	adds	r0, #1
 8006170:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006174:	4285      	cmp	r5, r0
 8006176:	f84c 1b04 	str.w	r1, [ip], #4
 800617a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800617e:	dcec      	bgt.n	800615a <__multadd+0x12>
 8006180:	b30e      	cbz	r6, 80061c6 <__multadd+0x7e>
 8006182:	68a3      	ldr	r3, [r4, #8]
 8006184:	42ab      	cmp	r3, r5
 8006186:	dc19      	bgt.n	80061bc <__multadd+0x74>
 8006188:	6861      	ldr	r1, [r4, #4]
 800618a:	4638      	mov	r0, r7
 800618c:	3101      	adds	r1, #1
 800618e:	f7ff ff79 	bl	8006084 <_Balloc>
 8006192:	4680      	mov	r8, r0
 8006194:	b928      	cbnz	r0, 80061a2 <__multadd+0x5a>
 8006196:	4602      	mov	r2, r0
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <__multadd+0x84>)
 800619a:	480d      	ldr	r0, [pc, #52]	; (80061d0 <__multadd+0x88>)
 800619c:	21b5      	movs	r1, #181	; 0xb5
 800619e:	f000 fe6b 	bl	8006e78 <__assert_func>
 80061a2:	6922      	ldr	r2, [r4, #16]
 80061a4:	3202      	adds	r2, #2
 80061a6:	f104 010c 	add.w	r1, r4, #12
 80061aa:	0092      	lsls	r2, r2, #2
 80061ac:	300c      	adds	r0, #12
 80061ae:	f7ff ff5b 	bl	8006068 <memcpy>
 80061b2:	4621      	mov	r1, r4
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ffa5 	bl	8006104 <_Bfree>
 80061ba:	4644      	mov	r4, r8
 80061bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061c0:	3501      	adds	r5, #1
 80061c2:	615e      	str	r6, [r3, #20]
 80061c4:	6125      	str	r5, [r4, #16]
 80061c6:	4620      	mov	r0, r4
 80061c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061cc:	08007538 	.word	0x08007538
 80061d0:	080075ac 	.word	0x080075ac

080061d4 <__hi0bits>:
 80061d4:	0c03      	lsrs	r3, r0, #16
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	b9d3      	cbnz	r3, 8006210 <__hi0bits+0x3c>
 80061da:	0400      	lsls	r0, r0, #16
 80061dc:	2310      	movs	r3, #16
 80061de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80061e2:	bf04      	itt	eq
 80061e4:	0200      	lsleq	r0, r0, #8
 80061e6:	3308      	addeq	r3, #8
 80061e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80061ec:	bf04      	itt	eq
 80061ee:	0100      	lsleq	r0, r0, #4
 80061f0:	3304      	addeq	r3, #4
 80061f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80061f6:	bf04      	itt	eq
 80061f8:	0080      	lsleq	r0, r0, #2
 80061fa:	3302      	addeq	r3, #2
 80061fc:	2800      	cmp	r0, #0
 80061fe:	db05      	blt.n	800620c <__hi0bits+0x38>
 8006200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006204:	f103 0301 	add.w	r3, r3, #1
 8006208:	bf08      	it	eq
 800620a:	2320      	moveq	r3, #32
 800620c:	4618      	mov	r0, r3
 800620e:	4770      	bx	lr
 8006210:	2300      	movs	r3, #0
 8006212:	e7e4      	b.n	80061de <__hi0bits+0xa>

08006214 <__lo0bits>:
 8006214:	6803      	ldr	r3, [r0, #0]
 8006216:	f013 0207 	ands.w	r2, r3, #7
 800621a:	4601      	mov	r1, r0
 800621c:	d00b      	beq.n	8006236 <__lo0bits+0x22>
 800621e:	07da      	lsls	r2, r3, #31
 8006220:	d423      	bmi.n	800626a <__lo0bits+0x56>
 8006222:	0798      	lsls	r0, r3, #30
 8006224:	bf49      	itett	mi
 8006226:	085b      	lsrmi	r3, r3, #1
 8006228:	089b      	lsrpl	r3, r3, #2
 800622a:	2001      	movmi	r0, #1
 800622c:	600b      	strmi	r3, [r1, #0]
 800622e:	bf5c      	itt	pl
 8006230:	600b      	strpl	r3, [r1, #0]
 8006232:	2002      	movpl	r0, #2
 8006234:	4770      	bx	lr
 8006236:	b298      	uxth	r0, r3
 8006238:	b9a8      	cbnz	r0, 8006266 <__lo0bits+0x52>
 800623a:	0c1b      	lsrs	r3, r3, #16
 800623c:	2010      	movs	r0, #16
 800623e:	b2da      	uxtb	r2, r3
 8006240:	b90a      	cbnz	r2, 8006246 <__lo0bits+0x32>
 8006242:	3008      	adds	r0, #8
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	071a      	lsls	r2, r3, #28
 8006248:	bf04      	itt	eq
 800624a:	091b      	lsreq	r3, r3, #4
 800624c:	3004      	addeq	r0, #4
 800624e:	079a      	lsls	r2, r3, #30
 8006250:	bf04      	itt	eq
 8006252:	089b      	lsreq	r3, r3, #2
 8006254:	3002      	addeq	r0, #2
 8006256:	07da      	lsls	r2, r3, #31
 8006258:	d403      	bmi.n	8006262 <__lo0bits+0x4e>
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	f100 0001 	add.w	r0, r0, #1
 8006260:	d005      	beq.n	800626e <__lo0bits+0x5a>
 8006262:	600b      	str	r3, [r1, #0]
 8006264:	4770      	bx	lr
 8006266:	4610      	mov	r0, r2
 8006268:	e7e9      	b.n	800623e <__lo0bits+0x2a>
 800626a:	2000      	movs	r0, #0
 800626c:	4770      	bx	lr
 800626e:	2020      	movs	r0, #32
 8006270:	4770      	bx	lr
	...

08006274 <__i2b>:
 8006274:	b510      	push	{r4, lr}
 8006276:	460c      	mov	r4, r1
 8006278:	2101      	movs	r1, #1
 800627a:	f7ff ff03 	bl	8006084 <_Balloc>
 800627e:	4602      	mov	r2, r0
 8006280:	b928      	cbnz	r0, 800628e <__i2b+0x1a>
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <__i2b+0x24>)
 8006284:	4805      	ldr	r0, [pc, #20]	; (800629c <__i2b+0x28>)
 8006286:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800628a:	f000 fdf5 	bl	8006e78 <__assert_func>
 800628e:	2301      	movs	r3, #1
 8006290:	6144      	str	r4, [r0, #20]
 8006292:	6103      	str	r3, [r0, #16]
 8006294:	bd10      	pop	{r4, pc}
 8006296:	bf00      	nop
 8006298:	08007538 	.word	0x08007538
 800629c:	080075ac 	.word	0x080075ac

080062a0 <__multiply>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	4691      	mov	r9, r2
 80062a6:	690a      	ldr	r2, [r1, #16]
 80062a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	bfb8      	it	lt
 80062b0:	460b      	movlt	r3, r1
 80062b2:	460c      	mov	r4, r1
 80062b4:	bfbc      	itt	lt
 80062b6:	464c      	movlt	r4, r9
 80062b8:	4699      	movlt	r9, r3
 80062ba:	6927      	ldr	r7, [r4, #16]
 80062bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062c0:	68a3      	ldr	r3, [r4, #8]
 80062c2:	6861      	ldr	r1, [r4, #4]
 80062c4:	eb07 060a 	add.w	r6, r7, sl
 80062c8:	42b3      	cmp	r3, r6
 80062ca:	b085      	sub	sp, #20
 80062cc:	bfb8      	it	lt
 80062ce:	3101      	addlt	r1, #1
 80062d0:	f7ff fed8 	bl	8006084 <_Balloc>
 80062d4:	b930      	cbnz	r0, 80062e4 <__multiply+0x44>
 80062d6:	4602      	mov	r2, r0
 80062d8:	4b44      	ldr	r3, [pc, #272]	; (80063ec <__multiply+0x14c>)
 80062da:	4845      	ldr	r0, [pc, #276]	; (80063f0 <__multiply+0x150>)
 80062dc:	f240 115d 	movw	r1, #349	; 0x15d
 80062e0:	f000 fdca 	bl	8006e78 <__assert_func>
 80062e4:	f100 0514 	add.w	r5, r0, #20
 80062e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062ec:	462b      	mov	r3, r5
 80062ee:	2200      	movs	r2, #0
 80062f0:	4543      	cmp	r3, r8
 80062f2:	d321      	bcc.n	8006338 <__multiply+0x98>
 80062f4:	f104 0314 	add.w	r3, r4, #20
 80062f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062fc:	f109 0314 	add.w	r3, r9, #20
 8006300:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	1b3a      	subs	r2, r7, r4
 8006308:	3a15      	subs	r2, #21
 800630a:	f022 0203 	bic.w	r2, r2, #3
 800630e:	3204      	adds	r2, #4
 8006310:	f104 0115 	add.w	r1, r4, #21
 8006314:	428f      	cmp	r7, r1
 8006316:	bf38      	it	cc
 8006318:	2204      	movcc	r2, #4
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9a02      	ldr	r2, [sp, #8]
 800631e:	9303      	str	r3, [sp, #12]
 8006320:	429a      	cmp	r2, r3
 8006322:	d80c      	bhi.n	800633e <__multiply+0x9e>
 8006324:	2e00      	cmp	r6, #0
 8006326:	dd03      	ble.n	8006330 <__multiply+0x90>
 8006328:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05a      	beq.n	80063e6 <__multiply+0x146>
 8006330:	6106      	str	r6, [r0, #16]
 8006332:	b005      	add	sp, #20
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	f843 2b04 	str.w	r2, [r3], #4
 800633c:	e7d8      	b.n	80062f0 <__multiply+0x50>
 800633e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006342:	f1ba 0f00 	cmp.w	sl, #0
 8006346:	d024      	beq.n	8006392 <__multiply+0xf2>
 8006348:	f104 0e14 	add.w	lr, r4, #20
 800634c:	46a9      	mov	r9, r5
 800634e:	f04f 0c00 	mov.w	ip, #0
 8006352:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006356:	f8d9 1000 	ldr.w	r1, [r9]
 800635a:	fa1f fb82 	uxth.w	fp, r2
 800635e:	b289      	uxth	r1, r1
 8006360:	fb0a 110b 	mla	r1, sl, fp, r1
 8006364:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006368:	f8d9 2000 	ldr.w	r2, [r9]
 800636c:	4461      	add	r1, ip
 800636e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006372:	fb0a c20b 	mla	r2, sl, fp, ip
 8006376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800637a:	b289      	uxth	r1, r1
 800637c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006380:	4577      	cmp	r7, lr
 8006382:	f849 1b04 	str.w	r1, [r9], #4
 8006386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800638a:	d8e2      	bhi.n	8006352 <__multiply+0xb2>
 800638c:	9a01      	ldr	r2, [sp, #4]
 800638e:	f845 c002 	str.w	ip, [r5, r2]
 8006392:	9a03      	ldr	r2, [sp, #12]
 8006394:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006398:	3304      	adds	r3, #4
 800639a:	f1b9 0f00 	cmp.w	r9, #0
 800639e:	d020      	beq.n	80063e2 <__multiply+0x142>
 80063a0:	6829      	ldr	r1, [r5, #0]
 80063a2:	f104 0c14 	add.w	ip, r4, #20
 80063a6:	46ae      	mov	lr, r5
 80063a8:	f04f 0a00 	mov.w	sl, #0
 80063ac:	f8bc b000 	ldrh.w	fp, [ip]
 80063b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063b4:	fb09 220b 	mla	r2, r9, fp, r2
 80063b8:	4492      	add	sl, r2
 80063ba:	b289      	uxth	r1, r1
 80063bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063c0:	f84e 1b04 	str.w	r1, [lr], #4
 80063c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063c8:	f8be 1000 	ldrh.w	r1, [lr]
 80063cc:	0c12      	lsrs	r2, r2, #16
 80063ce:	fb09 1102 	mla	r1, r9, r2, r1
 80063d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063d6:	4567      	cmp	r7, ip
 80063d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063dc:	d8e6      	bhi.n	80063ac <__multiply+0x10c>
 80063de:	9a01      	ldr	r2, [sp, #4]
 80063e0:	50a9      	str	r1, [r5, r2]
 80063e2:	3504      	adds	r5, #4
 80063e4:	e79a      	b.n	800631c <__multiply+0x7c>
 80063e6:	3e01      	subs	r6, #1
 80063e8:	e79c      	b.n	8006324 <__multiply+0x84>
 80063ea:	bf00      	nop
 80063ec:	08007538 	.word	0x08007538
 80063f0:	080075ac 	.word	0x080075ac

080063f4 <__pow5mult>:
 80063f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f8:	4615      	mov	r5, r2
 80063fa:	f012 0203 	ands.w	r2, r2, #3
 80063fe:	4606      	mov	r6, r0
 8006400:	460f      	mov	r7, r1
 8006402:	d007      	beq.n	8006414 <__pow5mult+0x20>
 8006404:	4c25      	ldr	r4, [pc, #148]	; (800649c <__pow5mult+0xa8>)
 8006406:	3a01      	subs	r2, #1
 8006408:	2300      	movs	r3, #0
 800640a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800640e:	f7ff fe9b 	bl	8006148 <__multadd>
 8006412:	4607      	mov	r7, r0
 8006414:	10ad      	asrs	r5, r5, #2
 8006416:	d03d      	beq.n	8006494 <__pow5mult+0xa0>
 8006418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800641a:	b97c      	cbnz	r4, 800643c <__pow5mult+0x48>
 800641c:	2010      	movs	r0, #16
 800641e:	f7ff fe1b 	bl	8006058 <malloc>
 8006422:	4602      	mov	r2, r0
 8006424:	6270      	str	r0, [r6, #36]	; 0x24
 8006426:	b928      	cbnz	r0, 8006434 <__pow5mult+0x40>
 8006428:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <__pow5mult+0xac>)
 800642a:	481e      	ldr	r0, [pc, #120]	; (80064a4 <__pow5mult+0xb0>)
 800642c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006430:	f000 fd22 	bl	8006e78 <__assert_func>
 8006434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006438:	6004      	str	r4, [r0, #0]
 800643a:	60c4      	str	r4, [r0, #12]
 800643c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006444:	b94c      	cbnz	r4, 800645a <__pow5mult+0x66>
 8006446:	f240 2171 	movw	r1, #625	; 0x271
 800644a:	4630      	mov	r0, r6
 800644c:	f7ff ff12 	bl	8006274 <__i2b>
 8006450:	2300      	movs	r3, #0
 8006452:	f8c8 0008 	str.w	r0, [r8, #8]
 8006456:	4604      	mov	r4, r0
 8006458:	6003      	str	r3, [r0, #0]
 800645a:	f04f 0900 	mov.w	r9, #0
 800645e:	07eb      	lsls	r3, r5, #31
 8006460:	d50a      	bpl.n	8006478 <__pow5mult+0x84>
 8006462:	4639      	mov	r1, r7
 8006464:	4622      	mov	r2, r4
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff ff1a 	bl	80062a0 <__multiply>
 800646c:	4639      	mov	r1, r7
 800646e:	4680      	mov	r8, r0
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff fe47 	bl	8006104 <_Bfree>
 8006476:	4647      	mov	r7, r8
 8006478:	106d      	asrs	r5, r5, #1
 800647a:	d00b      	beq.n	8006494 <__pow5mult+0xa0>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	b938      	cbnz	r0, 8006490 <__pow5mult+0x9c>
 8006480:	4622      	mov	r2, r4
 8006482:	4621      	mov	r1, r4
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff ff0b 	bl	80062a0 <__multiply>
 800648a:	6020      	str	r0, [r4, #0]
 800648c:	f8c0 9000 	str.w	r9, [r0]
 8006490:	4604      	mov	r4, r0
 8006492:	e7e4      	b.n	800645e <__pow5mult+0x6a>
 8006494:	4638      	mov	r0, r7
 8006496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649a:	bf00      	nop
 800649c:	080076f8 	.word	0x080076f8
 80064a0:	080074c6 	.word	0x080074c6
 80064a4:	080075ac 	.word	0x080075ac

080064a8 <__lshift>:
 80064a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ac:	460c      	mov	r4, r1
 80064ae:	6849      	ldr	r1, [r1, #4]
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	4607      	mov	r7, r0
 80064ba:	4691      	mov	r9, r2
 80064bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064c0:	f108 0601 	add.w	r6, r8, #1
 80064c4:	42b3      	cmp	r3, r6
 80064c6:	db0b      	blt.n	80064e0 <__lshift+0x38>
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff fddb 	bl	8006084 <_Balloc>
 80064ce:	4605      	mov	r5, r0
 80064d0:	b948      	cbnz	r0, 80064e6 <__lshift+0x3e>
 80064d2:	4602      	mov	r2, r0
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <__lshift+0xd8>)
 80064d6:	482b      	ldr	r0, [pc, #172]	; (8006584 <__lshift+0xdc>)
 80064d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064dc:	f000 fccc 	bl	8006e78 <__assert_func>
 80064e0:	3101      	adds	r1, #1
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	e7ee      	b.n	80064c4 <__lshift+0x1c>
 80064e6:	2300      	movs	r3, #0
 80064e8:	f100 0114 	add.w	r1, r0, #20
 80064ec:	f100 0210 	add.w	r2, r0, #16
 80064f0:	4618      	mov	r0, r3
 80064f2:	4553      	cmp	r3, sl
 80064f4:	db37      	blt.n	8006566 <__lshift+0xbe>
 80064f6:	6920      	ldr	r0, [r4, #16]
 80064f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064fc:	f104 0314 	add.w	r3, r4, #20
 8006500:	f019 091f 	ands.w	r9, r9, #31
 8006504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800650c:	d02f      	beq.n	800656e <__lshift+0xc6>
 800650e:	f1c9 0e20 	rsb	lr, r9, #32
 8006512:	468a      	mov	sl, r1
 8006514:	f04f 0c00 	mov.w	ip, #0
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	fa02 f209 	lsl.w	r2, r2, r9
 800651e:	ea42 020c 	orr.w	r2, r2, ip
 8006522:	f84a 2b04 	str.w	r2, [sl], #4
 8006526:	f853 2b04 	ldr.w	r2, [r3], #4
 800652a:	4298      	cmp	r0, r3
 800652c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006530:	d8f2      	bhi.n	8006518 <__lshift+0x70>
 8006532:	1b03      	subs	r3, r0, r4
 8006534:	3b15      	subs	r3, #21
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	3304      	adds	r3, #4
 800653c:	f104 0215 	add.w	r2, r4, #21
 8006540:	4290      	cmp	r0, r2
 8006542:	bf38      	it	cc
 8006544:	2304      	movcc	r3, #4
 8006546:	f841 c003 	str.w	ip, [r1, r3]
 800654a:	f1bc 0f00 	cmp.w	ip, #0
 800654e:	d001      	beq.n	8006554 <__lshift+0xac>
 8006550:	f108 0602 	add.w	r6, r8, #2
 8006554:	3e01      	subs	r6, #1
 8006556:	4638      	mov	r0, r7
 8006558:	612e      	str	r6, [r5, #16]
 800655a:	4621      	mov	r1, r4
 800655c:	f7ff fdd2 	bl	8006104 <_Bfree>
 8006560:	4628      	mov	r0, r5
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	f842 0f04 	str.w	r0, [r2, #4]!
 800656a:	3301      	adds	r3, #1
 800656c:	e7c1      	b.n	80064f2 <__lshift+0x4a>
 800656e:	3904      	subs	r1, #4
 8006570:	f853 2b04 	ldr.w	r2, [r3], #4
 8006574:	f841 2f04 	str.w	r2, [r1, #4]!
 8006578:	4298      	cmp	r0, r3
 800657a:	d8f9      	bhi.n	8006570 <__lshift+0xc8>
 800657c:	e7ea      	b.n	8006554 <__lshift+0xac>
 800657e:	bf00      	nop
 8006580:	08007538 	.word	0x08007538
 8006584:	080075ac 	.word	0x080075ac

08006588 <__mcmp>:
 8006588:	b530      	push	{r4, r5, lr}
 800658a:	6902      	ldr	r2, [r0, #16]
 800658c:	690c      	ldr	r4, [r1, #16]
 800658e:	1b12      	subs	r2, r2, r4
 8006590:	d10e      	bne.n	80065b0 <__mcmp+0x28>
 8006592:	f100 0314 	add.w	r3, r0, #20
 8006596:	3114      	adds	r1, #20
 8006598:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800659c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065a8:	42a5      	cmp	r5, r4
 80065aa:	d003      	beq.n	80065b4 <__mcmp+0x2c>
 80065ac:	d305      	bcc.n	80065ba <__mcmp+0x32>
 80065ae:	2201      	movs	r2, #1
 80065b0:	4610      	mov	r0, r2
 80065b2:	bd30      	pop	{r4, r5, pc}
 80065b4:	4283      	cmp	r3, r0
 80065b6:	d3f3      	bcc.n	80065a0 <__mcmp+0x18>
 80065b8:	e7fa      	b.n	80065b0 <__mcmp+0x28>
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	e7f7      	b.n	80065b0 <__mcmp+0x28>

080065c0 <__mdiff>:
 80065c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	460c      	mov	r4, r1
 80065c6:	4606      	mov	r6, r0
 80065c8:	4611      	mov	r1, r2
 80065ca:	4620      	mov	r0, r4
 80065cc:	4690      	mov	r8, r2
 80065ce:	f7ff ffdb 	bl	8006588 <__mcmp>
 80065d2:	1e05      	subs	r5, r0, #0
 80065d4:	d110      	bne.n	80065f8 <__mdiff+0x38>
 80065d6:	4629      	mov	r1, r5
 80065d8:	4630      	mov	r0, r6
 80065da:	f7ff fd53 	bl	8006084 <_Balloc>
 80065de:	b930      	cbnz	r0, 80065ee <__mdiff+0x2e>
 80065e0:	4b3a      	ldr	r3, [pc, #232]	; (80066cc <__mdiff+0x10c>)
 80065e2:	4602      	mov	r2, r0
 80065e4:	f240 2132 	movw	r1, #562	; 0x232
 80065e8:	4839      	ldr	r0, [pc, #228]	; (80066d0 <__mdiff+0x110>)
 80065ea:	f000 fc45 	bl	8006e78 <__assert_func>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	bfa4      	itt	ge
 80065fa:	4643      	movge	r3, r8
 80065fc:	46a0      	movge	r8, r4
 80065fe:	4630      	mov	r0, r6
 8006600:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006604:	bfa6      	itte	ge
 8006606:	461c      	movge	r4, r3
 8006608:	2500      	movge	r5, #0
 800660a:	2501      	movlt	r5, #1
 800660c:	f7ff fd3a 	bl	8006084 <_Balloc>
 8006610:	b920      	cbnz	r0, 800661c <__mdiff+0x5c>
 8006612:	4b2e      	ldr	r3, [pc, #184]	; (80066cc <__mdiff+0x10c>)
 8006614:	4602      	mov	r2, r0
 8006616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800661a:	e7e5      	b.n	80065e8 <__mdiff+0x28>
 800661c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006620:	6926      	ldr	r6, [r4, #16]
 8006622:	60c5      	str	r5, [r0, #12]
 8006624:	f104 0914 	add.w	r9, r4, #20
 8006628:	f108 0514 	add.w	r5, r8, #20
 800662c:	f100 0e14 	add.w	lr, r0, #20
 8006630:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006634:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006638:	f108 0210 	add.w	r2, r8, #16
 800663c:	46f2      	mov	sl, lr
 800663e:	2100      	movs	r1, #0
 8006640:	f859 3b04 	ldr.w	r3, [r9], #4
 8006644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006648:	fa1f f883 	uxth.w	r8, r3
 800664c:	fa11 f18b 	uxtah	r1, r1, fp
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	eba1 0808 	sub.w	r8, r1, r8
 8006656:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800665a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800665e:	fa1f f888 	uxth.w	r8, r8
 8006662:	1419      	asrs	r1, r3, #16
 8006664:	454e      	cmp	r6, r9
 8006666:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800666a:	f84a 3b04 	str.w	r3, [sl], #4
 800666e:	d8e7      	bhi.n	8006640 <__mdiff+0x80>
 8006670:	1b33      	subs	r3, r6, r4
 8006672:	3b15      	subs	r3, #21
 8006674:	f023 0303 	bic.w	r3, r3, #3
 8006678:	3304      	adds	r3, #4
 800667a:	3415      	adds	r4, #21
 800667c:	42a6      	cmp	r6, r4
 800667e:	bf38      	it	cc
 8006680:	2304      	movcc	r3, #4
 8006682:	441d      	add	r5, r3
 8006684:	4473      	add	r3, lr
 8006686:	469e      	mov	lr, r3
 8006688:	462e      	mov	r6, r5
 800668a:	4566      	cmp	r6, ip
 800668c:	d30e      	bcc.n	80066ac <__mdiff+0xec>
 800668e:	f10c 0203 	add.w	r2, ip, #3
 8006692:	1b52      	subs	r2, r2, r5
 8006694:	f022 0203 	bic.w	r2, r2, #3
 8006698:	3d03      	subs	r5, #3
 800669a:	45ac      	cmp	ip, r5
 800669c:	bf38      	it	cc
 800669e:	2200      	movcc	r2, #0
 80066a0:	441a      	add	r2, r3
 80066a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80066a6:	b17b      	cbz	r3, 80066c8 <__mdiff+0x108>
 80066a8:	6107      	str	r7, [r0, #16]
 80066aa:	e7a3      	b.n	80065f4 <__mdiff+0x34>
 80066ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80066b0:	fa11 f288 	uxtah	r2, r1, r8
 80066b4:	1414      	asrs	r4, r2, #16
 80066b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066ba:	b292      	uxth	r2, r2
 80066bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066c0:	f84e 2b04 	str.w	r2, [lr], #4
 80066c4:	1421      	asrs	r1, r4, #16
 80066c6:	e7e0      	b.n	800668a <__mdiff+0xca>
 80066c8:	3f01      	subs	r7, #1
 80066ca:	e7ea      	b.n	80066a2 <__mdiff+0xe2>
 80066cc:	08007538 	.word	0x08007538
 80066d0:	080075ac 	.word	0x080075ac

080066d4 <__d2b>:
 80066d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	4689      	mov	r9, r1
 80066da:	2101      	movs	r1, #1
 80066dc:	ec57 6b10 	vmov	r6, r7, d0
 80066e0:	4690      	mov	r8, r2
 80066e2:	f7ff fccf 	bl	8006084 <_Balloc>
 80066e6:	4604      	mov	r4, r0
 80066e8:	b930      	cbnz	r0, 80066f8 <__d2b+0x24>
 80066ea:	4602      	mov	r2, r0
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <__d2b+0xb0>)
 80066ee:	4826      	ldr	r0, [pc, #152]	; (8006788 <__d2b+0xb4>)
 80066f0:	f240 310a 	movw	r1, #778	; 0x30a
 80066f4:	f000 fbc0 	bl	8006e78 <__assert_func>
 80066f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80066fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006700:	bb35      	cbnz	r5, 8006750 <__d2b+0x7c>
 8006702:	2e00      	cmp	r6, #0
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	d028      	beq.n	800675a <__d2b+0x86>
 8006708:	4668      	mov	r0, sp
 800670a:	9600      	str	r6, [sp, #0]
 800670c:	f7ff fd82 	bl	8006214 <__lo0bits>
 8006710:	9900      	ldr	r1, [sp, #0]
 8006712:	b300      	cbz	r0, 8006756 <__d2b+0x82>
 8006714:	9a01      	ldr	r2, [sp, #4]
 8006716:	f1c0 0320 	rsb	r3, r0, #32
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	430b      	orrs	r3, r1
 8006720:	40c2      	lsrs	r2, r0
 8006722:	6163      	str	r3, [r4, #20]
 8006724:	9201      	str	r2, [sp, #4]
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	61a3      	str	r3, [r4, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2202      	movne	r2, #2
 8006730:	2201      	moveq	r2, #1
 8006732:	6122      	str	r2, [r4, #16]
 8006734:	b1d5      	cbz	r5, 800676c <__d2b+0x98>
 8006736:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800673a:	4405      	add	r5, r0
 800673c:	f8c9 5000 	str.w	r5, [r9]
 8006740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006744:	f8c8 0000 	str.w	r0, [r8]
 8006748:	4620      	mov	r0, r4
 800674a:	b003      	add	sp, #12
 800674c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006754:	e7d5      	b.n	8006702 <__d2b+0x2e>
 8006756:	6161      	str	r1, [r4, #20]
 8006758:	e7e5      	b.n	8006726 <__d2b+0x52>
 800675a:	a801      	add	r0, sp, #4
 800675c:	f7ff fd5a 	bl	8006214 <__lo0bits>
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	6163      	str	r3, [r4, #20]
 8006764:	2201      	movs	r2, #1
 8006766:	6122      	str	r2, [r4, #16]
 8006768:	3020      	adds	r0, #32
 800676a:	e7e3      	b.n	8006734 <__d2b+0x60>
 800676c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006770:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006774:	f8c9 0000 	str.w	r0, [r9]
 8006778:	6918      	ldr	r0, [r3, #16]
 800677a:	f7ff fd2b 	bl	80061d4 <__hi0bits>
 800677e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006782:	e7df      	b.n	8006744 <__d2b+0x70>
 8006784:	08007538 	.word	0x08007538
 8006788:	080075ac 	.word	0x080075ac

0800678c <_calloc_r>:
 800678c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800678e:	fba1 2402 	umull	r2, r4, r1, r2
 8006792:	b94c      	cbnz	r4, 80067a8 <_calloc_r+0x1c>
 8006794:	4611      	mov	r1, r2
 8006796:	9201      	str	r2, [sp, #4]
 8006798:	f000 f87a 	bl	8006890 <_malloc_r>
 800679c:	9a01      	ldr	r2, [sp, #4]
 800679e:	4605      	mov	r5, r0
 80067a0:	b930      	cbnz	r0, 80067b0 <_calloc_r+0x24>
 80067a2:	4628      	mov	r0, r5
 80067a4:	b003      	add	sp, #12
 80067a6:	bd30      	pop	{r4, r5, pc}
 80067a8:	220c      	movs	r2, #12
 80067aa:	6002      	str	r2, [r0, #0]
 80067ac:	2500      	movs	r5, #0
 80067ae:	e7f8      	b.n	80067a2 <_calloc_r+0x16>
 80067b0:	4621      	mov	r1, r4
 80067b2:	f7fd ffc1 	bl	8004738 <memset>
 80067b6:	e7f4      	b.n	80067a2 <_calloc_r+0x16>

080067b8 <_free_r>:
 80067b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ba:	2900      	cmp	r1, #0
 80067bc:	d044      	beq.n	8006848 <_free_r+0x90>
 80067be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c2:	9001      	str	r0, [sp, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f1a1 0404 	sub.w	r4, r1, #4
 80067ca:	bfb8      	it	lt
 80067cc:	18e4      	addlt	r4, r4, r3
 80067ce:	f000 fcdf 	bl	8007190 <__malloc_lock>
 80067d2:	4a1e      	ldr	r2, [pc, #120]	; (800684c <_free_r+0x94>)
 80067d4:	9801      	ldr	r0, [sp, #4]
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	b933      	cbnz	r3, 80067e8 <_free_r+0x30>
 80067da:	6063      	str	r3, [r4, #4]
 80067dc:	6014      	str	r4, [r2, #0]
 80067de:	b003      	add	sp, #12
 80067e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067e4:	f000 bcda 	b.w	800719c <__malloc_unlock>
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d908      	bls.n	80067fe <_free_r+0x46>
 80067ec:	6825      	ldr	r5, [r4, #0]
 80067ee:	1961      	adds	r1, r4, r5
 80067f0:	428b      	cmp	r3, r1
 80067f2:	bf01      	itttt	eq
 80067f4:	6819      	ldreq	r1, [r3, #0]
 80067f6:	685b      	ldreq	r3, [r3, #4]
 80067f8:	1949      	addeq	r1, r1, r5
 80067fa:	6021      	streq	r1, [r4, #0]
 80067fc:	e7ed      	b.n	80067da <_free_r+0x22>
 80067fe:	461a      	mov	r2, r3
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	b10b      	cbz	r3, 8006808 <_free_r+0x50>
 8006804:	42a3      	cmp	r3, r4
 8006806:	d9fa      	bls.n	80067fe <_free_r+0x46>
 8006808:	6811      	ldr	r1, [r2, #0]
 800680a:	1855      	adds	r5, r2, r1
 800680c:	42a5      	cmp	r5, r4
 800680e:	d10b      	bne.n	8006828 <_free_r+0x70>
 8006810:	6824      	ldr	r4, [r4, #0]
 8006812:	4421      	add	r1, r4
 8006814:	1854      	adds	r4, r2, r1
 8006816:	42a3      	cmp	r3, r4
 8006818:	6011      	str	r1, [r2, #0]
 800681a:	d1e0      	bne.n	80067de <_free_r+0x26>
 800681c:	681c      	ldr	r4, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	6053      	str	r3, [r2, #4]
 8006822:	4421      	add	r1, r4
 8006824:	6011      	str	r1, [r2, #0]
 8006826:	e7da      	b.n	80067de <_free_r+0x26>
 8006828:	d902      	bls.n	8006830 <_free_r+0x78>
 800682a:	230c      	movs	r3, #12
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	e7d6      	b.n	80067de <_free_r+0x26>
 8006830:	6825      	ldr	r5, [r4, #0]
 8006832:	1961      	adds	r1, r4, r5
 8006834:	428b      	cmp	r3, r1
 8006836:	bf04      	itt	eq
 8006838:	6819      	ldreq	r1, [r3, #0]
 800683a:	685b      	ldreq	r3, [r3, #4]
 800683c:	6063      	str	r3, [r4, #4]
 800683e:	bf04      	itt	eq
 8006840:	1949      	addeq	r1, r1, r5
 8006842:	6021      	streq	r1, [r4, #0]
 8006844:	6054      	str	r4, [r2, #4]
 8006846:	e7ca      	b.n	80067de <_free_r+0x26>
 8006848:	b003      	add	sp, #12
 800684a:	bd30      	pop	{r4, r5, pc}
 800684c:	20000294 	.word	0x20000294

08006850 <sbrk_aligned>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4e0e      	ldr	r6, [pc, #56]	; (800688c <sbrk_aligned+0x3c>)
 8006854:	460c      	mov	r4, r1
 8006856:	6831      	ldr	r1, [r6, #0]
 8006858:	4605      	mov	r5, r0
 800685a:	b911      	cbnz	r1, 8006862 <sbrk_aligned+0x12>
 800685c:	f000 f9e6 	bl	8006c2c <_sbrk_r>
 8006860:	6030      	str	r0, [r6, #0]
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f9e1 	bl	8006c2c <_sbrk_r>
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	d00a      	beq.n	8006884 <sbrk_aligned+0x34>
 800686e:	1cc4      	adds	r4, r0, #3
 8006870:	f024 0403 	bic.w	r4, r4, #3
 8006874:	42a0      	cmp	r0, r4
 8006876:	d007      	beq.n	8006888 <sbrk_aligned+0x38>
 8006878:	1a21      	subs	r1, r4, r0
 800687a:	4628      	mov	r0, r5
 800687c:	f000 f9d6 	bl	8006c2c <_sbrk_r>
 8006880:	3001      	adds	r0, #1
 8006882:	d101      	bne.n	8006888 <sbrk_aligned+0x38>
 8006884:	f04f 34ff 	mov.w	r4, #4294967295
 8006888:	4620      	mov	r0, r4
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	20000298 	.word	0x20000298

08006890 <_malloc_r>:
 8006890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	1ccd      	adds	r5, r1, #3
 8006896:	f025 0503 	bic.w	r5, r5, #3
 800689a:	3508      	adds	r5, #8
 800689c:	2d0c      	cmp	r5, #12
 800689e:	bf38      	it	cc
 80068a0:	250c      	movcc	r5, #12
 80068a2:	2d00      	cmp	r5, #0
 80068a4:	4607      	mov	r7, r0
 80068a6:	db01      	blt.n	80068ac <_malloc_r+0x1c>
 80068a8:	42a9      	cmp	r1, r5
 80068aa:	d905      	bls.n	80068b8 <_malloc_r+0x28>
 80068ac:	230c      	movs	r3, #12
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	2600      	movs	r6, #0
 80068b2:	4630      	mov	r0, r6
 80068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b8:	4e2e      	ldr	r6, [pc, #184]	; (8006974 <_malloc_r+0xe4>)
 80068ba:	f000 fc69 	bl	8007190 <__malloc_lock>
 80068be:	6833      	ldr	r3, [r6, #0]
 80068c0:	461c      	mov	r4, r3
 80068c2:	bb34      	cbnz	r4, 8006912 <_malloc_r+0x82>
 80068c4:	4629      	mov	r1, r5
 80068c6:	4638      	mov	r0, r7
 80068c8:	f7ff ffc2 	bl	8006850 <sbrk_aligned>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	4604      	mov	r4, r0
 80068d0:	d14d      	bne.n	800696e <_malloc_r+0xde>
 80068d2:	6834      	ldr	r4, [r6, #0]
 80068d4:	4626      	mov	r6, r4
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d140      	bne.n	800695c <_malloc_r+0xcc>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	4631      	mov	r1, r6
 80068de:	4638      	mov	r0, r7
 80068e0:	eb04 0803 	add.w	r8, r4, r3
 80068e4:	f000 f9a2 	bl	8006c2c <_sbrk_r>
 80068e8:	4580      	cmp	r8, r0
 80068ea:	d13a      	bne.n	8006962 <_malloc_r+0xd2>
 80068ec:	6821      	ldr	r1, [r4, #0]
 80068ee:	3503      	adds	r5, #3
 80068f0:	1a6d      	subs	r5, r5, r1
 80068f2:	f025 0503 	bic.w	r5, r5, #3
 80068f6:	3508      	adds	r5, #8
 80068f8:	2d0c      	cmp	r5, #12
 80068fa:	bf38      	it	cc
 80068fc:	250c      	movcc	r5, #12
 80068fe:	4629      	mov	r1, r5
 8006900:	4638      	mov	r0, r7
 8006902:	f7ff ffa5 	bl	8006850 <sbrk_aligned>
 8006906:	3001      	adds	r0, #1
 8006908:	d02b      	beq.n	8006962 <_malloc_r+0xd2>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	442b      	add	r3, r5
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	e00e      	b.n	8006930 <_malloc_r+0xa0>
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	1b52      	subs	r2, r2, r5
 8006916:	d41e      	bmi.n	8006956 <_malloc_r+0xc6>
 8006918:	2a0b      	cmp	r2, #11
 800691a:	d916      	bls.n	800694a <_malloc_r+0xba>
 800691c:	1961      	adds	r1, r4, r5
 800691e:	42a3      	cmp	r3, r4
 8006920:	6025      	str	r5, [r4, #0]
 8006922:	bf18      	it	ne
 8006924:	6059      	strne	r1, [r3, #4]
 8006926:	6863      	ldr	r3, [r4, #4]
 8006928:	bf08      	it	eq
 800692a:	6031      	streq	r1, [r6, #0]
 800692c:	5162      	str	r2, [r4, r5]
 800692e:	604b      	str	r3, [r1, #4]
 8006930:	4638      	mov	r0, r7
 8006932:	f104 060b 	add.w	r6, r4, #11
 8006936:	f000 fc31 	bl	800719c <__malloc_unlock>
 800693a:	f026 0607 	bic.w	r6, r6, #7
 800693e:	1d23      	adds	r3, r4, #4
 8006940:	1af2      	subs	r2, r6, r3
 8006942:	d0b6      	beq.n	80068b2 <_malloc_r+0x22>
 8006944:	1b9b      	subs	r3, r3, r6
 8006946:	50a3      	str	r3, [r4, r2]
 8006948:	e7b3      	b.n	80068b2 <_malloc_r+0x22>
 800694a:	6862      	ldr	r2, [r4, #4]
 800694c:	42a3      	cmp	r3, r4
 800694e:	bf0c      	ite	eq
 8006950:	6032      	streq	r2, [r6, #0]
 8006952:	605a      	strne	r2, [r3, #4]
 8006954:	e7ec      	b.n	8006930 <_malloc_r+0xa0>
 8006956:	4623      	mov	r3, r4
 8006958:	6864      	ldr	r4, [r4, #4]
 800695a:	e7b2      	b.n	80068c2 <_malloc_r+0x32>
 800695c:	4634      	mov	r4, r6
 800695e:	6876      	ldr	r6, [r6, #4]
 8006960:	e7b9      	b.n	80068d6 <_malloc_r+0x46>
 8006962:	230c      	movs	r3, #12
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	4638      	mov	r0, r7
 8006968:	f000 fc18 	bl	800719c <__malloc_unlock>
 800696c:	e7a1      	b.n	80068b2 <_malloc_r+0x22>
 800696e:	6025      	str	r5, [r4, #0]
 8006970:	e7de      	b.n	8006930 <_malloc_r+0xa0>
 8006972:	bf00      	nop
 8006974:	20000294 	.word	0x20000294

08006978 <__sfputc_r>:
 8006978:	6893      	ldr	r3, [r2, #8]
 800697a:	3b01      	subs	r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	b410      	push	{r4}
 8006980:	6093      	str	r3, [r2, #8]
 8006982:	da08      	bge.n	8006996 <__sfputc_r+0x1e>
 8006984:	6994      	ldr	r4, [r2, #24]
 8006986:	42a3      	cmp	r3, r4
 8006988:	db01      	blt.n	800698e <__sfputc_r+0x16>
 800698a:	290a      	cmp	r1, #10
 800698c:	d103      	bne.n	8006996 <__sfputc_r+0x1e>
 800698e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006992:	f000 b99f 	b.w	8006cd4 <__swbuf_r>
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	1c58      	adds	r0, r3, #1
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	7019      	strb	r1, [r3, #0]
 800699e:	4608      	mov	r0, r1
 80069a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <__sfputs_r>:
 80069a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a8:	4606      	mov	r6, r0
 80069aa:	460f      	mov	r7, r1
 80069ac:	4614      	mov	r4, r2
 80069ae:	18d5      	adds	r5, r2, r3
 80069b0:	42ac      	cmp	r4, r5
 80069b2:	d101      	bne.n	80069b8 <__sfputs_r+0x12>
 80069b4:	2000      	movs	r0, #0
 80069b6:	e007      	b.n	80069c8 <__sfputs_r+0x22>
 80069b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069bc:	463a      	mov	r2, r7
 80069be:	4630      	mov	r0, r6
 80069c0:	f7ff ffda 	bl	8006978 <__sfputc_r>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d1f3      	bne.n	80069b0 <__sfputs_r+0xa>
 80069c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069cc <_vfiprintf_r>:
 80069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	460d      	mov	r5, r1
 80069d2:	b09d      	sub	sp, #116	; 0x74
 80069d4:	4614      	mov	r4, r2
 80069d6:	4698      	mov	r8, r3
 80069d8:	4606      	mov	r6, r0
 80069da:	b118      	cbz	r0, 80069e4 <_vfiprintf_r+0x18>
 80069dc:	6983      	ldr	r3, [r0, #24]
 80069de:	b90b      	cbnz	r3, 80069e4 <_vfiprintf_r+0x18>
 80069e0:	f7ff fa94 	bl	8005f0c <__sinit>
 80069e4:	4b89      	ldr	r3, [pc, #548]	; (8006c0c <_vfiprintf_r+0x240>)
 80069e6:	429d      	cmp	r5, r3
 80069e8:	d11b      	bne.n	8006a22 <_vfiprintf_r+0x56>
 80069ea:	6875      	ldr	r5, [r6, #4]
 80069ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ee:	07d9      	lsls	r1, r3, #31
 80069f0:	d405      	bmi.n	80069fe <_vfiprintf_r+0x32>
 80069f2:	89ab      	ldrh	r3, [r5, #12]
 80069f4:	059a      	lsls	r2, r3, #22
 80069f6:	d402      	bmi.n	80069fe <_vfiprintf_r+0x32>
 80069f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fa:	f7ff fb2a 	bl	8006052 <__retarget_lock_acquire_recursive>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	071b      	lsls	r3, r3, #28
 8006a02:	d501      	bpl.n	8006a08 <_vfiprintf_r+0x3c>
 8006a04:	692b      	ldr	r3, [r5, #16]
 8006a06:	b9eb      	cbnz	r3, 8006a44 <_vfiprintf_r+0x78>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f9c6 	bl	8006d9c <__swsetup_r>
 8006a10:	b1c0      	cbz	r0, 8006a44 <_vfiprintf_r+0x78>
 8006a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a14:	07dc      	lsls	r4, r3, #31
 8006a16:	d50e      	bpl.n	8006a36 <_vfiprintf_r+0x6a>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	b01d      	add	sp, #116	; 0x74
 8006a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	4b7b      	ldr	r3, [pc, #492]	; (8006c10 <_vfiprintf_r+0x244>)
 8006a24:	429d      	cmp	r5, r3
 8006a26:	d101      	bne.n	8006a2c <_vfiprintf_r+0x60>
 8006a28:	68b5      	ldr	r5, [r6, #8]
 8006a2a:	e7df      	b.n	80069ec <_vfiprintf_r+0x20>
 8006a2c:	4b79      	ldr	r3, [pc, #484]	; (8006c14 <_vfiprintf_r+0x248>)
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	bf08      	it	eq
 8006a32:	68f5      	ldreq	r5, [r6, #12]
 8006a34:	e7da      	b.n	80069ec <_vfiprintf_r+0x20>
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	0598      	lsls	r0, r3, #22
 8006a3a:	d4ed      	bmi.n	8006a18 <_vfiprintf_r+0x4c>
 8006a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3e:	f7ff fb09 	bl	8006054 <__retarget_lock_release_recursive>
 8006a42:	e7e9      	b.n	8006a18 <_vfiprintf_r+0x4c>
 8006a44:	2300      	movs	r3, #0
 8006a46:	9309      	str	r3, [sp, #36]	; 0x24
 8006a48:	2320      	movs	r3, #32
 8006a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a52:	2330      	movs	r3, #48	; 0x30
 8006a54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c18 <_vfiprintf_r+0x24c>
 8006a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a5c:	f04f 0901 	mov.w	r9, #1
 8006a60:	4623      	mov	r3, r4
 8006a62:	469a      	mov	sl, r3
 8006a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a68:	b10a      	cbz	r2, 8006a6e <_vfiprintf_r+0xa2>
 8006a6a:	2a25      	cmp	r2, #37	; 0x25
 8006a6c:	d1f9      	bne.n	8006a62 <_vfiprintf_r+0x96>
 8006a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a72:	d00b      	beq.n	8006a8c <_vfiprintf_r+0xc0>
 8006a74:	465b      	mov	r3, fp
 8006a76:	4622      	mov	r2, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7ff ff93 	bl	80069a6 <__sfputs_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	f000 80aa 	beq.w	8006bda <_vfiprintf_r+0x20e>
 8006a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a88:	445a      	add	r2, fp
 8006a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80a2 	beq.w	8006bda <_vfiprintf_r+0x20e>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	9307      	str	r3, [sp, #28]
 8006aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aac:	931a      	str	r3, [sp, #104]	; 0x68
 8006aae:	4654      	mov	r4, sl
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab6:	4858      	ldr	r0, [pc, #352]	; (8006c18 <_vfiprintf_r+0x24c>)
 8006ab8:	f7f9 fbaa 	bl	8000210 <memchr>
 8006abc:	9a04      	ldr	r2, [sp, #16]
 8006abe:	b9d8      	cbnz	r0, 8006af8 <_vfiprintf_r+0x12c>
 8006ac0:	06d1      	lsls	r1, r2, #27
 8006ac2:	bf44      	itt	mi
 8006ac4:	2320      	movmi	r3, #32
 8006ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aca:	0713      	lsls	r3, r2, #28
 8006acc:	bf44      	itt	mi
 8006ace:	232b      	movmi	r3, #43	; 0x2b
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8006ada:	d015      	beq.n	8006b08 <_vfiprintf_r+0x13c>
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	4654      	mov	r4, sl
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f04f 0c0a 	mov.w	ip, #10
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aec:	3b30      	subs	r3, #48	; 0x30
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	d94e      	bls.n	8006b90 <_vfiprintf_r+0x1c4>
 8006af2:	b1b0      	cbz	r0, 8006b22 <_vfiprintf_r+0x156>
 8006af4:	9207      	str	r2, [sp, #28]
 8006af6:	e014      	b.n	8006b22 <_vfiprintf_r+0x156>
 8006af8:	eba0 0308 	sub.w	r3, r0, r8
 8006afc:	fa09 f303 	lsl.w	r3, r9, r3
 8006b00:	4313      	orrs	r3, r2
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	46a2      	mov	sl, r4
 8006b06:	e7d2      	b.n	8006aae <_vfiprintf_r+0xe2>
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	9103      	str	r1, [sp, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfbb      	ittet	lt
 8006b14:	425b      	neglt	r3, r3
 8006b16:	f042 0202 	orrlt.w	r2, r2, #2
 8006b1a:	9307      	strge	r3, [sp, #28]
 8006b1c:	9307      	strlt	r3, [sp, #28]
 8006b1e:	bfb8      	it	lt
 8006b20:	9204      	strlt	r2, [sp, #16]
 8006b22:	7823      	ldrb	r3, [r4, #0]
 8006b24:	2b2e      	cmp	r3, #46	; 0x2e
 8006b26:	d10c      	bne.n	8006b42 <_vfiprintf_r+0x176>
 8006b28:	7863      	ldrb	r3, [r4, #1]
 8006b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b2c:	d135      	bne.n	8006b9a <_vfiprintf_r+0x1ce>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	9203      	str	r2, [sp, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bfb8      	it	lt
 8006b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b3e:	3402      	adds	r4, #2
 8006b40:	9305      	str	r3, [sp, #20]
 8006b42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c28 <_vfiprintf_r+0x25c>
 8006b46:	7821      	ldrb	r1, [r4, #0]
 8006b48:	2203      	movs	r2, #3
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f7f9 fb60 	bl	8000210 <memchr>
 8006b50:	b140      	cbz	r0, 8006b64 <_vfiprintf_r+0x198>
 8006b52:	2340      	movs	r3, #64	; 0x40
 8006b54:	eba0 000a 	sub.w	r0, r0, sl
 8006b58:	fa03 f000 	lsl.w	r0, r3, r0
 8006b5c:	9b04      	ldr	r3, [sp, #16]
 8006b5e:	4303      	orrs	r3, r0
 8006b60:	3401      	adds	r4, #1
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b68:	482c      	ldr	r0, [pc, #176]	; (8006c1c <_vfiprintf_r+0x250>)
 8006b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b6e:	2206      	movs	r2, #6
 8006b70:	f7f9 fb4e 	bl	8000210 <memchr>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d03f      	beq.n	8006bf8 <_vfiprintf_r+0x22c>
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <_vfiprintf_r+0x254>)
 8006b7a:	bb1b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x1f8>
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	3307      	adds	r3, #7
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	3308      	adds	r3, #8
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8a:	443b      	add	r3, r7
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	e767      	b.n	8006a60 <_vfiprintf_r+0x94>
 8006b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b94:	460c      	mov	r4, r1
 8006b96:	2001      	movs	r0, #1
 8006b98:	e7a5      	b.n	8006ae6 <_vfiprintf_r+0x11a>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	3401      	adds	r4, #1
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f04f 0c0a 	mov.w	ip, #10
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bac:	3a30      	subs	r2, #48	; 0x30
 8006bae:	2a09      	cmp	r2, #9
 8006bb0:	d903      	bls.n	8006bba <_vfiprintf_r+0x1ee>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0c5      	beq.n	8006b42 <_vfiprintf_r+0x176>
 8006bb6:	9105      	str	r1, [sp, #20]
 8006bb8:	e7c3      	b.n	8006b42 <_vfiprintf_r+0x176>
 8006bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7f0      	b.n	8006ba6 <_vfiprintf_r+0x1da>
 8006bc4:	ab03      	add	r3, sp, #12
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <_vfiprintf_r+0x258>)
 8006bcc:	a904      	add	r1, sp, #16
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7fd fe5a 	bl	8004888 <_printf_float>
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	1c78      	adds	r0, r7, #1
 8006bd8:	d1d6      	bne.n	8006b88 <_vfiprintf_r+0x1bc>
 8006bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bdc:	07d9      	lsls	r1, r3, #31
 8006bde:	d405      	bmi.n	8006bec <_vfiprintf_r+0x220>
 8006be0:	89ab      	ldrh	r3, [r5, #12]
 8006be2:	059a      	lsls	r2, r3, #22
 8006be4:	d402      	bmi.n	8006bec <_vfiprintf_r+0x220>
 8006be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006be8:	f7ff fa34 	bl	8006054 <__retarget_lock_release_recursive>
 8006bec:	89ab      	ldrh	r3, [r5, #12]
 8006bee:	065b      	lsls	r3, r3, #25
 8006bf0:	f53f af12 	bmi.w	8006a18 <_vfiprintf_r+0x4c>
 8006bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bf6:	e711      	b.n	8006a1c <_vfiprintf_r+0x50>
 8006bf8:	ab03      	add	r3, sp, #12
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	462a      	mov	r2, r5
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <_vfiprintf_r+0x258>)
 8006c00:	a904      	add	r1, sp, #16
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7fe f8e4 	bl	8004dd0 <_printf_i>
 8006c08:	e7e4      	b.n	8006bd4 <_vfiprintf_r+0x208>
 8006c0a:	bf00      	nop
 8006c0c:	0800756c 	.word	0x0800756c
 8006c10:	0800758c 	.word	0x0800758c
 8006c14:	0800754c 	.word	0x0800754c
 8006c18:	08007704 	.word	0x08007704
 8006c1c:	0800770e 	.word	0x0800770e
 8006c20:	08004889 	.word	0x08004889
 8006c24:	080069a7 	.word	0x080069a7
 8006c28:	0800770a 	.word	0x0800770a

08006c2c <_sbrk_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d06      	ldr	r5, [pc, #24]	; (8006c48 <_sbrk_r+0x1c>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fa fe66 	bl	8001908 <_sbrk>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_sbrk_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_sbrk_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	2000029c 	.word	0x2000029c

08006c4c <__sread>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c54:	f000 faa8 	bl	80071a8 <_read_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	bfab      	itete	ge
 8006c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c60:	181b      	addge	r3, r3, r0
 8006c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c66:	bfac      	ite	ge
 8006c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c6a:	81a3      	strhlt	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__swrite>:
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	461f      	mov	r7, r3
 8006c74:	898b      	ldrh	r3, [r1, #12]
 8006c76:	05db      	lsls	r3, r3, #23
 8006c78:	4605      	mov	r5, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	d505      	bpl.n	8006c8c <__swrite+0x1e>
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	2302      	movs	r3, #2
 8006c86:	2200      	movs	r2, #0
 8006c88:	f000 f9f8 	bl	800707c <_lseek_r>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	f000 b869 	b.w	8006d78 <_write_r>

08006ca6 <__sseek>:
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cae:	f000 f9e5 	bl	800707c <_lseek_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	bf15      	itete	ne
 8006cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cc2:	81a3      	strheq	r3, [r4, #12]
 8006cc4:	bf18      	it	ne
 8006cc6:	81a3      	strhne	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__sclose>:
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	f000 b8f1 	b.w	8006eb4 <_close_r>
	...

08006cd4 <__swbuf_r>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b118      	cbz	r0, 8006ce6 <__swbuf_r+0x12>
 8006cde:	6983      	ldr	r3, [r0, #24]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <__swbuf_r+0x12>
 8006ce2:	f7ff f913 	bl	8005f0c <__sinit>
 8006ce6:	4b21      	ldr	r3, [pc, #132]	; (8006d6c <__swbuf_r+0x98>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	d12b      	bne.n	8006d44 <__swbuf_r+0x70>
 8006cec:	686c      	ldr	r4, [r5, #4]
 8006cee:	69a3      	ldr	r3, [r4, #24]
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	071a      	lsls	r2, r3, #28
 8006cf6:	d52f      	bpl.n	8006d58 <__swbuf_r+0x84>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	b36b      	cbz	r3, 8006d58 <__swbuf_r+0x84>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	1ac0      	subs	r0, r0, r3
 8006d02:	6963      	ldr	r3, [r4, #20]
 8006d04:	b2f6      	uxtb	r6, r6
 8006d06:	4283      	cmp	r3, r0
 8006d08:	4637      	mov	r7, r6
 8006d0a:	dc04      	bgt.n	8006d16 <__swbuf_r+0x42>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f966 	bl	8006fe0 <_fflush_r>
 8006d14:	bb30      	cbnz	r0, 8006d64 <__swbuf_r+0x90>
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	6022      	str	r2, [r4, #0]
 8006d22:	701e      	strb	r6, [r3, #0]
 8006d24:	6963      	ldr	r3, [r4, #20]
 8006d26:	3001      	adds	r0, #1
 8006d28:	4283      	cmp	r3, r0
 8006d2a:	d004      	beq.n	8006d36 <__swbuf_r+0x62>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	07db      	lsls	r3, r3, #31
 8006d30:	d506      	bpl.n	8006d40 <__swbuf_r+0x6c>
 8006d32:	2e0a      	cmp	r6, #10
 8006d34:	d104      	bne.n	8006d40 <__swbuf_r+0x6c>
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f951 	bl	8006fe0 <_fflush_r>
 8006d3e:	b988      	cbnz	r0, 8006d64 <__swbuf_r+0x90>
 8006d40:	4638      	mov	r0, r7
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <__swbuf_r+0x9c>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d101      	bne.n	8006d4e <__swbuf_r+0x7a>
 8006d4a:	68ac      	ldr	r4, [r5, #8]
 8006d4c:	e7cf      	b.n	8006cee <__swbuf_r+0x1a>
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <__swbuf_r+0xa0>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	bf08      	it	eq
 8006d54:	68ec      	ldreq	r4, [r5, #12]
 8006d56:	e7ca      	b.n	8006cee <__swbuf_r+0x1a>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f81e 	bl	8006d9c <__swsetup_r>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d0cb      	beq.n	8006cfc <__swbuf_r+0x28>
 8006d64:	f04f 37ff 	mov.w	r7, #4294967295
 8006d68:	e7ea      	b.n	8006d40 <__swbuf_r+0x6c>
 8006d6a:	bf00      	nop
 8006d6c:	0800756c 	.word	0x0800756c
 8006d70:	0800758c 	.word	0x0800758c
 8006d74:	0800754c 	.word	0x0800754c

08006d78 <_write_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	; (8006d98 <_write_r+0x20>)
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fa fd6d 	bl	8001866 <_write>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_write_r+0x1e>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_write_r+0x1e>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	2000029c 	.word	0x2000029c

08006d9c <__swsetup_r>:
 8006d9c:	4b32      	ldr	r3, [pc, #200]	; (8006e68 <__swsetup_r+0xcc>)
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	681d      	ldr	r5, [r3, #0]
 8006da2:	4606      	mov	r6, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	b125      	cbz	r5, 8006db2 <__swsetup_r+0x16>
 8006da8:	69ab      	ldr	r3, [r5, #24]
 8006daa:	b913      	cbnz	r3, 8006db2 <__swsetup_r+0x16>
 8006dac:	4628      	mov	r0, r5
 8006dae:	f7ff f8ad 	bl	8005f0c <__sinit>
 8006db2:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <__swsetup_r+0xd0>)
 8006db4:	429c      	cmp	r4, r3
 8006db6:	d10f      	bne.n	8006dd8 <__swsetup_r+0x3c>
 8006db8:	686c      	ldr	r4, [r5, #4]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dc0:	0719      	lsls	r1, r3, #28
 8006dc2:	d42c      	bmi.n	8006e1e <__swsetup_r+0x82>
 8006dc4:	06dd      	lsls	r5, r3, #27
 8006dc6:	d411      	bmi.n	8006dec <__swsetup_r+0x50>
 8006dc8:	2309      	movs	r3, #9
 8006dca:	6033      	str	r3, [r6, #0]
 8006dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	e03e      	b.n	8006e56 <__swsetup_r+0xba>
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <__swsetup_r+0xd4>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d101      	bne.n	8006de2 <__swsetup_r+0x46>
 8006dde:	68ac      	ldr	r4, [r5, #8]
 8006de0:	e7eb      	b.n	8006dba <__swsetup_r+0x1e>
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <__swsetup_r+0xd8>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	bf08      	it	eq
 8006de8:	68ec      	ldreq	r4, [r5, #12]
 8006dea:	e7e6      	b.n	8006dba <__swsetup_r+0x1e>
 8006dec:	0758      	lsls	r0, r3, #29
 8006dee:	d512      	bpl.n	8006e16 <__swsetup_r+0x7a>
 8006df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df2:	b141      	cbz	r1, 8006e06 <__swsetup_r+0x6a>
 8006df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d002      	beq.n	8006e02 <__swsetup_r+0x66>
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff fcdb 	bl	80067b8 <_free_r>
 8006e02:	2300      	movs	r3, #0
 8006e04:	6363      	str	r3, [r4, #52]	; 0x34
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e0c:	81a3      	strh	r3, [r4, #12]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f043 0308 	orr.w	r3, r3, #8
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	b94b      	cbnz	r3, 8006e36 <__swsetup_r+0x9a>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2c:	d003      	beq.n	8006e36 <__swsetup_r+0x9a>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 f95b 	bl	80070ec <__smakebuf_r>
 8006e36:	89a0      	ldrh	r0, [r4, #12]
 8006e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e3c:	f010 0301 	ands.w	r3, r0, #1
 8006e40:	d00a      	beq.n	8006e58 <__swsetup_r+0xbc>
 8006e42:	2300      	movs	r3, #0
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	6963      	ldr	r3, [r4, #20]
 8006e48:	425b      	negs	r3, r3
 8006e4a:	61a3      	str	r3, [r4, #24]
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	b943      	cbnz	r3, 8006e62 <__swsetup_r+0xc6>
 8006e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e54:	d1ba      	bne.n	8006dcc <__swsetup_r+0x30>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	0781      	lsls	r1, r0, #30
 8006e5a:	bf58      	it	pl
 8006e5c:	6963      	ldrpl	r3, [r4, #20]
 8006e5e:	60a3      	str	r3, [r4, #8]
 8006e60:	e7f4      	b.n	8006e4c <__swsetup_r+0xb0>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e7f7      	b.n	8006e56 <__swsetup_r+0xba>
 8006e66:	bf00      	nop
 8006e68:	2000000c 	.word	0x2000000c
 8006e6c:	0800756c 	.word	0x0800756c
 8006e70:	0800758c 	.word	0x0800758c
 8006e74:	0800754c 	.word	0x0800754c

08006e78 <__assert_func>:
 8006e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <__assert_func+0x2c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4605      	mov	r5, r0
 8006e84:	68d8      	ldr	r0, [r3, #12]
 8006e86:	b14c      	cbz	r4, 8006e9c <__assert_func+0x24>
 8006e88:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <__assert_func+0x30>)
 8006e8a:	9100      	str	r1, [sp, #0]
 8006e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e90:	4906      	ldr	r1, [pc, #24]	; (8006eac <__assert_func+0x34>)
 8006e92:	462b      	mov	r3, r5
 8006e94:	f000 f8e0 	bl	8007058 <fiprintf>
 8006e98:	f000 f9a5 	bl	80071e6 <abort>
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <__assert_func+0x38>)
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	e7f3      	b.n	8006e8a <__assert_func+0x12>
 8006ea2:	bf00      	nop
 8006ea4:	2000000c 	.word	0x2000000c
 8006ea8:	08007715 	.word	0x08007715
 8006eac:	08007722 	.word	0x08007722
 8006eb0:	08007750 	.word	0x08007750

08006eb4 <_close_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	; (8006ed0 <_close_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fa fced 	bl	800189e <_close>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_close_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_close_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	2000029c 	.word	0x2000029c

08006ed4 <__sflush_r>:
 8006ed4:	898a      	ldrh	r2, [r1, #12]
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	4605      	mov	r5, r0
 8006edc:	0710      	lsls	r0, r2, #28
 8006ede:	460c      	mov	r4, r1
 8006ee0:	d458      	bmi.n	8006f94 <__sflush_r+0xc0>
 8006ee2:	684b      	ldr	r3, [r1, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	dc05      	bgt.n	8006ef4 <__sflush_r+0x20>
 8006ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dc02      	bgt.n	8006ef4 <__sflush_r+0x20>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	d0f9      	beq.n	8006eee <__sflush_r+0x1a>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f00:	682f      	ldr	r7, [r5, #0]
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	d032      	beq.n	8006f6c <__sflush_r+0x98>
 8006f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	075a      	lsls	r2, r3, #29
 8006f0c:	d505      	bpl.n	8006f1a <__sflush_r+0x46>
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	1ac0      	subs	r0, r0, r3
 8006f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f14:	b10b      	cbz	r3, 8006f1a <__sflush_r+0x46>
 8006f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f18:	1ac0      	subs	r0, r0, r3
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f20:	6a21      	ldr	r1, [r4, #32]
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b0      	blx	r6
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	d106      	bne.n	8006f3a <__sflush_r+0x66>
 8006f2c:	6829      	ldr	r1, [r5, #0]
 8006f2e:	291d      	cmp	r1, #29
 8006f30:	d82c      	bhi.n	8006f8c <__sflush_r+0xb8>
 8006f32:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <__sflush_r+0x108>)
 8006f34:	40ca      	lsrs	r2, r1
 8006f36:	07d6      	lsls	r6, r2, #31
 8006f38:	d528      	bpl.n	8006f8c <__sflush_r+0xb8>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	6062      	str	r2, [r4, #4]
 8006f3e:	04d9      	lsls	r1, r3, #19
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	d504      	bpl.n	8006f50 <__sflush_r+0x7c>
 8006f46:	1c42      	adds	r2, r0, #1
 8006f48:	d101      	bne.n	8006f4e <__sflush_r+0x7a>
 8006f4a:	682b      	ldr	r3, [r5, #0]
 8006f4c:	b903      	cbnz	r3, 8006f50 <__sflush_r+0x7c>
 8006f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8006f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f52:	602f      	str	r7, [r5, #0]
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d0ca      	beq.n	8006eee <__sflush_r+0x1a>
 8006f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f5c:	4299      	cmp	r1, r3
 8006f5e:	d002      	beq.n	8006f66 <__sflush_r+0x92>
 8006f60:	4628      	mov	r0, r5
 8006f62:	f7ff fc29 	bl	80067b8 <_free_r>
 8006f66:	2000      	movs	r0, #0
 8006f68:	6360      	str	r0, [r4, #52]	; 0x34
 8006f6a:	e7c1      	b.n	8006ef0 <__sflush_r+0x1c>
 8006f6c:	6a21      	ldr	r1, [r4, #32]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b0      	blx	r6
 8006f74:	1c41      	adds	r1, r0, #1
 8006f76:	d1c7      	bne.n	8006f08 <__sflush_r+0x34>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0c4      	beq.n	8006f08 <__sflush_r+0x34>
 8006f7e:	2b1d      	cmp	r3, #29
 8006f80:	d001      	beq.n	8006f86 <__sflush_r+0xb2>
 8006f82:	2b16      	cmp	r3, #22
 8006f84:	d101      	bne.n	8006f8a <__sflush_r+0xb6>
 8006f86:	602f      	str	r7, [r5, #0]
 8006f88:	e7b1      	b.n	8006eee <__sflush_r+0x1a>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	e7ad      	b.n	8006ef0 <__sflush_r+0x1c>
 8006f94:	690f      	ldr	r7, [r1, #16]
 8006f96:	2f00      	cmp	r7, #0
 8006f98:	d0a9      	beq.n	8006eee <__sflush_r+0x1a>
 8006f9a:	0793      	lsls	r3, r2, #30
 8006f9c:	680e      	ldr	r6, [r1, #0]
 8006f9e:	bf08      	it	eq
 8006fa0:	694b      	ldreq	r3, [r1, #20]
 8006fa2:	600f      	str	r7, [r1, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	2300      	movne	r3, #0
 8006fa8:	eba6 0807 	sub.w	r8, r6, r7
 8006fac:	608b      	str	r3, [r1, #8]
 8006fae:	f1b8 0f00 	cmp.w	r8, #0
 8006fb2:	dd9c      	ble.n	8006eee <__sflush_r+0x1a>
 8006fb4:	6a21      	ldr	r1, [r4, #32]
 8006fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fb8:	4643      	mov	r3, r8
 8006fba:	463a      	mov	r2, r7
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b0      	blx	r6
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	dc06      	bgt.n	8006fd2 <__sflush_r+0xfe>
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	e78e      	b.n	8006ef0 <__sflush_r+0x1c>
 8006fd2:	4407      	add	r7, r0
 8006fd4:	eba8 0800 	sub.w	r8, r8, r0
 8006fd8:	e7e9      	b.n	8006fae <__sflush_r+0xda>
 8006fda:	bf00      	nop
 8006fdc:	20400001 	.word	0x20400001

08006fe0 <_fflush_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	690b      	ldr	r3, [r1, #16]
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	b913      	cbnz	r3, 8006ff0 <_fflush_r+0x10>
 8006fea:	2500      	movs	r5, #0
 8006fec:	4628      	mov	r0, r5
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	b118      	cbz	r0, 8006ffa <_fflush_r+0x1a>
 8006ff2:	6983      	ldr	r3, [r0, #24]
 8006ff4:	b90b      	cbnz	r3, 8006ffa <_fflush_r+0x1a>
 8006ff6:	f7fe ff89 	bl	8005f0c <__sinit>
 8006ffa:	4b14      	ldr	r3, [pc, #80]	; (800704c <_fflush_r+0x6c>)
 8006ffc:	429c      	cmp	r4, r3
 8006ffe:	d11b      	bne.n	8007038 <_fflush_r+0x58>
 8007000:	686c      	ldr	r4, [r5, #4]
 8007002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ef      	beq.n	8006fea <_fflush_r+0xa>
 800700a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800700c:	07d0      	lsls	r0, r2, #31
 800700e:	d404      	bmi.n	800701a <_fflush_r+0x3a>
 8007010:	0599      	lsls	r1, r3, #22
 8007012:	d402      	bmi.n	800701a <_fflush_r+0x3a>
 8007014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007016:	f7ff f81c 	bl	8006052 <__retarget_lock_acquire_recursive>
 800701a:	4628      	mov	r0, r5
 800701c:	4621      	mov	r1, r4
 800701e:	f7ff ff59 	bl	8006ed4 <__sflush_r>
 8007022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007024:	07da      	lsls	r2, r3, #31
 8007026:	4605      	mov	r5, r0
 8007028:	d4e0      	bmi.n	8006fec <_fflush_r+0xc>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	059b      	lsls	r3, r3, #22
 800702e:	d4dd      	bmi.n	8006fec <_fflush_r+0xc>
 8007030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007032:	f7ff f80f 	bl	8006054 <__retarget_lock_release_recursive>
 8007036:	e7d9      	b.n	8006fec <_fflush_r+0xc>
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <_fflush_r+0x70>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d101      	bne.n	8007042 <_fflush_r+0x62>
 800703e:	68ac      	ldr	r4, [r5, #8]
 8007040:	e7df      	b.n	8007002 <_fflush_r+0x22>
 8007042:	4b04      	ldr	r3, [pc, #16]	; (8007054 <_fflush_r+0x74>)
 8007044:	429c      	cmp	r4, r3
 8007046:	bf08      	it	eq
 8007048:	68ec      	ldreq	r4, [r5, #12]
 800704a:	e7da      	b.n	8007002 <_fflush_r+0x22>
 800704c:	0800756c 	.word	0x0800756c
 8007050:	0800758c 	.word	0x0800758c
 8007054:	0800754c 	.word	0x0800754c

08007058 <fiprintf>:
 8007058:	b40e      	push	{r1, r2, r3}
 800705a:	b503      	push	{r0, r1, lr}
 800705c:	4601      	mov	r1, r0
 800705e:	ab03      	add	r3, sp, #12
 8007060:	4805      	ldr	r0, [pc, #20]	; (8007078 <fiprintf+0x20>)
 8007062:	f853 2b04 	ldr.w	r2, [r3], #4
 8007066:	6800      	ldr	r0, [r0, #0]
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	f7ff fcaf 	bl	80069cc <_vfiprintf_r>
 800706e:	b002      	add	sp, #8
 8007070:	f85d eb04 	ldr.w	lr, [sp], #4
 8007074:	b003      	add	sp, #12
 8007076:	4770      	bx	lr
 8007078:	2000000c 	.word	0x2000000c

0800707c <_lseek_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d07      	ldr	r5, [pc, #28]	; (800709c <_lseek_r+0x20>)
 8007080:	4604      	mov	r4, r0
 8007082:	4608      	mov	r0, r1
 8007084:	4611      	mov	r1, r2
 8007086:	2200      	movs	r2, #0
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f7fa fc2e 	bl	80018ec <_lseek>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_lseek_r+0x1e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_lseek_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	2000029c 	.word	0x2000029c

080070a0 <__swhatbuf_r>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	460e      	mov	r6, r1
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	2900      	cmp	r1, #0
 80070aa:	b096      	sub	sp, #88	; 0x58
 80070ac:	4614      	mov	r4, r2
 80070ae:	461d      	mov	r5, r3
 80070b0:	da08      	bge.n	80070c4 <__swhatbuf_r+0x24>
 80070b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	061a      	lsls	r2, r3, #24
 80070bc:	d410      	bmi.n	80070e0 <__swhatbuf_r+0x40>
 80070be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c2:	e00e      	b.n	80070e2 <__swhatbuf_r+0x42>
 80070c4:	466a      	mov	r2, sp
 80070c6:	f000 f895 	bl	80071f4 <_fstat_r>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	dbf1      	blt.n	80070b2 <__swhatbuf_r+0x12>
 80070ce:	9a01      	ldr	r2, [sp, #4]
 80070d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070d8:	425a      	negs	r2, r3
 80070da:	415a      	adcs	r2, r3
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	e7ee      	b.n	80070be <__swhatbuf_r+0x1e>
 80070e0:	2340      	movs	r3, #64	; 0x40
 80070e2:	2000      	movs	r0, #0
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	b016      	add	sp, #88	; 0x58
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080070ec <__smakebuf_r>:
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f0:	079d      	lsls	r5, r3, #30
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	d507      	bpl.n	8007108 <__smakebuf_r+0x1c>
 80070f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b002      	add	sp, #8
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	ab01      	add	r3, sp, #4
 800710a:	466a      	mov	r2, sp
 800710c:	f7ff ffc8 	bl	80070a0 <__swhatbuf_r>
 8007110:	9900      	ldr	r1, [sp, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff fbbb 	bl	8006890 <_malloc_r>
 800711a:	b948      	cbnz	r0, 8007130 <__smakebuf_r+0x44>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	059a      	lsls	r2, r3, #22
 8007122:	d4ef      	bmi.n	8007104 <__smakebuf_r+0x18>
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	e7e3      	b.n	80070f8 <__smakebuf_r+0xc>
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <__smakebuf_r+0x7c>)
 8007132:	62b3      	str	r3, [r6, #40]	; 0x28
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	6163      	str	r3, [r4, #20]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6120      	str	r0, [r4, #16]
 8007146:	b15b      	cbz	r3, 8007160 <__smakebuf_r+0x74>
 8007148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714c:	4630      	mov	r0, r6
 800714e:	f000 f863 	bl	8007218 <_isatty_r>
 8007152:	b128      	cbz	r0, 8007160 <__smakebuf_r+0x74>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	89a0      	ldrh	r0, [r4, #12]
 8007162:	4305      	orrs	r5, r0
 8007164:	81a5      	strh	r5, [r4, #12]
 8007166:	e7cd      	b.n	8007104 <__smakebuf_r+0x18>
 8007168:	08005ea5 	.word	0x08005ea5

0800716c <__ascii_mbtowc>:
 800716c:	b082      	sub	sp, #8
 800716e:	b901      	cbnz	r1, 8007172 <__ascii_mbtowc+0x6>
 8007170:	a901      	add	r1, sp, #4
 8007172:	b142      	cbz	r2, 8007186 <__ascii_mbtowc+0x1a>
 8007174:	b14b      	cbz	r3, 800718a <__ascii_mbtowc+0x1e>
 8007176:	7813      	ldrb	r3, [r2, #0]
 8007178:	600b      	str	r3, [r1, #0]
 800717a:	7812      	ldrb	r2, [r2, #0]
 800717c:	1e10      	subs	r0, r2, #0
 800717e:	bf18      	it	ne
 8007180:	2001      	movne	r0, #1
 8007182:	b002      	add	sp, #8
 8007184:	4770      	bx	lr
 8007186:	4610      	mov	r0, r2
 8007188:	e7fb      	b.n	8007182 <__ascii_mbtowc+0x16>
 800718a:	f06f 0001 	mvn.w	r0, #1
 800718e:	e7f8      	b.n	8007182 <__ascii_mbtowc+0x16>

08007190 <__malloc_lock>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__malloc_lock+0x8>)
 8007192:	f7fe bf5e 	b.w	8006052 <__retarget_lock_acquire_recursive>
 8007196:	bf00      	nop
 8007198:	20000290 	.word	0x20000290

0800719c <__malloc_unlock>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__malloc_unlock+0x8>)
 800719e:	f7fe bf59 	b.w	8006054 <__retarget_lock_release_recursive>
 80071a2:	bf00      	nop
 80071a4:	20000290 	.word	0x20000290

080071a8 <_read_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d07      	ldr	r5, [pc, #28]	; (80071c8 <_read_r+0x20>)
 80071ac:	4604      	mov	r4, r0
 80071ae:	4608      	mov	r0, r1
 80071b0:	4611      	mov	r1, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	602a      	str	r2, [r5, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	f7fa fb38 	bl	800182c <_read>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_read_r+0x1e>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_read_r+0x1e>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	2000029c 	.word	0x2000029c

080071cc <__ascii_wctomb>:
 80071cc:	b149      	cbz	r1, 80071e2 <__ascii_wctomb+0x16>
 80071ce:	2aff      	cmp	r2, #255	; 0xff
 80071d0:	bf85      	ittet	hi
 80071d2:	238a      	movhi	r3, #138	; 0x8a
 80071d4:	6003      	strhi	r3, [r0, #0]
 80071d6:	700a      	strbls	r2, [r1, #0]
 80071d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80071dc:	bf98      	it	ls
 80071de:	2001      	movls	r0, #1
 80071e0:	4770      	bx	lr
 80071e2:	4608      	mov	r0, r1
 80071e4:	4770      	bx	lr

080071e6 <abort>:
 80071e6:	b508      	push	{r3, lr}
 80071e8:	2006      	movs	r0, #6
 80071ea:	f000 f84d 	bl	8007288 <raise>
 80071ee:	2001      	movs	r0, #1
 80071f0:	f7fa fb12 	bl	8001818 <_exit>

080071f4 <_fstat_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	; (8007214 <_fstat_r+0x20>)
 80071f8:	2300      	movs	r3, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	f7fa fb58 	bl	80018b6 <_fstat>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	d102      	bne.n	8007210 <_fstat_r+0x1c>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	b103      	cbz	r3, 8007210 <_fstat_r+0x1c>
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	2000029c 	.word	0x2000029c

08007218 <_isatty_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d06      	ldr	r5, [pc, #24]	; (8007234 <_isatty_r+0x1c>)
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fa fb57 	bl	80018d6 <_isatty>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_isatty_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_isatty_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	2000029c 	.word	0x2000029c

08007238 <_raise_r>:
 8007238:	291f      	cmp	r1, #31
 800723a:	b538      	push	{r3, r4, r5, lr}
 800723c:	4604      	mov	r4, r0
 800723e:	460d      	mov	r5, r1
 8007240:	d904      	bls.n	800724c <_raise_r+0x14>
 8007242:	2316      	movs	r3, #22
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800724e:	b112      	cbz	r2, 8007256 <_raise_r+0x1e>
 8007250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007254:	b94b      	cbnz	r3, 800726a <_raise_r+0x32>
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f830 	bl	80072bc <_getpid_r>
 800725c:	462a      	mov	r2, r5
 800725e:	4601      	mov	r1, r0
 8007260:	4620      	mov	r0, r4
 8007262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007266:	f000 b817 	b.w	8007298 <_kill_r>
 800726a:	2b01      	cmp	r3, #1
 800726c:	d00a      	beq.n	8007284 <_raise_r+0x4c>
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	d103      	bne.n	800727a <_raise_r+0x42>
 8007272:	2316      	movs	r3, #22
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	2001      	movs	r0, #1
 8007278:	e7e7      	b.n	800724a <_raise_r+0x12>
 800727a:	2400      	movs	r4, #0
 800727c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007280:	4628      	mov	r0, r5
 8007282:	4798      	blx	r3
 8007284:	2000      	movs	r0, #0
 8007286:	e7e0      	b.n	800724a <_raise_r+0x12>

08007288 <raise>:
 8007288:	4b02      	ldr	r3, [pc, #8]	; (8007294 <raise+0xc>)
 800728a:	4601      	mov	r1, r0
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f7ff bfd3 	b.w	8007238 <_raise_r>
 8007292:	bf00      	nop
 8007294:	2000000c 	.word	0x2000000c

08007298 <_kill_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_kill_r+0x20>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7fa faa7 	bl	80017f8 <_kill>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d102      	bne.n	80072b4 <_kill_r+0x1c>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b103      	cbz	r3, 80072b4 <_kill_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	2000029c 	.word	0x2000029c

080072bc <_getpid_r>:
 80072bc:	f7fa ba94 	b.w	80017e8 <_getpid>

080072c0 <_init>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr

080072cc <_fini>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	bf00      	nop
 80072d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d2:	bc08      	pop	{r3}
 80072d4:	469e      	mov	lr, r3
 80072d6:	4770      	bx	lr
