
motorDriving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000714c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08007310  08007310  00017310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ac  080077ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b4  080077b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  08007998  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08007998  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db88  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee5  00000000  00000000  0002dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003573  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dce3  00000000  00000000  000346e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100944  00000000  00000000  000423c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142d0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b78  00000000  00000000  00142d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080072f4 	.word	0x080072f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080072f4 	.word	0x080072f4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <__io_putchar+0x20>)
 8000eee:	f002 fe6d 	bl	8003bcc <HAL_UART_Transmit>
  return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <display.0>:

       uint8_t box6[] = {0x7C ,0x0F, 0x14 , 0x75 - 20, 0x8C , 0x7F - 20, 0x01};
       uint8_t bo7[] = {0x7C ,0x0F, 0x14 , 0x75, 0x8C , 0x7F, 0x01};
       uint8_t toggle[] = {0x7C,0x12};
       void display(int argc, char *argv[])
         {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4664      	mov	r4, ip
 8000f0c:	f8c7 c004 	str.w	ip, [r7, #4]
       	  for(int i = 0; i < argc;i++){
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e010      	b.n	8000f38 <display.0+0x38>
       //		  char str[1024] = "";
       //		  char tmp = '.';
       //
       //		  strcat(str, tmp);
       		// uint8_t xoff[5] = {0x7C, 0x18+i, 0x50++i};
       		 HAL_UART_Transmit (&huart3, box2, sizeof (box2), 150);
 8000f16:	1de1      	adds	r1, r4, #7
 8000f18:	2396      	movs	r3, #150	; 0x96
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <display.0+0x4c>)
 8000f1e:	f002 fe55 	bl	8003bcc <HAL_UART_Transmit>
       		box[3] = box[3] - 11;
 8000f22:	78e3      	ldrb	r3, [r4, #3]
 8000f24:	3b0b      	subs	r3, #11
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	70e3      	strb	r3, [r4, #3]
       		box[5] = box[3] - 11;
 8000f2a:	78e3      	ldrb	r3, [r4, #3]
 8000f2c:	3b0b      	subs	r3, #11
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	7163      	strb	r3, [r4, #5]
       	  for(int i = 0; i < argc;i++){
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbea      	blt.n	8000f16 <display.0+0x16>


       		  //HAL_UART_Transmit (&huart3, argv+i, sizeof (argv+i), 150);
       	  }

         }
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001f8 	.word	0x200001f8

08000f50 <main>:
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b0a0      	sub	sp, #128	; 0x80
 8000f54:	af00      	add	r7, sp, #0
int main(void)
 8000f56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_Init();
 8000f5c:	f000 fdf9 	bl	8001b52 <HAL_Init>
  SystemClock_Config();
 8000f60:	f000 f8de 	bl	8001120 <SystemClock_Config>
  MX_GPIO_Init();
 8000f64:	f000 f96e 	bl	8001244 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f68:	f000 f920 	bl	80011ac <MX_USART3_UART_Init>
  motorSetup();
 8000f6c:	f000 fbfa 	bl	8001764 <motorSetup>
  uint8_t clear[2] = {0x7C,0x00};
 8000f70:	237c      	movs	r3, #124	; 0x7c
 8000f72:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
       uint8_t buff[10] = {0x7C, 0x0C, 0x00 , 0x0A , 0x32 , 0x3C, 0x01};
 8000f76:	4a60      	ldr	r2, [pc, #384]	; (80010f8 <main+0x1a8>)
 8000f78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f80:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
       uint8_t circle[10] = { 0x7C, 0x03, 0x50 ,0x40, 0x0A, 0x01};
 8000f8a:	4a5c      	ldr	r2, [pc, #368]	; (80010fc <main+0x1ac>)
 8000f8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f94:	6018      	str	r0, [r3, #0]
 8000f96:	3304      	adds	r3, #4
 8000f98:	8019      	strh	r1, [r3, #0]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	0c0a      	lsrs	r2, r1, #16
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	709a      	strb	r2, [r3, #2]
       uint8_t xoff[5] = {0x7C, 0x18, 0x50};
 8000faa:	4b55      	ldr	r3, [pc, #340]	; (8001100 <main+0x1b0>)
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
       char arr[3][6] = {"Jazib", "Jabibi","Ahmad"};
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <main+0x1b4>)
 8000fb6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000fba:	461d      	mov	r5, r3
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	8023      	strh	r3, [r4, #0]
       uint8_t demo[3] = {0x7C, 0x12 };
 8000fc4:	4a50      	ldr	r2, [pc, #320]	; (8001108 <main+0x1b8>)
 8000fc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	8019      	strh	r1, [r3, #0]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	0c12      	lsrs	r2, r2, #16
 8000fd4:	701a      	strb	r2, [r3, #0]
       uint8_t box[] = {0x7C ,0x0F, 0x14 , 0x75, 0x8C , 0x7F, 0x01};
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <main+0x1bc>)
 8000fd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe0:	6018      	str	r0, [r3, #0]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	8019      	strh	r1, [r3, #0]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	0c0a      	lsrs	r2, r1, #16
 8000fea:	701a      	strb	r2, [r3, #0]
       uint8_t box2[] = {0x7C ,0x0F, 0x14 , 0x75 - 14, 0x8C , 0x7F - 14, 0x01};
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <main+0x1c0>)
 8000fee:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8000ff2:	6810      	ldr	r0, [r2, #0]
 8000ff4:	6018      	str	r0, [r3, #0]
 8000ff6:	8891      	ldrh	r1, [r2, #4]
 8000ff8:	7992      	ldrb	r2, [r2, #6]
 8000ffa:	8099      	strh	r1, [r3, #4]
 8000ffc:	719a      	strb	r2, [r3, #6]
       uint8_t box3[] = {0x7C ,0x0F, 0x14 , 0x75- 28, 0x8C , 0x7F - 28, 0x01};
 8000ffe:	4a45      	ldr	r2, [pc, #276]	; (8001114 <main+0x1c4>)
 8001000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001004:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001008:	6018      	str	r0, [r3, #0]
 800100a:	3304      	adds	r3, #4
 800100c:	8019      	strh	r1, [r3, #0]
 800100e:	3302      	adds	r3, #2
 8001010:	0c0a      	lsrs	r2, r1, #16
 8001012:	701a      	strb	r2, [r3, #0]
       uint8_t box4[] = {0x7C ,0x0F, 0x14 , 0x75 - 20, 0x8C , 0x7F - 20, 0x01};
 8001014:	4a40      	ldr	r2, [pc, #256]	; (8001118 <main+0x1c8>)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101e:	6018      	str	r0, [r3, #0]
 8001020:	3304      	adds	r3, #4
 8001022:	8019      	strh	r1, [r3, #0]
 8001024:	3302      	adds	r3, #2
 8001026:	0c0a      	lsrs	r2, r1, #16
 8001028:	701a      	strb	r2, [r3, #0]
       uint8_t box5[] = {0x7C ,0x0F, 0x14 , 0x75, 0x8C , 0x7F, 0x01};
 800102a:	4a38      	ldr	r2, [pc, #224]	; (800110c <main+0x1bc>)
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001034:	6018      	str	r0, [r3, #0]
 8001036:	3304      	adds	r3, #4
 8001038:	8019      	strh	r1, [r3, #0]
 800103a:	3302      	adds	r3, #2
 800103c:	0c0a      	lsrs	r2, r1, #16
 800103e:	701a      	strb	r2, [r3, #0]
       uint8_t box6[] = {0x7C ,0x0F, 0x14 , 0x75 - 20, 0x8C , 0x7F - 20, 0x01};
 8001040:	4a35      	ldr	r2, [pc, #212]	; (8001118 <main+0x1c8>)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104a:	6018      	str	r0, [r3, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	8019      	strh	r1, [r3, #0]
 8001050:	3302      	adds	r3, #2
 8001052:	0c0a      	lsrs	r2, r1, #16
 8001054:	701a      	strb	r2, [r3, #0]
       uint8_t bo7[] = {0x7C ,0x0F, 0x14 , 0x75, 0x8C , 0x7F, 0x01};
 8001056:	4a2d      	ldr	r2, [pc, #180]	; (800110c <main+0x1bc>)
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001060:	6018      	str	r0, [r3, #0]
 8001062:	3304      	adds	r3, #4
 8001064:	8019      	strh	r1, [r3, #0]
 8001066:	3302      	adds	r3, #2
 8001068:	0c0a      	lsrs	r2, r1, #16
 800106a:	701a      	strb	r2, [r3, #0]
       uint8_t toggle[] = {0x7C,0x12};
 800106c:	f241 237c 	movw	r3, #4732	; 0x127c
 8001070:	80bb      	strh	r3, [r7, #4]
    while (1)
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	      HAL_UART_Transmit (&huart3, clear, sizeof (clear), 150);
 8001072:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001076:	2396      	movs	r3, #150	; 0x96
 8001078:	2202      	movs	r2, #2
 800107a:	4828      	ldr	r0, [pc, #160]	; (800111c <main+0x1cc>)
 800107c:	f002 fda6 	bl	8003bcc <HAL_UART_Transmit>
  	 	  HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001084:	f000 fdda 	bl	8001c3c <HAL_Delay>
  	 	 //HAL_UART_Transmit (&huart3, circle, sizeof (clear), 150);
  	 	 HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f000 fdd6 	bl	8001c3c <HAL_Delay>
  	 	 display(4,arr);
 8001090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001094:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001098:	4694      	mov	ip, r2
 800109a:	4619      	mov	r1, r3
 800109c:	2004      	movs	r0, #4
 800109e:	f7ff ff2f 	bl	8000f00 <display.0>
  	 	 HAL_Delay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f000 fdc9 	bl	8001c3c <HAL_Delay>
  //	 	 HAL_Delay(1000);




  	 		 	 HAL_UART_Transmit (&huart3, box, sizeof (box), 150);
 80010aa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80010ae:	2396      	movs	r3, #150	; 0x96
 80010b0:	2207      	movs	r2, #7
 80010b2:	481a      	ldr	r0, [pc, #104]	; (800111c <main+0x1cc>)
 80010b4:	f002 fd8a 	bl	8003bcc <HAL_UART_Transmit>
  	 		 	 HAL_Delay(1000);
 80010b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010bc:	f000 fdbe 	bl	8001c3c <HAL_Delay>
  	 		 	 HAL_UART_Transmit (&huart3, box2, sizeof (box2), 150);
 80010c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c4:	1dd9      	adds	r1, r3, #7
 80010c6:	2396      	movs	r3, #150	; 0x96
 80010c8:	2207      	movs	r2, #7
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <main+0x1cc>)
 80010cc:	f002 fd7e 	bl	8003bcc <HAL_UART_Transmit>
  	 		 	 HAL_Delay(1000);
 80010d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d4:	f000 fdb2 	bl	8001c3c <HAL_Delay>
  	 		 	 HAL_UART_Transmit (&huart3, box3, sizeof (box3), 150);
 80010d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010dc:	2396      	movs	r3, #150	; 0x96
 80010de:	2207      	movs	r2, #7
 80010e0:	480e      	ldr	r0, [pc, #56]	; (800111c <main+0x1cc>)
 80010e2:	f002 fd73 	bl	8003bcc <HAL_UART_Transmit>
  	 		 	 HAL_Delay(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ea:	f000 fda7 	bl	8001c3c <HAL_Delay>
  //
  //	 	 	  HAL_UART_Transmit (&huart3, Jazib, sizeof (Jazib), 150);
  //	 	 	  HAL_Delay(1000);
  //
  //	 	 	HAL_UART_Transmit (&huart3, demo, sizeof (demo), 150);//
  	 		 	 HAL_Delay(1000);
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	f000 fda3 	bl	8001c3c <HAL_Delay>
  	      HAL_UART_Transmit (&huart3, clear, sizeof (clear), 150);
 80010f6:	e7bc      	b.n	8001072 <main+0x122>
 80010f8:	08007310 	.word	0x08007310
 80010fc:	0800731c 	.word	0x0800731c
 8001100:	0050187c 	.word	0x0050187c
 8001104:	08007328 	.word	0x08007328
 8001108:	0800733c 	.word	0x0800733c
 800110c:	08007340 	.word	0x08007340
 8001110:	08007348 	.word	0x08007348
 8001114:	08007350 	.word	0x08007350
 8001118:	08007358 	.word	0x08007358
 800111c:	200001f8 	.word	0x200001f8

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2244      	movs	r2, #68	; 0x44
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fbca 	bl	80048c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001142:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001146:	f001 f84d 	bl	80021e4 <HAL_PWREx_ControlVoltageScaling>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001150:	f000 fb02 	bl	8001758 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001154:	2310      	movs	r3, #16
 8001156:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f8ed 	bl	800234c <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001178:	f000 faee 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fcf3 	bl	8002b80 <HAL_RCC_ClockConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011a0:	f000 fada 	bl	8001758 <Error_Handler>
  }
}
 80011a4:	bf00      	nop
 80011a6:	3758      	adds	r7, #88	; 0x58
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART3_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011f6:	f002 fc99 	bl	8003b2c <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 faaa 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART3_UART_Init+0x90>)
 8001208:	f003 fa62 	bl	80046d0 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 faa1 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART3_UART_Init+0x90>)
 800121a:	f003 fa97 	bl	800474c <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 fa98 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART3_UART_Init+0x90>)
 800122a:	f003 fa18 	bl	800465e <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 fa90 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001f8 	.word	0x200001f8
 8001240:	40004800 	.word	0x40004800

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	4bb3      	ldr	r3, [pc, #716]	; (8001528 <MX_GPIO_Init+0x2e4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4ab2      	ldr	r2, [pc, #712]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4bb0      	ldr	r3, [pc, #704]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4bad      	ldr	r3, [pc, #692]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4aac      	ldr	r2, [pc, #688]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4baa      	ldr	r3, [pc, #680]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128a:	4ba7      	ldr	r3, [pc, #668]	; (8001528 <MX_GPIO_Init+0x2e4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4aa6      	ldr	r2, [pc, #664]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4ba4      	ldr	r3, [pc, #656]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	4ba1      	ldr	r3, [pc, #644]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4aa0      	ldr	r2, [pc, #640]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b9e      	ldr	r3, [pc, #632]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b9b      	ldr	r3, [pc, #620]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a9a      	ldr	r2, [pc, #616]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b98      	ldr	r3, [pc, #608]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b95      	ldr	r3, [pc, #596]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a94      	ldr	r2, [pc, #592]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b92      	ldr	r3, [pc, #584]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	4b8f      	ldr	r3, [pc, #572]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a8e      	ldr	r2, [pc, #568]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b8c      	ldr	r3, [pc, #560]	; (8001528 <MX_GPIO_Init+0x2e4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a88      	ldr	r2, [pc, #544]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b86      	ldr	r3, [pc, #536]	; (8001528 <MX_GPIO_Init+0x2e4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800131a:	f001 f807 	bl	800232c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	211b      	movs	r1, #27
 8001322:	4882      	ldr	r0, [pc, #520]	; (800152c <MX_GPIO_Init+0x2e8>)
 8001324:	f000 ff26 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2104      	movs	r1, #4
 800132c:	4880      	ldr	r0, [pc, #512]	; (8001530 <MX_GPIO_Init+0x2ec>)
 800132e:	f000 ff21 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	21f0      	movs	r1, #240	; 0xf0
 8001336:	487f      	ldr	r0, [pc, #508]	; (8001534 <MX_GPIO_Init+0x2f0>)
 8001338:	f000 ff1c 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800133c:	230c      	movs	r3, #12
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800134c:	230d      	movs	r3, #13
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4878      	ldr	r0, [pc, #480]	; (8001538 <MX_GPIO_Init+0x2f4>)
 8001358:	f000 fd7a 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800135c:	2307      	movs	r3, #7
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800136c:	2304      	movs	r3, #4
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4871      	ldr	r0, [pc, #452]	; (800153c <MX_GPIO_Init+0x2f8>)
 8001378:	f000 fd6a 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800138c:	230d      	movs	r3, #13
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4869      	ldr	r0, [pc, #420]	; (800153c <MX_GPIO_Init+0x2f8>)
 8001398:	f000 fd5a 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800139c:	231b      	movs	r3, #27
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	485e      	ldr	r0, [pc, #376]	; (800152c <MX_GPIO_Init+0x2e8>)
 80013b4:	f000 fd4c 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013bc:	230b      	movs	r3, #11
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4858      	ldr	r0, [pc, #352]	; (800152c <MX_GPIO_Init+0x2e8>)
 80013cc:	f000 fd40 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e0:	2301      	movs	r3, #1
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f000 fd2f 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013f2:	2302      	movs	r3, #2
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013f6:	230b      	movs	r3, #11
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f000 fd22 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140c:	2308      	movs	r3, #8
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141c:	2307      	movs	r3, #7
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f000 fd11 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800142e:	23f0      	movs	r3, #240	; 0xf0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f000 fd00 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001450:	2320      	movs	r3, #32
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4832      	ldr	r0, [pc, #200]	; (800152c <MX_GPIO_Init+0x2e8>)
 8001464:	f000 fcf4 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001478:	2302      	movs	r3, #2
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <MX_GPIO_Init+0x2ec>)
 8001484:	f000 fce4 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001488:	2302      	movs	r3, #2
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800148c:	230b      	movs	r3, #11
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4825      	ldr	r0, [pc, #148]	; (8001530 <MX_GPIO_Init+0x2ec>)
 800149c:	f000 fcd8 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a0:	2304      	movs	r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	481e      	ldr	r0, [pc, #120]	; (8001530 <MX_GPIO_Init+0x2ec>)
 80014b8:	f000 fcca 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014bc:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <MX_GPIO_Init+0x2f4>)
 80014da:	f000 fcb9 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80014f0:	2303      	movs	r3, #3
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <MX_GPIO_Init+0x2f4>)
 80014fc:	f000 fca8 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001500:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001512:	230d      	movs	r3, #13
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_GPIO_Init+0x2ec>)
 800151e:	f000 fc97 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001526:	e00b      	b.n	8001540 <MX_GPIO_Init+0x2fc>
 8001528:	40021000 	.word	0x40021000
 800152c:	48000800 	.word	0x48000800
 8001530:	48000400 	.word	0x48000400
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48001000 	.word	0x48001000
 800153c:	48001400 	.word	0x48001400
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800154e:	230e      	movs	r3, #14
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	487a      	ldr	r0, [pc, #488]	; (8001744 <MX_GPIO_Init+0x500>)
 800155a:	f000 fc79 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800155e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001570:	2302      	movs	r3, #2
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4873      	ldr	r0, [pc, #460]	; (8001748 <MX_GPIO_Init+0x504>)
 800157c:	f000 fc68 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001580:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001592:	2308      	movs	r3, #8
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	486b      	ldr	r0, [pc, #428]	; (800174c <MX_GPIO_Init+0x508>)
 800159e:	f000 fc57 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a2:	2340      	movs	r3, #64	; 0x40
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80015b2:	230d      	movs	r3, #13
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4864      	ldr	r0, [pc, #400]	; (8001750 <MX_GPIO_Init+0x50c>)
 80015be:	f000 fc47 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d2:	2302      	movs	r3, #2
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	485c      	ldr	r0, [pc, #368]	; (8001750 <MX_GPIO_Init+0x50c>)
 80015de:	f000 fc37 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015f4:	230c      	movs	r3, #12
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4854      	ldr	r0, [pc, #336]	; (8001750 <MX_GPIO_Init+0x50c>)
 8001600:	f000 fc26 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001604:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001616:	230a      	movs	r3, #10
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f000 fc14 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f000 fc06 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001654:	2309      	movs	r3, #9
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	483a      	ldr	r0, [pc, #232]	; (8001748 <MX_GPIO_Init+0x504>)
 8001660:	f000 fbf6 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001664:	2304      	movs	r3, #4
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001674:	230c      	movs	r3, #12
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4832      	ldr	r0, [pc, #200]	; (8001748 <MX_GPIO_Init+0x504>)
 8001680:	f000 fbe6 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001684:	2308      	movs	r3, #8
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001694:	2307      	movs	r3, #7
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	482a      	ldr	r0, [pc, #168]	; (8001748 <MX_GPIO_Init+0x504>)
 80016a0:	f000 fbd6 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016a4:	23f0      	movs	r3, #240	; 0xf0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	4823      	ldr	r0, [pc, #140]	; (8001748 <MX_GPIO_Init+0x504>)
 80016bc:	f000 fbc8 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016c0:	2338      	movs	r3, #56	; 0x38
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016d0:	2306      	movs	r3, #6
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	481a      	ldr	r0, [pc, #104]	; (8001744 <MX_GPIO_Init+0x500>)
 80016dc:	f000 fbb8 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e4:	2303      	movs	r3, #3
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	4619      	mov	r1, r3
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <MX_GPIO_Init+0x500>)
 80016f4:	f000 fbac 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fe:	2312      	movs	r3, #18
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170a:	2304      	movs	r3, #4
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <MX_GPIO_Init+0x500>)
 8001716:	f000 fb9b 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800171a:	2301      	movs	r3, #1
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800172a:	2302      	movs	r3, #2
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <MX_GPIO_Init+0x510>)
 8001736:	f000 fb8b 	bl	8001e50 <HAL_GPIO_Init>

}
 800173a:	bf00      	nop
 800173c:	3738      	adds	r7, #56	; 0x38
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	48000400 	.word	0x48000400
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001800 	.word	0x48001800
 8001750:	48000800 	.word	0x48000800
 8001754:	48001000 	.word	0x48001000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <motorSetup>:
#define bigLength 2140 //TODO update for smaller steps

//X refers to larger space
struct coordinate curPosition = {0,0};

void motorSetup(){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(rstBigPort, rstBig, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	2101      	movs	r1, #1
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <motorSetup+0x44>)
 800176e:	f000 fd01 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(slpBigPort, slpBig, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2108      	movs	r1, #8
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <motorSetup+0x44>)
 8001778:	f000 fcfc 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2110      	movs	r1, #16
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <motorSetup+0x44>)
 8001782:	f000 fcf7 	bl	8002174 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(rstSmallPort, rstSmall, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	2110      	movs	r1, #16
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <motorSetup+0x48>)
 800178c:	f000 fcf2 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(slpSmallPort, slpSmall, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	2120      	movs	r1, #32
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <motorSetup+0x48>)
 8001796:	f000 fced 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <motorSetup+0x48>)
 80017a0:	f000 fce8 	bl	8002174 <HAL_GPIO_WritePin>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	48000800 	.word	0x48000800
 80017ac:	48000c00 	.word	0x48000c00

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	; 0x60
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0b0      	sub	sp, #192	; 0xc0
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	2294      	movs	r2, #148	; 0x94
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f855 	bl	80048c8 <memset>
  if(huart->Instance==USART3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a32      	ldr	r2, [pc, #200]	; (80018ec <HAL_UART_MspInit+0xf4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d15d      	bne.n	80018e4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001828:	2304      	movs	r3, #4
 800182a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800182c:	2300      	movs	r3, #0
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fc61 	bl	80030fc <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001840:	f7ff ff8a 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 800184a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_UART_MspInit+0xf8>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a6:	2307      	movs	r3, #7
 80018a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018b0:	4619      	mov	r1, r3
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <HAL_UART_MspInit+0xfc>)
 80018b4:	f000 facc 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d2:	2307      	movs	r3, #7
 80018d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <HAL_UART_MspInit+0x100>)
 80018e0:	f000 fab6 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	37c0      	adds	r7, #192	; 0xc0
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40004800 	.word	0x40004800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000c00 	.word	0x48000c00

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler+0x4>

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f000 f958 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800196a:	f002 ff7b 	bl	8004864 <__errno>
 800196e:	4603      	mov	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
	return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe7 	bl	8001960 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001992:	e7fe      	b.n	8001992 <_exit+0x12>

08001994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
	}

return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fa77 	bl	8000edc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
	}
	return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f002 fee0 	bl	8004864 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200a0000 	.word	0x200a0000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	20000288 	.word	0x20000288
 8001ad8:	200002a0 	.word	0x200002a0

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b04:	f7ff ffea 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	; (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	; (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 fe9f 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b32:	f7ff fa0d 	bl	8000f50 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b38:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b44:	080077bc 	.word	0x080077bc
  ldr r2, =_sbss
 8001b48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b4c:	200002a0 	.word	0x200002a0

08001b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_IRQHandler>

08001b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f943 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f80e 	bl	8001b84 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	e001      	b.n	8001b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b74:	f7ff fe1c 	bl	80017b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_InitTick+0x6c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d023      	beq.n	8001be0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_InitTick+0x70>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_InitTick+0x6c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f941 	bl	8001e36 <HAL_SYSTICK_Config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d809      	bhi.n	8001bd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f000 f919 	bl	8001dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_InitTick+0x74>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e007      	b.n	8001be4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e004      	b.n	8001be4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e001      	b.n	8001be4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	2000028c 	.word	0x2000028c

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000028c 	.word	0x2000028c

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff47 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff5c 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffb0 	bl	8001da4 <SysTick_Config>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e166      	b.n	800212e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8158 	beq.w	8002128 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0201 	and.w	r2, r3, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0203 	and.w	r2, r3, #3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80b2 	beq.w	8002128 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_GPIO_Init+0x2fc>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	4a60      	ldr	r2, [pc, #384]	; (800214c <HAL_GPIO_Init+0x2fc>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd0:	4b5e      	ldr	r3, [pc, #376]	; (800214c <HAL_GPIO_Init+0x2fc>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fdc:	4a5c      	ldr	r2, [pc, #368]	; (8002150 <HAL_GPIO_Init+0x300>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002006:	d02b      	beq.n	8002060 <HAL_GPIO_Init+0x210>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_GPIO_Init+0x304>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d025      	beq.n	800205c <HAL_GPIO_Init+0x20c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_GPIO_Init+0x308>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01f      	beq.n	8002058 <HAL_GPIO_Init+0x208>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_GPIO_Init+0x30c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_GPIO_Init+0x204>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4f      	ldr	r2, [pc, #316]	; (8002160 <HAL_GPIO_Init+0x310>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_Init+0x200>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_GPIO_Init+0x314>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_Init+0x1fc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_GPIO_Init+0x318>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_Init+0x1f8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_GPIO_Init+0x31c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_Init+0x1f4>
 8002040:	2307      	movs	r3, #7
 8002042:	e00e      	b.n	8002062 <HAL_GPIO_Init+0x212>
 8002044:	2308      	movs	r3, #8
 8002046:	e00c      	b.n	8002062 <HAL_GPIO_Init+0x212>
 8002048:	2306      	movs	r3, #6
 800204a:	e00a      	b.n	8002062 <HAL_GPIO_Init+0x212>
 800204c:	2305      	movs	r3, #5
 800204e:	e008      	b.n	8002062 <HAL_GPIO_Init+0x212>
 8002050:	2304      	movs	r3, #4
 8002052:	e006      	b.n	8002062 <HAL_GPIO_Init+0x212>
 8002054:	2303      	movs	r3, #3
 8002056:	e004      	b.n	8002062 <HAL_GPIO_Init+0x212>
 8002058:	2302      	movs	r3, #2
 800205a:	e002      	b.n	8002062 <HAL_GPIO_Init+0x212>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_GPIO_Init+0x212>
 8002060:	2300      	movs	r3, #0
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	f002 0203 	and.w	r2, r2, #3
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	4093      	lsls	r3, r2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002072:	4937      	ldr	r1, [pc, #220]	; (8002150 <HAL_GPIO_Init+0x300>)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_GPIO_Init+0x320>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020a4:	4a32      	ldr	r2, [pc, #200]	; (8002170 <HAL_GPIO_Init+0x320>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_GPIO_Init+0x320>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ce:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_GPIO_Init+0x320>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_GPIO_Init+0x320>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_GPIO_Init+0x320>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_GPIO_Init+0x320>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_GPIO_Init+0x320>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f ae91 	bne.w	8001e60 <HAL_GPIO_Init+0x10>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	48000400 	.word	0x48000400
 8002158:	48000800 	.word	0x48000800
 800215c:	48000c00 	.word	0x48000c00
 8002160:	48001000 	.word	0x48001000
 8002164:	48001400 	.word	0x48001400
 8002168:	48001800 	.word	0x48001800
 800216c:	48001c00 	.word	0x48001c00
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002190:	e002      	b.n	8002198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d102      	bne.n	80021bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ba:	e00b      	b.n	80021d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ca:	d102      	bne.n	80021d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d0:	e000      	b.n	80021d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000

080021e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d141      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fe:	d131      	bne.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002200:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002206:	4a46      	ldr	r2, [pc, #280]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800220c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002218:	4a41      	ldr	r2, [pc, #260]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2232      	movs	r2, #50	; 0x32
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a3f      	ldr	r2, [pc, #252]	; (8002328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	0c9b      	lsrs	r3, r3, #18
 8002232:	3301      	adds	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002236:	e002      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3b01      	subs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223e:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224a:	d102      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f2      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d158      	bne.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e057      	b.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800226a:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002274:	e04d      	b.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d141      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d131      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2232      	movs	r2, #50	; 0x32
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9b      	lsrs	r3, r3, #18
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	e002      	b.n	80022ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d102      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f2      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d112      	bne.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e011      	b.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002300:	e007      	b.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002310:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40007000 	.word	0x40007000
 8002324:	20000000 	.word	0x20000000
 8002328:	431bde83 	.word	0x431bde83

0800232c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233a:	6053      	str	r3, [r2, #4]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40007000 	.word	0x40007000

0800234c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f000 bc08 	b.w	8002b70 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	4b96      	ldr	r3, [pc, #600]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236a:	4b94      	ldr	r3, [pc, #592]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80e4 	beq.w	800254a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_RCC_OscConfig+0x4c>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	f040 808b 	bne.w	80024a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b01      	cmp	r3, #1
 8002394:	f040 8087 	bne.w	80024a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002398:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x64>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e3df      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <HAL_RCC_OscConfig+0x7e>
 80023c0:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c8:	e005      	b.n	80023d6 <HAL_RCC_OscConfig+0x8a>
 80023ca:	4b7c      	ldr	r3, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80023cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d223      	bcs.n	8002422 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fdcc 	bl	8002f7c <RCC_SetFlashLatencyFromMSIRange>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e3c0      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ee:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a72      	ldr	r2, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	496d      	ldr	r1, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	4968      	ldr	r1, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e025      	b.n	800246e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002422:	4b66      	ldr	r3, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4960      	ldr	r1, [pc, #384]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	495b      	ldr	r1, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fd8c 	bl	8002f7c <RCC_SetFlashLatencyFromMSIRange>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e380      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800246e:	f000 fcc1 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	4950      	ldr	r1, [pc, #320]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <HAL_RCC_OscConfig+0x278>)
 800248c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fb76 	bl	8001b84 <HAL_InitTick>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d052      	beq.n	8002548 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	e364      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d032      	beq.n	8002514 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ae:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a42      	ldr	r2, [pc, #264]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ba:	f7ff fbb3 	bl	8001c24 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c2:	f7ff fbaf 	bl	8001c24 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e34d      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d4:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a35      	ldr	r2, [pc, #212]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4930      	ldr	r1, [pc, #192]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	492b      	ldr	r1, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
 8002512:	e01a      	b.n	800254a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a28      	ldr	r2, [pc, #160]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002520:	f7ff fb80 	bl	8001c24 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002528:	f7ff fb7c 	bl	8001c24 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e31a      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1dc>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d073      	beq.n	800263e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x21c>
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d10e      	bne.n	8002580 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d10b      	bne.n	8002580 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d063      	beq.n	800263c <HAL_RCC_OscConfig+0x2f0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d15f      	bne.n	800263c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e2f7      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x24c>
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e025      	b.n	80025e4 <HAL_RCC_OscConfig+0x298>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a0:	d114      	bne.n	80025cc <HAL_RCC_OscConfig+0x280>
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a02      	ldr	r2, [pc, #8]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e013      	b.n	80025e4 <HAL_RCC_OscConfig+0x298>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08007360 	.word	0x08007360
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004
 80025cc:	4ba0      	ldr	r3, [pc, #640]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a9f      	ldr	r2, [pc, #636]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b9d      	ldr	r3, [pc, #628]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a9c      	ldr	r2, [pc, #624]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb1a 	bl	8001c24 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fb16 	bl	8001c24 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e2b4      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002606:	4b92      	ldr	r3, [pc, #584]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2a8>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7ff fb06 	bl	8001c24 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fb02 	bl	8001c24 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e2a0      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x2d0>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d060      	beq.n	800270c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d005      	beq.n	800265c <HAL_RCC_OscConfig+0x310>
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d119      	bne.n	800268a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d116      	bne.n	800268a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265c:	4b7c      	ldr	r3, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x328>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e27d      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	4973      	ldr	r1, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002688:	e040      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d023      	beq.n	80026da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002692:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7ff fac1 	bl	8001c24 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7ff fabd 	bl	8001c24 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e25b      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b8:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	495f      	ldr	r1, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
 80026d8:	e018      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a5c      	ldr	r2, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff fa9d 	bl	8001c24 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7ff fa99 	bl	8001c24 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e237      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d03c      	beq.n	8002792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01c      	beq.n	800275a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	4a4a      	ldr	r2, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7ff fa78 	bl	8001c24 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7ff fa74 	bl	8001c24 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e212      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 800274c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ef      	beq.n	8002738 <HAL_RCC_OscConfig+0x3ec>
 8002758:	e01b      	b.n	8002792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7ff fa5b 	bl	8001c24 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002772:	f7ff fa57 	bl	8001c24 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1f5      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ef      	bne.n	8002772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80a6 	beq.w	80028ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	; 0x58
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCC_OscConfig+0x508>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d118      	bne.n	800280a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_RCC_OscConfig+0x508>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_RCC_OscConfig+0x508>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e4:	f7ff fa1e 	bl	8001c24 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ec:	f7ff fa1a 	bl	8001c24 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1b8      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCC_OscConfig+0x508>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_RCC_OscConfig+0x4d8>
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002822:	e029      	b.n	8002878 <HAL_RCC_OscConfig+0x52c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d115      	bne.n	8002858 <HAL_RCC_OscConfig+0x50c>
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	4a03      	ldr	r2, [pc, #12]	; (8002850 <HAL_RCC_OscConfig+0x504>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x52c>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	4b9d      	ldr	r3, [pc, #628]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	4a9c      	ldr	r2, [pc, #624]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002868:	4b99      	ldr	r3, [pc, #612]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a98      	ldr	r2, [pc, #608]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d016      	beq.n	80028ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7ff f9d0 	bl	8001c24 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7ff f9cc 	bl	8001c24 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e168      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	4b8c      	ldr	r3, [pc, #560]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ed      	beq.n	8002888 <HAL_RCC_OscConfig+0x53c>
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7ff f9b9 	bl	8001c24 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7ff f9b5 	bl	8001c24 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e151      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028cc:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ed      	bne.n	80028b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7ffb      	ldrb	r3, [r7, #31]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b7b      	ldr	r3, [pc, #492]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a7a      	ldr	r2, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d03c      	beq.n	8002972 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01c      	beq.n	800293a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002900:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002906:	4a72      	ldr	r2, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7ff f988 	bl	8001c24 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002918:	f7ff f984 	bl	8001c24 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e122      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800292a:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 800292c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <HAL_RCC_OscConfig+0x5cc>
 8002938:	e01b      	b.n	8002972 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 800293c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002940:	4a63      	ldr	r2, [pc, #396]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7ff f96b 	bl	8001c24 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002952:	f7ff f967 	bl	8001c24 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e105      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002964:	4b5a      	ldr	r3, [pc, #360]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ef      	bne.n	8002952 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80f9 	beq.w	8002b6e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b02      	cmp	r3, #2
 8002982:	f040 80cf 	bne.w	8002b24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002986:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0203 	and.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	429a      	cmp	r2, r3
 8002998:	d12c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	3b01      	subs	r3, #1
 80029a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d123      	bne.n	80029f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d11b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d113      	bne.n	80029f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d109      	bne.n	80029f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d071      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d068      	beq.n	8002acc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029fa:	4b35      	ldr	r3, [pc, #212]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0ac      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a22:	f7ff f8ff 	bl	8001c24 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff f8fb 	bl	8001c24 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e099      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_RCC_OscConfig+0x788>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a62:	0212      	lsls	r2, r2, #8
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	4311      	orrs	r1, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a76:	0852      	lsrs	r2, r2, #1
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	0652      	lsls	r2, r2, #25
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a82:	06d2      	lsls	r2, r2, #27
 8002a84:	430a      	orrs	r2, r1
 8002a86:	4912      	ldr	r1, [pc, #72]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa4:	f7ff f8be 	bl	8001c24 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7ff f8ba 	bl	8001c24 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <HAL_RCC_OscConfig+0x784>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aca:	e050      	b.n	8002b6e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04f      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d144      	bne.n	8002b6e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002afc:	f7ff f892 	bl	8001c24 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7ff f88e 	bl	8001c24 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e02c      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x7b8>
 8002b22:	e024      	b.n	8002b6e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d01f      	beq.n	8002b6a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f875 	bl	8001c24 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7ff f871 	bl	8001c24 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e00f      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	4905      	ldr	r1, [pc, #20]	; (8002b78 <HAL_RCC_OscConfig+0x82c>)
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_OscConfig+0x830>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e001      	b.n	8002b6e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	feeefffc 	.word	0xfeeefffc

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e11d      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b98:	4b90      	ldr	r3, [pc, #576]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d910      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b8d      	ldr	r3, [pc, #564]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 020f 	bic.w	r2, r3, #15
 8002bae:	498b      	ldr	r1, [pc, #556]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e105      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d908      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b7e      	ldr	r3, [pc, #504]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	497b      	ldr	r1, [pc, #492]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d079      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d11e      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0dc      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c1a:	f000 fa09 	bl	8003030 <RCC_GetSysClockFreqFromPLLSource>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4a70      	ldr	r2, [pc, #448]	; (8002de4 <HAL_RCC_ClockConfig+0x264>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d946      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d140      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c32:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3a:	4a69      	ldr	r2, [pc, #420]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e035      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c50:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d115      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b9      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0ad      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0a5      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c88:	f000 f8b4 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4a55      	ldr	r2, [pc, #340]	; (8002de4 <HAL_RCC_ClockConfig+0x264>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d90f      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c94:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4947      	ldr	r1, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc6:	f7fe ffad 	bl	8001c24 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cce:	f7fe ffa9 	bl	8001c24 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e077      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce4:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 020c 	and.w	r2, r3, #12
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d1eb      	bne.n	8002cce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cfc:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a37      	ldr	r2, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d208      	bcs.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	492b      	ldr	r1, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d210      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 020f 	bic.w	r2, r3, #15
 8002d4c:	4923      	ldr	r1, [pc, #140]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCC_ClockConfig+0x25c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e036      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4918      	ldr	r1, [pc, #96]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4910      	ldr	r1, [pc, #64]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da4:	f000 f826 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_ClockConfig+0x260>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <HAL_RCC_ClockConfig+0x268>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x26c>)
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fedb 	bl	8001b84 <HAL_InitTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	04c4b400 	.word	0x04c4b400
 8002de8:	08007360 	.word	0x08007360
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11e      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d134      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8002e98:	e005      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9c:	617b      	str	r3, [r7, #20]
      break;
 8002e9e:	e005      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea2:	617b      	str	r3, [r7, #20]
      break;
 8002ea4:	e002      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	617b      	str	r3, [r7, #20]
      break;
 8002eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	fb03 f202 	mul.w	r2, r3, r2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	0e5b      	lsrs	r3, r3, #25
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	3301      	adds	r3, #1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eec:	69bb      	ldr	r3, [r7, #24]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08007378 	.word	0x08007378
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200

08002f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f28:	f7ff fff0 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08007370 	.word	0x08007370

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f54:	f7ff ffda 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0adb      	lsrs	r3, r3, #11
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4904      	ldr	r1, [pc, #16]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08007370 	.word	0x08007370

08002f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f88:	4b27      	ldr	r3, [pc, #156]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f94:	f7ff f906 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002f98:	6178      	str	r0, [r7, #20]
 8002f9a:	e014      	b.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b22      	ldr	r3, [pc, #136]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	4a21      	ldr	r2, [pc, #132]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fb4:	f7ff f8f6 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	4a1a      	ldr	r2, [pc, #104]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fcc:	d10b      	bne.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d913      	bls.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd8:	d902      	bls.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fda:	2302      	movs	r3, #2
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e00d      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e00a      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fea:	d902      	bls.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fec:	2302      	movs	r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e004      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b70      	cmp	r3, #112	; 0x70
 8002ff6:	d101      	bne.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 020f 	bic.w	r2, r3, #15
 8003004:	4909      	ldr	r1, [pc, #36]	; (800302c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	40022000 	.word	0x40022000

08003030 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d00b      	beq.n	800305e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d825      	bhi.n	8003098 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d008      	beq.n	8003064 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d11f      	bne.n	8003098 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800305a:	613b      	str	r3, [r7, #16]
    break;
 800305c:	e01f      	b.n	800309e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800305e:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003060:	613b      	str	r3, [r7, #16]
    break;
 8003062:	e01c      	b.n	800309e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003064:	4b21      	ldr	r3, [pc, #132]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e005      	b.n	800308c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003080:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	613b      	str	r3, [r7, #16]
    break;
 8003096:	e002      	b.n	800309e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
    break;
 800309c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	3301      	adds	r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	fb03 f202 	mul.w	r2, r3, r2
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0e5b      	lsrs	r3, r3, #25
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	3301      	adds	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030de:	683b      	ldr	r3, [r7, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40021000 	.word	0x40021000
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	08007378 	.word	0x08007378

080030fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003104:	2300      	movs	r3, #0
 8003106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003108:	2300      	movs	r3, #0
 800310a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003114:	2b00      	cmp	r3, #0
 8003116:	d040      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d02a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003120:	2b80      	cmp	r3, #128	; 0x80
 8003122:	d825      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d026      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d821      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d006      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d81d      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d010      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800313c:	e018      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a88      	ldr	r2, [pc, #544]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800314a:	e015      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fb02 	bl	800375c <RCCEx_PLLSAI1_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800315c:	e00c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3320      	adds	r3, #32
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fbed 	bl	8003944 <RCCEx_PLLSAI2_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800316e:	e003      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	74fb      	strb	r3, [r7, #19]
      break;
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317e:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003184:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318c:	4975      	ldr	r1, [pc, #468]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003194:	e001      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d047      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d030      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b4:	d82a      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ba:	d02a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80031bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c0:	d824      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031cc:	d81e      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d010      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031d8:	e018      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a61      	ldr	r2, [pc, #388]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e6:	e015      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fab4 	bl	800375c <RCCEx_PLLSAI1_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f8:	e00c      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3320      	adds	r3, #32
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fb9f 	bl	8003944 <RCCEx_PLLSAI2_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	74fb      	strb	r3, [r7, #19]
      break;
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800321a:	4b52      	ldr	r3, [pc, #328]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800321c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	494e      	ldr	r1, [pc, #312]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003230:	e001      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 809f 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003286:	f7fe fccd 	bl	8001c24 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328c:	e009      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328e:	f7fe fcc9 	bl	8001c24 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d902      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	74fb      	strb	r3, [r7, #19]
        break;
 80032a0:	e005      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ef      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d15b      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01f      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d019      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fe:	4a19      	ldr	r2, [pc, #100]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fc88 	bl	8001c24 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003316:	e00b      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fe fc84 	bl	8001c24 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d902      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	74fb      	strb	r3, [r7, #19]
            break;
 800332e:	e006      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0ec      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10c      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800335c:	e008      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	74bb      	strb	r3, [r7, #18]
 8003362:	e005      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a9f      	ldr	r2, [pc, #636]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b9a      	ldr	r3, [pc, #616]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	4996      	ldr	r1, [pc, #600]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b91      	ldr	r3, [pc, #580]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	498e      	ldr	r1, [pc, #568]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	4985      	ldr	r1, [pc, #532]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003402:	497d      	ldr	r1, [pc, #500]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003416:	4b78      	ldr	r3, [pc, #480]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003424:	4974      	ldr	r1, [pc, #464]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	496c      	ldr	r1, [pc, #432]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345a:	4b67      	ldr	r3, [pc, #412]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003468:	4963      	ldr	r1, [pc, #396]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	495b      	ldr	r1, [pc, #364]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	4952      	ldr	r1, [pc, #328]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c0:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	494a      	ldr	r1, [pc, #296]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	4941      	ldr	r1, [pc, #260]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003504:	4b3c      	ldr	r3, [pc, #240]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003512:	4939      	ldr	r1, [pc, #228]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d028      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	4930      	ldr	r1, [pc, #192]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003544:	d106      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003546:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003550:	60d3      	str	r3, [r2, #12]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f8f9 	bl	800375c <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d04d      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800358c:	d108      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003594:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800359e:	e012      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a6:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035be:	490e      	ldr	r1, [pc, #56]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ce:	d106      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035da:	60d3      	str	r3, [r2, #12]
 80035dc:	e020      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a02      	ldr	r2, [pc, #8]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	60d3      	str	r3, [r2, #12]
 80035f4:	e014      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f8a5 	bl	800375c <RCCEx_PLLSAI1_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d028      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363a:	4947      	ldr	r1, [pc, #284]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364a:	d106      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364c:	4b42      	ldr	r3, [pc, #264]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a41      	ldr	r2, [pc, #260]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003656:	60d3      	str	r3, [r2, #12]
 8003658:	e011      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003662:	d10c      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f876 	bl	800375c <RCCEx_PLLSAI1_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01e      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800368a:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	492f      	ldr	r1, [pc, #188]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f851 	bl	800375c <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036da:	f023 0204 	bic.w	r2, r3, #4
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	491c      	ldr	r1, [pc, #112]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036fe:	f023 0218 	bic.w	r2, r3, #24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	4913      	ldr	r1, [pc, #76]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372c:	490a      	ldr	r1, [pc, #40]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800373e:	d105      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800374c:	7cbb      	ldrb	r3, [r7, #18]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003776:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0203 	and.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d103      	bne.n	800378e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
       ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d142      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e03f      	b.n	8003814 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d018      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0x72>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d825      	bhi.n	80037ec <RCCEx_PLLSAI1_Config+0x90>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x4e>
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0x60>
 80037a8:	e020      	b.n	80037ec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	4b62      	ldr	r3, [pc, #392]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e01a      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037bc:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e013      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ce:	4b59      	ldr	r3, [pc, #356]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037da:	4b56      	ldr	r3, [pc, #344]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ea:	e006      	b.n	80037fa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e004      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003802:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4949      	ldr	r1, [pc, #292]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 8086 	bne.w	8003928 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800381c:	4b45      	ldr	r3, [pc, #276]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a44      	ldr	r2, [pc, #272]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fe f9fc 	bl	8001c24 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800382e:	e009      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003830:	f7fe f9f8 	bl	8001c24 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	73fb      	strb	r3, [r7, #15]
        break;
 8003842:	e005      	b.n	8003850 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003844:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ef      	bne.n	8003830 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d168      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d113      	bne.n	8003884 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800385c:	4b35      	ldr	r3, [pc, #212]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	4b35      	ldr	r3, [pc, #212]	; (8003938 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003862:	4013      	ands	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6892      	ldr	r2, [r2, #8]
 8003868:	0211      	lsls	r1, r2, #8
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68d2      	ldr	r2, [r2, #12]
 800386e:	06d2      	lsls	r2, r2, #27
 8003870:	4311      	orrs	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	3a01      	subs	r2, #1
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	430a      	orrs	r2, r1
 800387c:	492d      	ldr	r1, [pc, #180]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	610b      	str	r3, [r1, #16]
 8003882:	e02d      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d115      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388a:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	4b2b      	ldr	r3, [pc, #172]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	0211      	lsls	r1, r2, #8
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6912      	ldr	r2, [r2, #16]
 800389c:	0852      	lsrs	r2, r2, #1
 800389e:	3a01      	subs	r2, #1
 80038a0:	0552      	lsls	r2, r2, #21
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	3a01      	subs	r2, #1
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	430a      	orrs	r2, r1
 80038ae:	4921      	ldr	r1, [pc, #132]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
 80038b4:	e014      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	0211      	lsls	r1, r2, #8
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6952      	ldr	r2, [r2, #20]
 80038c8:	0852      	lsrs	r2, r2, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0652      	lsls	r2, r2, #25
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	430a      	orrs	r2, r1
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe f99a 	bl	8001c24 <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f2:	e009      	b.n	8003908 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f4:	f7fe f996 	bl	8001c24 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	73fb      	strb	r3, [r7, #15]
          break;
 8003906:	e005      	b.n	8003914 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	07ff800f 	.word	0x07ff800f
 800393c:	ff9f800f 	.word	0xff9f800f
 8003940:	f9ff800f 	.word	0xf9ff800f

08003944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800395e:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d103      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
       ||
 8003972:	2b00      	cmp	r3, #0
 8003974:	d142      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e03f      	b.n	80039fc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d018      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0x72>
 8003984:	2b03      	cmp	r3, #3
 8003986:	d825      	bhi.n	80039d4 <RCCEx_PLLSAI2_Config+0x90>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0x4e>
 800398c:	2b02      	cmp	r3, #2
 800398e:	d009      	beq.n	80039a4 <RCCEx_PLLSAI2_Config+0x60>
 8003990:	e020      	b.n	80039d4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003992:	4b62      	ldr	r3, [pc, #392]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e01a      	b.n	80039da <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a4:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e013      	b.n	80039de <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b6:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c2:	4b56      	ldr	r3, [pc, #344]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d2:	e006      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e004      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d108      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4949      	ldr	r1, [pc, #292]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 8086 	bne.w	8003b10 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a04:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a44      	ldr	r2, [pc, #272]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fe f908 	bl	8001c24 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a16:	e009      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a18:	f7fe f904 	bl	8001c24 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d902      	bls.n	8003a2c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	73fb      	strb	r3, [r7, #15]
        break;
 8003a2a:	e005      	b.n	8003a38 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a2c:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ef      	bne.n	8003a18 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d168      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d113      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	0211      	lsls	r1, r2, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	06d2      	lsls	r2, r2, #27
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6852      	ldr	r2, [r2, #4]
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	430a      	orrs	r2, r1
 8003a64:	492d      	ldr	r1, [pc, #180]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	614b      	str	r3, [r1, #20]
 8003a6a:	e02d      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d115      	bne.n	8003a9e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a72:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	0211      	lsls	r1, r2, #8
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6912      	ldr	r2, [r2, #16]
 8003a84:	0852      	lsrs	r2, r2, #1
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0552      	lsls	r2, r2, #21
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6852      	ldr	r2, [r2, #4]
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4921      	ldr	r1, [pc, #132]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	614b      	str	r3, [r1, #20]
 8003a9c:	e014      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	0211      	lsls	r1, r2, #8
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6952      	ldr	r2, [r2, #20]
 8003ab0:	0852      	lsrs	r2, r2, #1
 8003ab2:	3a01      	subs	r2, #1
 8003ab4:	0652      	lsls	r2, r2, #25
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6852      	ldr	r2, [r2, #4]
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	4916      	ldr	r1, [pc, #88]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe f8a6 	bl	8001c24 <HAL_GetTick>
 8003ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ada:	e009      	b.n	8003af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003adc:	f7fe f8a2 	bl	8001c24 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d902      	bls.n	8003af0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	73fb      	strb	r3, [r7, #15]
          break;
 8003aee:	e005      	b.n	8003afc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ef      	beq.n	8003adc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	4904      	ldr	r1, [pc, #16]	; (8003b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	07ff800f 	.word	0x07ff800f
 8003b24:	ff9f800f 	.word	0xff9f800f
 8003b28:	f9ff800f 	.word	0xf9ff800f

08003b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e042      	b.n	8003bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fd fe51 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8c4 	bl	8003cfc <UART_SetConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e022      	b.n	8003bc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fbb4 	bl	80042f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fc3b 	bl	8004438 <UART_CheckIdleState>
 8003bc2:	4603      	mov	r3, r0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	f040 8084 	bne.w	8003cf0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_UART_Transmit+0x28>
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e07c      	b.n	8003cf2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Transmit+0x3a>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e075      	b.n	8003cf2 <HAL_UART_Transmit+0x126>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1e:	f7fe f801 	bl	8001c24 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3c:	d108      	bne.n	8003c50 <HAL_UART_Transmit+0x84>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e003      	b.n	8003c58 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003c60:	e02d      	b.n	8003cbe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fc2e 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e03a      	b.n	8003cf2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3302      	adds	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e008      	b.n	8003cac <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1cb      	bne.n	8003c62 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fbfa 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e006      	b.n	8003cf2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b08c      	sub	sp, #48	; 0x30
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4baa      	ldr	r3, [pc, #680]	; (8003fd4 <UART_SetConfig+0x2d8>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a9f      	ldr	r2, [pc, #636]	; (8003fd8 <UART_SetConfig+0x2dc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f023 010f 	bic.w	r1, r3, #15
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a90      	ldr	r2, [pc, #576]	; (8003fdc <UART_SetConfig+0x2e0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <UART_SetConfig+0xf0>
 8003da0:	4b8f      	ldr	r3, [pc, #572]	; (8003fe0 <UART_SetConfig+0x2e4>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d81a      	bhi.n	8003de4 <UART_SetConfig+0xe8>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <UART_SetConfig+0xb8>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e116      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e112      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e10e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e10a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e106      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <UART_SetConfig+0x2e8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d138      	bne.n	8003e68 <UART_SetConfig+0x16c>
 8003df6:	4b7a      	ldr	r3, [pc, #488]	; (8003fe0 <UART_SetConfig+0x2e4>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d82d      	bhi.n	8003e60 <UART_SetConfig+0x164>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0x110>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e49 	.word	0x08003e49
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e46:	e0d8      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	e0d4      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e50:	2304      	movs	r3, #4
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e0d0      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e58:	2308      	movs	r3, #8
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e0cc      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e66:	e0c8      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5e      	ldr	r2, [pc, #376]	; (8003fe8 <UART_SetConfig+0x2ec>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d125      	bne.n	8003ebe <UART_SetConfig+0x1c2>
 8003e72:	4b5b      	ldr	r3, [pc, #364]	; (8003fe0 <UART_SetConfig+0x2e4>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d016      	beq.n	8003eae <UART_SetConfig+0x1b2>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d818      	bhi.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d00a      	beq.n	8003e9e <UART_SetConfig+0x1a2>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d814      	bhi.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <UART_SetConfig+0x19a>
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d008      	beq.n	8003ea6 <UART_SetConfig+0x1aa>
 8003e94:	e00f      	b.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9c:	e0ad      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea4:	e0a9      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eac:	e0a5      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb4:	e0a1      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebc:	e09d      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <UART_SetConfig+0x2f0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d125      	bne.n	8003f14 <UART_SetConfig+0x218>
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <UART_SetConfig+0x2e4>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed4:	d016      	beq.n	8003f04 <UART_SetConfig+0x208>
 8003ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed8:	d818      	bhi.n	8003f0c <UART_SetConfig+0x210>
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d00a      	beq.n	8003ef4 <UART_SetConfig+0x1f8>
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d814      	bhi.n	8003f0c <UART_SetConfig+0x210>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <UART_SetConfig+0x1f0>
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d008      	beq.n	8003efc <UART_SetConfig+0x200>
 8003eea:	e00f      	b.n	8003f0c <UART_SetConfig+0x210>
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef2:	e082      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003efa:	e07e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f02:	e07a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0a:	e076      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f12:	e072      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a35      	ldr	r2, [pc, #212]	; (8003ff0 <UART_SetConfig+0x2f4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12a      	bne.n	8003f74 <UART_SetConfig+0x278>
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <UART_SetConfig+0x2e4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2c:	d01a      	beq.n	8003f64 <UART_SetConfig+0x268>
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d81b      	bhi.n	8003f6c <UART_SetConfig+0x270>
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d00c      	beq.n	8003f54 <UART_SetConfig+0x258>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3e:	d815      	bhi.n	8003f6c <UART_SetConfig+0x270>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <UART_SetConfig+0x250>
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d008      	beq.n	8003f5c <UART_SetConfig+0x260>
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x270>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f52:	e052      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f54:	2302      	movs	r3, #2
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f5a:	e04e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f62:	e04a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f64:	2308      	movs	r3, #8
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6a:	e046      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e042      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <UART_SetConfig+0x2dc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d13a      	bne.n	8003ff4 <UART_SetConfig+0x2f8>
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <UART_SetConfig+0x2e4>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8c:	d01a      	beq.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f92:	d81b      	bhi.n	8003fcc <UART_SetConfig+0x2d0>
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f98:	d00c      	beq.n	8003fb4 <UART_SetConfig+0x2b8>
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9e:	d815      	bhi.n	8003fcc <UART_SetConfig+0x2d0>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <UART_SetConfig+0x2b0>
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	d008      	beq.n	8003fbc <UART_SetConfig+0x2c0>
 8003faa:	e00f      	b.n	8003fcc <UART_SetConfig+0x2d0>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fb2:	e022      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fba:	e01e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	e01a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e016      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e012      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fd4:	cfff69f3 	.word	0xcfff69f3
 8003fd8:	40008000 	.word	0x40008000
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40004400 	.word	0x40004400
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	40004c00 	.word	0x40004c00
 8003ff0:	40005000 	.word	0x40005000
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4aae      	ldr	r2, [pc, #696]	; (80042b8 <UART_SetConfig+0x5bc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	f040 8097 	bne.w	8004134 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800400a:	2b08      	cmp	r3, #8
 800400c:	d823      	bhi.n	8004056 <UART_SetConfig+0x35a>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0x318>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004039 	.word	0x08004039
 8004018:	08004057 	.word	0x08004057
 800401c:	08004041 	.word	0x08004041
 8004020:	08004057 	.word	0x08004057
 8004024:	08004047 	.word	0x08004047
 8004028:	08004057 	.word	0x08004057
 800402c:	08004057 	.word	0x08004057
 8004030:	08004057 	.word	0x08004057
 8004034:	0800404f 	.word	0x0800404f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7fe ff74 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800403e:	e010      	b.n	8004062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b9e      	ldr	r3, [pc, #632]	; (80042bc <UART_SetConfig+0x5c0>)
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004044:	e00d      	b.n	8004062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7fe fed5 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800404a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800404c:	e009      	b.n	8004062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004054:	e005      	b.n	8004062 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8130 	beq.w	80042ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	4a94      	ldr	r2, [pc, #592]	; (80042c0 <UART_SetConfig+0x5c4>)
 8004070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004074:	461a      	mov	r2, r3
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	fbb3 f3f2 	udiv	r3, r3, r2
 800407c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	429a      	cmp	r2, r3
 800408c:	d305      	bcc.n	800409a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	429a      	cmp	r2, r3
 8004098:	d903      	bls.n	80040a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040a0:	e113      	b.n	80042ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	2200      	movs	r2, #0
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	60fa      	str	r2, [r7, #12]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	4a84      	ldr	r2, [pc, #528]	; (80042c0 <UART_SetConfig+0x5c4>)
 80040b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040c4:	f7fc fd88 	bl	8000bd8 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	020b      	lsls	r3, r1, #8
 80040da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040de:	0202      	lsls	r2, r0, #8
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	6849      	ldr	r1, [r1, #4]
 80040e4:	0849      	lsrs	r1, r1, #1
 80040e6:	2000      	movs	r0, #0
 80040e8:	460c      	mov	r4, r1
 80040ea:	4605      	mov	r5, r0
 80040ec:	eb12 0804 	adds.w	r8, r2, r4
 80040f0:	eb43 0905 	adc.w	r9, r3, r5
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	469a      	mov	sl, r3
 80040fc:	4693      	mov	fp, r2
 80040fe:	4652      	mov	r2, sl
 8004100:	465b      	mov	r3, fp
 8004102:	4640      	mov	r0, r8
 8004104:	4649      	mov	r1, r9
 8004106:	f7fc fd67 	bl	8000bd8 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4613      	mov	r3, r2
 8004110:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004118:	d308      	bcc.n	800412c <UART_SetConfig+0x430>
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004120:	d204      	bcs.n	800412c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	e0ce      	b.n	80042ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004132:	e0ca      	b.n	80042ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800413c:	d166      	bne.n	800420c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800413e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004142:	2b08      	cmp	r3, #8
 8004144:	d827      	bhi.n	8004196 <UART_SetConfig+0x49a>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0x450>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004171 	.word	0x08004171
 8004150:	08004179 	.word	0x08004179
 8004154:	08004181 	.word	0x08004181
 8004158:	08004197 	.word	0x08004197
 800415c:	08004187 	.word	0x08004187
 8004160:	08004197 	.word	0x08004197
 8004164:	08004197 	.word	0x08004197
 8004168:	08004197 	.word	0x08004197
 800416c:	0800418f 	.word	0x0800418f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004170:	f7fe fed8 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004176:	e014      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7fe feea 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800417e:	e010      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004180:	4b4e      	ldr	r3, [pc, #312]	; (80042bc <UART_SetConfig+0x5c0>)
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004184:	e00d      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004186:	f7fe fe35 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800418c:	e009      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004194:	e005      	b.n	80041a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8090 	beq.w	80042ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4a44      	ldr	r2, [pc, #272]	; (80042c0 <UART_SetConfig+0x5c4>)
 80041b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041bc:	005a      	lsls	r2, r3, #1
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d916      	bls.n	8004204 <UART_SetConfig+0x508>
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d212      	bcs.n	8004204 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f023 030f 	bic.w	r3, r3, #15
 80041e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	8bfb      	ldrh	r3, [r7, #30]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	8bfa      	ldrh	r2, [r7, #30]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e062      	b.n	80042ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800420a:	e05e      	b.n	80042ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800420c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004210:	2b08      	cmp	r3, #8
 8004212:	d828      	bhi.n	8004266 <UART_SetConfig+0x56a>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x520>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004241 	.word	0x08004241
 8004220:	08004249 	.word	0x08004249
 8004224:	08004251 	.word	0x08004251
 8004228:	08004267 	.word	0x08004267
 800422c:	08004257 	.word	0x08004257
 8004230:	08004267 	.word	0x08004267
 8004234:	08004267 	.word	0x08004267
 8004238:	08004267 	.word	0x08004267
 800423c:	0800425f 	.word	0x0800425f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe fe70 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8004244:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004246:	e014      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7fe fe82 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800424e:	e010      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <UART_SetConfig+0x5c0>)
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004254:	e00d      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004256:	f7fe fdcd 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800425a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800425c:	e009      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004264:	e005      	b.n	8004272 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004270:	bf00      	nop
    }

    if (pclk != 0U)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d028      	beq.n	80042ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <UART_SetConfig+0x5c4>)
 800427e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004282:	461a      	mov	r2, r3
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	fbb3 f2f2 	udiv	r2, r3, r2
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	441a      	add	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	d910      	bls.n	80042c4 <UART_SetConfig+0x5c8>
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d20c      	bcs.n	80042c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0x5ce>
 80042b6:	bf00      	nop
 80042b8:	40008000 	.word	0x40008000
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	080073a8 	.word	0x080073a8
      }
      else
      {
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80042e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3730      	adds	r7, #48	; 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01a      	beq.n	800440a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f2:	d10a      	bne.n	800440a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004448:	f7fd fbec 	bl	8001c24 <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d10e      	bne.n	800447a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800445c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f82f 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e025      	b.n	80044c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b04      	cmp	r3, #4
 8004486:	d10e      	bne.n	80044a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f819 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b09c      	sub	sp, #112	; 0x70
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044de:	e0a9      	b.n	8004634 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	f000 80a5 	beq.w	8004634 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fd fb9b 	bl	8001c24 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <UART_WaitOnFlagUntilTimeout+0x32>
 80044fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d140      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004514:	667b      	str	r3, [r7, #100]	; 0x64
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800451e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004520:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800452c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	663b      	str	r3, [r7, #96]	; 0x60
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004552:	64ba      	str	r2, [r7, #72]	; 0x48
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e069      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d051      	beq.n	8004634 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	d149      	bne.n	8004634 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e6      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3308      	adds	r3, #8
 80045e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	613b      	str	r3, [r7, #16]
   return(result);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3308      	adds	r3, #8
 80045fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045fc:	623a      	str	r2, [r7, #32]
 80045fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	69f9      	ldr	r1, [r7, #28]
 8004602:	6a3a      	ldr	r2, [r7, #32]
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	61bb      	str	r3, [r7, #24]
   return(result);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e5      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e010      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	429a      	cmp	r2, r3
 8004650:	f43f af46 	beq.w	80044e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3770      	adds	r7, #112	; 0x70
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_UARTEx_DisableFifoMode+0x16>
 8004670:	2302      	movs	r3, #2
 8004672:	e027      	b.n	80046c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e02d      	b.n	8004744 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f84f 	bl	80047c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e02d      	b.n	80047c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f811 	bl	80047c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047e8:	e031      	b.n	800484e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ea:	2308      	movs	r3, #8
 80047ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047ee:	2308      	movs	r3, #8
 80047f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	0e5b      	lsrs	r3, r3, #25
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	0f5b      	lsrs	r3, r3, #29
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004812:	7bbb      	ldrb	r3, [r7, #14]
 8004814:	7b3a      	ldrb	r2, [r7, #12]
 8004816:	4911      	ldr	r1, [pc, #68]	; (800485c <UARTEx_SetNbDataToProcess+0x94>)
 8004818:	5c8a      	ldrb	r2, [r1, r2]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800481e:	7b3a      	ldrb	r2, [r7, #12]
 8004820:	490f      	ldr	r1, [pc, #60]	; (8004860 <UARTEx_SetNbDataToProcess+0x98>)
 8004822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004824:	fb93 f3f2 	sdiv	r3, r3, r2
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	7b7a      	ldrb	r2, [r7, #13]
 8004834:	4909      	ldr	r1, [pc, #36]	; (800485c <UARTEx_SetNbDataToProcess+0x94>)
 8004836:	5c8a      	ldrb	r2, [r1, r2]
 8004838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800483c:	7b7a      	ldrb	r2, [r7, #13]
 800483e:	4908      	ldr	r1, [pc, #32]	; (8004860 <UARTEx_SetNbDataToProcess+0x98>)
 8004840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004842:	fb93 f3f2 	sdiv	r3, r3, r2
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	080073c0 	.word	0x080073c0
 8004860:	080073c8 	.word	0x080073c8

08004864 <__errno>:
 8004864:	4b01      	ldr	r3, [pc, #4]	; (800486c <__errno+0x8>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4d0d      	ldr	r5, [pc, #52]	; (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	; (80048ac <__libc_init_array+0x3c>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2600      	movs	r6, #0
 800487c:	42a6      	cmp	r6, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4d0b      	ldr	r5, [pc, #44]	; (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x44>)
 8004884:	f002 fd36 	bl	80072f4 <_init>
 8004888:	1b64      	subs	r4, r4, r5
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2600      	movs	r6, #0
 800488e:	42a6      	cmp	r6, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f855 3b04 	ldr.w	r3, [r5], #4
 8004898:	4798      	blx	r3
 800489a:	3601      	adds	r6, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a2:	4798      	blx	r3
 80048a4:	3601      	adds	r6, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	080077b4 	.word	0x080077b4
 80048ac:	080077b4 	.word	0x080077b4
 80048b0:	080077b4 	.word	0x080077b4
 80048b4:	080077b8 	.word	0x080077b8

080048b8 <malloc>:
 80048b8:	4b02      	ldr	r3, [pc, #8]	; (80048c4 <malloc+0xc>)
 80048ba:	4601      	mov	r1, r0
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	f000 b88d 	b.w	80049dc <_malloc_r>
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c

080048c8 <memset>:
 80048c8:	4402      	add	r2, r0
 80048ca:	4603      	mov	r3, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d100      	bne.n	80048d2 <memset+0xa>
 80048d0:	4770      	bx	lr
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	e7f9      	b.n	80048cc <memset+0x4>

080048d8 <_calloc_r>:
 80048d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048da:	fba1 2402 	umull	r2, r4, r1, r2
 80048de:	b94c      	cbnz	r4, 80048f4 <_calloc_r+0x1c>
 80048e0:	4611      	mov	r1, r2
 80048e2:	9201      	str	r2, [sp, #4]
 80048e4:	f000 f87a 	bl	80049dc <_malloc_r>
 80048e8:	9a01      	ldr	r2, [sp, #4]
 80048ea:	4605      	mov	r5, r0
 80048ec:	b930      	cbnz	r0, 80048fc <_calloc_r+0x24>
 80048ee:	4628      	mov	r0, r5
 80048f0:	b003      	add	sp, #12
 80048f2:	bd30      	pop	{r4, r5, pc}
 80048f4:	220c      	movs	r2, #12
 80048f6:	6002      	str	r2, [r0, #0]
 80048f8:	2500      	movs	r5, #0
 80048fa:	e7f8      	b.n	80048ee <_calloc_r+0x16>
 80048fc:	4621      	mov	r1, r4
 80048fe:	f7ff ffe3 	bl	80048c8 <memset>
 8004902:	e7f4      	b.n	80048ee <_calloc_r+0x16>

08004904 <_free_r>:
 8004904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004906:	2900      	cmp	r1, #0
 8004908:	d044      	beq.n	8004994 <_free_r+0x90>
 800490a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800490e:	9001      	str	r0, [sp, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	f1a1 0404 	sub.w	r4, r1, #4
 8004916:	bfb8      	it	lt
 8004918:	18e4      	addlt	r4, r4, r3
 800491a:	f001 fcd3 	bl	80062c4 <__malloc_lock>
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <_free_r+0x94>)
 8004920:	9801      	ldr	r0, [sp, #4]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	b933      	cbnz	r3, 8004934 <_free_r+0x30>
 8004926:	6063      	str	r3, [r4, #4]
 8004928:	6014      	str	r4, [r2, #0]
 800492a:	b003      	add	sp, #12
 800492c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004930:	f001 bcce 	b.w	80062d0 <__malloc_unlock>
 8004934:	42a3      	cmp	r3, r4
 8004936:	d908      	bls.n	800494a <_free_r+0x46>
 8004938:	6825      	ldr	r5, [r4, #0]
 800493a:	1961      	adds	r1, r4, r5
 800493c:	428b      	cmp	r3, r1
 800493e:	bf01      	itttt	eq
 8004940:	6819      	ldreq	r1, [r3, #0]
 8004942:	685b      	ldreq	r3, [r3, #4]
 8004944:	1949      	addeq	r1, r1, r5
 8004946:	6021      	streq	r1, [r4, #0]
 8004948:	e7ed      	b.n	8004926 <_free_r+0x22>
 800494a:	461a      	mov	r2, r3
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	b10b      	cbz	r3, 8004954 <_free_r+0x50>
 8004950:	42a3      	cmp	r3, r4
 8004952:	d9fa      	bls.n	800494a <_free_r+0x46>
 8004954:	6811      	ldr	r1, [r2, #0]
 8004956:	1855      	adds	r5, r2, r1
 8004958:	42a5      	cmp	r5, r4
 800495a:	d10b      	bne.n	8004974 <_free_r+0x70>
 800495c:	6824      	ldr	r4, [r4, #0]
 800495e:	4421      	add	r1, r4
 8004960:	1854      	adds	r4, r2, r1
 8004962:	42a3      	cmp	r3, r4
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	d1e0      	bne.n	800492a <_free_r+0x26>
 8004968:	681c      	ldr	r4, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	6053      	str	r3, [r2, #4]
 800496e:	4421      	add	r1, r4
 8004970:	6011      	str	r1, [r2, #0]
 8004972:	e7da      	b.n	800492a <_free_r+0x26>
 8004974:	d902      	bls.n	800497c <_free_r+0x78>
 8004976:	230c      	movs	r3, #12
 8004978:	6003      	str	r3, [r0, #0]
 800497a:	e7d6      	b.n	800492a <_free_r+0x26>
 800497c:	6825      	ldr	r5, [r4, #0]
 800497e:	1961      	adds	r1, r4, r5
 8004980:	428b      	cmp	r3, r1
 8004982:	bf04      	itt	eq
 8004984:	6819      	ldreq	r1, [r3, #0]
 8004986:	685b      	ldreq	r3, [r3, #4]
 8004988:	6063      	str	r3, [r4, #4]
 800498a:	bf04      	itt	eq
 800498c:	1949      	addeq	r1, r1, r5
 800498e:	6021      	streq	r1, [r4, #0]
 8004990:	6054      	str	r4, [r2, #4]
 8004992:	e7ca      	b.n	800492a <_free_r+0x26>
 8004994:	b003      	add	sp, #12
 8004996:	bd30      	pop	{r4, r5, pc}
 8004998:	20000290 	.word	0x20000290

0800499c <sbrk_aligned>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4e0e      	ldr	r6, [pc, #56]	; (80049d8 <sbrk_aligned+0x3c>)
 80049a0:	460c      	mov	r4, r1
 80049a2:	6831      	ldr	r1, [r6, #0]
 80049a4:	4605      	mov	r5, r0
 80049a6:	b911      	cbnz	r1, 80049ae <sbrk_aligned+0x12>
 80049a8:	f000 fcf6 	bl	8005398 <_sbrk_r>
 80049ac:	6030      	str	r0, [r6, #0]
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 fcf1 	bl	8005398 <_sbrk_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	d00a      	beq.n	80049d0 <sbrk_aligned+0x34>
 80049ba:	1cc4      	adds	r4, r0, #3
 80049bc:	f024 0403 	bic.w	r4, r4, #3
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d007      	beq.n	80049d4 <sbrk_aligned+0x38>
 80049c4:	1a21      	subs	r1, r4, r0
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 fce6 	bl	8005398 <_sbrk_r>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d101      	bne.n	80049d4 <sbrk_aligned+0x38>
 80049d0:	f04f 34ff 	mov.w	r4, #4294967295
 80049d4:	4620      	mov	r0, r4
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	20000294 	.word	0x20000294

080049dc <_malloc_r>:
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	1ccd      	adds	r5, r1, #3
 80049e2:	f025 0503 	bic.w	r5, r5, #3
 80049e6:	3508      	adds	r5, #8
 80049e8:	2d0c      	cmp	r5, #12
 80049ea:	bf38      	it	cc
 80049ec:	250c      	movcc	r5, #12
 80049ee:	2d00      	cmp	r5, #0
 80049f0:	4607      	mov	r7, r0
 80049f2:	db01      	blt.n	80049f8 <_malloc_r+0x1c>
 80049f4:	42a9      	cmp	r1, r5
 80049f6:	d905      	bls.n	8004a04 <_malloc_r+0x28>
 80049f8:	230c      	movs	r3, #12
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	2600      	movs	r6, #0
 80049fe:	4630      	mov	r0, r6
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	4e2e      	ldr	r6, [pc, #184]	; (8004ac0 <_malloc_r+0xe4>)
 8004a06:	f001 fc5d 	bl	80062c4 <__malloc_lock>
 8004a0a:	6833      	ldr	r3, [r6, #0]
 8004a0c:	461c      	mov	r4, r3
 8004a0e:	bb34      	cbnz	r4, 8004a5e <_malloc_r+0x82>
 8004a10:	4629      	mov	r1, r5
 8004a12:	4638      	mov	r0, r7
 8004a14:	f7ff ffc2 	bl	800499c <sbrk_aligned>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	d14d      	bne.n	8004aba <_malloc_r+0xde>
 8004a1e:	6834      	ldr	r4, [r6, #0]
 8004a20:	4626      	mov	r6, r4
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	d140      	bne.n	8004aa8 <_malloc_r+0xcc>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	eb04 0803 	add.w	r8, r4, r3
 8004a30:	f000 fcb2 	bl	8005398 <_sbrk_r>
 8004a34:	4580      	cmp	r8, r0
 8004a36:	d13a      	bne.n	8004aae <_malloc_r+0xd2>
 8004a38:	6821      	ldr	r1, [r4, #0]
 8004a3a:	3503      	adds	r5, #3
 8004a3c:	1a6d      	subs	r5, r5, r1
 8004a3e:	f025 0503 	bic.w	r5, r5, #3
 8004a42:	3508      	adds	r5, #8
 8004a44:	2d0c      	cmp	r5, #12
 8004a46:	bf38      	it	cc
 8004a48:	250c      	movcc	r5, #12
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f7ff ffa5 	bl	800499c <sbrk_aligned>
 8004a52:	3001      	adds	r0, #1
 8004a54:	d02b      	beq.n	8004aae <_malloc_r+0xd2>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	442b      	add	r3, r5
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	e00e      	b.n	8004a7c <_malloc_r+0xa0>
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	1b52      	subs	r2, r2, r5
 8004a62:	d41e      	bmi.n	8004aa2 <_malloc_r+0xc6>
 8004a64:	2a0b      	cmp	r2, #11
 8004a66:	d916      	bls.n	8004a96 <_malloc_r+0xba>
 8004a68:	1961      	adds	r1, r4, r5
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	6025      	str	r5, [r4, #0]
 8004a6e:	bf18      	it	ne
 8004a70:	6059      	strne	r1, [r3, #4]
 8004a72:	6863      	ldr	r3, [r4, #4]
 8004a74:	bf08      	it	eq
 8004a76:	6031      	streq	r1, [r6, #0]
 8004a78:	5162      	str	r2, [r4, r5]
 8004a7a:	604b      	str	r3, [r1, #4]
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	f104 060b 	add.w	r6, r4, #11
 8004a82:	f001 fc25 	bl	80062d0 <__malloc_unlock>
 8004a86:	f026 0607 	bic.w	r6, r6, #7
 8004a8a:	1d23      	adds	r3, r4, #4
 8004a8c:	1af2      	subs	r2, r6, r3
 8004a8e:	d0b6      	beq.n	80049fe <_malloc_r+0x22>
 8004a90:	1b9b      	subs	r3, r3, r6
 8004a92:	50a3      	str	r3, [r4, r2]
 8004a94:	e7b3      	b.n	80049fe <_malloc_r+0x22>
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	bf0c      	ite	eq
 8004a9c:	6032      	streq	r2, [r6, #0]
 8004a9e:	605a      	strne	r2, [r3, #4]
 8004aa0:	e7ec      	b.n	8004a7c <_malloc_r+0xa0>
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	6864      	ldr	r4, [r4, #4]
 8004aa6:	e7b2      	b.n	8004a0e <_malloc_r+0x32>
 8004aa8:	4634      	mov	r4, r6
 8004aaa:	6876      	ldr	r6, [r6, #4]
 8004aac:	e7b9      	b.n	8004a22 <_malloc_r+0x46>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f001 fc0c 	bl	80062d0 <__malloc_unlock>
 8004ab8:	e7a1      	b.n	80049fe <_malloc_r+0x22>
 8004aba:	6025      	str	r5, [r4, #0]
 8004abc:	e7de      	b.n	8004a7c <_malloc_r+0xa0>
 8004abe:	bf00      	nop
 8004ac0:	20000290 	.word	0x20000290

08004ac4 <__cvt>:
 8004ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	ec55 4b10 	vmov	r4, r5, d0
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	460e      	mov	r6, r1
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	bfbb      	ittet	lt
 8004ad6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ada:	461d      	movlt	r5, r3
 8004adc:	2300      	movge	r3, #0
 8004ade:	232d      	movlt	r3, #45	; 0x2d
 8004ae0:	700b      	strb	r3, [r1, #0]
 8004ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ae4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ae8:	4691      	mov	r9, r2
 8004aea:	f023 0820 	bic.w	r8, r3, #32
 8004aee:	bfbc      	itt	lt
 8004af0:	4622      	movlt	r2, r4
 8004af2:	4614      	movlt	r4, r2
 8004af4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004af8:	d005      	beq.n	8004b06 <__cvt+0x42>
 8004afa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004afe:	d100      	bne.n	8004b02 <__cvt+0x3e>
 8004b00:	3601      	adds	r6, #1
 8004b02:	2102      	movs	r1, #2
 8004b04:	e000      	b.n	8004b08 <__cvt+0x44>
 8004b06:	2103      	movs	r1, #3
 8004b08:	ab03      	add	r3, sp, #12
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	ab02      	add	r3, sp, #8
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	ec45 4b10 	vmov	d0, r4, r5
 8004b14:	4653      	mov	r3, sl
 8004b16:	4632      	mov	r2, r6
 8004b18:	f000 fcda 	bl	80054d0 <_dtoa_r>
 8004b1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b20:	4607      	mov	r7, r0
 8004b22:	d102      	bne.n	8004b2a <__cvt+0x66>
 8004b24:	f019 0f01 	tst.w	r9, #1
 8004b28:	d022      	beq.n	8004b70 <__cvt+0xac>
 8004b2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b2e:	eb07 0906 	add.w	r9, r7, r6
 8004b32:	d110      	bne.n	8004b56 <__cvt+0x92>
 8004b34:	783b      	ldrb	r3, [r7, #0]
 8004b36:	2b30      	cmp	r3, #48	; 0x30
 8004b38:	d10a      	bne.n	8004b50 <__cvt+0x8c>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7fb ffd9 	bl	8000af8 <__aeabi_dcmpeq>
 8004b46:	b918      	cbnz	r0, 8004b50 <__cvt+0x8c>
 8004b48:	f1c6 0601 	rsb	r6, r6, #1
 8004b4c:	f8ca 6000 	str.w	r6, [sl]
 8004b50:	f8da 3000 	ldr.w	r3, [sl]
 8004b54:	4499      	add	r9, r3
 8004b56:	2200      	movs	r2, #0
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb ffcb 	bl	8000af8 <__aeabi_dcmpeq>
 8004b62:	b108      	cbz	r0, 8004b68 <__cvt+0xa4>
 8004b64:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b68:	2230      	movs	r2, #48	; 0x30
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	454b      	cmp	r3, r9
 8004b6e:	d307      	bcc.n	8004b80 <__cvt+0xbc>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b74:	1bdb      	subs	r3, r3, r7
 8004b76:	4638      	mov	r0, r7
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	b004      	add	sp, #16
 8004b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b80:	1c59      	adds	r1, r3, #1
 8004b82:	9103      	str	r1, [sp, #12]
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e7f0      	b.n	8004b6a <__cvt+0xa6>

08004b88 <__exponent>:
 8004b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	bfb8      	it	lt
 8004b90:	4249      	neglt	r1, r1
 8004b92:	f803 2b02 	strb.w	r2, [r3], #2
 8004b96:	bfb4      	ite	lt
 8004b98:	222d      	movlt	r2, #45	; 0x2d
 8004b9a:	222b      	movge	r2, #43	; 0x2b
 8004b9c:	2909      	cmp	r1, #9
 8004b9e:	7042      	strb	r2, [r0, #1]
 8004ba0:	dd2a      	ble.n	8004bf8 <__exponent+0x70>
 8004ba2:	f10d 0407 	add.w	r4, sp, #7
 8004ba6:	46a4      	mov	ip, r4
 8004ba8:	270a      	movs	r7, #10
 8004baa:	46a6      	mov	lr, r4
 8004bac:	460a      	mov	r2, r1
 8004bae:	fb91 f6f7 	sdiv	r6, r1, r7
 8004bb2:	fb07 1516 	mls	r5, r7, r6, r1
 8004bb6:	3530      	adds	r5, #48	; 0x30
 8004bb8:	2a63      	cmp	r2, #99	; 0x63
 8004bba:	f104 34ff 	add.w	r4, r4, #4294967295
 8004bbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	dcf1      	bgt.n	8004baa <__exponent+0x22>
 8004bc6:	3130      	adds	r1, #48	; 0x30
 8004bc8:	f1ae 0502 	sub.w	r5, lr, #2
 8004bcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bd0:	1c44      	adds	r4, r0, #1
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4561      	cmp	r1, ip
 8004bd6:	d30a      	bcc.n	8004bee <__exponent+0x66>
 8004bd8:	f10d 0209 	add.w	r2, sp, #9
 8004bdc:	eba2 020e 	sub.w	r2, r2, lr
 8004be0:	4565      	cmp	r5, ip
 8004be2:	bf88      	it	hi
 8004be4:	2200      	movhi	r2, #0
 8004be6:	4413      	add	r3, r2
 8004be8:	1a18      	subs	r0, r3, r0
 8004bea:	b003      	add	sp, #12
 8004bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bf6:	e7ed      	b.n	8004bd4 <__exponent+0x4c>
 8004bf8:	2330      	movs	r3, #48	; 0x30
 8004bfa:	3130      	adds	r1, #48	; 0x30
 8004bfc:	7083      	strb	r3, [r0, #2]
 8004bfe:	70c1      	strb	r1, [r0, #3]
 8004c00:	1d03      	adds	r3, r0, #4
 8004c02:	e7f1      	b.n	8004be8 <__exponent+0x60>

08004c04 <_printf_float>:
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	ed2d 8b02 	vpush	{d8}
 8004c0c:	b08d      	sub	sp, #52	; 0x34
 8004c0e:	460c      	mov	r4, r1
 8004c10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c14:	4616      	mov	r6, r2
 8004c16:	461f      	mov	r7, r3
 8004c18:	4605      	mov	r5, r0
 8004c1a:	f001 fb3d 	bl	8006298 <_localeconv_r>
 8004c1e:	f8d0 a000 	ldr.w	sl, [r0]
 8004c22:	4650      	mov	r0, sl
 8004c24:	f7fb faec 	bl	8000200 <strlen>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	f8d8 3000 	ldr.w	r3, [r8]
 8004c34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c38:	3307      	adds	r3, #7
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	f103 0208 	add.w	r2, r3, #8
 8004c42:	f8c8 2000 	str.w	r2, [r8]
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c5c:	ee08 0a10 	vmov	s16, r0
 8004c60:	4b9f      	ldr	r3, [pc, #636]	; (8004ee0 <_printf_float+0x2dc>)
 8004c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	f7fb ff77 	bl	8000b5c <__aeabi_dcmpun>
 8004c6e:	bb88      	cbnz	r0, 8004cd4 <_printf_float+0xd0>
 8004c70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c74:	4b9a      	ldr	r3, [pc, #616]	; (8004ee0 <_printf_float+0x2dc>)
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	f7fb ff51 	bl	8000b20 <__aeabi_dcmple>
 8004c7e:	bb48      	cbnz	r0, 8004cd4 <_printf_float+0xd0>
 8004c80:	2200      	movs	r2, #0
 8004c82:	2300      	movs	r3, #0
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb ff40 	bl	8000b0c <__aeabi_dcmplt>
 8004c8c:	b110      	cbz	r0, 8004c94 <_printf_float+0x90>
 8004c8e:	232d      	movs	r3, #45	; 0x2d
 8004c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c94:	4b93      	ldr	r3, [pc, #588]	; (8004ee4 <_printf_float+0x2e0>)
 8004c96:	4894      	ldr	r0, [pc, #592]	; (8004ee8 <_printf_float+0x2e4>)
 8004c98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c9c:	bf94      	ite	ls
 8004c9e:	4698      	movls	r8, r3
 8004ca0:	4680      	movhi	r8, r0
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	6123      	str	r3, [r4, #16]
 8004ca6:	9b05      	ldr	r3, [sp, #20]
 8004ca8:	f023 0204 	bic.w	r2, r3, #4
 8004cac:	6022      	str	r2, [r4, #0]
 8004cae:	f04f 0900 	mov.w	r9, #0
 8004cb2:	9700      	str	r7, [sp, #0]
 8004cb4:	4633      	mov	r3, r6
 8004cb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f9d8 	bl	8005070 <_printf_common>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f040 8090 	bne.w	8004de6 <_printf_float+0x1e2>
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	b00d      	add	sp, #52	; 0x34
 8004ccc:	ecbd 8b02 	vpop	{d8}
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb ff3e 	bl	8000b5c <__aeabi_dcmpun>
 8004ce0:	b140      	cbz	r0, 8004cf4 <_printf_float+0xf0>
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfbc      	itt	lt
 8004ce8:	232d      	movlt	r3, #45	; 0x2d
 8004cea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cee:	487f      	ldr	r0, [pc, #508]	; (8004eec <_printf_float+0x2e8>)
 8004cf0:	4b7f      	ldr	r3, [pc, #508]	; (8004ef0 <_printf_float+0x2ec>)
 8004cf2:	e7d1      	b.n	8004c98 <_printf_float+0x94>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cfa:	9206      	str	r2, [sp, #24]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	d13f      	bne.n	8004d80 <_printf_float+0x17c>
 8004d00:	2306      	movs	r3, #6
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	6861      	ldr	r1, [r4, #4]
 8004d08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9303      	str	r3, [sp, #12]
 8004d10:	ab0a      	add	r3, sp, #40	; 0x28
 8004d12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d16:	ab09      	add	r3, sp, #36	; 0x24
 8004d18:	ec49 8b10 	vmov	d0, r8, r9
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7ff fecd 	bl	8004ac4 <__cvt>
 8004d2a:	9b06      	ldr	r3, [sp, #24]
 8004d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d2e:	2b47      	cmp	r3, #71	; 0x47
 8004d30:	4680      	mov	r8, r0
 8004d32:	d108      	bne.n	8004d46 <_printf_float+0x142>
 8004d34:	1cc8      	adds	r0, r1, #3
 8004d36:	db02      	blt.n	8004d3e <_printf_float+0x13a>
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	4299      	cmp	r1, r3
 8004d3c:	dd41      	ble.n	8004dc2 <_printf_float+0x1be>
 8004d3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d42:	fa5f fb8b 	uxtb.w	fp, fp
 8004d46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d4a:	d820      	bhi.n	8004d8e <_printf_float+0x18a>
 8004d4c:	3901      	subs	r1, #1
 8004d4e:	465a      	mov	r2, fp
 8004d50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d54:	9109      	str	r1, [sp, #36]	; 0x24
 8004d56:	f7ff ff17 	bl	8004b88 <__exponent>
 8004d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d5c:	1813      	adds	r3, r2, r0
 8004d5e:	2a01      	cmp	r2, #1
 8004d60:	4681      	mov	r9, r0
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	dc02      	bgt.n	8004d6c <_printf_float+0x168>
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	07d2      	lsls	r2, r2, #31
 8004d6a:	d501      	bpl.n	8004d70 <_printf_float+0x16c>
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d09c      	beq.n	8004cb2 <_printf_float+0xae>
 8004d78:	232d      	movs	r3, #45	; 0x2d
 8004d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d7e:	e798      	b.n	8004cb2 <_printf_float+0xae>
 8004d80:	9a06      	ldr	r2, [sp, #24]
 8004d82:	2a47      	cmp	r2, #71	; 0x47
 8004d84:	d1be      	bne.n	8004d04 <_printf_float+0x100>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1bc      	bne.n	8004d04 <_printf_float+0x100>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e7b9      	b.n	8004d02 <_printf_float+0xfe>
 8004d8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d92:	d118      	bne.n	8004dc6 <_printf_float+0x1c2>
 8004d94:	2900      	cmp	r1, #0
 8004d96:	6863      	ldr	r3, [r4, #4]
 8004d98:	dd0b      	ble.n	8004db2 <_printf_float+0x1ae>
 8004d9a:	6121      	str	r1, [r4, #16]
 8004d9c:	b913      	cbnz	r3, 8004da4 <_printf_float+0x1a0>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	07d0      	lsls	r0, r2, #31
 8004da2:	d502      	bpl.n	8004daa <_printf_float+0x1a6>
 8004da4:	3301      	adds	r3, #1
 8004da6:	440b      	add	r3, r1
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8004dac:	f04f 0900 	mov.w	r9, #0
 8004db0:	e7de      	b.n	8004d70 <_printf_float+0x16c>
 8004db2:	b913      	cbnz	r3, 8004dba <_printf_float+0x1b6>
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	07d2      	lsls	r2, r2, #31
 8004db8:	d501      	bpl.n	8004dbe <_printf_float+0x1ba>
 8004dba:	3302      	adds	r3, #2
 8004dbc:	e7f4      	b.n	8004da8 <_printf_float+0x1a4>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e7f2      	b.n	8004da8 <_printf_float+0x1a4>
 8004dc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	db05      	blt.n	8004dd8 <_printf_float+0x1d4>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	6121      	str	r1, [r4, #16]
 8004dd0:	07d8      	lsls	r0, r3, #31
 8004dd2:	d5ea      	bpl.n	8004daa <_printf_float+0x1a6>
 8004dd4:	1c4b      	adds	r3, r1, #1
 8004dd6:	e7e7      	b.n	8004da8 <_printf_float+0x1a4>
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	bfd4      	ite	le
 8004ddc:	f1c1 0202 	rsble	r2, r1, #2
 8004de0:	2201      	movgt	r2, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	e7e0      	b.n	8004da8 <_printf_float+0x1a4>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	055a      	lsls	r2, r3, #21
 8004dea:	d407      	bmi.n	8004dfc <_printf_float+0x1f8>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	4642      	mov	r2, r8
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	d12c      	bne.n	8004e54 <_printf_float+0x250>
 8004dfa:	e764      	b.n	8004cc6 <_printf_float+0xc2>
 8004dfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e00:	f240 80e0 	bls.w	8004fc4 <_printf_float+0x3c0>
 8004e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f7fb fe74 	bl	8000af8 <__aeabi_dcmpeq>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d034      	beq.n	8004e7e <_printf_float+0x27a>
 8004e14:	4a37      	ldr	r2, [pc, #220]	; (8004ef4 <_printf_float+0x2f0>)
 8004e16:	2301      	movs	r3, #1
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f af51 	beq.w	8004cc6 <_printf_float+0xc2>
 8004e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	db02      	blt.n	8004e32 <_printf_float+0x22e>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	07d8      	lsls	r0, r3, #31
 8004e30:	d510      	bpl.n	8004e54 <_printf_float+0x250>
 8004e32:	ee18 3a10 	vmov	r3, s16
 8004e36:	4652      	mov	r2, sl
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f af41 	beq.w	8004cc6 <_printf_float+0xc2>
 8004e44:	f04f 0800 	mov.w	r8, #0
 8004e48:	f104 091a 	add.w	r9, r4, #26
 8004e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	4543      	cmp	r3, r8
 8004e52:	dc09      	bgt.n	8004e68 <_printf_float+0x264>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	079b      	lsls	r3, r3, #30
 8004e58:	f100 8105 	bmi.w	8005066 <_printf_float+0x462>
 8004e5c:	68e0      	ldr	r0, [r4, #12]
 8004e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e60:	4298      	cmp	r0, r3
 8004e62:	bfb8      	it	lt
 8004e64:	4618      	movlt	r0, r3
 8004e66:	e730      	b.n	8004cca <_printf_float+0xc6>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	464a      	mov	r2, r9
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f af27 	beq.w	8004cc6 <_printf_float+0xc2>
 8004e78:	f108 0801 	add.w	r8, r8, #1
 8004e7c:	e7e6      	b.n	8004e4c <_printf_float+0x248>
 8004e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dc39      	bgt.n	8004ef8 <_printf_float+0x2f4>
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <_printf_float+0x2f0>)
 8004e86:	2301      	movs	r3, #1
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f af19 	beq.w	8004cc6 <_printf_float+0xc2>
 8004e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d102      	bne.n	8004ea2 <_printf_float+0x29e>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	07d9      	lsls	r1, r3, #31
 8004ea0:	d5d8      	bpl.n	8004e54 <_printf_float+0x250>
 8004ea2:	ee18 3a10 	vmov	r3, s16
 8004ea6:	4652      	mov	r2, sl
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4628      	mov	r0, r5
 8004eac:	47b8      	blx	r7
 8004eae:	3001      	adds	r0, #1
 8004eb0:	f43f af09 	beq.w	8004cc6 <_printf_float+0xc2>
 8004eb4:	f04f 0900 	mov.w	r9, #0
 8004eb8:	f104 0a1a 	add.w	sl, r4, #26
 8004ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ebe:	425b      	negs	r3, r3
 8004ec0:	454b      	cmp	r3, r9
 8004ec2:	dc01      	bgt.n	8004ec8 <_printf_float+0x2c4>
 8004ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec6:	e792      	b.n	8004dee <_printf_float+0x1ea>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4652      	mov	r2, sl
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f aef7 	beq.w	8004cc6 <_printf_float+0xc2>
 8004ed8:	f109 0901 	add.w	r9, r9, #1
 8004edc:	e7ee      	b.n	8004ebc <_printf_float+0x2b8>
 8004ede:	bf00      	nop
 8004ee0:	7fefffff 	.word	0x7fefffff
 8004ee4:	080073d4 	.word	0x080073d4
 8004ee8:	080073d8 	.word	0x080073d8
 8004eec:	080073e0 	.word	0x080073e0
 8004ef0:	080073dc 	.word	0x080073dc
 8004ef4:	080073e4 	.word	0x080073e4
 8004ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004efa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004efc:	429a      	cmp	r2, r3
 8004efe:	bfa8      	it	ge
 8004f00:	461a      	movge	r2, r3
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	4691      	mov	r9, r2
 8004f06:	dc37      	bgt.n	8004f78 <_printf_float+0x374>
 8004f08:	f04f 0b00 	mov.w	fp, #0
 8004f0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f10:	f104 021a 	add.w	r2, r4, #26
 8004f14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f16:	9305      	str	r3, [sp, #20]
 8004f18:	eba3 0309 	sub.w	r3, r3, r9
 8004f1c:	455b      	cmp	r3, fp
 8004f1e:	dc33      	bgt.n	8004f88 <_printf_float+0x384>
 8004f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f24:	429a      	cmp	r2, r3
 8004f26:	db3b      	blt.n	8004fa0 <_printf_float+0x39c>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	07da      	lsls	r2, r3, #31
 8004f2c:	d438      	bmi.n	8004fa0 <_printf_float+0x39c>
 8004f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f30:	9a05      	ldr	r2, [sp, #20]
 8004f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f34:	1a9a      	subs	r2, r3, r2
 8004f36:	eba3 0901 	sub.w	r9, r3, r1
 8004f3a:	4591      	cmp	r9, r2
 8004f3c:	bfa8      	it	ge
 8004f3e:	4691      	movge	r9, r2
 8004f40:	f1b9 0f00 	cmp.w	r9, #0
 8004f44:	dc35      	bgt.n	8004fb2 <_printf_float+0x3ae>
 8004f46:	f04f 0800 	mov.w	r8, #0
 8004f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f4e:	f104 0a1a 	add.w	sl, r4, #26
 8004f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	eba3 0309 	sub.w	r3, r3, r9
 8004f5c:	4543      	cmp	r3, r8
 8004f5e:	f77f af79 	ble.w	8004e54 <_printf_float+0x250>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4652      	mov	r2, sl
 8004f66:	4631      	mov	r1, r6
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b8      	blx	r7
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f43f aeaa 	beq.w	8004cc6 <_printf_float+0xc2>
 8004f72:	f108 0801 	add.w	r8, r8, #1
 8004f76:	e7ec      	b.n	8004f52 <_printf_float+0x34e>
 8004f78:	4613      	mov	r3, r2
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	4628      	mov	r0, r5
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	d1c0      	bne.n	8004f08 <_printf_float+0x304>
 8004f86:	e69e      	b.n	8004cc6 <_printf_float+0xc2>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	9205      	str	r2, [sp, #20]
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f ae97 	beq.w	8004cc6 <_printf_float+0xc2>
 8004f98:	9a05      	ldr	r2, [sp, #20]
 8004f9a:	f10b 0b01 	add.w	fp, fp, #1
 8004f9e:	e7b9      	b.n	8004f14 <_printf_float+0x310>
 8004fa0:	ee18 3a10 	vmov	r3, s16
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	d1be      	bne.n	8004f2e <_printf_float+0x32a>
 8004fb0:	e689      	b.n	8004cc6 <_printf_float+0xc2>
 8004fb2:	9a05      	ldr	r2, [sp, #20]
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	4442      	add	r2, r8
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d1c1      	bne.n	8004f46 <_printf_float+0x342>
 8004fc2:	e680      	b.n	8004cc6 <_printf_float+0xc2>
 8004fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fc6:	2a01      	cmp	r2, #1
 8004fc8:	dc01      	bgt.n	8004fce <_printf_float+0x3ca>
 8004fca:	07db      	lsls	r3, r3, #31
 8004fcc:	d538      	bpl.n	8005040 <_printf_float+0x43c>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f43f ae74 	beq.w	8004cc6 <_printf_float+0xc2>
 8004fde:	ee18 3a10 	vmov	r3, s16
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f ae6b 	beq.w	8004cc6 <_printf_float+0xc2>
 8004ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f7fb fd7e 	bl	8000af8 <__aeabi_dcmpeq>
 8004ffc:	b9d8      	cbnz	r0, 8005036 <_printf_float+0x432>
 8004ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005000:	f108 0201 	add.w	r2, r8, #1
 8005004:	3b01      	subs	r3, #1
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	d10e      	bne.n	800502e <_printf_float+0x42a>
 8005010:	e659      	b.n	8004cc6 <_printf_float+0xc2>
 8005012:	2301      	movs	r3, #1
 8005014:	4652      	mov	r2, sl
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	f43f ae52 	beq.w	8004cc6 <_printf_float+0xc2>
 8005022:	f108 0801 	add.w	r8, r8, #1
 8005026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005028:	3b01      	subs	r3, #1
 800502a:	4543      	cmp	r3, r8
 800502c:	dcf1      	bgt.n	8005012 <_printf_float+0x40e>
 800502e:	464b      	mov	r3, r9
 8005030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005034:	e6dc      	b.n	8004df0 <_printf_float+0x1ec>
 8005036:	f04f 0800 	mov.w	r8, #0
 800503a:	f104 0a1a 	add.w	sl, r4, #26
 800503e:	e7f2      	b.n	8005026 <_printf_float+0x422>
 8005040:	2301      	movs	r3, #1
 8005042:	4642      	mov	r2, r8
 8005044:	e7df      	b.n	8005006 <_printf_float+0x402>
 8005046:	2301      	movs	r3, #1
 8005048:	464a      	mov	r2, r9
 800504a:	4631      	mov	r1, r6
 800504c:	4628      	mov	r0, r5
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	f43f ae38 	beq.w	8004cc6 <_printf_float+0xc2>
 8005056:	f108 0801 	add.w	r8, r8, #1
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800505e:	1a5b      	subs	r3, r3, r1
 8005060:	4543      	cmp	r3, r8
 8005062:	dcf0      	bgt.n	8005046 <_printf_float+0x442>
 8005064:	e6fa      	b.n	8004e5c <_printf_float+0x258>
 8005066:	f04f 0800 	mov.w	r8, #0
 800506a:	f104 0919 	add.w	r9, r4, #25
 800506e:	e7f4      	b.n	800505a <_printf_float+0x456>

08005070 <_printf_common>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	4616      	mov	r6, r2
 8005076:	4699      	mov	r9, r3
 8005078:	688a      	ldr	r2, [r1, #8]
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005080:	4293      	cmp	r3, r2
 8005082:	bfb8      	it	lt
 8005084:	4613      	movlt	r3, r2
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800508c:	4607      	mov	r7, r0
 800508e:	460c      	mov	r4, r1
 8005090:	b10a      	cbz	r2, 8005096 <_printf_common+0x26>
 8005092:	3301      	adds	r3, #1
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	0699      	lsls	r1, r3, #26
 800509a:	bf42      	ittt	mi
 800509c:	6833      	ldrmi	r3, [r6, #0]
 800509e:	3302      	addmi	r3, #2
 80050a0:	6033      	strmi	r3, [r6, #0]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d106      	bne.n	80050b8 <_printf_common+0x48>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	6832      	ldr	r2, [r6, #0]
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	dc26      	bgt.n	8005106 <_printf_common+0x96>
 80050b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050bc:	1e13      	subs	r3, r2, #0
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	bf18      	it	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	0692      	lsls	r2, r2, #26
 80050c6:	d42b      	bmi.n	8005120 <_printf_common+0xb0>
 80050c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d01e      	beq.n	8005114 <_printf_common+0xa4>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	68e5      	ldr	r5, [r4, #12]
 80050da:	6832      	ldr	r2, [r6, #0]
 80050dc:	f003 0306 	and.w	r3, r3, #6
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	bf08      	it	eq
 80050e4:	1aad      	subeq	r5, r5, r2
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	bf0c      	ite	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	2500      	movne	r5, #0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bfc4      	itt	gt
 80050f6:	1a9b      	subgt	r3, r3, r2
 80050f8:	18ed      	addgt	r5, r5, r3
 80050fa:	2600      	movs	r6, #0
 80050fc:	341a      	adds	r4, #26
 80050fe:	42b5      	cmp	r5, r6
 8005100:	d11a      	bne.n	8005138 <_printf_common+0xc8>
 8005102:	2000      	movs	r0, #0
 8005104:	e008      	b.n	8005118 <_printf_common+0xa8>
 8005106:	2301      	movs	r3, #1
 8005108:	4652      	mov	r2, sl
 800510a:	4649      	mov	r1, r9
 800510c:	4638      	mov	r0, r7
 800510e:	47c0      	blx	r8
 8005110:	3001      	adds	r0, #1
 8005112:	d103      	bne.n	800511c <_printf_common+0xac>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	3501      	adds	r5, #1
 800511e:	e7c6      	b.n	80050ae <_printf_common+0x3e>
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	2030      	movs	r0, #48	; 0x30
 8005126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800512a:	4422      	add	r2, r4
 800512c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005134:	3302      	adds	r3, #2
 8005136:	e7c7      	b.n	80050c8 <_printf_common+0x58>
 8005138:	2301      	movs	r3, #1
 800513a:	4622      	mov	r2, r4
 800513c:	4649      	mov	r1, r9
 800513e:	4638      	mov	r0, r7
 8005140:	47c0      	blx	r8
 8005142:	3001      	adds	r0, #1
 8005144:	d0e6      	beq.n	8005114 <_printf_common+0xa4>
 8005146:	3601      	adds	r6, #1
 8005148:	e7d9      	b.n	80050fe <_printf_common+0x8e>
	...

0800514c <_printf_i>:
 800514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	7e0f      	ldrb	r7, [r1, #24]
 8005152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005154:	2f78      	cmp	r7, #120	; 0x78
 8005156:	4691      	mov	r9, r2
 8005158:	4680      	mov	r8, r0
 800515a:	460c      	mov	r4, r1
 800515c:	469a      	mov	sl, r3
 800515e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005162:	d807      	bhi.n	8005174 <_printf_i+0x28>
 8005164:	2f62      	cmp	r7, #98	; 0x62
 8005166:	d80a      	bhi.n	800517e <_printf_i+0x32>
 8005168:	2f00      	cmp	r7, #0
 800516a:	f000 80d8 	beq.w	800531e <_printf_i+0x1d2>
 800516e:	2f58      	cmp	r7, #88	; 0x58
 8005170:	f000 80a3 	beq.w	80052ba <_printf_i+0x16e>
 8005174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800517c:	e03a      	b.n	80051f4 <_printf_i+0xa8>
 800517e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005182:	2b15      	cmp	r3, #21
 8005184:	d8f6      	bhi.n	8005174 <_printf_i+0x28>
 8005186:	a101      	add	r1, pc, #4	; (adr r1, 800518c <_printf_i+0x40>)
 8005188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051f9 	.word	0x080051f9
 8005194:	08005175 	.word	0x08005175
 8005198:	08005175 	.word	0x08005175
 800519c:	08005175 	.word	0x08005175
 80051a0:	08005175 	.word	0x08005175
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	08005175 	.word	0x08005175
 80051ac:	08005175 	.word	0x08005175
 80051b0:	08005175 	.word	0x08005175
 80051b4:	08005175 	.word	0x08005175
 80051b8:	08005305 	.word	0x08005305
 80051bc:	08005229 	.word	0x08005229
 80051c0:	080052e7 	.word	0x080052e7
 80051c4:	08005175 	.word	0x08005175
 80051c8:	08005175 	.word	0x08005175
 80051cc:	08005327 	.word	0x08005327
 80051d0:	08005175 	.word	0x08005175
 80051d4:	08005229 	.word	0x08005229
 80051d8:	08005175 	.word	0x08005175
 80051dc:	08005175 	.word	0x08005175
 80051e0:	080052ef 	.word	0x080052ef
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0a3      	b.n	8005340 <_printf_i+0x1f4>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	6829      	ldr	r1, [r5, #0]
 80051fc:	0606      	lsls	r6, r0, #24
 80051fe:	f101 0304 	add.w	r3, r1, #4
 8005202:	d50a      	bpl.n	800521a <_printf_i+0xce>
 8005204:	680e      	ldr	r6, [r1, #0]
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	2e00      	cmp	r6, #0
 800520a:	da03      	bge.n	8005214 <_printf_i+0xc8>
 800520c:	232d      	movs	r3, #45	; 0x2d
 800520e:	4276      	negs	r6, r6
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005214:	485e      	ldr	r0, [pc, #376]	; (8005390 <_printf_i+0x244>)
 8005216:	230a      	movs	r3, #10
 8005218:	e019      	b.n	800524e <_printf_i+0x102>
 800521a:	680e      	ldr	r6, [r1, #0]
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005222:	bf18      	it	ne
 8005224:	b236      	sxthne	r6, r6
 8005226:	e7ef      	b.n	8005208 <_printf_i+0xbc>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	6820      	ldr	r0, [r4, #0]
 800522c:	1d19      	adds	r1, r3, #4
 800522e:	6029      	str	r1, [r5, #0]
 8005230:	0601      	lsls	r1, r0, #24
 8005232:	d501      	bpl.n	8005238 <_printf_i+0xec>
 8005234:	681e      	ldr	r6, [r3, #0]
 8005236:	e002      	b.n	800523e <_printf_i+0xf2>
 8005238:	0646      	lsls	r6, r0, #25
 800523a:	d5fb      	bpl.n	8005234 <_printf_i+0xe8>
 800523c:	881e      	ldrh	r6, [r3, #0]
 800523e:	4854      	ldr	r0, [pc, #336]	; (8005390 <_printf_i+0x244>)
 8005240:	2f6f      	cmp	r7, #111	; 0x6f
 8005242:	bf0c      	ite	eq
 8005244:	2308      	moveq	r3, #8
 8005246:	230a      	movne	r3, #10
 8005248:	2100      	movs	r1, #0
 800524a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524e:	6865      	ldr	r5, [r4, #4]
 8005250:	60a5      	str	r5, [r4, #8]
 8005252:	2d00      	cmp	r5, #0
 8005254:	bfa2      	ittt	ge
 8005256:	6821      	ldrge	r1, [r4, #0]
 8005258:	f021 0104 	bicge.w	r1, r1, #4
 800525c:	6021      	strge	r1, [r4, #0]
 800525e:	b90e      	cbnz	r6, 8005264 <_printf_i+0x118>
 8005260:	2d00      	cmp	r5, #0
 8005262:	d04d      	beq.n	8005300 <_printf_i+0x1b4>
 8005264:	4615      	mov	r5, r2
 8005266:	fbb6 f1f3 	udiv	r1, r6, r3
 800526a:	fb03 6711 	mls	r7, r3, r1, r6
 800526e:	5dc7      	ldrb	r7, [r0, r7]
 8005270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005274:	4637      	mov	r7, r6
 8005276:	42bb      	cmp	r3, r7
 8005278:	460e      	mov	r6, r1
 800527a:	d9f4      	bls.n	8005266 <_printf_i+0x11a>
 800527c:	2b08      	cmp	r3, #8
 800527e:	d10b      	bne.n	8005298 <_printf_i+0x14c>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	07de      	lsls	r6, r3, #31
 8005284:	d508      	bpl.n	8005298 <_printf_i+0x14c>
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	6861      	ldr	r1, [r4, #4]
 800528a:	4299      	cmp	r1, r3
 800528c:	bfde      	ittt	le
 800528e:	2330      	movle	r3, #48	; 0x30
 8005290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005294:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005298:	1b52      	subs	r2, r2, r5
 800529a:	6122      	str	r2, [r4, #16]
 800529c:	f8cd a000 	str.w	sl, [sp]
 80052a0:	464b      	mov	r3, r9
 80052a2:	aa03      	add	r2, sp, #12
 80052a4:	4621      	mov	r1, r4
 80052a6:	4640      	mov	r0, r8
 80052a8:	f7ff fee2 	bl	8005070 <_printf_common>
 80052ac:	3001      	adds	r0, #1
 80052ae:	d14c      	bne.n	800534a <_printf_i+0x1fe>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	b004      	add	sp, #16
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	4835      	ldr	r0, [pc, #212]	; (8005390 <_printf_i+0x244>)
 80052bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052c0:	6829      	ldr	r1, [r5, #0]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80052c8:	6029      	str	r1, [r5, #0]
 80052ca:	061d      	lsls	r5, r3, #24
 80052cc:	d514      	bpl.n	80052f8 <_printf_i+0x1ac>
 80052ce:	07df      	lsls	r7, r3, #31
 80052d0:	bf44      	itt	mi
 80052d2:	f043 0320 	orrmi.w	r3, r3, #32
 80052d6:	6023      	strmi	r3, [r4, #0]
 80052d8:	b91e      	cbnz	r6, 80052e2 <_printf_i+0x196>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f023 0320 	bic.w	r3, r3, #32
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	2310      	movs	r3, #16
 80052e4:	e7b0      	b.n	8005248 <_printf_i+0xfc>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	f043 0320 	orr.w	r3, r3, #32
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	2378      	movs	r3, #120	; 0x78
 80052f0:	4828      	ldr	r0, [pc, #160]	; (8005394 <_printf_i+0x248>)
 80052f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052f6:	e7e3      	b.n	80052c0 <_printf_i+0x174>
 80052f8:	0659      	lsls	r1, r3, #25
 80052fa:	bf48      	it	mi
 80052fc:	b2b6      	uxthmi	r6, r6
 80052fe:	e7e6      	b.n	80052ce <_printf_i+0x182>
 8005300:	4615      	mov	r5, r2
 8005302:	e7bb      	b.n	800527c <_printf_i+0x130>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	6826      	ldr	r6, [r4, #0]
 8005308:	6961      	ldr	r1, [r4, #20]
 800530a:	1d18      	adds	r0, r3, #4
 800530c:	6028      	str	r0, [r5, #0]
 800530e:	0635      	lsls	r5, r6, #24
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	d501      	bpl.n	8005318 <_printf_i+0x1cc>
 8005314:	6019      	str	r1, [r3, #0]
 8005316:	e002      	b.n	800531e <_printf_i+0x1d2>
 8005318:	0670      	lsls	r0, r6, #25
 800531a:	d5fb      	bpl.n	8005314 <_printf_i+0x1c8>
 800531c:	8019      	strh	r1, [r3, #0]
 800531e:	2300      	movs	r3, #0
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	4615      	mov	r5, r2
 8005324:	e7ba      	b.n	800529c <_printf_i+0x150>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	602a      	str	r2, [r5, #0]
 800532c:	681d      	ldr	r5, [r3, #0]
 800532e:	6862      	ldr	r2, [r4, #4]
 8005330:	2100      	movs	r1, #0
 8005332:	4628      	mov	r0, r5
 8005334:	f7fa ff6c 	bl	8000210 <memchr>
 8005338:	b108      	cbz	r0, 800533e <_printf_i+0x1f2>
 800533a:	1b40      	subs	r0, r0, r5
 800533c:	6060      	str	r0, [r4, #4]
 800533e:	6863      	ldr	r3, [r4, #4]
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	2300      	movs	r3, #0
 8005344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005348:	e7a8      	b.n	800529c <_printf_i+0x150>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	462a      	mov	r2, r5
 800534e:	4649      	mov	r1, r9
 8005350:	4640      	mov	r0, r8
 8005352:	47d0      	blx	sl
 8005354:	3001      	adds	r0, #1
 8005356:	d0ab      	beq.n	80052b0 <_printf_i+0x164>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	079b      	lsls	r3, r3, #30
 800535c:	d413      	bmi.n	8005386 <_printf_i+0x23a>
 800535e:	68e0      	ldr	r0, [r4, #12]
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	4298      	cmp	r0, r3
 8005364:	bfb8      	it	lt
 8005366:	4618      	movlt	r0, r3
 8005368:	e7a4      	b.n	80052b4 <_printf_i+0x168>
 800536a:	2301      	movs	r3, #1
 800536c:	4632      	mov	r2, r6
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	47d0      	blx	sl
 8005374:	3001      	adds	r0, #1
 8005376:	d09b      	beq.n	80052b0 <_printf_i+0x164>
 8005378:	3501      	adds	r5, #1
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	9903      	ldr	r1, [sp, #12]
 800537e:	1a5b      	subs	r3, r3, r1
 8005380:	42ab      	cmp	r3, r5
 8005382:	dcf2      	bgt.n	800536a <_printf_i+0x21e>
 8005384:	e7eb      	b.n	800535e <_printf_i+0x212>
 8005386:	2500      	movs	r5, #0
 8005388:	f104 0619 	add.w	r6, r4, #25
 800538c:	e7f5      	b.n	800537a <_printf_i+0x22e>
 800538e:	bf00      	nop
 8005390:	080073e6 	.word	0x080073e6
 8005394:	080073f7 	.word	0x080073f7

08005398 <_sbrk_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d06      	ldr	r5, [pc, #24]	; (80053b4 <_sbrk_r+0x1c>)
 800539c:	2300      	movs	r3, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	f7fc fb64 	bl	8001a70 <_sbrk>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_sbrk_r+0x1a>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_sbrk_r+0x1a>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	2000029c 	.word	0x2000029c

080053b8 <quorem>:
 80053b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	6903      	ldr	r3, [r0, #16]
 80053be:	690c      	ldr	r4, [r1, #16]
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	4607      	mov	r7, r0
 80053c4:	f2c0 8081 	blt.w	80054ca <quorem+0x112>
 80053c8:	3c01      	subs	r4, #1
 80053ca:	f101 0814 	add.w	r8, r1, #20
 80053ce:	f100 0514 	add.w	r5, r0, #20
 80053d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053e0:	3301      	adds	r3, #1
 80053e2:	429a      	cmp	r2, r3
 80053e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80053f0:	d331      	bcc.n	8005456 <quorem+0x9e>
 80053f2:	f04f 0e00 	mov.w	lr, #0
 80053f6:	4640      	mov	r0, r8
 80053f8:	46ac      	mov	ip, r5
 80053fa:	46f2      	mov	sl, lr
 80053fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005400:	b293      	uxth	r3, r2
 8005402:	fb06 e303 	mla	r3, r6, r3, lr
 8005406:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800540a:	b29b      	uxth	r3, r3
 800540c:	ebaa 0303 	sub.w	r3, sl, r3
 8005410:	f8dc a000 	ldr.w	sl, [ip]
 8005414:	0c12      	lsrs	r2, r2, #16
 8005416:	fa13 f38a 	uxtah	r3, r3, sl
 800541a:	fb06 e202 	mla	r2, r6, r2, lr
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005426:	b292      	uxth	r2, r2
 8005428:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800542c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005430:	f8bd 3000 	ldrh.w	r3, [sp]
 8005434:	4581      	cmp	r9, r0
 8005436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800543a:	f84c 3b04 	str.w	r3, [ip], #4
 800543e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005442:	d2db      	bcs.n	80053fc <quorem+0x44>
 8005444:	f855 300b 	ldr.w	r3, [r5, fp]
 8005448:	b92b      	cbnz	r3, 8005456 <quorem+0x9e>
 800544a:	9b01      	ldr	r3, [sp, #4]
 800544c:	3b04      	subs	r3, #4
 800544e:	429d      	cmp	r5, r3
 8005450:	461a      	mov	r2, r3
 8005452:	d32e      	bcc.n	80054b2 <quorem+0xfa>
 8005454:	613c      	str	r4, [r7, #16]
 8005456:	4638      	mov	r0, r7
 8005458:	f001 f9c2 	bl	80067e0 <__mcmp>
 800545c:	2800      	cmp	r0, #0
 800545e:	db24      	blt.n	80054aa <quorem+0xf2>
 8005460:	3601      	adds	r6, #1
 8005462:	4628      	mov	r0, r5
 8005464:	f04f 0c00 	mov.w	ip, #0
 8005468:	f858 2b04 	ldr.w	r2, [r8], #4
 800546c:	f8d0 e000 	ldr.w	lr, [r0]
 8005470:	b293      	uxth	r3, r2
 8005472:	ebac 0303 	sub.w	r3, ip, r3
 8005476:	0c12      	lsrs	r2, r2, #16
 8005478:	fa13 f38e 	uxtah	r3, r3, lr
 800547c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005484:	b29b      	uxth	r3, r3
 8005486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800548a:	45c1      	cmp	r9, r8
 800548c:	f840 3b04 	str.w	r3, [r0], #4
 8005490:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005494:	d2e8      	bcs.n	8005468 <quorem+0xb0>
 8005496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800549a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800549e:	b922      	cbnz	r2, 80054aa <quorem+0xf2>
 80054a0:	3b04      	subs	r3, #4
 80054a2:	429d      	cmp	r5, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	d30a      	bcc.n	80054be <quorem+0x106>
 80054a8:	613c      	str	r4, [r7, #16]
 80054aa:	4630      	mov	r0, r6
 80054ac:	b003      	add	sp, #12
 80054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	3b04      	subs	r3, #4
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	d1cc      	bne.n	8005454 <quorem+0x9c>
 80054ba:	3c01      	subs	r4, #1
 80054bc:	e7c7      	b.n	800544e <quorem+0x96>
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	d1f0      	bne.n	80054a8 <quorem+0xf0>
 80054c6:	3c01      	subs	r4, #1
 80054c8:	e7eb      	b.n	80054a2 <quorem+0xea>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e7ee      	b.n	80054ac <quorem+0xf4>
	...

080054d0 <_dtoa_r>:
 80054d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	ed2d 8b04 	vpush	{d8-d9}
 80054d8:	ec57 6b10 	vmov	r6, r7, d0
 80054dc:	b093      	sub	sp, #76	; 0x4c
 80054de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054e4:	9106      	str	r1, [sp, #24]
 80054e6:	ee10 aa10 	vmov	sl, s0
 80054ea:	4604      	mov	r4, r0
 80054ec:	9209      	str	r2, [sp, #36]	; 0x24
 80054ee:	930c      	str	r3, [sp, #48]	; 0x30
 80054f0:	46bb      	mov	fp, r7
 80054f2:	b975      	cbnz	r5, 8005512 <_dtoa_r+0x42>
 80054f4:	2010      	movs	r0, #16
 80054f6:	f7ff f9df 	bl	80048b8 <malloc>
 80054fa:	4602      	mov	r2, r0
 80054fc:	6260      	str	r0, [r4, #36]	; 0x24
 80054fe:	b920      	cbnz	r0, 800550a <_dtoa_r+0x3a>
 8005500:	4ba7      	ldr	r3, [pc, #668]	; (80057a0 <_dtoa_r+0x2d0>)
 8005502:	21ea      	movs	r1, #234	; 0xea
 8005504:	48a7      	ldr	r0, [pc, #668]	; (80057a4 <_dtoa_r+0x2d4>)
 8005506:	f001 fcdd 	bl	8006ec4 <__assert_func>
 800550a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800550e:	6005      	str	r5, [r0, #0]
 8005510:	60c5      	str	r5, [r0, #12]
 8005512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	b151      	cbz	r1, 800552e <_dtoa_r+0x5e>
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	604a      	str	r2, [r1, #4]
 800551c:	2301      	movs	r3, #1
 800551e:	4093      	lsls	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
 8005522:	4620      	mov	r0, r4
 8005524:	f000 ff1a 	bl	800635c <_Bfree>
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	1e3b      	subs	r3, r7, #0
 8005530:	bfaa      	itet	ge
 8005532:	2300      	movge	r3, #0
 8005534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005538:	f8c8 3000 	strge.w	r3, [r8]
 800553c:	4b9a      	ldr	r3, [pc, #616]	; (80057a8 <_dtoa_r+0x2d8>)
 800553e:	bfbc      	itt	lt
 8005540:	2201      	movlt	r2, #1
 8005542:	f8c8 2000 	strlt.w	r2, [r8]
 8005546:	ea33 030b 	bics.w	r3, r3, fp
 800554a:	d11b      	bne.n	8005584 <_dtoa_r+0xb4>
 800554c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800554e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005558:	4333      	orrs	r3, r6
 800555a:	f000 8592 	beq.w	8006082 <_dtoa_r+0xbb2>
 800555e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005560:	b963      	cbnz	r3, 800557c <_dtoa_r+0xac>
 8005562:	4b92      	ldr	r3, [pc, #584]	; (80057ac <_dtoa_r+0x2dc>)
 8005564:	e022      	b.n	80055ac <_dtoa_r+0xdc>
 8005566:	4b92      	ldr	r3, [pc, #584]	; (80057b0 <_dtoa_r+0x2e0>)
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	3308      	adds	r3, #8
 800556c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	9801      	ldr	r0, [sp, #4]
 8005572:	b013      	add	sp, #76	; 0x4c
 8005574:	ecbd 8b04 	vpop	{d8-d9}
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	4b8b      	ldr	r3, [pc, #556]	; (80057ac <_dtoa_r+0x2dc>)
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	3303      	adds	r3, #3
 8005582:	e7f3      	b.n	800556c <_dtoa_r+0x9c>
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	4650      	mov	r0, sl
 800558a:	4659      	mov	r1, fp
 800558c:	f7fb fab4 	bl	8000af8 <__aeabi_dcmpeq>
 8005590:	ec4b ab19 	vmov	d9, sl, fp
 8005594:	4680      	mov	r8, r0
 8005596:	b158      	cbz	r0, 80055b0 <_dtoa_r+0xe0>
 8005598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800559a:	2301      	movs	r3, #1
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 856b 	beq.w	800607c <_dtoa_r+0xbac>
 80055a6:	4883      	ldr	r0, [pc, #524]	; (80057b4 <_dtoa_r+0x2e4>)
 80055a8:	6018      	str	r0, [r3, #0]
 80055aa:	1e43      	subs	r3, r0, #1
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	e7df      	b.n	8005570 <_dtoa_r+0xa0>
 80055b0:	ec4b ab10 	vmov	d0, sl, fp
 80055b4:	aa10      	add	r2, sp, #64	; 0x40
 80055b6:	a911      	add	r1, sp, #68	; 0x44
 80055b8:	4620      	mov	r0, r4
 80055ba:	f001 f9b7 	bl	800692c <__d2b>
 80055be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80055c2:	ee08 0a10 	vmov	s16, r0
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	f000 8084 	beq.w	80056d4 <_dtoa_r+0x204>
 80055cc:	ee19 3a90 	vmov	r3, s19
 80055d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80055d8:	4656      	mov	r6, sl
 80055da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80055de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80055e6:	4b74      	ldr	r3, [pc, #464]	; (80057b8 <_dtoa_r+0x2e8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	4630      	mov	r0, r6
 80055ec:	4639      	mov	r1, r7
 80055ee:	f7fa fe63 	bl	80002b8 <__aeabi_dsub>
 80055f2:	a365      	add	r3, pc, #404	; (adr r3, 8005788 <_dtoa_r+0x2b8>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fb f816 	bl	8000628 <__aeabi_dmul>
 80055fc:	a364      	add	r3, pc, #400	; (adr r3, 8005790 <_dtoa_r+0x2c0>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fe5b 	bl	80002bc <__adddf3>
 8005606:	4606      	mov	r6, r0
 8005608:	4628      	mov	r0, r5
 800560a:	460f      	mov	r7, r1
 800560c:	f7fa ffa2 	bl	8000554 <__aeabi_i2d>
 8005610:	a361      	add	r3, pc, #388	; (adr r3, 8005798 <_dtoa_r+0x2c8>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fb f807 	bl	8000628 <__aeabi_dmul>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	f7fa fe4b 	bl	80002bc <__adddf3>
 8005626:	4606      	mov	r6, r0
 8005628:	460f      	mov	r7, r1
 800562a:	f7fb faad 	bl	8000b88 <__aeabi_d2iz>
 800562e:	2200      	movs	r2, #0
 8005630:	9000      	str	r0, [sp, #0]
 8005632:	2300      	movs	r3, #0
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fb fa68 	bl	8000b0c <__aeabi_dcmplt>
 800563c:	b150      	cbz	r0, 8005654 <_dtoa_r+0x184>
 800563e:	9800      	ldr	r0, [sp, #0]
 8005640:	f7fa ff88 	bl	8000554 <__aeabi_i2d>
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	f7fb fa56 	bl	8000af8 <__aeabi_dcmpeq>
 800564c:	b910      	cbnz	r0, 8005654 <_dtoa_r+0x184>
 800564e:	9b00      	ldr	r3, [sp, #0]
 8005650:	3b01      	subs	r3, #1
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	9b00      	ldr	r3, [sp, #0]
 8005656:	2b16      	cmp	r3, #22
 8005658:	d85a      	bhi.n	8005710 <_dtoa_r+0x240>
 800565a:	9a00      	ldr	r2, [sp, #0]
 800565c:	4b57      	ldr	r3, [pc, #348]	; (80057bc <_dtoa_r+0x2ec>)
 800565e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	ec51 0b19 	vmov	r0, r1, d9
 800566a:	f7fb fa4f 	bl	8000b0c <__aeabi_dcmplt>
 800566e:	2800      	cmp	r0, #0
 8005670:	d050      	beq.n	8005714 <_dtoa_r+0x244>
 8005672:	9b00      	ldr	r3, [sp, #0]
 8005674:	3b01      	subs	r3, #1
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	2300      	movs	r3, #0
 800567a:	930b      	str	r3, [sp, #44]	; 0x2c
 800567c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800567e:	1b5d      	subs	r5, r3, r5
 8005680:	1e6b      	subs	r3, r5, #1
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	bf45      	ittet	mi
 8005686:	f1c5 0301 	rsbmi	r3, r5, #1
 800568a:	9304      	strmi	r3, [sp, #16]
 800568c:	2300      	movpl	r3, #0
 800568e:	2300      	movmi	r3, #0
 8005690:	bf4c      	ite	mi
 8005692:	9305      	strmi	r3, [sp, #20]
 8005694:	9304      	strpl	r3, [sp, #16]
 8005696:	9b00      	ldr	r3, [sp, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	db3d      	blt.n	8005718 <_dtoa_r+0x248>
 800569c:	9b05      	ldr	r3, [sp, #20]
 800569e:	9a00      	ldr	r2, [sp, #0]
 80056a0:	920a      	str	r2, [sp, #40]	; 0x28
 80056a2:	4413      	add	r3, r2
 80056a4:	9305      	str	r3, [sp, #20]
 80056a6:	2300      	movs	r3, #0
 80056a8:	9307      	str	r3, [sp, #28]
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	2b09      	cmp	r3, #9
 80056ae:	f200 8089 	bhi.w	80057c4 <_dtoa_r+0x2f4>
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	bfc4      	itt	gt
 80056b6:	3b04      	subgt	r3, #4
 80056b8:	9306      	strgt	r3, [sp, #24]
 80056ba:	9b06      	ldr	r3, [sp, #24]
 80056bc:	f1a3 0302 	sub.w	r3, r3, #2
 80056c0:	bfcc      	ite	gt
 80056c2:	2500      	movgt	r5, #0
 80056c4:	2501      	movle	r5, #1
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	f200 8087 	bhi.w	80057da <_dtoa_r+0x30a>
 80056cc:	e8df f003 	tbb	[pc, r3]
 80056d0:	59383a2d 	.word	0x59383a2d
 80056d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80056d8:	441d      	add	r5, r3
 80056da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056de:	2b20      	cmp	r3, #32
 80056e0:	bfc1      	itttt	gt
 80056e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80056ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80056ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80056f2:	bfda      	itte	le
 80056f4:	f1c3 0320 	rsble	r3, r3, #32
 80056f8:	fa06 f003 	lslle.w	r0, r6, r3
 80056fc:	4318      	orrgt	r0, r3
 80056fe:	f7fa ff19 	bl	8000534 <__aeabi_ui2d>
 8005702:	2301      	movs	r3, #1
 8005704:	4606      	mov	r6, r0
 8005706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800570a:	3d01      	subs	r5, #1
 800570c:	930e      	str	r3, [sp, #56]	; 0x38
 800570e:	e76a      	b.n	80055e6 <_dtoa_r+0x116>
 8005710:	2301      	movs	r3, #1
 8005712:	e7b2      	b.n	800567a <_dtoa_r+0x1aa>
 8005714:	900b      	str	r0, [sp, #44]	; 0x2c
 8005716:	e7b1      	b.n	800567c <_dtoa_r+0x1ac>
 8005718:	9b04      	ldr	r3, [sp, #16]
 800571a:	9a00      	ldr	r2, [sp, #0]
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	9304      	str	r3, [sp, #16]
 8005720:	4253      	negs	r3, r2
 8005722:	9307      	str	r3, [sp, #28]
 8005724:	2300      	movs	r3, #0
 8005726:	930a      	str	r3, [sp, #40]	; 0x28
 8005728:	e7bf      	b.n	80056aa <_dtoa_r+0x1da>
 800572a:	2300      	movs	r3, #0
 800572c:	9308      	str	r3, [sp, #32]
 800572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc55      	bgt.n	80057e0 <_dtoa_r+0x310>
 8005734:	2301      	movs	r3, #1
 8005736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800573a:	461a      	mov	r2, r3
 800573c:	9209      	str	r2, [sp, #36]	; 0x24
 800573e:	e00c      	b.n	800575a <_dtoa_r+0x28a>
 8005740:	2301      	movs	r3, #1
 8005742:	e7f3      	b.n	800572c <_dtoa_r+0x25c>
 8005744:	2300      	movs	r3, #0
 8005746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005748:	9308      	str	r3, [sp, #32]
 800574a:	9b00      	ldr	r3, [sp, #0]
 800574c:	4413      	add	r3, r2
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	3301      	adds	r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	bfb8      	it	lt
 8005758:	2301      	movlt	r3, #1
 800575a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800575c:	2200      	movs	r2, #0
 800575e:	6042      	str	r2, [r0, #4]
 8005760:	2204      	movs	r2, #4
 8005762:	f102 0614 	add.w	r6, r2, #20
 8005766:	429e      	cmp	r6, r3
 8005768:	6841      	ldr	r1, [r0, #4]
 800576a:	d93d      	bls.n	80057e8 <_dtoa_r+0x318>
 800576c:	4620      	mov	r0, r4
 800576e:	f000 fdb5 	bl	80062dc <_Balloc>
 8005772:	9001      	str	r0, [sp, #4]
 8005774:	2800      	cmp	r0, #0
 8005776:	d13b      	bne.n	80057f0 <_dtoa_r+0x320>
 8005778:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <_dtoa_r+0x2f0>)
 800577a:	4602      	mov	r2, r0
 800577c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005780:	e6c0      	b.n	8005504 <_dtoa_r+0x34>
 8005782:	2301      	movs	r3, #1
 8005784:	e7df      	b.n	8005746 <_dtoa_r+0x276>
 8005786:	bf00      	nop
 8005788:	636f4361 	.word	0x636f4361
 800578c:	3fd287a7 	.word	0x3fd287a7
 8005790:	8b60c8b3 	.word	0x8b60c8b3
 8005794:	3fc68a28 	.word	0x3fc68a28
 8005798:	509f79fb 	.word	0x509f79fb
 800579c:	3fd34413 	.word	0x3fd34413
 80057a0:	08007516 	.word	0x08007516
 80057a4:	0800752d 	.word	0x0800752d
 80057a8:	7ff00000 	.word	0x7ff00000
 80057ac:	08007512 	.word	0x08007512
 80057b0:	08007509 	.word	0x08007509
 80057b4:	080073e5 	.word	0x080073e5
 80057b8:	3ff80000 	.word	0x3ff80000
 80057bc:	08007680 	.word	0x08007680
 80057c0:	08007588 	.word	0x08007588
 80057c4:	2501      	movs	r5, #1
 80057c6:	2300      	movs	r3, #0
 80057c8:	9306      	str	r3, [sp, #24]
 80057ca:	9508      	str	r5, [sp, #32]
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2312      	movs	r3, #18
 80057d8:	e7b0      	b.n	800573c <_dtoa_r+0x26c>
 80057da:	2301      	movs	r3, #1
 80057dc:	9308      	str	r3, [sp, #32]
 80057de:	e7f5      	b.n	80057cc <_dtoa_r+0x2fc>
 80057e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057e6:	e7b8      	b.n	800575a <_dtoa_r+0x28a>
 80057e8:	3101      	adds	r1, #1
 80057ea:	6041      	str	r1, [r0, #4]
 80057ec:	0052      	lsls	r2, r2, #1
 80057ee:	e7b8      	b.n	8005762 <_dtoa_r+0x292>
 80057f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057f2:	9a01      	ldr	r2, [sp, #4]
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	2b0e      	cmp	r3, #14
 80057fa:	f200 809d 	bhi.w	8005938 <_dtoa_r+0x468>
 80057fe:	2d00      	cmp	r5, #0
 8005800:	f000 809a 	beq.w	8005938 <_dtoa_r+0x468>
 8005804:	9b00      	ldr	r3, [sp, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd32      	ble.n	8005870 <_dtoa_r+0x3a0>
 800580a:	4ab7      	ldr	r2, [pc, #732]	; (8005ae8 <_dtoa_r+0x618>)
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005818:	9b00      	ldr	r3, [sp, #0]
 800581a:	05d8      	lsls	r0, r3, #23
 800581c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005820:	d516      	bpl.n	8005850 <_dtoa_r+0x380>
 8005822:	4bb2      	ldr	r3, [pc, #712]	; (8005aec <_dtoa_r+0x61c>)
 8005824:	ec51 0b19 	vmov	r0, r1, d9
 8005828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800582c:	f7fb f826 	bl	800087c <__aeabi_ddiv>
 8005830:	f007 070f 	and.w	r7, r7, #15
 8005834:	4682      	mov	sl, r0
 8005836:	468b      	mov	fp, r1
 8005838:	2503      	movs	r5, #3
 800583a:	4eac      	ldr	r6, [pc, #688]	; (8005aec <_dtoa_r+0x61c>)
 800583c:	b957      	cbnz	r7, 8005854 <_dtoa_r+0x384>
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	4650      	mov	r0, sl
 8005844:	4659      	mov	r1, fp
 8005846:	f7fb f819 	bl	800087c <__aeabi_ddiv>
 800584a:	4682      	mov	sl, r0
 800584c:	468b      	mov	fp, r1
 800584e:	e028      	b.n	80058a2 <_dtoa_r+0x3d2>
 8005850:	2502      	movs	r5, #2
 8005852:	e7f2      	b.n	800583a <_dtoa_r+0x36a>
 8005854:	07f9      	lsls	r1, r7, #31
 8005856:	d508      	bpl.n	800586a <_dtoa_r+0x39a>
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005860:	f7fa fee2 	bl	8000628 <__aeabi_dmul>
 8005864:	3501      	adds	r5, #1
 8005866:	4680      	mov	r8, r0
 8005868:	4689      	mov	r9, r1
 800586a:	107f      	asrs	r7, r7, #1
 800586c:	3608      	adds	r6, #8
 800586e:	e7e5      	b.n	800583c <_dtoa_r+0x36c>
 8005870:	f000 809b 	beq.w	80059aa <_dtoa_r+0x4da>
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	4f9d      	ldr	r7, [pc, #628]	; (8005aec <_dtoa_r+0x61c>)
 8005878:	425e      	negs	r6, r3
 800587a:	4b9b      	ldr	r3, [pc, #620]	; (8005ae8 <_dtoa_r+0x618>)
 800587c:	f006 020f 	and.w	r2, r6, #15
 8005880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	ec51 0b19 	vmov	r0, r1, d9
 800588c:	f7fa fecc 	bl	8000628 <__aeabi_dmul>
 8005890:	1136      	asrs	r6, r6, #4
 8005892:	4682      	mov	sl, r0
 8005894:	468b      	mov	fp, r1
 8005896:	2300      	movs	r3, #0
 8005898:	2502      	movs	r5, #2
 800589a:	2e00      	cmp	r6, #0
 800589c:	d17a      	bne.n	8005994 <_dtoa_r+0x4c4>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1d3      	bne.n	800584a <_dtoa_r+0x37a>
 80058a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8082 	beq.w	80059ae <_dtoa_r+0x4de>
 80058aa:	4b91      	ldr	r3, [pc, #580]	; (8005af0 <_dtoa_r+0x620>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	4650      	mov	r0, sl
 80058b0:	4659      	mov	r1, fp
 80058b2:	f7fb f92b 	bl	8000b0c <__aeabi_dcmplt>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d079      	beq.n	80059ae <_dtoa_r+0x4de>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d076      	beq.n	80059ae <_dtoa_r+0x4de>
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dd36      	ble.n	8005934 <_dtoa_r+0x464>
 80058c6:	9b00      	ldr	r3, [sp, #0]
 80058c8:	4650      	mov	r0, sl
 80058ca:	4659      	mov	r1, fp
 80058cc:	1e5f      	subs	r7, r3, #1
 80058ce:	2200      	movs	r2, #0
 80058d0:	4b88      	ldr	r3, [pc, #544]	; (8005af4 <_dtoa_r+0x624>)
 80058d2:	f7fa fea9 	bl	8000628 <__aeabi_dmul>
 80058d6:	9e02      	ldr	r6, [sp, #8]
 80058d8:	4682      	mov	sl, r0
 80058da:	468b      	mov	fp, r1
 80058dc:	3501      	adds	r5, #1
 80058de:	4628      	mov	r0, r5
 80058e0:	f7fa fe38 	bl	8000554 <__aeabi_i2d>
 80058e4:	4652      	mov	r2, sl
 80058e6:	465b      	mov	r3, fp
 80058e8:	f7fa fe9e 	bl	8000628 <__aeabi_dmul>
 80058ec:	4b82      	ldr	r3, [pc, #520]	; (8005af8 <_dtoa_r+0x628>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	f7fa fce4 	bl	80002bc <__adddf3>
 80058f4:	46d0      	mov	r8, sl
 80058f6:	46d9      	mov	r9, fp
 80058f8:	4682      	mov	sl, r0
 80058fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80058fe:	2e00      	cmp	r6, #0
 8005900:	d158      	bne.n	80059b4 <_dtoa_r+0x4e4>
 8005902:	4b7e      	ldr	r3, [pc, #504]	; (8005afc <_dtoa_r+0x62c>)
 8005904:	2200      	movs	r2, #0
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fa fcd5 	bl	80002b8 <__aeabi_dsub>
 800590e:	4652      	mov	r2, sl
 8005910:	465b      	mov	r3, fp
 8005912:	4680      	mov	r8, r0
 8005914:	4689      	mov	r9, r1
 8005916:	f7fb f917 	bl	8000b48 <__aeabi_dcmpgt>
 800591a:	2800      	cmp	r0, #0
 800591c:	f040 8295 	bne.w	8005e4a <_dtoa_r+0x97a>
 8005920:	4652      	mov	r2, sl
 8005922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f7fb f8ef 	bl	8000b0c <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	f040 8289 	bne.w	8005e46 <_dtoa_r+0x976>
 8005934:	ec5b ab19 	vmov	sl, fp, d9
 8005938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800593a:	2b00      	cmp	r3, #0
 800593c:	f2c0 8148 	blt.w	8005bd0 <_dtoa_r+0x700>
 8005940:	9a00      	ldr	r2, [sp, #0]
 8005942:	2a0e      	cmp	r2, #14
 8005944:	f300 8144 	bgt.w	8005bd0 <_dtoa_r+0x700>
 8005948:	4b67      	ldr	r3, [pc, #412]	; (8005ae8 <_dtoa_r+0x618>)
 800594a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800594e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	f280 80d5 	bge.w	8005b04 <_dtoa_r+0x634>
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f300 80d1 	bgt.w	8005b04 <_dtoa_r+0x634>
 8005962:	f040 826f 	bne.w	8005e44 <_dtoa_r+0x974>
 8005966:	4b65      	ldr	r3, [pc, #404]	; (8005afc <_dtoa_r+0x62c>)
 8005968:	2200      	movs	r2, #0
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fa fe5b 	bl	8000628 <__aeabi_dmul>
 8005972:	4652      	mov	r2, sl
 8005974:	465b      	mov	r3, fp
 8005976:	f7fb f8dd 	bl	8000b34 <__aeabi_dcmpge>
 800597a:	9e03      	ldr	r6, [sp, #12]
 800597c:	4637      	mov	r7, r6
 800597e:	2800      	cmp	r0, #0
 8005980:	f040 8245 	bne.w	8005e0e <_dtoa_r+0x93e>
 8005984:	9d01      	ldr	r5, [sp, #4]
 8005986:	2331      	movs	r3, #49	; 0x31
 8005988:	f805 3b01 	strb.w	r3, [r5], #1
 800598c:	9b00      	ldr	r3, [sp, #0]
 800598e:	3301      	adds	r3, #1
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	e240      	b.n	8005e16 <_dtoa_r+0x946>
 8005994:	07f2      	lsls	r2, r6, #31
 8005996:	d505      	bpl.n	80059a4 <_dtoa_r+0x4d4>
 8005998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599c:	f7fa fe44 	bl	8000628 <__aeabi_dmul>
 80059a0:	3501      	adds	r5, #1
 80059a2:	2301      	movs	r3, #1
 80059a4:	1076      	asrs	r6, r6, #1
 80059a6:	3708      	adds	r7, #8
 80059a8:	e777      	b.n	800589a <_dtoa_r+0x3ca>
 80059aa:	2502      	movs	r5, #2
 80059ac:	e779      	b.n	80058a2 <_dtoa_r+0x3d2>
 80059ae:	9f00      	ldr	r7, [sp, #0]
 80059b0:	9e03      	ldr	r6, [sp, #12]
 80059b2:	e794      	b.n	80058de <_dtoa_r+0x40e>
 80059b4:	9901      	ldr	r1, [sp, #4]
 80059b6:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <_dtoa_r+0x618>)
 80059b8:	4431      	add	r1, r6
 80059ba:	910d      	str	r1, [sp, #52]	; 0x34
 80059bc:	9908      	ldr	r1, [sp, #32]
 80059be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059c6:	2900      	cmp	r1, #0
 80059c8:	d043      	beq.n	8005a52 <_dtoa_r+0x582>
 80059ca:	494d      	ldr	r1, [pc, #308]	; (8005b00 <_dtoa_r+0x630>)
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fa ff55 	bl	800087c <__aeabi_ddiv>
 80059d2:	4652      	mov	r2, sl
 80059d4:	465b      	mov	r3, fp
 80059d6:	f7fa fc6f 	bl	80002b8 <__aeabi_dsub>
 80059da:	9d01      	ldr	r5, [sp, #4]
 80059dc:	4682      	mov	sl, r0
 80059de:	468b      	mov	fp, r1
 80059e0:	4649      	mov	r1, r9
 80059e2:	4640      	mov	r0, r8
 80059e4:	f7fb f8d0 	bl	8000b88 <__aeabi_d2iz>
 80059e8:	4606      	mov	r6, r0
 80059ea:	f7fa fdb3 	bl	8000554 <__aeabi_i2d>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fa fc5f 	bl	80002b8 <__aeabi_dsub>
 80059fa:	3630      	adds	r6, #48	; 0x30
 80059fc:	f805 6b01 	strb.w	r6, [r5], #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	465b      	mov	r3, fp
 8005a04:	4680      	mov	r8, r0
 8005a06:	4689      	mov	r9, r1
 8005a08:	f7fb f880 	bl	8000b0c <__aeabi_dcmplt>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d163      	bne.n	8005ad8 <_dtoa_r+0x608>
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	4936      	ldr	r1, [pc, #216]	; (8005af0 <_dtoa_r+0x620>)
 8005a16:	2000      	movs	r0, #0
 8005a18:	f7fa fc4e 	bl	80002b8 <__aeabi_dsub>
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	465b      	mov	r3, fp
 8005a20:	f7fb f874 	bl	8000b0c <__aeabi_dcmplt>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f040 80b5 	bne.w	8005b94 <_dtoa_r+0x6c4>
 8005a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	d081      	beq.n	8005934 <_dtoa_r+0x464>
 8005a30:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <_dtoa_r+0x624>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	4650      	mov	r0, sl
 8005a36:	4659      	mov	r1, fp
 8005a38:	f7fa fdf6 	bl	8000628 <__aeabi_dmul>
 8005a3c:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <_dtoa_r+0x624>)
 8005a3e:	4682      	mov	sl, r0
 8005a40:	468b      	mov	fp, r1
 8005a42:	4640      	mov	r0, r8
 8005a44:	4649      	mov	r1, r9
 8005a46:	2200      	movs	r2, #0
 8005a48:	f7fa fdee 	bl	8000628 <__aeabi_dmul>
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	4689      	mov	r9, r1
 8005a50:	e7c6      	b.n	80059e0 <_dtoa_r+0x510>
 8005a52:	4650      	mov	r0, sl
 8005a54:	4659      	mov	r1, fp
 8005a56:	f7fa fde7 	bl	8000628 <__aeabi_dmul>
 8005a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a5c:	9d01      	ldr	r5, [sp, #4]
 8005a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	4649      	mov	r1, r9
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7fb f88e 	bl	8000b88 <__aeabi_d2iz>
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	f7fa fd71 	bl	8000554 <__aeabi_i2d>
 8005a72:	3630      	adds	r6, #48	; 0x30
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fc1c 	bl	80002b8 <__aeabi_dsub>
 8005a80:	f805 6b01 	strb.w	r6, [r5], #1
 8005a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a86:	429d      	cmp	r5, r3
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	d124      	bne.n	8005adc <_dtoa_r+0x60c>
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <_dtoa_r+0x630>)
 8005a94:	4650      	mov	r0, sl
 8005a96:	4659      	mov	r1, fp
 8005a98:	f7fa fc10 	bl	80002bc <__adddf3>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	f7fb f850 	bl	8000b48 <__aeabi_dcmpgt>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d173      	bne.n	8005b94 <_dtoa_r+0x6c4>
 8005aac:	4652      	mov	r2, sl
 8005aae:	465b      	mov	r3, fp
 8005ab0:	4913      	ldr	r1, [pc, #76]	; (8005b00 <_dtoa_r+0x630>)
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f7fa fc00 	bl	80002b8 <__aeabi_dsub>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4640      	mov	r0, r8
 8005abe:	4649      	mov	r1, r9
 8005ac0:	f7fb f824 	bl	8000b0c <__aeabi_dcmplt>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	f43f af35 	beq.w	8005934 <_dtoa_r+0x464>
 8005aca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005acc:	1e6b      	subs	r3, r5, #1
 8005ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d0f8      	beq.n	8005aca <_dtoa_r+0x5fa>
 8005ad8:	9700      	str	r7, [sp, #0]
 8005ada:	e049      	b.n	8005b70 <_dtoa_r+0x6a0>
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <_dtoa_r+0x624>)
 8005ade:	f7fa fda3 	bl	8000628 <__aeabi_dmul>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	4689      	mov	r9, r1
 8005ae6:	e7bd      	b.n	8005a64 <_dtoa_r+0x594>
 8005ae8:	08007680 	.word	0x08007680
 8005aec:	08007658 	.word	0x08007658
 8005af0:	3ff00000 	.word	0x3ff00000
 8005af4:	40240000 	.word	0x40240000
 8005af8:	401c0000 	.word	0x401c0000
 8005afc:	40140000 	.word	0x40140000
 8005b00:	3fe00000 	.word	0x3fe00000
 8005b04:	9d01      	ldr	r5, [sp, #4]
 8005b06:	4656      	mov	r6, sl
 8005b08:	465f      	mov	r7, fp
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa feb3 	bl	800087c <__aeabi_ddiv>
 8005b16:	f7fb f837 	bl	8000b88 <__aeabi_d2iz>
 8005b1a:	4682      	mov	sl, r0
 8005b1c:	f7fa fd1a 	bl	8000554 <__aeabi_i2d>
 8005b20:	4642      	mov	r2, r8
 8005b22:	464b      	mov	r3, r9
 8005b24:	f7fa fd80 	bl	8000628 <__aeabi_dmul>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	4639      	mov	r1, r7
 8005b30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005b34:	f7fa fbc0 	bl	80002b8 <__aeabi_dsub>
 8005b38:	f805 6b01 	strb.w	r6, [r5], #1
 8005b3c:	9e01      	ldr	r6, [sp, #4]
 8005b3e:	9f03      	ldr	r7, [sp, #12]
 8005b40:	1bae      	subs	r6, r5, r6
 8005b42:	42b7      	cmp	r7, r6
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	d135      	bne.n	8005bb6 <_dtoa_r+0x6e6>
 8005b4a:	f7fa fbb7 	bl	80002bc <__adddf3>
 8005b4e:	4642      	mov	r2, r8
 8005b50:	464b      	mov	r3, r9
 8005b52:	4606      	mov	r6, r0
 8005b54:	460f      	mov	r7, r1
 8005b56:	f7fa fff7 	bl	8000b48 <__aeabi_dcmpgt>
 8005b5a:	b9d0      	cbnz	r0, 8005b92 <_dtoa_r+0x6c2>
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fa ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8005b68:	b110      	cbz	r0, 8005b70 <_dtoa_r+0x6a0>
 8005b6a:	f01a 0f01 	tst.w	sl, #1
 8005b6e:	d110      	bne.n	8005b92 <_dtoa_r+0x6c2>
 8005b70:	4620      	mov	r0, r4
 8005b72:	ee18 1a10 	vmov	r1, s16
 8005b76:	f000 fbf1 	bl	800635c <_Bfree>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9800      	ldr	r0, [sp, #0]
 8005b7e:	702b      	strb	r3, [r5, #0]
 8005b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b82:	3001      	adds	r0, #1
 8005b84:	6018      	str	r0, [r3, #0]
 8005b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f43f acf1 	beq.w	8005570 <_dtoa_r+0xa0>
 8005b8e:	601d      	str	r5, [r3, #0]
 8005b90:	e4ee      	b.n	8005570 <_dtoa_r+0xa0>
 8005b92:	9f00      	ldr	r7, [sp, #0]
 8005b94:	462b      	mov	r3, r5
 8005b96:	461d      	mov	r5, r3
 8005b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b9c:	2a39      	cmp	r2, #57	; 0x39
 8005b9e:	d106      	bne.n	8005bae <_dtoa_r+0x6de>
 8005ba0:	9a01      	ldr	r2, [sp, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d1f7      	bne.n	8005b96 <_dtoa_r+0x6c6>
 8005ba6:	9901      	ldr	r1, [sp, #4]
 8005ba8:	2230      	movs	r2, #48	; 0x30
 8005baa:	3701      	adds	r7, #1
 8005bac:	700a      	strb	r2, [r1, #0]
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	3201      	adds	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	e790      	b.n	8005ad8 <_dtoa_r+0x608>
 8005bb6:	4ba6      	ldr	r3, [pc, #664]	; (8005e50 <_dtoa_r+0x980>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f7fa fd35 	bl	8000628 <__aeabi_dmul>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	f7fa ff97 	bl	8000af8 <__aeabi_dcmpeq>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d09d      	beq.n	8005b0a <_dtoa_r+0x63a>
 8005bce:	e7cf      	b.n	8005b70 <_dtoa_r+0x6a0>
 8005bd0:	9a08      	ldr	r2, [sp, #32]
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	f000 80d7 	beq.w	8005d86 <_dtoa_r+0x8b6>
 8005bd8:	9a06      	ldr	r2, [sp, #24]
 8005bda:	2a01      	cmp	r2, #1
 8005bdc:	f300 80ba 	bgt.w	8005d54 <_dtoa_r+0x884>
 8005be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	f000 80b2 	beq.w	8005d4c <_dtoa_r+0x87c>
 8005be8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bec:	9e07      	ldr	r6, [sp, #28]
 8005bee:	9d04      	ldr	r5, [sp, #16]
 8005bf0:	9a04      	ldr	r2, [sp, #16]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	9204      	str	r2, [sp, #16]
 8005bf6:	9a05      	ldr	r2, [sp, #20]
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	441a      	add	r2, r3
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	9205      	str	r2, [sp, #20]
 8005c00:	f000 fc64 	bl	80064cc <__i2b>
 8005c04:	4607      	mov	r7, r0
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	dd0c      	ble.n	8005c24 <_dtoa_r+0x754>
 8005c0a:	9b05      	ldr	r3, [sp, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dd09      	ble.n	8005c24 <_dtoa_r+0x754>
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	9a04      	ldr	r2, [sp, #16]
 8005c14:	bfa8      	it	ge
 8005c16:	462b      	movge	r3, r5
 8005c18:	1ad2      	subs	r2, r2, r3
 8005c1a:	9204      	str	r2, [sp, #16]
 8005c1c:	9a05      	ldr	r2, [sp, #20]
 8005c1e:	1aed      	subs	r5, r5, r3
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	b31b      	cbz	r3, 8005c70 <_dtoa_r+0x7a0>
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80af 	beq.w	8005d8e <_dtoa_r+0x8be>
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	dd13      	ble.n	8005c5c <_dtoa_r+0x78c>
 8005c34:	4639      	mov	r1, r7
 8005c36:	4632      	mov	r2, r6
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fd07 	bl	800664c <__pow5mult>
 8005c3e:	ee18 2a10 	vmov	r2, s16
 8005c42:	4601      	mov	r1, r0
 8005c44:	4607      	mov	r7, r0
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 fc56 	bl	80064f8 <__multiply>
 8005c4c:	ee18 1a10 	vmov	r1, s16
 8005c50:	4680      	mov	r8, r0
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fb82 	bl	800635c <_Bfree>
 8005c58:	ee08 8a10 	vmov	s16, r8
 8005c5c:	9b07      	ldr	r3, [sp, #28]
 8005c5e:	1b9a      	subs	r2, r3, r6
 8005c60:	d006      	beq.n	8005c70 <_dtoa_r+0x7a0>
 8005c62:	ee18 1a10 	vmov	r1, s16
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 fcf0 	bl	800664c <__pow5mult>
 8005c6c:	ee08 0a10 	vmov	s16, r0
 8005c70:	2101      	movs	r1, #1
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 fc2a 	bl	80064cc <__i2b>
 8005c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	f340 8088 	ble.w	8005d92 <_dtoa_r+0x8c2>
 8005c82:	461a      	mov	r2, r3
 8005c84:	4601      	mov	r1, r0
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 fce0 	bl	800664c <__pow5mult>
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	4606      	mov	r6, r0
 8005c92:	f340 8081 	ble.w	8005d98 <_dtoa_r+0x8c8>
 8005c96:	f04f 0800 	mov.w	r8, #0
 8005c9a:	6933      	ldr	r3, [r6, #16]
 8005c9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ca0:	6918      	ldr	r0, [r3, #16]
 8005ca2:	f000 fbc3 	bl	800642c <__hi0bits>
 8005ca6:	f1c0 0020 	rsb	r0, r0, #32
 8005caa:	9b05      	ldr	r3, [sp, #20]
 8005cac:	4418      	add	r0, r3
 8005cae:	f010 001f 	ands.w	r0, r0, #31
 8005cb2:	f000 8092 	beq.w	8005dda <_dtoa_r+0x90a>
 8005cb6:	f1c0 0320 	rsb	r3, r0, #32
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	f340 808a 	ble.w	8005dd4 <_dtoa_r+0x904>
 8005cc0:	f1c0 001c 	rsb	r0, r0, #28
 8005cc4:	9b04      	ldr	r3, [sp, #16]
 8005cc6:	4403      	add	r3, r0
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	4403      	add	r3, r0
 8005cce:	4405      	add	r5, r0
 8005cd0:	9305      	str	r3, [sp, #20]
 8005cd2:	9b04      	ldr	r3, [sp, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dd07      	ble.n	8005ce8 <_dtoa_r+0x818>
 8005cd8:	ee18 1a10 	vmov	r1, s16
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 fd0e 	bl	8006700 <__lshift>
 8005ce4:	ee08 0a10 	vmov	s16, r0
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dd05      	ble.n	8005cfa <_dtoa_r+0x82a>
 8005cee:	4631      	mov	r1, r6
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fd04 	bl	8006700 <__lshift>
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d06e      	beq.n	8005dde <_dtoa_r+0x90e>
 8005d00:	ee18 0a10 	vmov	r0, s16
 8005d04:	4631      	mov	r1, r6
 8005d06:	f000 fd6b 	bl	80067e0 <__mcmp>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	da67      	bge.n	8005dde <_dtoa_r+0x90e>
 8005d0e:	9b00      	ldr	r3, [sp, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	ee18 1a10 	vmov	r1, s16
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	220a      	movs	r2, #10
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fb3f 	bl	80063a0 <__multadd>
 8005d22:	9b08      	ldr	r3, [sp, #32]
 8005d24:	ee08 0a10 	vmov	s16, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 81b1 	beq.w	8006090 <_dtoa_r+0xbc0>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4639      	mov	r1, r7
 8005d32:	220a      	movs	r2, #10
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 fb33 	bl	80063a0 <__multadd>
 8005d3a:	9b02      	ldr	r3, [sp, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	4607      	mov	r7, r0
 8005d40:	f300 808e 	bgt.w	8005e60 <_dtoa_r+0x990>
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	dc51      	bgt.n	8005dee <_dtoa_r+0x91e>
 8005d4a:	e089      	b.n	8005e60 <_dtoa_r+0x990>
 8005d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d52:	e74b      	b.n	8005bec <_dtoa_r+0x71c>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	1e5e      	subs	r6, r3, #1
 8005d58:	9b07      	ldr	r3, [sp, #28]
 8005d5a:	42b3      	cmp	r3, r6
 8005d5c:	bfbf      	itttt	lt
 8005d5e:	9b07      	ldrlt	r3, [sp, #28]
 8005d60:	9607      	strlt	r6, [sp, #28]
 8005d62:	1af2      	sublt	r2, r6, r3
 8005d64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d66:	bfb6      	itet	lt
 8005d68:	189b      	addlt	r3, r3, r2
 8005d6a:	1b9e      	subge	r6, r3, r6
 8005d6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	bfb8      	it	lt
 8005d72:	2600      	movlt	r6, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfb7      	itett	lt
 8005d78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d80:	1a9d      	sublt	r5, r3, r2
 8005d82:	2300      	movlt	r3, #0
 8005d84:	e734      	b.n	8005bf0 <_dtoa_r+0x720>
 8005d86:	9e07      	ldr	r6, [sp, #28]
 8005d88:	9d04      	ldr	r5, [sp, #16]
 8005d8a:	9f08      	ldr	r7, [sp, #32]
 8005d8c:	e73b      	b.n	8005c06 <_dtoa_r+0x736>
 8005d8e:	9a07      	ldr	r2, [sp, #28]
 8005d90:	e767      	b.n	8005c62 <_dtoa_r+0x792>
 8005d92:	9b06      	ldr	r3, [sp, #24]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	dc18      	bgt.n	8005dca <_dtoa_r+0x8fa>
 8005d98:	f1ba 0f00 	cmp.w	sl, #0
 8005d9c:	d115      	bne.n	8005dca <_dtoa_r+0x8fa>
 8005d9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005da2:	b993      	cbnz	r3, 8005dca <_dtoa_r+0x8fa>
 8005da4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005da8:	0d1b      	lsrs	r3, r3, #20
 8005daa:	051b      	lsls	r3, r3, #20
 8005dac:	b183      	cbz	r3, 8005dd0 <_dtoa_r+0x900>
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	3301      	adds	r3, #1
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	9b05      	ldr	r3, [sp, #20]
 8005db6:	3301      	adds	r3, #1
 8005db8:	9305      	str	r3, [sp, #20]
 8005dba:	f04f 0801 	mov.w	r8, #1
 8005dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f47f af6a 	bne.w	8005c9a <_dtoa_r+0x7ca>
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	e76f      	b.n	8005caa <_dtoa_r+0x7da>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	e7f6      	b.n	8005dbe <_dtoa_r+0x8ee>
 8005dd0:	4698      	mov	r8, r3
 8005dd2:	e7f4      	b.n	8005dbe <_dtoa_r+0x8ee>
 8005dd4:	f43f af7d 	beq.w	8005cd2 <_dtoa_r+0x802>
 8005dd8:	4618      	mov	r0, r3
 8005dda:	301c      	adds	r0, #28
 8005ddc:	e772      	b.n	8005cc4 <_dtoa_r+0x7f4>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc37      	bgt.n	8005e54 <_dtoa_r+0x984>
 8005de4:	9b06      	ldr	r3, [sp, #24]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	dd34      	ble.n	8005e54 <_dtoa_r+0x984>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	9b02      	ldr	r3, [sp, #8]
 8005df0:	b96b      	cbnz	r3, 8005e0e <_dtoa_r+0x93e>
 8005df2:	4631      	mov	r1, r6
 8005df4:	2205      	movs	r2, #5
 8005df6:	4620      	mov	r0, r4
 8005df8:	f000 fad2 	bl	80063a0 <__multadd>
 8005dfc:	4601      	mov	r1, r0
 8005dfe:	4606      	mov	r6, r0
 8005e00:	ee18 0a10 	vmov	r0, s16
 8005e04:	f000 fcec 	bl	80067e0 <__mcmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	f73f adbb 	bgt.w	8005984 <_dtoa_r+0x4b4>
 8005e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e10:	9d01      	ldr	r5, [sp, #4]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fa9d 	bl	800635c <_Bfree>
 8005e22:	2f00      	cmp	r7, #0
 8005e24:	f43f aea4 	beq.w	8005b70 <_dtoa_r+0x6a0>
 8005e28:	f1b8 0f00 	cmp.w	r8, #0
 8005e2c:	d005      	beq.n	8005e3a <_dtoa_r+0x96a>
 8005e2e:	45b8      	cmp	r8, r7
 8005e30:	d003      	beq.n	8005e3a <_dtoa_r+0x96a>
 8005e32:	4641      	mov	r1, r8
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fa91 	bl	800635c <_Bfree>
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fa8d 	bl	800635c <_Bfree>
 8005e42:	e695      	b.n	8005b70 <_dtoa_r+0x6a0>
 8005e44:	2600      	movs	r6, #0
 8005e46:	4637      	mov	r7, r6
 8005e48:	e7e1      	b.n	8005e0e <_dtoa_r+0x93e>
 8005e4a:	9700      	str	r7, [sp, #0]
 8005e4c:	4637      	mov	r7, r6
 8005e4e:	e599      	b.n	8005984 <_dtoa_r+0x4b4>
 8005e50:	40240000 	.word	0x40240000
 8005e54:	9b08      	ldr	r3, [sp, #32]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 80ca 	beq.w	8005ff0 <_dtoa_r+0xb20>
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	9302      	str	r3, [sp, #8]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	dd05      	ble.n	8005e70 <_dtoa_r+0x9a0>
 8005e64:	4639      	mov	r1, r7
 8005e66:	462a      	mov	r2, r5
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 fc49 	bl	8006700 <__lshift>
 8005e6e:	4607      	mov	r7, r0
 8005e70:	f1b8 0f00 	cmp.w	r8, #0
 8005e74:	d05b      	beq.n	8005f2e <_dtoa_r+0xa5e>
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 fa2f 	bl	80062dc <_Balloc>
 8005e7e:	4605      	mov	r5, r0
 8005e80:	b928      	cbnz	r0, 8005e8e <_dtoa_r+0x9be>
 8005e82:	4b87      	ldr	r3, [pc, #540]	; (80060a0 <_dtoa_r+0xbd0>)
 8005e84:	4602      	mov	r2, r0
 8005e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e8a:	f7ff bb3b 	b.w	8005504 <_dtoa_r+0x34>
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	3202      	adds	r2, #2
 8005e92:	0092      	lsls	r2, r2, #2
 8005e94:	f107 010c 	add.w	r1, r7, #12
 8005e98:	300c      	adds	r0, #12
 8005e9a:	f000 fa04 	bl	80062a6 <memcpy>
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 fc2c 	bl	8006700 <__lshift>
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	f103 0901 	add.w	r9, r3, #1
 8005eae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	f00a 0301 	and.w	r3, sl, #1
 8005eba:	46b8      	mov	r8, r7
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	ee18 0a10 	vmov	r0, s16
 8005ec6:	f7ff fa77 	bl	80053b8 <quorem>
 8005eca:	4641      	mov	r1, r8
 8005ecc:	9002      	str	r0, [sp, #8]
 8005ece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ed2:	ee18 0a10 	vmov	r0, s16
 8005ed6:	f000 fc83 	bl	80067e0 <__mcmp>
 8005eda:	463a      	mov	r2, r7
 8005edc:	9003      	str	r0, [sp, #12]
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fc99 	bl	8006818 <__mdiff>
 8005ee6:	68c2      	ldr	r2, [r0, #12]
 8005ee8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005eec:	4605      	mov	r5, r0
 8005eee:	bb02      	cbnz	r2, 8005f32 <_dtoa_r+0xa62>
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	ee18 0a10 	vmov	r0, s16
 8005ef6:	f000 fc73 	bl	80067e0 <__mcmp>
 8005efa:	4602      	mov	r2, r0
 8005efc:	4629      	mov	r1, r5
 8005efe:	4620      	mov	r0, r4
 8005f00:	9207      	str	r2, [sp, #28]
 8005f02:	f000 fa2b 	bl	800635c <_Bfree>
 8005f06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005f0a:	ea43 0102 	orr.w	r1, r3, r2
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	464d      	mov	r5, r9
 8005f14:	d10f      	bne.n	8005f36 <_dtoa_r+0xa66>
 8005f16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f1a:	d02a      	beq.n	8005f72 <_dtoa_r+0xaa2>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dd02      	ble.n	8005f28 <_dtoa_r+0xa58>
 8005f22:	9b02      	ldr	r3, [sp, #8]
 8005f24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005f28:	f88b a000 	strb.w	sl, [fp]
 8005f2c:	e775      	b.n	8005e1a <_dtoa_r+0x94a>
 8005f2e:	4638      	mov	r0, r7
 8005f30:	e7ba      	b.n	8005ea8 <_dtoa_r+0x9d8>
 8005f32:	2201      	movs	r2, #1
 8005f34:	e7e2      	b.n	8005efc <_dtoa_r+0xa2c>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db04      	blt.n	8005f46 <_dtoa_r+0xa76>
 8005f3c:	9906      	ldr	r1, [sp, #24]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	9904      	ldr	r1, [sp, #16]
 8005f42:	430b      	orrs	r3, r1
 8005f44:	d122      	bne.n	8005f8c <_dtoa_r+0xabc>
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	ddee      	ble.n	8005f28 <_dtoa_r+0xa58>
 8005f4a:	ee18 1a10 	vmov	r1, s16
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fbd5 	bl	8006700 <__lshift>
 8005f56:	4631      	mov	r1, r6
 8005f58:	ee08 0a10 	vmov	s16, r0
 8005f5c:	f000 fc40 	bl	80067e0 <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	dc03      	bgt.n	8005f6c <_dtoa_r+0xa9c>
 8005f64:	d1e0      	bne.n	8005f28 <_dtoa_r+0xa58>
 8005f66:	f01a 0f01 	tst.w	sl, #1
 8005f6a:	d0dd      	beq.n	8005f28 <_dtoa_r+0xa58>
 8005f6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f70:	d1d7      	bne.n	8005f22 <_dtoa_r+0xa52>
 8005f72:	2339      	movs	r3, #57	; 0x39
 8005f74:	f88b 3000 	strb.w	r3, [fp]
 8005f78:	462b      	mov	r3, r5
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f82:	2a39      	cmp	r2, #57	; 0x39
 8005f84:	d071      	beq.n	800606a <_dtoa_r+0xb9a>
 8005f86:	3201      	adds	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e746      	b.n	8005e1a <_dtoa_r+0x94a>
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	dd07      	ble.n	8005fa0 <_dtoa_r+0xad0>
 8005f90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f94:	d0ed      	beq.n	8005f72 <_dtoa_r+0xaa2>
 8005f96:	f10a 0301 	add.w	r3, sl, #1
 8005f9a:	f88b 3000 	strb.w	r3, [fp]
 8005f9e:	e73c      	b.n	8005e1a <_dtoa_r+0x94a>
 8005fa0:	9b05      	ldr	r3, [sp, #20]
 8005fa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005fa6:	4599      	cmp	r9, r3
 8005fa8:	d047      	beq.n	800603a <_dtoa_r+0xb6a>
 8005faa:	ee18 1a10 	vmov	r1, s16
 8005fae:	2300      	movs	r3, #0
 8005fb0:	220a      	movs	r2, #10
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f9f4 	bl	80063a0 <__multadd>
 8005fb8:	45b8      	cmp	r8, r7
 8005fba:	ee08 0a10 	vmov	s16, r0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	f04f 020a 	mov.w	r2, #10
 8005fc6:	4641      	mov	r1, r8
 8005fc8:	4620      	mov	r0, r4
 8005fca:	d106      	bne.n	8005fda <_dtoa_r+0xb0a>
 8005fcc:	f000 f9e8 	bl	80063a0 <__multadd>
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	f109 0901 	add.w	r9, r9, #1
 8005fd8:	e772      	b.n	8005ec0 <_dtoa_r+0x9f0>
 8005fda:	f000 f9e1 	bl	80063a0 <__multadd>
 8005fde:	4639      	mov	r1, r7
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	220a      	movs	r2, #10
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 f9da 	bl	80063a0 <__multadd>
 8005fec:	4607      	mov	r7, r0
 8005fee:	e7f1      	b.n	8005fd4 <_dtoa_r+0xb04>
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	9302      	str	r3, [sp, #8]
 8005ff4:	9d01      	ldr	r5, [sp, #4]
 8005ff6:	ee18 0a10 	vmov	r0, s16
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	f7ff f9dc 	bl	80053b8 <quorem>
 8006000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	f805 ab01 	strb.w	sl, [r5], #1
 800600a:	1aea      	subs	r2, r5, r3
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	4293      	cmp	r3, r2
 8006010:	dd09      	ble.n	8006026 <_dtoa_r+0xb56>
 8006012:	ee18 1a10 	vmov	r1, s16
 8006016:	2300      	movs	r3, #0
 8006018:	220a      	movs	r2, #10
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f9c0 	bl	80063a0 <__multadd>
 8006020:	ee08 0a10 	vmov	s16, r0
 8006024:	e7e7      	b.n	8005ff6 <_dtoa_r+0xb26>
 8006026:	9b02      	ldr	r3, [sp, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfc8      	it	gt
 800602c:	461d      	movgt	r5, r3
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	bfd8      	it	le
 8006032:	2501      	movle	r5, #1
 8006034:	441d      	add	r5, r3
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	ee18 1a10 	vmov	r1, s16
 800603e:	2201      	movs	r2, #1
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fb5d 	bl	8006700 <__lshift>
 8006046:	4631      	mov	r1, r6
 8006048:	ee08 0a10 	vmov	s16, r0
 800604c:	f000 fbc8 	bl	80067e0 <__mcmp>
 8006050:	2800      	cmp	r0, #0
 8006052:	dc91      	bgt.n	8005f78 <_dtoa_r+0xaa8>
 8006054:	d102      	bne.n	800605c <_dtoa_r+0xb8c>
 8006056:	f01a 0f01 	tst.w	sl, #1
 800605a:	d18d      	bne.n	8005f78 <_dtoa_r+0xaa8>
 800605c:	462b      	mov	r3, r5
 800605e:	461d      	mov	r5, r3
 8006060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006064:	2a30      	cmp	r2, #48	; 0x30
 8006066:	d0fa      	beq.n	800605e <_dtoa_r+0xb8e>
 8006068:	e6d7      	b.n	8005e1a <_dtoa_r+0x94a>
 800606a:	9a01      	ldr	r2, [sp, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d184      	bne.n	8005f7a <_dtoa_r+0xaaa>
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	2331      	movs	r3, #49	; 0x31
 8006078:	7013      	strb	r3, [r2, #0]
 800607a:	e6ce      	b.n	8005e1a <_dtoa_r+0x94a>
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <_dtoa_r+0xbd4>)
 800607e:	f7ff ba95 	b.w	80055ac <_dtoa_r+0xdc>
 8006082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f aa6e 	bne.w	8005566 <_dtoa_r+0x96>
 800608a:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <_dtoa_r+0xbd8>)
 800608c:	f7ff ba8e 	b.w	80055ac <_dtoa_r+0xdc>
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	dcae      	bgt.n	8005ff4 <_dtoa_r+0xb24>
 8006096:	9b06      	ldr	r3, [sp, #24]
 8006098:	2b02      	cmp	r3, #2
 800609a:	f73f aea8 	bgt.w	8005dee <_dtoa_r+0x91e>
 800609e:	e7a9      	b.n	8005ff4 <_dtoa_r+0xb24>
 80060a0:	08007588 	.word	0x08007588
 80060a4:	080073e4 	.word	0x080073e4
 80060a8:	08007509 	.word	0x08007509

080060ac <std>:
 80060ac:	2300      	movs	r3, #0
 80060ae:	b510      	push	{r4, lr}
 80060b0:	4604      	mov	r4, r0
 80060b2:	e9c0 3300 	strd	r3, r3, [r0]
 80060b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ba:	6083      	str	r3, [r0, #8]
 80060bc:	8181      	strh	r1, [r0, #12]
 80060be:	6643      	str	r3, [r0, #100]	; 0x64
 80060c0:	81c2      	strh	r2, [r0, #14]
 80060c2:	6183      	str	r3, [r0, #24]
 80060c4:	4619      	mov	r1, r3
 80060c6:	2208      	movs	r2, #8
 80060c8:	305c      	adds	r0, #92	; 0x5c
 80060ca:	f7fe fbfd 	bl	80048c8 <memset>
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <std+0x38>)
 80060d0:	6263      	str	r3, [r4, #36]	; 0x24
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <std+0x3c>)
 80060d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <std+0x40>)
 80060d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <std+0x44>)
 80060dc:	6224      	str	r4, [r4, #32]
 80060de:	6323      	str	r3, [r4, #48]	; 0x30
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	bf00      	nop
 80060e4:	08006c99 	.word	0x08006c99
 80060e8:	08006cbb 	.word	0x08006cbb
 80060ec:	08006cf3 	.word	0x08006cf3
 80060f0:	08006d17 	.word	0x08006d17

080060f4 <_cleanup_r>:
 80060f4:	4901      	ldr	r1, [pc, #4]	; (80060fc <_cleanup_r+0x8>)
 80060f6:	f000 b8af 	b.w	8006258 <_fwalk_reent>
 80060fa:	bf00      	nop
 80060fc:	0800702d 	.word	0x0800702d

08006100 <__sfmoreglue>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	2268      	movs	r2, #104	; 0x68
 8006104:	1e4d      	subs	r5, r1, #1
 8006106:	4355      	muls	r5, r2
 8006108:	460e      	mov	r6, r1
 800610a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800610e:	f7fe fc65 	bl	80049dc <_malloc_r>
 8006112:	4604      	mov	r4, r0
 8006114:	b140      	cbz	r0, 8006128 <__sfmoreglue+0x28>
 8006116:	2100      	movs	r1, #0
 8006118:	e9c0 1600 	strd	r1, r6, [r0]
 800611c:	300c      	adds	r0, #12
 800611e:	60a0      	str	r0, [r4, #8]
 8006120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006124:	f7fe fbd0 	bl	80048c8 <memset>
 8006128:	4620      	mov	r0, r4
 800612a:	bd70      	pop	{r4, r5, r6, pc}

0800612c <__sfp_lock_acquire>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__sfp_lock_acquire+0x8>)
 800612e:	f000 b8b8 	b.w	80062a2 <__retarget_lock_acquire_recursive>
 8006132:	bf00      	nop
 8006134:	20000299 	.word	0x20000299

08006138 <__sfp_lock_release>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__sfp_lock_release+0x8>)
 800613a:	f000 b8b3 	b.w	80062a4 <__retarget_lock_release_recursive>
 800613e:	bf00      	nop
 8006140:	20000299 	.word	0x20000299

08006144 <__sinit_lock_acquire>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__sinit_lock_acquire+0x8>)
 8006146:	f000 b8ac 	b.w	80062a2 <__retarget_lock_acquire_recursive>
 800614a:	bf00      	nop
 800614c:	2000029a 	.word	0x2000029a

08006150 <__sinit_lock_release>:
 8006150:	4801      	ldr	r0, [pc, #4]	; (8006158 <__sinit_lock_release+0x8>)
 8006152:	f000 b8a7 	b.w	80062a4 <__retarget_lock_release_recursive>
 8006156:	bf00      	nop
 8006158:	2000029a 	.word	0x2000029a

0800615c <__sinit>:
 800615c:	b510      	push	{r4, lr}
 800615e:	4604      	mov	r4, r0
 8006160:	f7ff fff0 	bl	8006144 <__sinit_lock_acquire>
 8006164:	69a3      	ldr	r3, [r4, #24]
 8006166:	b11b      	cbz	r3, 8006170 <__sinit+0x14>
 8006168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800616c:	f7ff bff0 	b.w	8006150 <__sinit_lock_release>
 8006170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006174:	6523      	str	r3, [r4, #80]	; 0x50
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <__sinit+0x68>)
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <__sinit+0x6c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	62a2      	str	r2, [r4, #40]	; 0x28
 800617e:	42a3      	cmp	r3, r4
 8006180:	bf04      	itt	eq
 8006182:	2301      	moveq	r3, #1
 8006184:	61a3      	streq	r3, [r4, #24]
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f820 	bl	80061cc <__sfp>
 800618c:	6060      	str	r0, [r4, #4]
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f81c 	bl	80061cc <__sfp>
 8006194:	60a0      	str	r0, [r4, #8]
 8006196:	4620      	mov	r0, r4
 8006198:	f000 f818 	bl	80061cc <__sfp>
 800619c:	2200      	movs	r2, #0
 800619e:	60e0      	str	r0, [r4, #12]
 80061a0:	2104      	movs	r1, #4
 80061a2:	6860      	ldr	r0, [r4, #4]
 80061a4:	f7ff ff82 	bl	80060ac <std>
 80061a8:	68a0      	ldr	r0, [r4, #8]
 80061aa:	2201      	movs	r2, #1
 80061ac:	2109      	movs	r1, #9
 80061ae:	f7ff ff7d 	bl	80060ac <std>
 80061b2:	68e0      	ldr	r0, [r4, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	2112      	movs	r1, #18
 80061b8:	f7ff ff78 	bl	80060ac <std>
 80061bc:	2301      	movs	r3, #1
 80061be:	61a3      	str	r3, [r4, #24]
 80061c0:	e7d2      	b.n	8006168 <__sinit+0xc>
 80061c2:	bf00      	nop
 80061c4:	080073d0 	.word	0x080073d0
 80061c8:	080060f5 	.word	0x080060f5

080061cc <__sfp>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	4607      	mov	r7, r0
 80061d0:	f7ff ffac 	bl	800612c <__sfp_lock_acquire>
 80061d4:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <__sfp+0x84>)
 80061d6:	681e      	ldr	r6, [r3, #0]
 80061d8:	69b3      	ldr	r3, [r6, #24]
 80061da:	b913      	cbnz	r3, 80061e2 <__sfp+0x16>
 80061dc:	4630      	mov	r0, r6
 80061de:	f7ff ffbd 	bl	800615c <__sinit>
 80061e2:	3648      	adds	r6, #72	; 0x48
 80061e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	d503      	bpl.n	80061f4 <__sfp+0x28>
 80061ec:	6833      	ldr	r3, [r6, #0]
 80061ee:	b30b      	cbz	r3, 8006234 <__sfp+0x68>
 80061f0:	6836      	ldr	r6, [r6, #0]
 80061f2:	e7f7      	b.n	80061e4 <__sfp+0x18>
 80061f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061f8:	b9d5      	cbnz	r5, 8006230 <__sfp+0x64>
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <__sfp+0x88>)
 80061fc:	60e3      	str	r3, [r4, #12]
 80061fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006202:	6665      	str	r5, [r4, #100]	; 0x64
 8006204:	f000 f84c 	bl	80062a0 <__retarget_lock_init_recursive>
 8006208:	f7ff ff96 	bl	8006138 <__sfp_lock_release>
 800620c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006214:	6025      	str	r5, [r4, #0]
 8006216:	61a5      	str	r5, [r4, #24]
 8006218:	2208      	movs	r2, #8
 800621a:	4629      	mov	r1, r5
 800621c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006220:	f7fe fb52 	bl	80048c8 <memset>
 8006224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800622c:	4620      	mov	r0, r4
 800622e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006230:	3468      	adds	r4, #104	; 0x68
 8006232:	e7d9      	b.n	80061e8 <__sfp+0x1c>
 8006234:	2104      	movs	r1, #4
 8006236:	4638      	mov	r0, r7
 8006238:	f7ff ff62 	bl	8006100 <__sfmoreglue>
 800623c:	4604      	mov	r4, r0
 800623e:	6030      	str	r0, [r6, #0]
 8006240:	2800      	cmp	r0, #0
 8006242:	d1d5      	bne.n	80061f0 <__sfp+0x24>
 8006244:	f7ff ff78 	bl	8006138 <__sfp_lock_release>
 8006248:	230c      	movs	r3, #12
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	e7ee      	b.n	800622c <__sfp+0x60>
 800624e:	bf00      	nop
 8006250:	080073d0 	.word	0x080073d0
 8006254:	ffff0001 	.word	0xffff0001

08006258 <_fwalk_reent>:
 8006258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800625c:	4606      	mov	r6, r0
 800625e:	4688      	mov	r8, r1
 8006260:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006264:	2700      	movs	r7, #0
 8006266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800626a:	f1b9 0901 	subs.w	r9, r9, #1
 800626e:	d505      	bpl.n	800627c <_fwalk_reent+0x24>
 8006270:	6824      	ldr	r4, [r4, #0]
 8006272:	2c00      	cmp	r4, #0
 8006274:	d1f7      	bne.n	8006266 <_fwalk_reent+0xe>
 8006276:	4638      	mov	r0, r7
 8006278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627c:	89ab      	ldrh	r3, [r5, #12]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d907      	bls.n	8006292 <_fwalk_reent+0x3a>
 8006282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006286:	3301      	adds	r3, #1
 8006288:	d003      	beq.n	8006292 <_fwalk_reent+0x3a>
 800628a:	4629      	mov	r1, r5
 800628c:	4630      	mov	r0, r6
 800628e:	47c0      	blx	r8
 8006290:	4307      	orrs	r7, r0
 8006292:	3568      	adds	r5, #104	; 0x68
 8006294:	e7e9      	b.n	800626a <_fwalk_reent+0x12>
	...

08006298 <_localeconv_r>:
 8006298:	4800      	ldr	r0, [pc, #0]	; (800629c <_localeconv_r+0x4>)
 800629a:	4770      	bx	lr
 800629c:	20000160 	.word	0x20000160

080062a0 <__retarget_lock_init_recursive>:
 80062a0:	4770      	bx	lr

080062a2 <__retarget_lock_acquire_recursive>:
 80062a2:	4770      	bx	lr

080062a4 <__retarget_lock_release_recursive>:
 80062a4:	4770      	bx	lr

080062a6 <memcpy>:
 80062a6:	440a      	add	r2, r1
 80062a8:	4291      	cmp	r1, r2
 80062aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ae:	d100      	bne.n	80062b2 <memcpy+0xc>
 80062b0:	4770      	bx	lr
 80062b2:	b510      	push	{r4, lr}
 80062b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062bc:	4291      	cmp	r1, r2
 80062be:	d1f9      	bne.n	80062b4 <memcpy+0xe>
 80062c0:	bd10      	pop	{r4, pc}
	...

080062c4 <__malloc_lock>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__malloc_lock+0x8>)
 80062c6:	f7ff bfec 	b.w	80062a2 <__retarget_lock_acquire_recursive>
 80062ca:	bf00      	nop
 80062cc:	20000298 	.word	0x20000298

080062d0 <__malloc_unlock>:
 80062d0:	4801      	ldr	r0, [pc, #4]	; (80062d8 <__malloc_unlock+0x8>)
 80062d2:	f7ff bfe7 	b.w	80062a4 <__retarget_lock_release_recursive>
 80062d6:	bf00      	nop
 80062d8:	20000298 	.word	0x20000298

080062dc <_Balloc>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	b976      	cbnz	r6, 8006304 <_Balloc+0x28>
 80062e6:	2010      	movs	r0, #16
 80062e8:	f7fe fae6 	bl	80048b8 <malloc>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6260      	str	r0, [r4, #36]	; 0x24
 80062f0:	b920      	cbnz	r0, 80062fc <_Balloc+0x20>
 80062f2:	4b18      	ldr	r3, [pc, #96]	; (8006354 <_Balloc+0x78>)
 80062f4:	4818      	ldr	r0, [pc, #96]	; (8006358 <_Balloc+0x7c>)
 80062f6:	2166      	movs	r1, #102	; 0x66
 80062f8:	f000 fde4 	bl	8006ec4 <__assert_func>
 80062fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006300:	6006      	str	r6, [r0, #0]
 8006302:	60c6      	str	r6, [r0, #12]
 8006304:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006306:	68f3      	ldr	r3, [r6, #12]
 8006308:	b183      	cbz	r3, 800632c <_Balloc+0x50>
 800630a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006312:	b9b8      	cbnz	r0, 8006344 <_Balloc+0x68>
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f605 	lsl.w	r6, r1, r5
 800631a:	1d72      	adds	r2, r6, #5
 800631c:	0092      	lsls	r2, r2, #2
 800631e:	4620      	mov	r0, r4
 8006320:	f7fe fada 	bl	80048d8 <_calloc_r>
 8006324:	b160      	cbz	r0, 8006340 <_Balloc+0x64>
 8006326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800632a:	e00e      	b.n	800634a <_Balloc+0x6e>
 800632c:	2221      	movs	r2, #33	; 0x21
 800632e:	2104      	movs	r1, #4
 8006330:	4620      	mov	r0, r4
 8006332:	f7fe fad1 	bl	80048d8 <_calloc_r>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	60f0      	str	r0, [r6, #12]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e4      	bne.n	800630a <_Balloc+0x2e>
 8006340:	2000      	movs	r0, #0
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	6802      	ldr	r2, [r0, #0]
 8006346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800634a:	2300      	movs	r3, #0
 800634c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006350:	e7f7      	b.n	8006342 <_Balloc+0x66>
 8006352:	bf00      	nop
 8006354:	08007516 	.word	0x08007516
 8006358:	080075fc 	.word	0x080075fc

0800635c <_Bfree>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006360:	4605      	mov	r5, r0
 8006362:	460c      	mov	r4, r1
 8006364:	b976      	cbnz	r6, 8006384 <_Bfree+0x28>
 8006366:	2010      	movs	r0, #16
 8006368:	f7fe faa6 	bl	80048b8 <malloc>
 800636c:	4602      	mov	r2, r0
 800636e:	6268      	str	r0, [r5, #36]	; 0x24
 8006370:	b920      	cbnz	r0, 800637c <_Bfree+0x20>
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <_Bfree+0x3c>)
 8006374:	4809      	ldr	r0, [pc, #36]	; (800639c <_Bfree+0x40>)
 8006376:	218a      	movs	r1, #138	; 0x8a
 8006378:	f000 fda4 	bl	8006ec4 <__assert_func>
 800637c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006380:	6006      	str	r6, [r0, #0]
 8006382:	60c6      	str	r6, [r0, #12]
 8006384:	b13c      	cbz	r4, 8006396 <_Bfree+0x3a>
 8006386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006390:	6021      	str	r1, [r4, #0]
 8006392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	08007516 	.word	0x08007516
 800639c:	080075fc 	.word	0x080075fc

080063a0 <__multadd>:
 80063a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a4:	690d      	ldr	r5, [r1, #16]
 80063a6:	4607      	mov	r7, r0
 80063a8:	460c      	mov	r4, r1
 80063aa:	461e      	mov	r6, r3
 80063ac:	f101 0c14 	add.w	ip, r1, #20
 80063b0:	2000      	movs	r0, #0
 80063b2:	f8dc 3000 	ldr.w	r3, [ip]
 80063b6:	b299      	uxth	r1, r3
 80063b8:	fb02 6101 	mla	r1, r2, r1, r6
 80063bc:	0c1e      	lsrs	r6, r3, #16
 80063be:	0c0b      	lsrs	r3, r1, #16
 80063c0:	fb02 3306 	mla	r3, r2, r6, r3
 80063c4:	b289      	uxth	r1, r1
 80063c6:	3001      	adds	r0, #1
 80063c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063cc:	4285      	cmp	r5, r0
 80063ce:	f84c 1b04 	str.w	r1, [ip], #4
 80063d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063d6:	dcec      	bgt.n	80063b2 <__multadd+0x12>
 80063d8:	b30e      	cbz	r6, 800641e <__multadd+0x7e>
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dc19      	bgt.n	8006414 <__multadd+0x74>
 80063e0:	6861      	ldr	r1, [r4, #4]
 80063e2:	4638      	mov	r0, r7
 80063e4:	3101      	adds	r1, #1
 80063e6:	f7ff ff79 	bl	80062dc <_Balloc>
 80063ea:	4680      	mov	r8, r0
 80063ec:	b928      	cbnz	r0, 80063fa <__multadd+0x5a>
 80063ee:	4602      	mov	r2, r0
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <__multadd+0x84>)
 80063f2:	480d      	ldr	r0, [pc, #52]	; (8006428 <__multadd+0x88>)
 80063f4:	21b5      	movs	r1, #181	; 0xb5
 80063f6:	f000 fd65 	bl	8006ec4 <__assert_func>
 80063fa:	6922      	ldr	r2, [r4, #16]
 80063fc:	3202      	adds	r2, #2
 80063fe:	f104 010c 	add.w	r1, r4, #12
 8006402:	0092      	lsls	r2, r2, #2
 8006404:	300c      	adds	r0, #12
 8006406:	f7ff ff4e 	bl	80062a6 <memcpy>
 800640a:	4621      	mov	r1, r4
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff ffa5 	bl	800635c <_Bfree>
 8006412:	4644      	mov	r4, r8
 8006414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006418:	3501      	adds	r5, #1
 800641a:	615e      	str	r6, [r3, #20]
 800641c:	6125      	str	r5, [r4, #16]
 800641e:	4620      	mov	r0, r4
 8006420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006424:	08007588 	.word	0x08007588
 8006428:	080075fc 	.word	0x080075fc

0800642c <__hi0bits>:
 800642c:	0c03      	lsrs	r3, r0, #16
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	b9d3      	cbnz	r3, 8006468 <__hi0bits+0x3c>
 8006432:	0400      	lsls	r0, r0, #16
 8006434:	2310      	movs	r3, #16
 8006436:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800643a:	bf04      	itt	eq
 800643c:	0200      	lsleq	r0, r0, #8
 800643e:	3308      	addeq	r3, #8
 8006440:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006444:	bf04      	itt	eq
 8006446:	0100      	lsleq	r0, r0, #4
 8006448:	3304      	addeq	r3, #4
 800644a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800644e:	bf04      	itt	eq
 8006450:	0080      	lsleq	r0, r0, #2
 8006452:	3302      	addeq	r3, #2
 8006454:	2800      	cmp	r0, #0
 8006456:	db05      	blt.n	8006464 <__hi0bits+0x38>
 8006458:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800645c:	f103 0301 	add.w	r3, r3, #1
 8006460:	bf08      	it	eq
 8006462:	2320      	moveq	r3, #32
 8006464:	4618      	mov	r0, r3
 8006466:	4770      	bx	lr
 8006468:	2300      	movs	r3, #0
 800646a:	e7e4      	b.n	8006436 <__hi0bits+0xa>

0800646c <__lo0bits>:
 800646c:	6803      	ldr	r3, [r0, #0]
 800646e:	f013 0207 	ands.w	r2, r3, #7
 8006472:	4601      	mov	r1, r0
 8006474:	d00b      	beq.n	800648e <__lo0bits+0x22>
 8006476:	07da      	lsls	r2, r3, #31
 8006478:	d423      	bmi.n	80064c2 <__lo0bits+0x56>
 800647a:	0798      	lsls	r0, r3, #30
 800647c:	bf49      	itett	mi
 800647e:	085b      	lsrmi	r3, r3, #1
 8006480:	089b      	lsrpl	r3, r3, #2
 8006482:	2001      	movmi	r0, #1
 8006484:	600b      	strmi	r3, [r1, #0]
 8006486:	bf5c      	itt	pl
 8006488:	600b      	strpl	r3, [r1, #0]
 800648a:	2002      	movpl	r0, #2
 800648c:	4770      	bx	lr
 800648e:	b298      	uxth	r0, r3
 8006490:	b9a8      	cbnz	r0, 80064be <__lo0bits+0x52>
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	2010      	movs	r0, #16
 8006496:	b2da      	uxtb	r2, r3
 8006498:	b90a      	cbnz	r2, 800649e <__lo0bits+0x32>
 800649a:	3008      	adds	r0, #8
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	071a      	lsls	r2, r3, #28
 80064a0:	bf04      	itt	eq
 80064a2:	091b      	lsreq	r3, r3, #4
 80064a4:	3004      	addeq	r0, #4
 80064a6:	079a      	lsls	r2, r3, #30
 80064a8:	bf04      	itt	eq
 80064aa:	089b      	lsreq	r3, r3, #2
 80064ac:	3002      	addeq	r0, #2
 80064ae:	07da      	lsls	r2, r3, #31
 80064b0:	d403      	bmi.n	80064ba <__lo0bits+0x4e>
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	f100 0001 	add.w	r0, r0, #1
 80064b8:	d005      	beq.n	80064c6 <__lo0bits+0x5a>
 80064ba:	600b      	str	r3, [r1, #0]
 80064bc:	4770      	bx	lr
 80064be:	4610      	mov	r0, r2
 80064c0:	e7e9      	b.n	8006496 <__lo0bits+0x2a>
 80064c2:	2000      	movs	r0, #0
 80064c4:	4770      	bx	lr
 80064c6:	2020      	movs	r0, #32
 80064c8:	4770      	bx	lr
	...

080064cc <__i2b>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	460c      	mov	r4, r1
 80064d0:	2101      	movs	r1, #1
 80064d2:	f7ff ff03 	bl	80062dc <_Balloc>
 80064d6:	4602      	mov	r2, r0
 80064d8:	b928      	cbnz	r0, 80064e6 <__i2b+0x1a>
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <__i2b+0x24>)
 80064dc:	4805      	ldr	r0, [pc, #20]	; (80064f4 <__i2b+0x28>)
 80064de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064e2:	f000 fcef 	bl	8006ec4 <__assert_func>
 80064e6:	2301      	movs	r3, #1
 80064e8:	6144      	str	r4, [r0, #20]
 80064ea:	6103      	str	r3, [r0, #16]
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	bf00      	nop
 80064f0:	08007588 	.word	0x08007588
 80064f4:	080075fc 	.word	0x080075fc

080064f8 <__multiply>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	4691      	mov	r9, r2
 80064fe:	690a      	ldr	r2, [r1, #16]
 8006500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	bfb8      	it	lt
 8006508:	460b      	movlt	r3, r1
 800650a:	460c      	mov	r4, r1
 800650c:	bfbc      	itt	lt
 800650e:	464c      	movlt	r4, r9
 8006510:	4699      	movlt	r9, r3
 8006512:	6927      	ldr	r7, [r4, #16]
 8006514:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	6861      	ldr	r1, [r4, #4]
 800651c:	eb07 060a 	add.w	r6, r7, sl
 8006520:	42b3      	cmp	r3, r6
 8006522:	b085      	sub	sp, #20
 8006524:	bfb8      	it	lt
 8006526:	3101      	addlt	r1, #1
 8006528:	f7ff fed8 	bl	80062dc <_Balloc>
 800652c:	b930      	cbnz	r0, 800653c <__multiply+0x44>
 800652e:	4602      	mov	r2, r0
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <__multiply+0x14c>)
 8006532:	4845      	ldr	r0, [pc, #276]	; (8006648 <__multiply+0x150>)
 8006534:	f240 115d 	movw	r1, #349	; 0x15d
 8006538:	f000 fcc4 	bl	8006ec4 <__assert_func>
 800653c:	f100 0514 	add.w	r5, r0, #20
 8006540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006544:	462b      	mov	r3, r5
 8006546:	2200      	movs	r2, #0
 8006548:	4543      	cmp	r3, r8
 800654a:	d321      	bcc.n	8006590 <__multiply+0x98>
 800654c:	f104 0314 	add.w	r3, r4, #20
 8006550:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006554:	f109 0314 	add.w	r3, r9, #20
 8006558:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800655c:	9202      	str	r2, [sp, #8]
 800655e:	1b3a      	subs	r2, r7, r4
 8006560:	3a15      	subs	r2, #21
 8006562:	f022 0203 	bic.w	r2, r2, #3
 8006566:	3204      	adds	r2, #4
 8006568:	f104 0115 	add.w	r1, r4, #21
 800656c:	428f      	cmp	r7, r1
 800656e:	bf38      	it	cc
 8006570:	2204      	movcc	r2, #4
 8006572:	9201      	str	r2, [sp, #4]
 8006574:	9a02      	ldr	r2, [sp, #8]
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	429a      	cmp	r2, r3
 800657a:	d80c      	bhi.n	8006596 <__multiply+0x9e>
 800657c:	2e00      	cmp	r6, #0
 800657e:	dd03      	ble.n	8006588 <__multiply+0x90>
 8006580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006584:	2b00      	cmp	r3, #0
 8006586:	d05a      	beq.n	800663e <__multiply+0x146>
 8006588:	6106      	str	r6, [r0, #16]
 800658a:	b005      	add	sp, #20
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006590:	f843 2b04 	str.w	r2, [r3], #4
 8006594:	e7d8      	b.n	8006548 <__multiply+0x50>
 8006596:	f8b3 a000 	ldrh.w	sl, [r3]
 800659a:	f1ba 0f00 	cmp.w	sl, #0
 800659e:	d024      	beq.n	80065ea <__multiply+0xf2>
 80065a0:	f104 0e14 	add.w	lr, r4, #20
 80065a4:	46a9      	mov	r9, r5
 80065a6:	f04f 0c00 	mov.w	ip, #0
 80065aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065ae:	f8d9 1000 	ldr.w	r1, [r9]
 80065b2:	fa1f fb82 	uxth.w	fp, r2
 80065b6:	b289      	uxth	r1, r1
 80065b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80065bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80065c0:	f8d9 2000 	ldr.w	r2, [r9]
 80065c4:	4461      	add	r1, ip
 80065c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80065ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065d2:	b289      	uxth	r1, r1
 80065d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065d8:	4577      	cmp	r7, lr
 80065da:	f849 1b04 	str.w	r1, [r9], #4
 80065de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065e2:	d8e2      	bhi.n	80065aa <__multiply+0xb2>
 80065e4:	9a01      	ldr	r2, [sp, #4]
 80065e6:	f845 c002 	str.w	ip, [r5, r2]
 80065ea:	9a03      	ldr	r2, [sp, #12]
 80065ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065f0:	3304      	adds	r3, #4
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	d020      	beq.n	800663a <__multiply+0x142>
 80065f8:	6829      	ldr	r1, [r5, #0]
 80065fa:	f104 0c14 	add.w	ip, r4, #20
 80065fe:	46ae      	mov	lr, r5
 8006600:	f04f 0a00 	mov.w	sl, #0
 8006604:	f8bc b000 	ldrh.w	fp, [ip]
 8006608:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800660c:	fb09 220b 	mla	r2, r9, fp, r2
 8006610:	4492      	add	sl, r2
 8006612:	b289      	uxth	r1, r1
 8006614:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006618:	f84e 1b04 	str.w	r1, [lr], #4
 800661c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006620:	f8be 1000 	ldrh.w	r1, [lr]
 8006624:	0c12      	lsrs	r2, r2, #16
 8006626:	fb09 1102 	mla	r1, r9, r2, r1
 800662a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800662e:	4567      	cmp	r7, ip
 8006630:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006634:	d8e6      	bhi.n	8006604 <__multiply+0x10c>
 8006636:	9a01      	ldr	r2, [sp, #4]
 8006638:	50a9      	str	r1, [r5, r2]
 800663a:	3504      	adds	r5, #4
 800663c:	e79a      	b.n	8006574 <__multiply+0x7c>
 800663e:	3e01      	subs	r6, #1
 8006640:	e79c      	b.n	800657c <__multiply+0x84>
 8006642:	bf00      	nop
 8006644:	08007588 	.word	0x08007588
 8006648:	080075fc 	.word	0x080075fc

0800664c <__pow5mult>:
 800664c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006650:	4615      	mov	r5, r2
 8006652:	f012 0203 	ands.w	r2, r2, #3
 8006656:	4606      	mov	r6, r0
 8006658:	460f      	mov	r7, r1
 800665a:	d007      	beq.n	800666c <__pow5mult+0x20>
 800665c:	4c25      	ldr	r4, [pc, #148]	; (80066f4 <__pow5mult+0xa8>)
 800665e:	3a01      	subs	r2, #1
 8006660:	2300      	movs	r3, #0
 8006662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006666:	f7ff fe9b 	bl	80063a0 <__multadd>
 800666a:	4607      	mov	r7, r0
 800666c:	10ad      	asrs	r5, r5, #2
 800666e:	d03d      	beq.n	80066ec <__pow5mult+0xa0>
 8006670:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006672:	b97c      	cbnz	r4, 8006694 <__pow5mult+0x48>
 8006674:	2010      	movs	r0, #16
 8006676:	f7fe f91f 	bl	80048b8 <malloc>
 800667a:	4602      	mov	r2, r0
 800667c:	6270      	str	r0, [r6, #36]	; 0x24
 800667e:	b928      	cbnz	r0, 800668c <__pow5mult+0x40>
 8006680:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <__pow5mult+0xac>)
 8006682:	481e      	ldr	r0, [pc, #120]	; (80066fc <__pow5mult+0xb0>)
 8006684:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006688:	f000 fc1c 	bl	8006ec4 <__assert_func>
 800668c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006690:	6004      	str	r4, [r0, #0]
 8006692:	60c4      	str	r4, [r0, #12]
 8006694:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800669c:	b94c      	cbnz	r4, 80066b2 <__pow5mult+0x66>
 800669e:	f240 2171 	movw	r1, #625	; 0x271
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff ff12 	bl	80064cc <__i2b>
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80066ae:	4604      	mov	r4, r0
 80066b0:	6003      	str	r3, [r0, #0]
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	07eb      	lsls	r3, r5, #31
 80066b8:	d50a      	bpl.n	80066d0 <__pow5mult+0x84>
 80066ba:	4639      	mov	r1, r7
 80066bc:	4622      	mov	r2, r4
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff ff1a 	bl	80064f8 <__multiply>
 80066c4:	4639      	mov	r1, r7
 80066c6:	4680      	mov	r8, r0
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff fe47 	bl	800635c <_Bfree>
 80066ce:	4647      	mov	r7, r8
 80066d0:	106d      	asrs	r5, r5, #1
 80066d2:	d00b      	beq.n	80066ec <__pow5mult+0xa0>
 80066d4:	6820      	ldr	r0, [r4, #0]
 80066d6:	b938      	cbnz	r0, 80066e8 <__pow5mult+0x9c>
 80066d8:	4622      	mov	r2, r4
 80066da:	4621      	mov	r1, r4
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff ff0b 	bl	80064f8 <__multiply>
 80066e2:	6020      	str	r0, [r4, #0]
 80066e4:	f8c0 9000 	str.w	r9, [r0]
 80066e8:	4604      	mov	r4, r0
 80066ea:	e7e4      	b.n	80066b6 <__pow5mult+0x6a>
 80066ec:	4638      	mov	r0, r7
 80066ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f2:	bf00      	nop
 80066f4:	08007748 	.word	0x08007748
 80066f8:	08007516 	.word	0x08007516
 80066fc:	080075fc 	.word	0x080075fc

08006700 <__lshift>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	460c      	mov	r4, r1
 8006706:	6849      	ldr	r1, [r1, #4]
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800670e:	68a3      	ldr	r3, [r4, #8]
 8006710:	4607      	mov	r7, r0
 8006712:	4691      	mov	r9, r2
 8006714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006718:	f108 0601 	add.w	r6, r8, #1
 800671c:	42b3      	cmp	r3, r6
 800671e:	db0b      	blt.n	8006738 <__lshift+0x38>
 8006720:	4638      	mov	r0, r7
 8006722:	f7ff fddb 	bl	80062dc <_Balloc>
 8006726:	4605      	mov	r5, r0
 8006728:	b948      	cbnz	r0, 800673e <__lshift+0x3e>
 800672a:	4602      	mov	r2, r0
 800672c:	4b2a      	ldr	r3, [pc, #168]	; (80067d8 <__lshift+0xd8>)
 800672e:	482b      	ldr	r0, [pc, #172]	; (80067dc <__lshift+0xdc>)
 8006730:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006734:	f000 fbc6 	bl	8006ec4 <__assert_func>
 8006738:	3101      	adds	r1, #1
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	e7ee      	b.n	800671c <__lshift+0x1c>
 800673e:	2300      	movs	r3, #0
 8006740:	f100 0114 	add.w	r1, r0, #20
 8006744:	f100 0210 	add.w	r2, r0, #16
 8006748:	4618      	mov	r0, r3
 800674a:	4553      	cmp	r3, sl
 800674c:	db37      	blt.n	80067be <__lshift+0xbe>
 800674e:	6920      	ldr	r0, [r4, #16]
 8006750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006754:	f104 0314 	add.w	r3, r4, #20
 8006758:	f019 091f 	ands.w	r9, r9, #31
 800675c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006760:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006764:	d02f      	beq.n	80067c6 <__lshift+0xc6>
 8006766:	f1c9 0e20 	rsb	lr, r9, #32
 800676a:	468a      	mov	sl, r1
 800676c:	f04f 0c00 	mov.w	ip, #0
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	fa02 f209 	lsl.w	r2, r2, r9
 8006776:	ea42 020c 	orr.w	r2, r2, ip
 800677a:	f84a 2b04 	str.w	r2, [sl], #4
 800677e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006782:	4298      	cmp	r0, r3
 8006784:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006788:	d8f2      	bhi.n	8006770 <__lshift+0x70>
 800678a:	1b03      	subs	r3, r0, r4
 800678c:	3b15      	subs	r3, #21
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	3304      	adds	r3, #4
 8006794:	f104 0215 	add.w	r2, r4, #21
 8006798:	4290      	cmp	r0, r2
 800679a:	bf38      	it	cc
 800679c:	2304      	movcc	r3, #4
 800679e:	f841 c003 	str.w	ip, [r1, r3]
 80067a2:	f1bc 0f00 	cmp.w	ip, #0
 80067a6:	d001      	beq.n	80067ac <__lshift+0xac>
 80067a8:	f108 0602 	add.w	r6, r8, #2
 80067ac:	3e01      	subs	r6, #1
 80067ae:	4638      	mov	r0, r7
 80067b0:	612e      	str	r6, [r5, #16]
 80067b2:	4621      	mov	r1, r4
 80067b4:	f7ff fdd2 	bl	800635c <_Bfree>
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	f842 0f04 	str.w	r0, [r2, #4]!
 80067c2:	3301      	adds	r3, #1
 80067c4:	e7c1      	b.n	800674a <__lshift+0x4a>
 80067c6:	3904      	subs	r1, #4
 80067c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80067d0:	4298      	cmp	r0, r3
 80067d2:	d8f9      	bhi.n	80067c8 <__lshift+0xc8>
 80067d4:	e7ea      	b.n	80067ac <__lshift+0xac>
 80067d6:	bf00      	nop
 80067d8:	08007588 	.word	0x08007588
 80067dc:	080075fc 	.word	0x080075fc

080067e0 <__mcmp>:
 80067e0:	b530      	push	{r4, r5, lr}
 80067e2:	6902      	ldr	r2, [r0, #16]
 80067e4:	690c      	ldr	r4, [r1, #16]
 80067e6:	1b12      	subs	r2, r2, r4
 80067e8:	d10e      	bne.n	8006808 <__mcmp+0x28>
 80067ea:	f100 0314 	add.w	r3, r0, #20
 80067ee:	3114      	adds	r1, #20
 80067f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006800:	42a5      	cmp	r5, r4
 8006802:	d003      	beq.n	800680c <__mcmp+0x2c>
 8006804:	d305      	bcc.n	8006812 <__mcmp+0x32>
 8006806:	2201      	movs	r2, #1
 8006808:	4610      	mov	r0, r2
 800680a:	bd30      	pop	{r4, r5, pc}
 800680c:	4283      	cmp	r3, r0
 800680e:	d3f3      	bcc.n	80067f8 <__mcmp+0x18>
 8006810:	e7fa      	b.n	8006808 <__mcmp+0x28>
 8006812:	f04f 32ff 	mov.w	r2, #4294967295
 8006816:	e7f7      	b.n	8006808 <__mcmp+0x28>

08006818 <__mdiff>:
 8006818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	460c      	mov	r4, r1
 800681e:	4606      	mov	r6, r0
 8006820:	4611      	mov	r1, r2
 8006822:	4620      	mov	r0, r4
 8006824:	4690      	mov	r8, r2
 8006826:	f7ff ffdb 	bl	80067e0 <__mcmp>
 800682a:	1e05      	subs	r5, r0, #0
 800682c:	d110      	bne.n	8006850 <__mdiff+0x38>
 800682e:	4629      	mov	r1, r5
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff fd53 	bl	80062dc <_Balloc>
 8006836:	b930      	cbnz	r0, 8006846 <__mdiff+0x2e>
 8006838:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <__mdiff+0x10c>)
 800683a:	4602      	mov	r2, r0
 800683c:	f240 2132 	movw	r1, #562	; 0x232
 8006840:	4839      	ldr	r0, [pc, #228]	; (8006928 <__mdiff+0x110>)
 8006842:	f000 fb3f 	bl	8006ec4 <__assert_func>
 8006846:	2301      	movs	r3, #1
 8006848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800684c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	bfa4      	itt	ge
 8006852:	4643      	movge	r3, r8
 8006854:	46a0      	movge	r8, r4
 8006856:	4630      	mov	r0, r6
 8006858:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800685c:	bfa6      	itte	ge
 800685e:	461c      	movge	r4, r3
 8006860:	2500      	movge	r5, #0
 8006862:	2501      	movlt	r5, #1
 8006864:	f7ff fd3a 	bl	80062dc <_Balloc>
 8006868:	b920      	cbnz	r0, 8006874 <__mdiff+0x5c>
 800686a:	4b2e      	ldr	r3, [pc, #184]	; (8006924 <__mdiff+0x10c>)
 800686c:	4602      	mov	r2, r0
 800686e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006872:	e7e5      	b.n	8006840 <__mdiff+0x28>
 8006874:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006878:	6926      	ldr	r6, [r4, #16]
 800687a:	60c5      	str	r5, [r0, #12]
 800687c:	f104 0914 	add.w	r9, r4, #20
 8006880:	f108 0514 	add.w	r5, r8, #20
 8006884:	f100 0e14 	add.w	lr, r0, #20
 8006888:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800688c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006890:	f108 0210 	add.w	r2, r8, #16
 8006894:	46f2      	mov	sl, lr
 8006896:	2100      	movs	r1, #0
 8006898:	f859 3b04 	ldr.w	r3, [r9], #4
 800689c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80068a0:	fa1f f883 	uxth.w	r8, r3
 80068a4:	fa11 f18b 	uxtah	r1, r1, fp
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	eba1 0808 	sub.w	r8, r1, r8
 80068ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80068b6:	fa1f f888 	uxth.w	r8, r8
 80068ba:	1419      	asrs	r1, r3, #16
 80068bc:	454e      	cmp	r6, r9
 80068be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80068c2:	f84a 3b04 	str.w	r3, [sl], #4
 80068c6:	d8e7      	bhi.n	8006898 <__mdiff+0x80>
 80068c8:	1b33      	subs	r3, r6, r4
 80068ca:	3b15      	subs	r3, #21
 80068cc:	f023 0303 	bic.w	r3, r3, #3
 80068d0:	3304      	adds	r3, #4
 80068d2:	3415      	adds	r4, #21
 80068d4:	42a6      	cmp	r6, r4
 80068d6:	bf38      	it	cc
 80068d8:	2304      	movcc	r3, #4
 80068da:	441d      	add	r5, r3
 80068dc:	4473      	add	r3, lr
 80068de:	469e      	mov	lr, r3
 80068e0:	462e      	mov	r6, r5
 80068e2:	4566      	cmp	r6, ip
 80068e4:	d30e      	bcc.n	8006904 <__mdiff+0xec>
 80068e6:	f10c 0203 	add.w	r2, ip, #3
 80068ea:	1b52      	subs	r2, r2, r5
 80068ec:	f022 0203 	bic.w	r2, r2, #3
 80068f0:	3d03      	subs	r5, #3
 80068f2:	45ac      	cmp	ip, r5
 80068f4:	bf38      	it	cc
 80068f6:	2200      	movcc	r2, #0
 80068f8:	441a      	add	r2, r3
 80068fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068fe:	b17b      	cbz	r3, 8006920 <__mdiff+0x108>
 8006900:	6107      	str	r7, [r0, #16]
 8006902:	e7a3      	b.n	800684c <__mdiff+0x34>
 8006904:	f856 8b04 	ldr.w	r8, [r6], #4
 8006908:	fa11 f288 	uxtah	r2, r1, r8
 800690c:	1414      	asrs	r4, r2, #16
 800690e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006912:	b292      	uxth	r2, r2
 8006914:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006918:	f84e 2b04 	str.w	r2, [lr], #4
 800691c:	1421      	asrs	r1, r4, #16
 800691e:	e7e0      	b.n	80068e2 <__mdiff+0xca>
 8006920:	3f01      	subs	r7, #1
 8006922:	e7ea      	b.n	80068fa <__mdiff+0xe2>
 8006924:	08007588 	.word	0x08007588
 8006928:	080075fc 	.word	0x080075fc

0800692c <__d2b>:
 800692c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006930:	4689      	mov	r9, r1
 8006932:	2101      	movs	r1, #1
 8006934:	ec57 6b10 	vmov	r6, r7, d0
 8006938:	4690      	mov	r8, r2
 800693a:	f7ff fccf 	bl	80062dc <_Balloc>
 800693e:	4604      	mov	r4, r0
 8006940:	b930      	cbnz	r0, 8006950 <__d2b+0x24>
 8006942:	4602      	mov	r2, r0
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <__d2b+0xb0>)
 8006946:	4826      	ldr	r0, [pc, #152]	; (80069e0 <__d2b+0xb4>)
 8006948:	f240 310a 	movw	r1, #778	; 0x30a
 800694c:	f000 faba 	bl	8006ec4 <__assert_func>
 8006950:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006954:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006958:	bb35      	cbnz	r5, 80069a8 <__d2b+0x7c>
 800695a:	2e00      	cmp	r6, #0
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	d028      	beq.n	80069b2 <__d2b+0x86>
 8006960:	4668      	mov	r0, sp
 8006962:	9600      	str	r6, [sp, #0]
 8006964:	f7ff fd82 	bl	800646c <__lo0bits>
 8006968:	9900      	ldr	r1, [sp, #0]
 800696a:	b300      	cbz	r0, 80069ae <__d2b+0x82>
 800696c:	9a01      	ldr	r2, [sp, #4]
 800696e:	f1c0 0320 	rsb	r3, r0, #32
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	430b      	orrs	r3, r1
 8006978:	40c2      	lsrs	r2, r0
 800697a:	6163      	str	r3, [r4, #20]
 800697c:	9201      	str	r2, [sp, #4]
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	61a3      	str	r3, [r4, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2202      	movne	r2, #2
 8006988:	2201      	moveq	r2, #1
 800698a:	6122      	str	r2, [r4, #16]
 800698c:	b1d5      	cbz	r5, 80069c4 <__d2b+0x98>
 800698e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006992:	4405      	add	r5, r0
 8006994:	f8c9 5000 	str.w	r5, [r9]
 8006998:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800699c:	f8c8 0000 	str.w	r0, [r8]
 80069a0:	4620      	mov	r0, r4
 80069a2:	b003      	add	sp, #12
 80069a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ac:	e7d5      	b.n	800695a <__d2b+0x2e>
 80069ae:	6161      	str	r1, [r4, #20]
 80069b0:	e7e5      	b.n	800697e <__d2b+0x52>
 80069b2:	a801      	add	r0, sp, #4
 80069b4:	f7ff fd5a 	bl	800646c <__lo0bits>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	6163      	str	r3, [r4, #20]
 80069bc:	2201      	movs	r2, #1
 80069be:	6122      	str	r2, [r4, #16]
 80069c0:	3020      	adds	r0, #32
 80069c2:	e7e3      	b.n	800698c <__d2b+0x60>
 80069c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069cc:	f8c9 0000 	str.w	r0, [r9]
 80069d0:	6918      	ldr	r0, [r3, #16]
 80069d2:	f7ff fd2b 	bl	800642c <__hi0bits>
 80069d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069da:	e7df      	b.n	800699c <__d2b+0x70>
 80069dc:	08007588 	.word	0x08007588
 80069e0:	080075fc 	.word	0x080075fc

080069e4 <__sfputc_r>:
 80069e4:	6893      	ldr	r3, [r2, #8]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	b410      	push	{r4}
 80069ec:	6093      	str	r3, [r2, #8]
 80069ee:	da08      	bge.n	8006a02 <__sfputc_r+0x1e>
 80069f0:	6994      	ldr	r4, [r2, #24]
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	db01      	blt.n	80069fa <__sfputc_r+0x16>
 80069f6:	290a      	cmp	r1, #10
 80069f8:	d103      	bne.n	8006a02 <__sfputc_r+0x1e>
 80069fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069fe:	f000 b98f 	b.w	8006d20 <__swbuf_r>
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	1c58      	adds	r0, r3, #1
 8006a06:	6010      	str	r0, [r2, #0]
 8006a08:	7019      	strb	r1, [r3, #0]
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <__sfputs_r>:
 8006a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a14:	4606      	mov	r6, r0
 8006a16:	460f      	mov	r7, r1
 8006a18:	4614      	mov	r4, r2
 8006a1a:	18d5      	adds	r5, r2, r3
 8006a1c:	42ac      	cmp	r4, r5
 8006a1e:	d101      	bne.n	8006a24 <__sfputs_r+0x12>
 8006a20:	2000      	movs	r0, #0
 8006a22:	e007      	b.n	8006a34 <__sfputs_r+0x22>
 8006a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a28:	463a      	mov	r2, r7
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff ffda 	bl	80069e4 <__sfputc_r>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d1f3      	bne.n	8006a1c <__sfputs_r+0xa>
 8006a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a38 <_vfiprintf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	b09d      	sub	sp, #116	; 0x74
 8006a40:	4614      	mov	r4, r2
 8006a42:	4698      	mov	r8, r3
 8006a44:	4606      	mov	r6, r0
 8006a46:	b118      	cbz	r0, 8006a50 <_vfiprintf_r+0x18>
 8006a48:	6983      	ldr	r3, [r0, #24]
 8006a4a:	b90b      	cbnz	r3, 8006a50 <_vfiprintf_r+0x18>
 8006a4c:	f7ff fb86 	bl	800615c <__sinit>
 8006a50:	4b89      	ldr	r3, [pc, #548]	; (8006c78 <_vfiprintf_r+0x240>)
 8006a52:	429d      	cmp	r5, r3
 8006a54:	d11b      	bne.n	8006a8e <_vfiprintf_r+0x56>
 8006a56:	6875      	ldr	r5, [r6, #4]
 8006a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a5a:	07d9      	lsls	r1, r3, #31
 8006a5c:	d405      	bmi.n	8006a6a <_vfiprintf_r+0x32>
 8006a5e:	89ab      	ldrh	r3, [r5, #12]
 8006a60:	059a      	lsls	r2, r3, #22
 8006a62:	d402      	bmi.n	8006a6a <_vfiprintf_r+0x32>
 8006a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a66:	f7ff fc1c 	bl	80062a2 <__retarget_lock_acquire_recursive>
 8006a6a:	89ab      	ldrh	r3, [r5, #12]
 8006a6c:	071b      	lsls	r3, r3, #28
 8006a6e:	d501      	bpl.n	8006a74 <_vfiprintf_r+0x3c>
 8006a70:	692b      	ldr	r3, [r5, #16]
 8006a72:	b9eb      	cbnz	r3, 8006ab0 <_vfiprintf_r+0x78>
 8006a74:	4629      	mov	r1, r5
 8006a76:	4630      	mov	r0, r6
 8006a78:	f000 f9b6 	bl	8006de8 <__swsetup_r>
 8006a7c:	b1c0      	cbz	r0, 8006ab0 <_vfiprintf_r+0x78>
 8006a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a80:	07dc      	lsls	r4, r3, #31
 8006a82:	d50e      	bpl.n	8006aa2 <_vfiprintf_r+0x6a>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	b01d      	add	sp, #116	; 0x74
 8006a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	4b7b      	ldr	r3, [pc, #492]	; (8006c7c <_vfiprintf_r+0x244>)
 8006a90:	429d      	cmp	r5, r3
 8006a92:	d101      	bne.n	8006a98 <_vfiprintf_r+0x60>
 8006a94:	68b5      	ldr	r5, [r6, #8]
 8006a96:	e7df      	b.n	8006a58 <_vfiprintf_r+0x20>
 8006a98:	4b79      	ldr	r3, [pc, #484]	; (8006c80 <_vfiprintf_r+0x248>)
 8006a9a:	429d      	cmp	r5, r3
 8006a9c:	bf08      	it	eq
 8006a9e:	68f5      	ldreq	r5, [r6, #12]
 8006aa0:	e7da      	b.n	8006a58 <_vfiprintf_r+0x20>
 8006aa2:	89ab      	ldrh	r3, [r5, #12]
 8006aa4:	0598      	lsls	r0, r3, #22
 8006aa6:	d4ed      	bmi.n	8006a84 <_vfiprintf_r+0x4c>
 8006aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aaa:	f7ff fbfb 	bl	80062a4 <__retarget_lock_release_recursive>
 8006aae:	e7e9      	b.n	8006a84 <_vfiprintf_r+0x4c>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab4:	2320      	movs	r3, #32
 8006ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8006abe:	2330      	movs	r3, #48	; 0x30
 8006ac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c84 <_vfiprintf_r+0x24c>
 8006ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ac8:	f04f 0901 	mov.w	r9, #1
 8006acc:	4623      	mov	r3, r4
 8006ace:	469a      	mov	sl, r3
 8006ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad4:	b10a      	cbz	r2, 8006ada <_vfiprintf_r+0xa2>
 8006ad6:	2a25      	cmp	r2, #37	; 0x25
 8006ad8:	d1f9      	bne.n	8006ace <_vfiprintf_r+0x96>
 8006ada:	ebba 0b04 	subs.w	fp, sl, r4
 8006ade:	d00b      	beq.n	8006af8 <_vfiprintf_r+0xc0>
 8006ae0:	465b      	mov	r3, fp
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ff93 	bl	8006a12 <__sfputs_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	f000 80aa 	beq.w	8006c46 <_vfiprintf_r+0x20e>
 8006af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af4:	445a      	add	r2, fp
 8006af6:	9209      	str	r2, [sp, #36]	; 0x24
 8006af8:	f89a 3000 	ldrb.w	r3, [sl]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80a2 	beq.w	8006c46 <_vfiprintf_r+0x20e>
 8006b02:	2300      	movs	r3, #0
 8006b04:	f04f 32ff 	mov.w	r2, #4294967295
 8006b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b0c:	f10a 0a01 	add.w	sl, sl, #1
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	9307      	str	r3, [sp, #28]
 8006b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b18:	931a      	str	r3, [sp, #104]	; 0x68
 8006b1a:	4654      	mov	r4, sl
 8006b1c:	2205      	movs	r2, #5
 8006b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b22:	4858      	ldr	r0, [pc, #352]	; (8006c84 <_vfiprintf_r+0x24c>)
 8006b24:	f7f9 fb74 	bl	8000210 <memchr>
 8006b28:	9a04      	ldr	r2, [sp, #16]
 8006b2a:	b9d8      	cbnz	r0, 8006b64 <_vfiprintf_r+0x12c>
 8006b2c:	06d1      	lsls	r1, r2, #27
 8006b2e:	bf44      	itt	mi
 8006b30:	2320      	movmi	r3, #32
 8006b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b36:	0713      	lsls	r3, r2, #28
 8006b38:	bf44      	itt	mi
 8006b3a:	232b      	movmi	r3, #43	; 0x2b
 8006b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b40:	f89a 3000 	ldrb.w	r3, [sl]
 8006b44:	2b2a      	cmp	r3, #42	; 0x2a
 8006b46:	d015      	beq.n	8006b74 <_vfiprintf_r+0x13c>
 8006b48:	9a07      	ldr	r2, [sp, #28]
 8006b4a:	4654      	mov	r4, sl
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f04f 0c0a 	mov.w	ip, #10
 8006b52:	4621      	mov	r1, r4
 8006b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b58:	3b30      	subs	r3, #48	; 0x30
 8006b5a:	2b09      	cmp	r3, #9
 8006b5c:	d94e      	bls.n	8006bfc <_vfiprintf_r+0x1c4>
 8006b5e:	b1b0      	cbz	r0, 8006b8e <_vfiprintf_r+0x156>
 8006b60:	9207      	str	r2, [sp, #28]
 8006b62:	e014      	b.n	8006b8e <_vfiprintf_r+0x156>
 8006b64:	eba0 0308 	sub.w	r3, r0, r8
 8006b68:	fa09 f303 	lsl.w	r3, r9, r3
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	9304      	str	r3, [sp, #16]
 8006b70:	46a2      	mov	sl, r4
 8006b72:	e7d2      	b.n	8006b1a <_vfiprintf_r+0xe2>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	1d19      	adds	r1, r3, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	9103      	str	r1, [sp, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfbb      	ittet	lt
 8006b80:	425b      	neglt	r3, r3
 8006b82:	f042 0202 	orrlt.w	r2, r2, #2
 8006b86:	9307      	strge	r3, [sp, #28]
 8006b88:	9307      	strlt	r3, [sp, #28]
 8006b8a:	bfb8      	it	lt
 8006b8c:	9204      	strlt	r2, [sp, #16]
 8006b8e:	7823      	ldrb	r3, [r4, #0]
 8006b90:	2b2e      	cmp	r3, #46	; 0x2e
 8006b92:	d10c      	bne.n	8006bae <_vfiprintf_r+0x176>
 8006b94:	7863      	ldrb	r3, [r4, #1]
 8006b96:	2b2a      	cmp	r3, #42	; 0x2a
 8006b98:	d135      	bne.n	8006c06 <_vfiprintf_r+0x1ce>
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9203      	str	r2, [sp, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfb8      	it	lt
 8006ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006baa:	3402      	adds	r4, #2
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c94 <_vfiprintf_r+0x25c>
 8006bb2:	7821      	ldrb	r1, [r4, #0]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	f7f9 fb2a 	bl	8000210 <memchr>
 8006bbc:	b140      	cbz	r0, 8006bd0 <_vfiprintf_r+0x198>
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	eba0 000a 	sub.w	r0, r0, sl
 8006bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	4303      	orrs	r3, r0
 8006bcc:	3401      	adds	r4, #1
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd4:	482c      	ldr	r0, [pc, #176]	; (8006c88 <_vfiprintf_r+0x250>)
 8006bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bda:	2206      	movs	r2, #6
 8006bdc:	f7f9 fb18 	bl	8000210 <memchr>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d03f      	beq.n	8006c64 <_vfiprintf_r+0x22c>
 8006be4:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <_vfiprintf_r+0x254>)
 8006be6:	bb1b      	cbnz	r3, 8006c30 <_vfiprintf_r+0x1f8>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	3307      	adds	r3, #7
 8006bec:	f023 0307 	bic.w	r3, r3, #7
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf6:	443b      	add	r3, r7
 8006bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfa:	e767      	b.n	8006acc <_vfiprintf_r+0x94>
 8006bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c00:	460c      	mov	r4, r1
 8006c02:	2001      	movs	r0, #1
 8006c04:	e7a5      	b.n	8006b52 <_vfiprintf_r+0x11a>
 8006c06:	2300      	movs	r3, #0
 8006c08:	3401      	adds	r4, #1
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f04f 0c0a 	mov.w	ip, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c18:	3a30      	subs	r2, #48	; 0x30
 8006c1a:	2a09      	cmp	r2, #9
 8006c1c:	d903      	bls.n	8006c26 <_vfiprintf_r+0x1ee>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0c5      	beq.n	8006bae <_vfiprintf_r+0x176>
 8006c22:	9105      	str	r1, [sp, #20]
 8006c24:	e7c3      	b.n	8006bae <_vfiprintf_r+0x176>
 8006c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e7f0      	b.n	8006c12 <_vfiprintf_r+0x1da>
 8006c30:	ab03      	add	r3, sp, #12
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	462a      	mov	r2, r5
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <_vfiprintf_r+0x258>)
 8006c38:	a904      	add	r1, sp, #16
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7fd ffe2 	bl	8004c04 <_printf_float>
 8006c40:	4607      	mov	r7, r0
 8006c42:	1c78      	adds	r0, r7, #1
 8006c44:	d1d6      	bne.n	8006bf4 <_vfiprintf_r+0x1bc>
 8006c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c48:	07d9      	lsls	r1, r3, #31
 8006c4a:	d405      	bmi.n	8006c58 <_vfiprintf_r+0x220>
 8006c4c:	89ab      	ldrh	r3, [r5, #12]
 8006c4e:	059a      	lsls	r2, r3, #22
 8006c50:	d402      	bmi.n	8006c58 <_vfiprintf_r+0x220>
 8006c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c54:	f7ff fb26 	bl	80062a4 <__retarget_lock_release_recursive>
 8006c58:	89ab      	ldrh	r3, [r5, #12]
 8006c5a:	065b      	lsls	r3, r3, #25
 8006c5c:	f53f af12 	bmi.w	8006a84 <_vfiprintf_r+0x4c>
 8006c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c62:	e711      	b.n	8006a88 <_vfiprintf_r+0x50>
 8006c64:	ab03      	add	r3, sp, #12
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <_vfiprintf_r+0x258>)
 8006c6c:	a904      	add	r1, sp, #16
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7fe fa6c 	bl	800514c <_printf_i>
 8006c74:	e7e4      	b.n	8006c40 <_vfiprintf_r+0x208>
 8006c76:	bf00      	nop
 8006c78:	080075bc 	.word	0x080075bc
 8006c7c:	080075dc 	.word	0x080075dc
 8006c80:	0800759c 	.word	0x0800759c
 8006c84:	08007754 	.word	0x08007754
 8006c88:	0800775e 	.word	0x0800775e
 8006c8c:	08004c05 	.word	0x08004c05
 8006c90:	08006a13 	.word	0x08006a13
 8006c94:	0800775a 	.word	0x0800775a

08006c98 <__sread>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca0:	f000 fa9c 	bl	80071dc <_read_r>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	bfab      	itete	ge
 8006ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006caa:	89a3      	ldrhlt	r3, [r4, #12]
 8006cac:	181b      	addge	r3, r3, r0
 8006cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cb2:	bfac      	ite	ge
 8006cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cb6:	81a3      	strhlt	r3, [r4, #12]
 8006cb8:	bd10      	pop	{r4, pc}

08006cba <__swrite>:
 8006cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbe:	461f      	mov	r7, r3
 8006cc0:	898b      	ldrh	r3, [r1, #12]
 8006cc2:	05db      	lsls	r3, r3, #23
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	4616      	mov	r6, r2
 8006cca:	d505      	bpl.n	8006cd8 <__swrite+0x1e>
 8006ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f000 f9f8 	bl	80070c8 <_lseek_r>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	4628      	mov	r0, r5
 8006cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cee:	f000 b869 	b.w	8006dc4 <_write_r>

08006cf2 <__sseek>:
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfa:	f000 f9e5 	bl	80070c8 <_lseek_r>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	bf15      	itete	ne
 8006d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d0e:	81a3      	strheq	r3, [r4, #12]
 8006d10:	bf18      	it	ne
 8006d12:	81a3      	strhne	r3, [r4, #12]
 8006d14:	bd10      	pop	{r4, pc}

08006d16 <__sclose>:
 8006d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1a:	f000 b8f1 	b.w	8006f00 <_close_r>
	...

08006d20 <__swbuf_r>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	460e      	mov	r6, r1
 8006d24:	4614      	mov	r4, r2
 8006d26:	4605      	mov	r5, r0
 8006d28:	b118      	cbz	r0, 8006d32 <__swbuf_r+0x12>
 8006d2a:	6983      	ldr	r3, [r0, #24]
 8006d2c:	b90b      	cbnz	r3, 8006d32 <__swbuf_r+0x12>
 8006d2e:	f7ff fa15 	bl	800615c <__sinit>
 8006d32:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <__swbuf_r+0x98>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	d12b      	bne.n	8006d90 <__swbuf_r+0x70>
 8006d38:	686c      	ldr	r4, [r5, #4]
 8006d3a:	69a3      	ldr	r3, [r4, #24]
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	071a      	lsls	r2, r3, #28
 8006d42:	d52f      	bpl.n	8006da4 <__swbuf_r+0x84>
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	b36b      	cbz	r3, 8006da4 <__swbuf_r+0x84>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	6820      	ldr	r0, [r4, #0]
 8006d4c:	1ac0      	subs	r0, r0, r3
 8006d4e:	6963      	ldr	r3, [r4, #20]
 8006d50:	b2f6      	uxtb	r6, r6
 8006d52:	4283      	cmp	r3, r0
 8006d54:	4637      	mov	r7, r6
 8006d56:	dc04      	bgt.n	8006d62 <__swbuf_r+0x42>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f966 	bl	800702c <_fflush_r>
 8006d60:	bb30      	cbnz	r0, 8006db0 <__swbuf_r+0x90>
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	6022      	str	r2, [r4, #0]
 8006d6e:	701e      	strb	r6, [r3, #0]
 8006d70:	6963      	ldr	r3, [r4, #20]
 8006d72:	3001      	adds	r0, #1
 8006d74:	4283      	cmp	r3, r0
 8006d76:	d004      	beq.n	8006d82 <__swbuf_r+0x62>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	07db      	lsls	r3, r3, #31
 8006d7c:	d506      	bpl.n	8006d8c <__swbuf_r+0x6c>
 8006d7e:	2e0a      	cmp	r6, #10
 8006d80:	d104      	bne.n	8006d8c <__swbuf_r+0x6c>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f951 	bl	800702c <_fflush_r>
 8006d8a:	b988      	cbnz	r0, 8006db0 <__swbuf_r+0x90>
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <__swbuf_r+0x9c>)
 8006d92:	429c      	cmp	r4, r3
 8006d94:	d101      	bne.n	8006d9a <__swbuf_r+0x7a>
 8006d96:	68ac      	ldr	r4, [r5, #8]
 8006d98:	e7cf      	b.n	8006d3a <__swbuf_r+0x1a>
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <__swbuf_r+0xa0>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	bf08      	it	eq
 8006da0:	68ec      	ldreq	r4, [r5, #12]
 8006da2:	e7ca      	b.n	8006d3a <__swbuf_r+0x1a>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 f81e 	bl	8006de8 <__swsetup_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d0cb      	beq.n	8006d48 <__swbuf_r+0x28>
 8006db0:	f04f 37ff 	mov.w	r7, #4294967295
 8006db4:	e7ea      	b.n	8006d8c <__swbuf_r+0x6c>
 8006db6:	bf00      	nop
 8006db8:	080075bc 	.word	0x080075bc
 8006dbc:	080075dc 	.word	0x080075dc
 8006dc0:	0800759c 	.word	0x0800759c

08006dc4 <_write_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d07      	ldr	r5, [pc, #28]	; (8006de4 <_write_r+0x20>)
 8006dc8:	4604      	mov	r4, r0
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	602a      	str	r2, [r5, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f7fa fdfb 	bl	80019ce <_write>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_write_r+0x1e>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_write_r+0x1e>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	2000029c 	.word	0x2000029c

08006de8 <__swsetup_r>:
 8006de8:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <__swsetup_r+0xcc>)
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	681d      	ldr	r5, [r3, #0]
 8006dee:	4606      	mov	r6, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	b125      	cbz	r5, 8006dfe <__swsetup_r+0x16>
 8006df4:	69ab      	ldr	r3, [r5, #24]
 8006df6:	b913      	cbnz	r3, 8006dfe <__swsetup_r+0x16>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7ff f9af 	bl	800615c <__sinit>
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <__swsetup_r+0xd0>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d10f      	bne.n	8006e24 <__swsetup_r+0x3c>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e0c:	0719      	lsls	r1, r3, #28
 8006e0e:	d42c      	bmi.n	8006e6a <__swsetup_r+0x82>
 8006e10:	06dd      	lsls	r5, r3, #27
 8006e12:	d411      	bmi.n	8006e38 <__swsetup_r+0x50>
 8006e14:	2309      	movs	r3, #9
 8006e16:	6033      	str	r3, [r6, #0]
 8006e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	e03e      	b.n	8006ea2 <__swsetup_r+0xba>
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <__swsetup_r+0xd4>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d101      	bne.n	8006e2e <__swsetup_r+0x46>
 8006e2a:	68ac      	ldr	r4, [r5, #8]
 8006e2c:	e7eb      	b.n	8006e06 <__swsetup_r+0x1e>
 8006e2e:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <__swsetup_r+0xd8>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	bf08      	it	eq
 8006e34:	68ec      	ldreq	r4, [r5, #12]
 8006e36:	e7e6      	b.n	8006e06 <__swsetup_r+0x1e>
 8006e38:	0758      	lsls	r0, r3, #29
 8006e3a:	d512      	bpl.n	8006e62 <__swsetup_r+0x7a>
 8006e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3e:	b141      	cbz	r1, 8006e52 <__swsetup_r+0x6a>
 8006e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d002      	beq.n	8006e4e <__swsetup_r+0x66>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7fd fd5b 	bl	8004904 <_free_r>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6363      	str	r3, [r4, #52]	; 0x34
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f043 0308 	orr.w	r3, r3, #8
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	b94b      	cbnz	r3, 8006e82 <__swsetup_r+0x9a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e78:	d003      	beq.n	8006e82 <__swsetup_r+0x9a>
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f000 f95b 	bl	8007138 <__smakebuf_r>
 8006e82:	89a0      	ldrh	r0, [r4, #12]
 8006e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e88:	f010 0301 	ands.w	r3, r0, #1
 8006e8c:	d00a      	beq.n	8006ea4 <__swsetup_r+0xbc>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	6963      	ldr	r3, [r4, #20]
 8006e94:	425b      	negs	r3, r3
 8006e96:	61a3      	str	r3, [r4, #24]
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	b943      	cbnz	r3, 8006eae <__swsetup_r+0xc6>
 8006e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ea0:	d1ba      	bne.n	8006e18 <__swsetup_r+0x30>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	0781      	lsls	r1, r0, #30
 8006ea6:	bf58      	it	pl
 8006ea8:	6963      	ldrpl	r3, [r4, #20]
 8006eaa:	60a3      	str	r3, [r4, #8]
 8006eac:	e7f4      	b.n	8006e98 <__swsetup_r+0xb0>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e7f7      	b.n	8006ea2 <__swsetup_r+0xba>
 8006eb2:	bf00      	nop
 8006eb4:	2000000c 	.word	0x2000000c
 8006eb8:	080075bc 	.word	0x080075bc
 8006ebc:	080075dc 	.word	0x080075dc
 8006ec0:	0800759c 	.word	0x0800759c

08006ec4 <__assert_func>:
 8006ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <__assert_func+0x2c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4605      	mov	r5, r0
 8006ed0:	68d8      	ldr	r0, [r3, #12]
 8006ed2:	b14c      	cbz	r4, 8006ee8 <__assert_func+0x24>
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <__assert_func+0x30>)
 8006ed6:	9100      	str	r1, [sp, #0]
 8006ed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006edc:	4906      	ldr	r1, [pc, #24]	; (8006ef8 <__assert_func+0x34>)
 8006ede:	462b      	mov	r3, r5
 8006ee0:	f000 f8e0 	bl	80070a4 <fiprintf>
 8006ee4:	f000 f999 	bl	800721a <abort>
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <__assert_func+0x38>)
 8006eea:	461c      	mov	r4, r3
 8006eec:	e7f3      	b.n	8006ed6 <__assert_func+0x12>
 8006eee:	bf00      	nop
 8006ef0:	2000000c 	.word	0x2000000c
 8006ef4:	08007765 	.word	0x08007765
 8006ef8:	08007772 	.word	0x08007772
 8006efc:	080077a0 	.word	0x080077a0

08006f00 <_close_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d06      	ldr	r5, [pc, #24]	; (8006f1c <_close_r+0x1c>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f7fa fd7b 	bl	8001a06 <_close>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_close_r+0x1a>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_close_r+0x1a>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	2000029c 	.word	0x2000029c

08006f20 <__sflush_r>:
 8006f20:	898a      	ldrh	r2, [r1, #12]
 8006f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f26:	4605      	mov	r5, r0
 8006f28:	0710      	lsls	r0, r2, #28
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	d458      	bmi.n	8006fe0 <__sflush_r+0xc0>
 8006f2e:	684b      	ldr	r3, [r1, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dc05      	bgt.n	8006f40 <__sflush_r+0x20>
 8006f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dc02      	bgt.n	8006f40 <__sflush_r+0x20>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	d0f9      	beq.n	8006f3a <__sflush_r+0x1a>
 8006f46:	2300      	movs	r3, #0
 8006f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f4c:	682f      	ldr	r7, [r5, #0]
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	d032      	beq.n	8006fb8 <__sflush_r+0x98>
 8006f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	075a      	lsls	r2, r3, #29
 8006f58:	d505      	bpl.n	8006f66 <__sflush_r+0x46>
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	1ac0      	subs	r0, r0, r3
 8006f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f60:	b10b      	cbz	r3, 8006f66 <__sflush_r+0x46>
 8006f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f64:	1ac0      	subs	r0, r0, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f6c:	6a21      	ldr	r1, [r4, #32]
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b0      	blx	r6
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	d106      	bne.n	8006f86 <__sflush_r+0x66>
 8006f78:	6829      	ldr	r1, [r5, #0]
 8006f7a:	291d      	cmp	r1, #29
 8006f7c:	d82c      	bhi.n	8006fd8 <__sflush_r+0xb8>
 8006f7e:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <__sflush_r+0x108>)
 8006f80:	40ca      	lsrs	r2, r1
 8006f82:	07d6      	lsls	r6, r2, #31
 8006f84:	d528      	bpl.n	8006fd8 <__sflush_r+0xb8>
 8006f86:	2200      	movs	r2, #0
 8006f88:	6062      	str	r2, [r4, #4]
 8006f8a:	04d9      	lsls	r1, r3, #19
 8006f8c:	6922      	ldr	r2, [r4, #16]
 8006f8e:	6022      	str	r2, [r4, #0]
 8006f90:	d504      	bpl.n	8006f9c <__sflush_r+0x7c>
 8006f92:	1c42      	adds	r2, r0, #1
 8006f94:	d101      	bne.n	8006f9a <__sflush_r+0x7a>
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	b903      	cbnz	r3, 8006f9c <__sflush_r+0x7c>
 8006f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8006f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f9e:	602f      	str	r7, [r5, #0]
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	d0ca      	beq.n	8006f3a <__sflush_r+0x1a>
 8006fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	d002      	beq.n	8006fb2 <__sflush_r+0x92>
 8006fac:	4628      	mov	r0, r5
 8006fae:	f7fd fca9 	bl	8004904 <_free_r>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8006fb6:	e7c1      	b.n	8006f3c <__sflush_r+0x1c>
 8006fb8:	6a21      	ldr	r1, [r4, #32]
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b0      	blx	r6
 8006fc0:	1c41      	adds	r1, r0, #1
 8006fc2:	d1c7      	bne.n	8006f54 <__sflush_r+0x34>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0c4      	beq.n	8006f54 <__sflush_r+0x34>
 8006fca:	2b1d      	cmp	r3, #29
 8006fcc:	d001      	beq.n	8006fd2 <__sflush_r+0xb2>
 8006fce:	2b16      	cmp	r3, #22
 8006fd0:	d101      	bne.n	8006fd6 <__sflush_r+0xb6>
 8006fd2:	602f      	str	r7, [r5, #0]
 8006fd4:	e7b1      	b.n	8006f3a <__sflush_r+0x1a>
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	e7ad      	b.n	8006f3c <__sflush_r+0x1c>
 8006fe0:	690f      	ldr	r7, [r1, #16]
 8006fe2:	2f00      	cmp	r7, #0
 8006fe4:	d0a9      	beq.n	8006f3a <__sflush_r+0x1a>
 8006fe6:	0793      	lsls	r3, r2, #30
 8006fe8:	680e      	ldr	r6, [r1, #0]
 8006fea:	bf08      	it	eq
 8006fec:	694b      	ldreq	r3, [r1, #20]
 8006fee:	600f      	str	r7, [r1, #0]
 8006ff0:	bf18      	it	ne
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	eba6 0807 	sub.w	r8, r6, r7
 8006ff8:	608b      	str	r3, [r1, #8]
 8006ffa:	f1b8 0f00 	cmp.w	r8, #0
 8006ffe:	dd9c      	ble.n	8006f3a <__sflush_r+0x1a>
 8007000:	6a21      	ldr	r1, [r4, #32]
 8007002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007004:	4643      	mov	r3, r8
 8007006:	463a      	mov	r2, r7
 8007008:	4628      	mov	r0, r5
 800700a:	47b0      	blx	r6
 800700c:	2800      	cmp	r0, #0
 800700e:	dc06      	bgt.n	800701e <__sflush_r+0xfe>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e78e      	b.n	8006f3c <__sflush_r+0x1c>
 800701e:	4407      	add	r7, r0
 8007020:	eba8 0800 	sub.w	r8, r8, r0
 8007024:	e7e9      	b.n	8006ffa <__sflush_r+0xda>
 8007026:	bf00      	nop
 8007028:	20400001 	.word	0x20400001

0800702c <_fflush_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	690b      	ldr	r3, [r1, #16]
 8007030:	4605      	mov	r5, r0
 8007032:	460c      	mov	r4, r1
 8007034:	b913      	cbnz	r3, 800703c <_fflush_r+0x10>
 8007036:	2500      	movs	r5, #0
 8007038:	4628      	mov	r0, r5
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	b118      	cbz	r0, 8007046 <_fflush_r+0x1a>
 800703e:	6983      	ldr	r3, [r0, #24]
 8007040:	b90b      	cbnz	r3, 8007046 <_fflush_r+0x1a>
 8007042:	f7ff f88b 	bl	800615c <__sinit>
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <_fflush_r+0x6c>)
 8007048:	429c      	cmp	r4, r3
 800704a:	d11b      	bne.n	8007084 <_fflush_r+0x58>
 800704c:	686c      	ldr	r4, [r5, #4]
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0ef      	beq.n	8007036 <_fflush_r+0xa>
 8007056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007058:	07d0      	lsls	r0, r2, #31
 800705a:	d404      	bmi.n	8007066 <_fflush_r+0x3a>
 800705c:	0599      	lsls	r1, r3, #22
 800705e:	d402      	bmi.n	8007066 <_fflush_r+0x3a>
 8007060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007062:	f7ff f91e 	bl	80062a2 <__retarget_lock_acquire_recursive>
 8007066:	4628      	mov	r0, r5
 8007068:	4621      	mov	r1, r4
 800706a:	f7ff ff59 	bl	8006f20 <__sflush_r>
 800706e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007070:	07da      	lsls	r2, r3, #31
 8007072:	4605      	mov	r5, r0
 8007074:	d4e0      	bmi.n	8007038 <_fflush_r+0xc>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	059b      	lsls	r3, r3, #22
 800707a:	d4dd      	bmi.n	8007038 <_fflush_r+0xc>
 800707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800707e:	f7ff f911 	bl	80062a4 <__retarget_lock_release_recursive>
 8007082:	e7d9      	b.n	8007038 <_fflush_r+0xc>
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <_fflush_r+0x70>)
 8007086:	429c      	cmp	r4, r3
 8007088:	d101      	bne.n	800708e <_fflush_r+0x62>
 800708a:	68ac      	ldr	r4, [r5, #8]
 800708c:	e7df      	b.n	800704e <_fflush_r+0x22>
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <_fflush_r+0x74>)
 8007090:	429c      	cmp	r4, r3
 8007092:	bf08      	it	eq
 8007094:	68ec      	ldreq	r4, [r5, #12]
 8007096:	e7da      	b.n	800704e <_fflush_r+0x22>
 8007098:	080075bc 	.word	0x080075bc
 800709c:	080075dc 	.word	0x080075dc
 80070a0:	0800759c 	.word	0x0800759c

080070a4 <fiprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	b503      	push	{r0, r1, lr}
 80070a8:	4601      	mov	r1, r0
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	4805      	ldr	r0, [pc, #20]	; (80070c4 <fiprintf+0x20>)
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	6800      	ldr	r0, [r0, #0]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	f7ff fcbf 	bl	8006a38 <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	2000000c 	.word	0x2000000c

080070c8 <_lseek_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	; (80070e8 <_lseek_r+0x20>)
 80070cc:	4604      	mov	r4, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	4611      	mov	r1, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f7fa fcbc 	bl	8001a54 <_lseek>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_lseek_r+0x1e>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_lseek_r+0x1e>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	2000029c 	.word	0x2000029c

080070ec <__swhatbuf_r>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	460e      	mov	r6, r1
 80070f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f4:	2900      	cmp	r1, #0
 80070f6:	b096      	sub	sp, #88	; 0x58
 80070f8:	4614      	mov	r4, r2
 80070fa:	461d      	mov	r5, r3
 80070fc:	da08      	bge.n	8007110 <__swhatbuf_r+0x24>
 80070fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	061a      	lsls	r2, r3, #24
 8007108:	d410      	bmi.n	800712c <__swhatbuf_r+0x40>
 800710a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710e:	e00e      	b.n	800712e <__swhatbuf_r+0x42>
 8007110:	466a      	mov	r2, sp
 8007112:	f000 f889 	bl	8007228 <_fstat_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	dbf1      	blt.n	80070fe <__swhatbuf_r+0x12>
 800711a:	9a01      	ldr	r2, [sp, #4]
 800711c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007124:	425a      	negs	r2, r3
 8007126:	415a      	adcs	r2, r3
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	e7ee      	b.n	800710a <__swhatbuf_r+0x1e>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	2000      	movs	r0, #0
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	b016      	add	sp, #88	; 0x58
 8007134:	bd70      	pop	{r4, r5, r6, pc}
	...

08007138 <__smakebuf_r>:
 8007138:	898b      	ldrh	r3, [r1, #12]
 800713a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800713c:	079d      	lsls	r5, r3, #30
 800713e:	4606      	mov	r6, r0
 8007140:	460c      	mov	r4, r1
 8007142:	d507      	bpl.n	8007154 <__smakebuf_r+0x1c>
 8007144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	2301      	movs	r3, #1
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	b002      	add	sp, #8
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	ab01      	add	r3, sp, #4
 8007156:	466a      	mov	r2, sp
 8007158:	f7ff ffc8 	bl	80070ec <__swhatbuf_r>
 800715c:	9900      	ldr	r1, [sp, #0]
 800715e:	4605      	mov	r5, r0
 8007160:	4630      	mov	r0, r6
 8007162:	f7fd fc3b 	bl	80049dc <_malloc_r>
 8007166:	b948      	cbnz	r0, 800717c <__smakebuf_r+0x44>
 8007168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716c:	059a      	lsls	r2, r3, #22
 800716e:	d4ef      	bmi.n	8007150 <__smakebuf_r+0x18>
 8007170:	f023 0303 	bic.w	r3, r3, #3
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	e7e3      	b.n	8007144 <__smakebuf_r+0xc>
 800717c:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <__smakebuf_r+0x7c>)
 800717e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	6020      	str	r0, [r4, #0]
 8007184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	6163      	str	r3, [r4, #20]
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	6120      	str	r0, [r4, #16]
 8007192:	b15b      	cbz	r3, 80071ac <__smakebuf_r+0x74>
 8007194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f857 	bl	800724c <_isatty_r>
 800719e:	b128      	cbz	r0, 80071ac <__smakebuf_r+0x74>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	89a0      	ldrh	r0, [r4, #12]
 80071ae:	4305      	orrs	r5, r0
 80071b0:	81a5      	strh	r5, [r4, #12]
 80071b2:	e7cd      	b.n	8007150 <__smakebuf_r+0x18>
 80071b4:	080060f5 	.word	0x080060f5

080071b8 <__ascii_mbtowc>:
 80071b8:	b082      	sub	sp, #8
 80071ba:	b901      	cbnz	r1, 80071be <__ascii_mbtowc+0x6>
 80071bc:	a901      	add	r1, sp, #4
 80071be:	b142      	cbz	r2, 80071d2 <__ascii_mbtowc+0x1a>
 80071c0:	b14b      	cbz	r3, 80071d6 <__ascii_mbtowc+0x1e>
 80071c2:	7813      	ldrb	r3, [r2, #0]
 80071c4:	600b      	str	r3, [r1, #0]
 80071c6:	7812      	ldrb	r2, [r2, #0]
 80071c8:	1e10      	subs	r0, r2, #0
 80071ca:	bf18      	it	ne
 80071cc:	2001      	movne	r0, #1
 80071ce:	b002      	add	sp, #8
 80071d0:	4770      	bx	lr
 80071d2:	4610      	mov	r0, r2
 80071d4:	e7fb      	b.n	80071ce <__ascii_mbtowc+0x16>
 80071d6:	f06f 0001 	mvn.w	r0, #1
 80071da:	e7f8      	b.n	80071ce <__ascii_mbtowc+0x16>

080071dc <_read_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d07      	ldr	r5, [pc, #28]	; (80071fc <_read_r+0x20>)
 80071e0:	4604      	mov	r4, r0
 80071e2:	4608      	mov	r0, r1
 80071e4:	4611      	mov	r1, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	602a      	str	r2, [r5, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f7fa fbd2 	bl	8001994 <_read>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_read_r+0x1e>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_read_r+0x1e>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	2000029c 	.word	0x2000029c

08007200 <__ascii_wctomb>:
 8007200:	b149      	cbz	r1, 8007216 <__ascii_wctomb+0x16>
 8007202:	2aff      	cmp	r2, #255	; 0xff
 8007204:	bf85      	ittet	hi
 8007206:	238a      	movhi	r3, #138	; 0x8a
 8007208:	6003      	strhi	r3, [r0, #0]
 800720a:	700a      	strbls	r2, [r1, #0]
 800720c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007210:	bf98      	it	ls
 8007212:	2001      	movls	r0, #1
 8007214:	4770      	bx	lr
 8007216:	4608      	mov	r0, r1
 8007218:	4770      	bx	lr

0800721a <abort>:
 800721a:	b508      	push	{r3, lr}
 800721c:	2006      	movs	r0, #6
 800721e:	f000 f84d 	bl	80072bc <raise>
 8007222:	2001      	movs	r0, #1
 8007224:	f7fa fbac 	bl	8001980 <_exit>

08007228 <_fstat_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d07      	ldr	r5, [pc, #28]	; (8007248 <_fstat_r+0x20>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	f7fa fbf2 	bl	8001a1e <_fstat>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d102      	bne.n	8007244 <_fstat_r+0x1c>
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	b103      	cbz	r3, 8007244 <_fstat_r+0x1c>
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	bf00      	nop
 8007248:	2000029c 	.word	0x2000029c

0800724c <_isatty_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_isatty_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7fa fbf1 	bl	8001a3e <_isatty>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_isatty_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_isatty_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	2000029c 	.word	0x2000029c

0800726c <_raise_r>:
 800726c:	291f      	cmp	r1, #31
 800726e:	b538      	push	{r3, r4, r5, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	d904      	bls.n	8007280 <_raise_r+0x14>
 8007276:	2316      	movs	r3, #22
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007282:	b112      	cbz	r2, 800728a <_raise_r+0x1e>
 8007284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007288:	b94b      	cbnz	r3, 800729e <_raise_r+0x32>
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f830 	bl	80072f0 <_getpid_r>
 8007290:	462a      	mov	r2, r5
 8007292:	4601      	mov	r1, r0
 8007294:	4620      	mov	r0, r4
 8007296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800729a:	f000 b817 	b.w	80072cc <_kill_r>
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d00a      	beq.n	80072b8 <_raise_r+0x4c>
 80072a2:	1c59      	adds	r1, r3, #1
 80072a4:	d103      	bne.n	80072ae <_raise_r+0x42>
 80072a6:	2316      	movs	r3, #22
 80072a8:	6003      	str	r3, [r0, #0]
 80072aa:	2001      	movs	r0, #1
 80072ac:	e7e7      	b.n	800727e <_raise_r+0x12>
 80072ae:	2400      	movs	r4, #0
 80072b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072b4:	4628      	mov	r0, r5
 80072b6:	4798      	blx	r3
 80072b8:	2000      	movs	r0, #0
 80072ba:	e7e0      	b.n	800727e <_raise_r+0x12>

080072bc <raise>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <raise+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f7ff bfd3 	b.w	800726c <_raise_r>
 80072c6:	bf00      	nop
 80072c8:	2000000c 	.word	0x2000000c

080072cc <_kill_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d07      	ldr	r5, [pc, #28]	; (80072ec <_kill_r+0x20>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	f7fa fb41 	bl	8001960 <_kill>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	d102      	bne.n	80072e8 <_kill_r+0x1c>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	b103      	cbz	r3, 80072e8 <_kill_r+0x1c>
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	bf00      	nop
 80072ec:	2000029c 	.word	0x2000029c

080072f0 <_getpid_r>:
 80072f0:	f7fa bb2e 	b.w	8001950 <_getpid>

080072f4 <_init>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	bf00      	nop
 80072f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fa:	bc08      	pop	{r3}
 80072fc:	469e      	mov	lr, r3
 80072fe:	4770      	bx	lr

08007300 <_fini>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr
