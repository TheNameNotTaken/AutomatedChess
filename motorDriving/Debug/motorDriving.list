
motorDriving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08005b80  08005b80  00015b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005fdc  08005fdc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fdc  08005fdc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001dc  080061c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080061c0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006075  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b8  00000000  00000000  00026281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00027a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029197  00000000  00000000  000287b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000862b  00000000  00000000  0005194f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9b83  00000000  00000000  00059f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  00153b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005b68 	.word	0x08005b68

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08005b68 	.word	0x08005b68

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <clearDisplay>:
//	HAL_UART_Transmit (&huart3, xy, 16, 150);
//  }
  clearDisplay();//TODO delete
}

void clearDisplay(){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t clear[2] = {0x7C,0x00};
 8000bfe:	237c      	movs	r3, #124	; 0x7c
 8000c00:	80bb      	strh	r3, [r7, #4]
//	HAL_UART_Transmit (&huart3, clear, sizeof (clear), 150);
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <setMagnet>:
#define whitePort GPIOB
#define whitePin GPIO_PIN_0
#define blackPort GPIOE
#define blackPin GPIO_PIN_0

void setMagnet(int direction){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if (direction == BLACK){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10a      	bne.n	8000c34 <setMagnet+0x24>
		HAL_GPIO_WritePin(blackPort, blackPin, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2101      	movs	r1, #1
 8000c22:	4814      	ldr	r0, [pc, #80]	; (8000c74 <setMagnet+0x64>)
 8000c24:	f001 f9fc 	bl	8002020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(whitePort, whitePin, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <setMagnet+0x68>)
 8000c2e:	f001 f9f7 	bl	8002020 <HAL_GPIO_WritePin>
	}
	else if(direction == STOP){
		HAL_GPIO_WritePin(blackPort, blackPin, 0);
		HAL_GPIO_WritePin(whitePort, whitePin, 0);
	}
}
 8000c32:	e01a      	b.n	8000c6a <setMagnet+0x5a>
	else if(direction == WHITE){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10a      	bne.n	8000c50 <setMagnet+0x40>
		HAL_GPIO_WritePin(blackPort, blackPin, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <setMagnet+0x64>)
 8000c40:	f001 f9ee 	bl	8002020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(whitePort, whitePin, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2101      	movs	r1, #1
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <setMagnet+0x68>)
 8000c4a:	f001 f9e9 	bl	8002020 <HAL_GPIO_WritePin>
}
 8000c4e:	e00c      	b.n	8000c6a <setMagnet+0x5a>
	else if(direction == STOP){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d109      	bne.n	8000c6a <setMagnet+0x5a>
		HAL_GPIO_WritePin(blackPort, blackPin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <setMagnet+0x64>)
 8000c5c:	f001 f9e0 	bl	8002020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(whitePort, whitePin, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <setMagnet+0x68>)
 8000c66:	f001 f9db 	bl	8002020 <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	48001000 	.word	0x48001000
 8000c78:	48000400 	.word	0x48000400

08000c7c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 feb0 	bl	80019fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f821 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f000 f865 	bl	8000d70 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  struct coordinate coord = convertToCoord("A4");
//  coord = convertToCoord("P7");
  motorSetup();
 8000ca6:	f000 fb35 	bl	8001314 <motorSetup>
  clearDisplay();
 8000caa:	f7ff ffa5 	bl	8000bf8 <clearDisplay>
//  moveToCoord("A1");
//  moveToCoord("A8");
//  moveToCoord("H8");
//  moveToCoord("H1");
//  moveToCoord("A1");
  executeInstruction("A1H8", BLACK, QUEEN);
 8000cae:	2204      	movs	r2, #4
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <main+0x48>)
 8000cb4:	f000 fca6 	bl	8001604 <executeInstruction>

//  char* arr[16] = {"Jazib\0", "Jabibi\0","Ahmad\0"};
//  makeMenu(3, arr);
  struct coordinate location = {2140, 1805};
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <main+0x4c>)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc0:	e883 0003 	stmia.w	r3, {r0, r1}
//  moveToExactCoord(location);
  location.x=0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  location.y=0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  moveToExactCoord(location);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cd2:	f000 fc11 	bl	80014f8 <moveToExactCoord>
  uint32_t keyNum = 16;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
  while (1)
 8000cda:	e7fe      	b.n	8000cda <main+0x46>
 8000cdc:	08005b80 	.word	0x08005b80
 8000ce0:	08005b88 	.word	0x08005b88

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	; 0x58
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2244      	movs	r2, #68	; 0x44
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f962 	bl	8002fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d0a:	f001 f9c1 	bl	8002090 <HAL_PWREx_ControlVoltageScaling>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d14:	f000 faf8 	bl	8001308 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d24:	2360      	movs	r3, #96	; 0x60
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fa61 	bl	80021f8 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d3c:	f000 fae4 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fe67 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d64:	f000 fad0 	bl	8001308 <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3758      	adds	r7, #88	; 0x58
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4bb5      	ldr	r3, [pc, #724]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4ab4      	ldr	r2, [pc, #720]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4bb2      	ldr	r3, [pc, #712]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4baf      	ldr	r3, [pc, #700]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4aae      	ldr	r2, [pc, #696]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4bac      	ldr	r3, [pc, #688]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	61fb      	str	r3, [r7, #28]
 8000db4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db6:	4ba9      	ldr	r3, [pc, #676]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4aa8      	ldr	r2, [pc, #672]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000dbc:	f043 0320 	orr.w	r3, r3, #32
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4ba6      	ldr	r3, [pc, #664]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	4ba3      	ldr	r3, [pc, #652]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4aa2      	ldr	r2, [pc, #648]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4ba0      	ldr	r3, [pc, #640]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b9d      	ldr	r3, [pc, #628]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a9c      	ldr	r2, [pc, #624]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b9a      	ldr	r3, [pc, #616]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b97      	ldr	r3, [pc, #604]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a96      	ldr	r2, [pc, #600]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b94      	ldr	r3, [pc, #592]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b91      	ldr	r3, [pc, #580]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a90      	ldr	r2, [pc, #576]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b8e      	ldr	r3, [pc, #568]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b8b      	ldr	r3, [pc, #556]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a8a      	ldr	r2, [pc, #552]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b88      	ldr	r3, [pc, #544]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e46:	f001 f9c7 	bl	80021d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	211b      	movs	r1, #27
 8000e4e:	4884      	ldr	r0, [pc, #528]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000e50:	f001 f8e6 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2105      	movs	r1, #5
 8000e58:	4882      	ldr	r0, [pc, #520]	; (8001064 <MX_GPIO_Init+0x2f4>)
 8000e5a:	f001 f8e1 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e64:	4880      	ldr	r0, [pc, #512]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000e66:	f001 f8db 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_0, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f640 2101 	movw	r1, #2561	; 0xa01
 8000e70:	487e      	ldr	r0, [pc, #504]	; (800106c <MX_GPIO_Init+0x2fc>)
 8000e72:	f001 f8d5 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	21f0      	movs	r1, #240	; 0xf0
 8000e7a:	487d      	ldr	r0, [pc, #500]	; (8001070 <MX_GPIO_Init+0x300>)
 8000e7c:	f001 f8d0 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e80:	230c      	movs	r3, #12
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000e90:	230d      	movs	r3, #13
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4874      	ldr	r0, [pc, #464]	; (800106c <MX_GPIO_Init+0x2fc>)
 8000e9c:	f000 ff2e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	486b      	ldr	r0, [pc, #428]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000ebc:	f000 ff1e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ed0:	230d      	movs	r3, #13
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4863      	ldr	r0, [pc, #396]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000edc:	f000 ff0e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000ee0:	231b      	movs	r3, #27
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	485a      	ldr	r0, [pc, #360]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000ef8:	f000 ff00 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efc:	2304      	movs	r3, #4
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f00:	230b      	movs	r3, #11
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4854      	ldr	r0, [pc, #336]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000f10:	f000 fef4 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f14:	2301      	movs	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f24:	2301      	movs	r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f000 fee3 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f36:	2302      	movs	r3, #2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f000 fed6 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f50:	2308      	movs	r3, #8
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f60:	2307      	movs	r3, #7
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f000 fec5 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f72:	23f0      	movs	r3, #240	; 0xf0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f82:	2305      	movs	r3, #5
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f000 feb4 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f94:	2320      	movs	r3, #32
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482e      	ldr	r0, [pc, #184]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000fa8:	f000 fea8 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000fac:	2305      	movs	r3, #5
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4828      	ldr	r0, [pc, #160]	; (8001064 <MX_GPIO_Init+0x2f4>)
 8000fc4:	f000 fe9a 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4822      	ldr	r0, [pc, #136]	; (8001064 <MX_GPIO_Init+0x2f4>)
 8000fdc:	f000 fe8e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000fe0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481b      	ldr	r0, [pc, #108]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000ffa:	f000 fe7f 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8001014:	f000 fe72 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001018:	f44f 53ac 	mov.w	r3, #5504	; 0x1580
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800102a:	2301      	movs	r3, #1
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_GPIO_Init+0x2fc>)
 8001036:	f000 fe61 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_0;
 800103a:	f640 2301 	movw	r3, #2561	; 0xa01
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_GPIO_Init+0x2fc>)
 8001054:	f000 fe52 	bl	8001cfc <HAL_GPIO_Init>
 8001058:	e00c      	b.n	8001074 <MX_GPIO_Init+0x304>
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800
 8001064:	48000400 	.word	0x48000400
 8001068:	48001400 	.word	0x48001400
 800106c:	48001000 	.word	0x48001000
 8001070:	48000c00 	.word	0x48000c00

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	489a      	ldr	r0, [pc, #616]	; (80012f4 <MX_GPIO_Init+0x584>)
 800108a:	f000 fe37 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800108e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80010a0:	2303      	movs	r3, #3
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4892      	ldr	r0, [pc, #584]	; (80012f4 <MX_GPIO_Init+0x584>)
 80010ac:	f000 fe26 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c2:	2307      	movs	r3, #7
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	488a      	ldr	r0, [pc, #552]	; (80012f8 <MX_GPIO_Init+0x588>)
 80010ce:	f000 fe15 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80010d2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80010e4:	230d      	movs	r3, #13
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4882      	ldr	r0, [pc, #520]	; (80012f8 <MX_GPIO_Init+0x588>)
 80010f0:	f000 fe04 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001106:	230e      	movs	r3, #14
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	4879      	ldr	r0, [pc, #484]	; (80012f8 <MX_GPIO_Init+0x588>)
 8001112:	f000 fdf3 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	4874      	ldr	r0, [pc, #464]	; (80012fc <MX_GPIO_Init+0x58c>)
 800112c:	f000 fde6 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001130:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001142:	2302      	movs	r3, #2
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	486b      	ldr	r0, [pc, #428]	; (80012fc <MX_GPIO_Init+0x58c>)
 800114e:	f000 fdd5 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001152:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001164:	2308      	movs	r3, #8
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4864      	ldr	r0, [pc, #400]	; (8001300 <MX_GPIO_Init+0x590>)
 8001170:	f000 fdc4 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001184:	230d      	movs	r3, #13
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	485d      	ldr	r0, [pc, #372]	; (8001304 <MX_GPIO_Init+0x594>)
 8001190:	f000 fdb4 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011a4:	2302      	movs	r3, #2
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4855      	ldr	r0, [pc, #340]	; (8001304 <MX_GPIO_Init+0x594>)
 80011b0:	f000 fda4 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011c6:	230c      	movs	r3, #12
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	484c      	ldr	r0, [pc, #304]	; (8001304 <MX_GPIO_Init+0x594>)
 80011d2:	f000 fd93 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80011d6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011e8:	230a      	movs	r3, #10
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f000 fd81 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f000 fd73 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001226:	2309      	movs	r3, #9
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4832      	ldr	r0, [pc, #200]	; (80012fc <MX_GPIO_Init+0x58c>)
 8001232:	f000 fd63 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001236:	2304      	movs	r3, #4
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001246:	230c      	movs	r3, #12
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	482a      	ldr	r0, [pc, #168]	; (80012fc <MX_GPIO_Init+0x58c>)
 8001252:	f000 fd53 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001256:	2308      	movs	r3, #8
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <MX_GPIO_Init+0x58c>)
 8001272:	f000 fd43 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001276:	23f0      	movs	r3, #240	; 0xf0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	481b      	ldr	r0, [pc, #108]	; (80012fc <MX_GPIO_Init+0x58c>)
 800128e:	f000 fd35 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001292:	2338      	movs	r3, #56	; 0x38
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a2:	2306      	movs	r3, #6
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <MX_GPIO_Init+0x588>)
 80012ae:	f000 fd25 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_GPIO_Init+0x588>)
 80012c6:	f000 fd19 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_GPIO_Init+0x588>)
 80012e8:	f000 fd08 	bl	8001cfc <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3738      	adds	r7, #56	; 0x38
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	48001000 	.word	0x48001000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	48001800 	.word	0x48001800
 8001304:	48000800 	.word	0x48000800

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	e7fe      	b.n	8001310 <Error_Handler+0x8>
	...

08001314 <motorSetup>:
#define smallestY 1312

//X refers to larger space
struct coordinate curPosition = {0,0};

void motorSetup(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(rstBigPort, rstBig, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	2101      	movs	r1, #1
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <motorSetup+0x44>)
 800131e:	f000 fe7f 	bl	8002020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(slpBigPort, slpBig, 1);
 8001322:	2201      	movs	r2, #1
 8001324:	2108      	movs	r1, #8
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <motorSetup+0x44>)
 8001328:	f000 fe7a 	bl	8002020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2110      	movs	r1, #16
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <motorSetup+0x44>)
 8001332:	f000 fe75 	bl	8002020 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(rstSmallPort, rstSmall, 1);
 8001336:	2201      	movs	r2, #1
 8001338:	2110      	movs	r1, #16
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <motorSetup+0x48>)
 800133c:	f000 fe70 	bl	8002020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(slpSmallPort, slpSmall, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	2120      	movs	r1, #32
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <motorSetup+0x48>)
 8001346:	f000 fe6b 	bl	8002020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <motorSetup+0x48>)
 8001350:	f000 fe66 	bl	8002020 <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00

08001360 <convertToCoord>:


//Square is input of form "{letter}{number}" for example "A4"
struct coordinate convertToCoord(char* square){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	struct coordinate coord;
	coord.x = ((square[0] - 'A'))*((largestX-smallestX)/7)+smallestX;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3b41      	subs	r3, #65	; 0x41
 8001370:	f640 1275 	movw	r2, #2421	; 0x975
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	33ab      	adds	r3, #171	; 0xab
 800137a:	60bb      	str	r3, [r7, #8]
	coord.y = ((atoi(&square[1])-1))*((largestY-smallestY)/7)+smallestY;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fdd9 	bl	8002f38 <atoi>
 8001386:	4603      	mov	r3, r0
 8001388:	3b01      	subs	r3, #1
 800138a:	f240 725c 	movw	r2, #1884	; 0x75c
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8001396:	60fb      	str	r3, [r7, #12]
		if(coord.x<smallestX || coord.x>largestX || coord.y<smallestY || coord.y>largestY){
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2baa      	cmp	r3, #170	; 0xaa
 800139c:	dd0d      	ble.n	80013ba <convertToCoord+0x5a>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f244 22e0 	movw	r2, #17120	; 0x42e0
 80013a4:	4293      	cmp	r3, r2
 80013a6:	dc08      	bgt.n	80013ba <convertToCoord+0x5a>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 80013ae:	db04      	blt.n	80013ba <convertToCoord+0x5a>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f643 02a9 	movw	r2, #14505	; 0x38a9
 80013b6:	4293      	cmp	r3, r2
 80013b8:	dd06      	ble.n	80013c8 <convertToCoord+0x68>
		printf("square %s doesn't exist or handled incorrectly", square); //TODO display on board
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <convertToCoord+0x80>)
 80013be:	f002 fa6f 	bl	80038a0 <iprintf>
		exit(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f001 fdc2 	bl	8002f4c <exit>
	}
	return coord;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	461a      	mov	r2, r3
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	08005b90 	.word	0x08005b90

080013e4 <moveToCoord>:

//Square is input of form "{letter}{number}" for example "A4"
void moveToCoord(char* square){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	struct coordinate pos = convertToCoord(square);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffb4 	bl	8001360 <convertToCoord>
	int deltaX = pos.x - curPosition.x;
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <moveToCoord+0x108>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]
	int deltaY = pos.y - curPosition.y;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <moveToCoord+0x108>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	61bb      	str	r3, [r7, #24]
	curPosition.x += deltaX;
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <moveToCoord+0x108>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	4a35      	ldr	r2, [pc, #212]	; (80014ec <moveToCoord+0x108>)
 8001416:	6013      	str	r3, [r2, #0]
	curPosition.y += deltaY;
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <moveToCoord+0x108>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	4413      	add	r3, r2
 8001420:	4a32      	ldr	r2, [pc, #200]	; (80014ec <moveToCoord+0x108>)
 8001422:	6053      	str	r3, [r2, #4]
	int counter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

	//Update direction moving
	if(deltaX < 0){
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da08      	bge.n	8001440 <moveToCoord+0x5c>
		HAL_GPIO_WritePin(dirBigPort, dirBig, 1);
 800142e:	2201      	movs	r2, #1
 8001430:	2110      	movs	r1, #16
 8001432:	482f      	ldr	r0, [pc, #188]	; (80014f0 <moveToCoord+0x10c>)
 8001434:	f000 fdf4 	bl	8002020 <HAL_GPIO_WritePin>
		deltaX = deltaX*-1;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	425b      	negs	r3, r3
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e004      	b.n	800144a <moveToCoord+0x66>
	}
	else{
		HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <moveToCoord+0x10c>)
 8001446:	f000 fdeb 	bl	8002020 <HAL_GPIO_WritePin>
	}
	if(deltaY < 0){
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da08      	bge.n	8001462 <moveToCoord+0x7e>
		HAL_GPIO_WritePin(dirSmallPort, dirSmall, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	4827      	ldr	r0, [pc, #156]	; (80014f4 <moveToCoord+0x110>)
 8001456:	f000 fde3 	bl	8002020 <HAL_GPIO_WritePin>
		deltaY = deltaY*-1;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	425b      	negs	r3, r3
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	e039      	b.n	80014d6 <moveToCoord+0xf2>
	}
	else{
		HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	4823      	ldr	r0, [pc, #140]	; (80014f4 <moveToCoord+0x110>)
 8001468:	f000 fdda 	bl	8002020 <HAL_GPIO_WritePin>
	}


	//Move according to deltas
	while(deltaX > 0 || deltaY > 0){
 800146c:	e033      	b.n	80014d6 <moveToCoord+0xf2>
		if(deltaX > 0){
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd04      	ble.n	800147e <moveToCoord+0x9a>
			HAL_GPIO_WritePin(stepBigPort, stepBig, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	2102      	movs	r1, #2
 8001478:	481d      	ldr	r0, [pc, #116]	; (80014f0 <moveToCoord+0x10c>)
 800147a:	f000 fdd1 	bl	8002020 <HAL_GPIO_WritePin>
		}
		if(deltaY > 0){
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dd0c      	ble.n	800149e <moveToCoord+0xba>
			if(counter == 5) counter = 0;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d101      	bne.n	800148e <moveToCoord+0xaa>
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(stepSmallPort, stepSmall, 1);
 800148e:	2201      	movs	r2, #1
 8001490:	2140      	movs	r1, #64	; 0x40
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <moveToCoord+0x110>)
 8001494:	f000 fdc4 	bl	8002020 <HAL_GPIO_WritePin>
			counter++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
		}
		HAL_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 fb22 	bl	8001ae8 <HAL_Delay>
		if(deltaX > 0){
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dd07      	ble.n	80014ba <moveToCoord+0xd6>
			HAL_GPIO_WritePin(stepBigPort, stepBig, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <moveToCoord+0x10c>)
 80014b0:	f000 fdb6 	bl	8002020 <HAL_GPIO_WritePin>
			deltaX--;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
		}
		if(deltaY > 0 && counter != 5){
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dd0a      	ble.n	80014d6 <moveToCoord+0xf2>
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d007      	beq.n	80014d6 <moveToCoord+0xf2>
			HAL_GPIO_WritePin(stepSmallPort, stepSmall, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <moveToCoord+0x110>)
 80014cc:	f000 fda8 	bl	8002020 <HAL_GPIO_WritePin>
			deltaY--;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
	while(deltaX > 0 || deltaY > 0){
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dcc8      	bgt.n	800146e <moveToCoord+0x8a>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dcc5      	bgt.n	800146e <moveToCoord+0x8a>
		}
	}
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001f8 	.word	0x200001f8
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000c00 	.word	0x48000c00

080014f8 <moveToExactCoord>:


void moveToExactCoord(struct coordinate pos){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	463b      	mov	r3, r7
 8001500:	e883 0003 	stmia.w	r3, {r0, r1}
	int deltaX = pos.x - curPosition.x;
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <moveToExactCoord+0x100>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
	int deltaY = pos.y - curPosition.y;
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <moveToExactCoord+0x100>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	613b      	str	r3, [r7, #16]
	curPosition.x += deltaX;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <moveToExactCoord+0x100>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <moveToExactCoord+0x100>)
 8001522:	6013      	str	r3, [r2, #0]
	curPosition.y += deltaY;
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <moveToExactCoord+0x100>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <moveToExactCoord+0x100>)
 800152e:	6053      	str	r3, [r2, #4]
	int counter = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

	//Update direction moving
	if(deltaX < 0){
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da08      	bge.n	800154c <moveToExactCoord+0x54>
		HAL_GPIO_WritePin(dirBigPort, dirBig, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	2110      	movs	r1, #16
 800153e:	482f      	ldr	r0, [pc, #188]	; (80015fc <moveToExactCoord+0x104>)
 8001540:	f000 fd6e 	bl	8002020 <HAL_GPIO_WritePin>
		deltaX = deltaX*-1;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	425b      	negs	r3, r3
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e004      	b.n	8001556 <moveToExactCoord+0x5e>
	}
	else{
		HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	482a      	ldr	r0, [pc, #168]	; (80015fc <moveToExactCoord+0x104>)
 8001552:	f000 fd65 	bl	8002020 <HAL_GPIO_WritePin>
	}
	if(deltaY < 0){
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da08      	bge.n	800156e <moveToExactCoord+0x76>
		HAL_GPIO_WritePin(dirSmallPort, dirSmall, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	4827      	ldr	r0, [pc, #156]	; (8001600 <moveToExactCoord+0x108>)
 8001562:	f000 fd5d 	bl	8002020 <HAL_GPIO_WritePin>
		deltaY = deltaY*-1;
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	425b      	negs	r3, r3
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	e039      	b.n	80015e2 <moveToExactCoord+0xea>
	}
	else{
		HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	4823      	ldr	r0, [pc, #140]	; (8001600 <moveToExactCoord+0x108>)
 8001574:	f000 fd54 	bl	8002020 <HAL_GPIO_WritePin>
	}


	//Move according to deltas
	while(deltaX > 0 || deltaY > 0){
 8001578:	e033      	b.n	80015e2 <moveToExactCoord+0xea>
		if(deltaX > 0){
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd04      	ble.n	800158a <moveToExactCoord+0x92>
			HAL_GPIO_WritePin(stepBigPort, stepBig, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	2102      	movs	r1, #2
 8001584:	481d      	ldr	r0, [pc, #116]	; (80015fc <moveToExactCoord+0x104>)
 8001586:	f000 fd4b 	bl	8002020 <HAL_GPIO_WritePin>
		}
		if(deltaY > 0){
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	dd0c      	ble.n	80015aa <moveToExactCoord+0xb2>
			if(counter == 5) counter = 0;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d101      	bne.n	800159a <moveToExactCoord+0xa2>
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(stepSmallPort, stepSmall, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <moveToExactCoord+0x108>)
 80015a0:	f000 fd3e 	bl	8002020 <HAL_GPIO_WritePin>
			counter++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
		}
		HAL_Delay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 fa9c 	bl	8001ae8 <HAL_Delay>
		if(deltaX > 0){
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dd07      	ble.n	80015c6 <moveToExactCoord+0xce>
			HAL_GPIO_WritePin(stepBigPort, stepBig, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <moveToExactCoord+0x104>)
 80015bc:	f000 fd30 	bl	8002020 <HAL_GPIO_WritePin>
			deltaX--;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
		}
		if(deltaY > 0 && counter != 5){
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd0a      	ble.n	80015e2 <moveToExactCoord+0xea>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d007      	beq.n	80015e2 <moveToExactCoord+0xea>
			HAL_GPIO_WritePin(stepSmallPort, stepSmall, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <moveToExactCoord+0x108>)
 80015d8:	f000 fd22 	bl	8002020 <HAL_GPIO_WritePin>
			deltaY--;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	3b01      	subs	r3, #1
 80015e0:	613b      	str	r3, [r7, #16]
	while(deltaX > 0 || deltaY > 0){
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	dcc8      	bgt.n	800157a <moveToExactCoord+0x82>
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dcc5      	bgt.n	800157a <moveToExactCoord+0x82>
		}
	}
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200001f8 	.word	0x200001f8
 80015fc:	48000800 	.word	0x48000800
 8001600:	48000c00 	.word	0x48000c00

08001604 <executeInstruction>:

// ASSUMES MOVES ARE VALID ALREADY
// move come in the form of two squares, ex "e2e4"
// color is an enum from magnetController BLACK, WHITE, or STOP
// piece is an enum from motorController PAWN ROOK KNIGHT BISHOP QUEEN or KING
void executeInstruction(char* move, int color, int piece){
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	setMagnet(STOP);
 8001610:	2002      	movs	r0, #2
 8001612:	f7ff fafd 	bl	8000c10 <setMagnet>
	char start[3];
	char goal[3];
	char curSquare[3];

	strncpy(start, move, 2);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	2202      	movs	r2, #2
 800161c:	68f9      	ldr	r1, [r7, #12]
 800161e:	4618      	mov	r0, r3
 8001620:	f002 f956 	bl	80038d0 <strncpy>
	start[2] = '\0';
 8001624:	2300      	movs	r3, #0
 8001626:	77bb      	strb	r3, [r7, #30]
	strncpy(goal, move+2, 2);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1c99      	adds	r1, r3, #2
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2202      	movs	r2, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f94c 	bl	80038d0 <strncpy>
	goal[2] = '\0';
 8001638:	2300      	movs	r3, #0
 800163a:	76bb      	strb	r3, [r7, #26]
	strncpy(curSquare, start, 2);
 800163c:	f107 011c 	add.w	r1, r7, #28
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2202      	movs	r2, #2
 8001646:	4618      	mov	r0, r3
 8001648:	f002 f942 	bl	80038d0 <strncpy>
	curSquare[2] = '\0';
 800164c:	2300      	movs	r3, #0
 800164e:	75bb      	strb	r3, [r7, #22]

	moveToCoord(start);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fec5 	bl	80013e4 <moveToCoord>

	setMagnet(color);
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f7ff fad8 	bl	8000c10 <setMagnet>

	if(piece == KNIGHT){
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d169      	bne.n	800173a <executeInstruction+0x136>
		//TODO integrate with display
		int xDelta = goal[0]-start[0];
 8001666:	7e3b      	ldrb	r3, [r7, #24]
 8001668:	461a      	mov	r2, r3
 800166a:	7f3b      	ldrb	r3, [r7, #28]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
		int yDelta = goal[1]-start[1];
 8001670:	7e7b      	ldrb	r3, [r7, #25]
 8001672:	461a      	mov	r2, r3
 8001674:	7f7b      	ldrb	r3, [r7, #29]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	623b      	str	r3, [r7, #32]
		if(abs(xDelta)>abs(yDelta)){
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001680:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	2b00      	cmp	r3, #0
 8001688:	bfb8      	it	lt
 800168a:	425b      	neglt	r3, r3
 800168c:	429a      	cmp	r2, r3
 800168e:	dd16      	ble.n	80016be <executeInstruction+0xba>
			curSquare[0] += xDelta;
 8001690:	7d3a      	ldrb	r2, [r7, #20]
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4413      	add	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	753b      	strb	r3, [r7, #20]
			moveToCoord(curSquare);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fe9f 	bl	80013e4 <moveToCoord>
			curSquare[1] += yDelta;
 80016a6:	7d7a      	ldrb	r2, [r7, #21]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	757b      	strb	r3, [r7, #21]
			moveToCoord(curSquare);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe94 	bl	80013e4 <moveToCoord>
 80016bc:	e048      	b.n	8001750 <executeInstruction+0x14c>
		}
		else{
			curSquare[1] += yDelta;
 80016be:	7d7a      	ldrb	r2, [r7, #21]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	757b      	strb	r3, [r7, #21]
			moveToCoord(curSquare);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fe88 	bl	80013e4 <moveToCoord>
			curSquare[0] += xDelta;
 80016d4:	7d3a      	ldrb	r2, [r7, #20]
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	753b      	strb	r3, [r7, #20]
			moveToCoord(curSquare);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe7d 	bl	80013e4 <moveToCoord>
 80016ea:	e031      	b.n	8001750 <executeInstruction+0x14c>
		}
	}
	else{
		while(strcmp(curSquare, goal) != 0){
			if(curSquare[0]!=goal[0]){
 80016ec:	7d3a      	ldrb	r2, [r7, #20]
 80016ee:	7e3b      	ldrb	r3, [r7, #24]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d00c      	beq.n	800170e <executeInstruction+0x10a>
				curSquare[0] += (goal[0]-curSquare[0] > 0) ? 1:-1;
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	7e3a      	ldrb	r2, [r7, #24]
 80016f8:	4611      	mov	r1, r2
 80016fa:	7d3a      	ldrb	r2, [r7, #20]
 80016fc:	1a8a      	subs	r2, r1, r2
 80016fe:	2a00      	cmp	r2, #0
 8001700:	dd01      	ble.n	8001706 <executeInstruction+0x102>
 8001702:	2201      	movs	r2, #1
 8001704:	e000      	b.n	8001708 <executeInstruction+0x104>
 8001706:	22ff      	movs	r2, #255	; 0xff
 8001708:	4413      	add	r3, r2
 800170a:	b2db      	uxtb	r3, r3
 800170c:	753b      	strb	r3, [r7, #20]
			}
			if(curSquare[1]!=goal[1]){
 800170e:	7d7a      	ldrb	r2, [r7, #21]
 8001710:	7e7b      	ldrb	r3, [r7, #25]
 8001712:	429a      	cmp	r2, r3
 8001714:	d00c      	beq.n	8001730 <executeInstruction+0x12c>
				curSquare[1] += (goal[1]-curSquare[1] > 0) ? 1:-1;
 8001716:	7d7b      	ldrb	r3, [r7, #21]
 8001718:	7e7a      	ldrb	r2, [r7, #25]
 800171a:	4611      	mov	r1, r2
 800171c:	7d7a      	ldrb	r2, [r7, #21]
 800171e:	1a8a      	subs	r2, r1, r2
 8001720:	2a00      	cmp	r2, #0
 8001722:	dd01      	ble.n	8001728 <executeInstruction+0x124>
 8001724:	2201      	movs	r2, #1
 8001726:	e000      	b.n	800172a <executeInstruction+0x126>
 8001728:	22ff      	movs	r2, #255	; 0xff
 800172a:	4413      	add	r3, r2
 800172c:	b2db      	uxtb	r3, r3
 800172e:	757b      	strb	r3, [r7, #21]
			}
			moveToCoord(curSquare);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe55 	bl	80013e4 <moveToCoord>
		while(strcmp(curSquare, goal) != 0){
 800173a:	f107 0218 	add.w	r2, r7, #24
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fd5b 	bl	8000200 <strcmp>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1cd      	bne.n	80016ec <executeInstruction+0xe8>
		}
	}
	setMagnet(STOP);
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff fa5d 	bl	8000c10 <setMagnet>
}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_MspInit+0x44>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_MspInit+0x44>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_MspInit+0x44>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_MspInit+0x44>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f958 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001816:	f001 fb93 	bl	8002f40 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
	return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
	while (1) {}		/* Make sure we hang here */
 800183e:	e7fe      	b.n	800183e <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001852:	f3af 8000 	nop.w
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
	}

return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f9f1 	bl	8000c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
	}
	return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018da:	605a      	str	r2, [r3, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_isatty>:

int _isatty(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f001 faf8 	bl	8002f40 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200a0000 	.word	0x200a0000
 800197c:	00000400 	.word	0x00000400
 8001980:	20000200 	.word	0x20000200
 8001984:	20000218 	.word	0x20000218

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	; (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f001 facb 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff f959 	bl	8000c94 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019f0:	08005fe4 	.word	0x08005fe4
  ldr r2, =_sbss
 80019f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019f8:	20000218 	.word	0x20000218

080019fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_IRQHandler>

080019fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f943 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f80e 	bl	8001a30 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e001      	b.n	8001a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a20:	f7ff fe9e 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_InitTick+0x70>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f941 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d809      	bhi.n	8001a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f919 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_InitTick+0x74>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e004      	b.n	8001a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e001      	b.n	8001a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000204 	.word	0x20000204

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000204 	.word	0x20000204

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff47 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff5c 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffb0 	bl	8001c50 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e166      	b.n	8001fda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8158 	beq.w	8001fd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x40>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80b2 	beq.w	8001fd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	4a60      	ldr	r2, [pc, #384]	; (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e88:	4a5c      	ldr	r2, [pc, #368]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eb2:	d02b      	beq.n	8001f0c <HAL_GPIO_Init+0x210>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d025      	beq.n	8001f08 <HAL_GPIO_Init+0x20c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_GPIO_Init+0x308>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01f      	beq.n	8001f04 <HAL_GPIO_Init+0x208>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d019      	beq.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_GPIO_Init+0x310>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x200>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4e      	ldr	r2, [pc, #312]	; (8002010 <HAL_GPIO_Init+0x314>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1fc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <HAL_GPIO_Init+0x318>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_GPIO_Init+0x31c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1f4>
 8001eec:	2307      	movs	r3, #7
 8001eee:	e00e      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	e00c      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	e00a      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef8:	2305      	movs	r3, #5
 8001efa:	e008      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e004      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	f002 0203 	and.w	r2, r2, #3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4093      	lsls	r3, r2
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f1e:	4937      	ldr	r1, [pc, #220]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_GPIO_Init+0x320>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f50:	4a32      	ldr	r2, [pc, #200]	; (800201c <HAL_GPIO_Init+0x320>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_GPIO_Init+0x320>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7a:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_GPIO_Init+0x320>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_GPIO_Init+0x320>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <HAL_GPIO_Init+0x320>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_GPIO_Init+0x320>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_GPIO_Init+0x320>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f ae91 	bne.w	8001d0c <HAL_GPIO_Init+0x10>
  }
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000
 8002000:	48000400 	.word	0x48000400
 8002004:	48000800 	.word	0x48000800
 8002008:	48000c00 	.word	0x48000c00
 800200c:	48001000 	.word	0x48001000
 8002010:	48001400 	.word	0x48001400
 8002014:	48001800 	.word	0x48001800
 8002018:	48001c00 	.word	0x48001c00
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800203c:	e002      	b.n	8002044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	d102      	bne.n	8002068 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002066:	e00b      	b.n	8002080 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_PWREx_GetVoltageRange+0x3c>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002076:	d102      	bne.n	800207e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207c:	e000      	b.n	8002080 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800207e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40007000 	.word	0x40007000

08002090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d141      	bne.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d131      	bne.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020b2:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020bc:	4b43      	ldr	r3, [pc, #268]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c4:	4a41      	ldr	r2, [pc, #260]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020cc:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2232      	movs	r2, #50	; 0x32
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	0c9b      	lsrs	r3, r3, #18
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e2:	e002      	b.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f6:	d102      	bne.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f2      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fe:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210a:	d158      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e057      	b.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002116:	4a2d      	ldr	r2, [pc, #180]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800211c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002120:	e04d      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002128:	d141      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d131      	bne.n	800219c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2232      	movs	r2, #50	; 0x32
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216e:	e002      	b.n	8002176 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3b01      	subs	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002182:	d102      	bne.n	800218a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f2      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d112      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e011      	b.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021ac:	e007      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40007000 	.word	0x40007000
 80021d0:	20000000 	.word	0x20000000
 80021d4:	431bde83 	.word	0x431bde83

080021d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e6:	6053      	str	r3, [r2, #4]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f000 bc08 	b.w	8002a1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220c:	4b96      	ldr	r3, [pc, #600]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002216:	4b94      	ldr	r3, [pc, #592]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80e4 	beq.w	80023f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_RCC_OscConfig+0x4c>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	f040 808b 	bne.w	8002352 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 8087 	bne.w	8002352 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002244:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x64>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e3df      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_RCC_OscConfig+0x7e>
 800226c:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002274:	e005      	b.n	8002282 <HAL_RCC_OscConfig+0x8a>
 8002276:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002282:	4293      	cmp	r3, r2
 8002284:	d223      	bcs.n	80022ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fd94 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e3c0      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229a:	4b73      	ldr	r3, [pc, #460]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a72      	ldr	r2, [pc, #456]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	496d      	ldr	r1, [pc, #436]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b8:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	4968      	ldr	r1, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
 80022cc:	e025      	b.n	800231a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4960      	ldr	r1, [pc, #384]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ec:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	495b      	ldr	r1, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fd54 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e380      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231a:	f000 fcc1 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	4950      	ldr	r1, [pc, #320]	; (800246c <HAL_RCC_OscConfig+0x274>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_RCC_OscConfig+0x278>)
 8002338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800233a:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_RCC_OscConfig+0x27c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fb76 	bl	8001a30 <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d052      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	e364      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002366:	f7ff fbb3 	bl	8001ad0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236e:	f7ff fbaf 	bl	8001ad0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e34d      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a35      	ldr	r2, [pc, #212]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4930      	ldr	r1, [pc, #192]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023aa:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	492b      	ldr	r1, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	e01a      	b.n	80023f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fb80 	bl	8001ad0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d4:	f7ff fb7c 	bl	8001ad0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e31a      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1dc>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d073      	beq.n	80024ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d005      	beq.n	8002414 <HAL_RCC_OscConfig+0x21c>
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d10e      	bne.n	800242c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d063      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d15f      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e2f7      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x24c>
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e025      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d114      	bne.n	8002478 <HAL_RCC_OscConfig+0x280>
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a02      	ldr	r2, [pc, #8]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002468:	40021000 	.word	0x40021000
 800246c:	08005bc0 	.word	0x08005bc0
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004
 8002478:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a9f      	ldr	r2, [pc, #636]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b9d      	ldr	r3, [pc, #628]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a9c      	ldr	r2, [pc, #624]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff fb1a 	bl	8001ad0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff fb16 	bl	8001ad0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e2b4      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2a8>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb06 	bl	8001ad0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fb02 	bl	8001ad0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e2a0      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d060      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x310>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d119      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x328>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e27d      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4973      	ldr	r1, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253e:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff fac1 	bl	8001ad0 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff fabd 	bl	8001ad0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e25b      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	495f      	ldr	r1, [pc, #380]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff fa9d 	bl	8001ad0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff fa99 	bl	8001ad0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e237      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	4a4a      	ldr	r2, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff fa78 	bl	8001ad0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fa74 	bl	8001ad0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e212      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x3ec>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff fa5b 	bl	8001ad0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff fa57 	bl	8001ad0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1f5      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a6 	beq.w	8002798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7ff fa1e 	bl	8001ad0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7ff fa1a 	bl	8001ad0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1b8      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ce:	e029      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d115      	bne.n	8002704 <HAL_RCC_OscConfig+0x50c>
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	4b9d      	ldr	r3, [pc, #628]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a9c      	ldr	r2, [pc, #624]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002714:	4b99      	ldr	r3, [pc, #612]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a98      	ldr	r2, [pc, #608]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d016      	beq.n	800275a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff f9d0 	bl	8001ad0 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7ff f9cc 	bl	8001ad0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e168      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b8c      	ldr	r3, [pc, #560]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ed      	beq.n	8002734 <HAL_RCC_OscConfig+0x53c>
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7ff f9b9 	bl	8001ad0 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff f9b5 	bl	8001ad0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e151      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	4b80      	ldr	r3, [pc, #512]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ed      	bne.n	8002762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a7a      	ldr	r2, [pc, #488]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03c      	beq.n	800281e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ac:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80027ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027b2:	4a72      	ldr	r2, [pc, #456]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff f988 	bl	8001ad0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c4:	f7ff f984 	bl	8001ad0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e122      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d6:	4b69      	ldr	r3, [pc, #420]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80027d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ef      	beq.n	80027c4 <HAL_RCC_OscConfig+0x5cc>
 80027e4:	e01b      	b.n	800281e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80027e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ec:	4a63      	ldr	r2, [pc, #396]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff f96b 	bl	8001ad0 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fe:	f7ff f967 	bl	8001ad0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e105      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002810:	4b5a      	ldr	r3, [pc, #360]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ef      	bne.n	80027fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80f9 	beq.w	8002a1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	2b02      	cmp	r3, #2
 800282e:	f040 80cf 	bne.w	80029d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002832:	4b52      	ldr	r3, [pc, #328]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0203 	and.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	429a      	cmp	r2, r3
 8002844:	d12c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	3b01      	subs	r3, #1
 8002852:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d123      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d11b      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d113      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d071      	beq.n	8002984 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d068      	beq.n	8002978 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a6:	4b35      	ldr	r3, [pc, #212]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0ac      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2d      	ldr	r2, [pc, #180]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ce:	f7ff f8ff 	bl	8001ad0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d6:	f7ff f8fb 	bl	8001ad0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e099      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x784>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <HAL_RCC_OscConfig+0x788>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002904:	3a01      	subs	r2, #1
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800290e:	0212      	lsls	r2, r2, #8
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0552      	lsls	r2, r2, #21
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002922:	0852      	lsrs	r2, r2, #1
 8002924:	3a01      	subs	r2, #1
 8002926:	0652      	lsls	r2, r2, #25
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800292e:	06d2      	lsls	r2, r2, #27
 8002930:	430a      	orrs	r2, r1
 8002932:	4912      	ldr	r1, [pc, #72]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002934:	4313      	orrs	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_RCC_OscConfig+0x784>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a0c      	ldr	r2, [pc, #48]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002950:	f7ff f8be 	bl	8001ad0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7ff f8ba 	bl	8001ad0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e058      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002976:	e050      	b.n	8002a1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04f      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
 800297c:	40021000 	.word	0x40021000
 8002980:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d144      	bne.n	8002a1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a8:	f7ff f892 	bl	8001ad0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff f88e 	bl	8001ad0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e02c      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x7b8>
 80029ce:	e024      	b.n	8002a1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d01f      	beq.n	8002a16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7ff f875 	bl	8001ad0 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff f871 	bl	8001ad0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e00f      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4905      	ldr	r1, [pc, #20]	; (8002a24 <HAL_RCC_OscConfig+0x82c>)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x830>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e001      	b.n	8002a1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	feeefffc 	.word	0xfeeefffc

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e11d      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	498b      	ldr	r1, [pc, #556]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e105      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b81      	ldr	r3, [pc, #516]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d908      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b7e      	ldr	r3, [pc, #504]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	497b      	ldr	r1, [pc, #492]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d079      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d11e      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	4b75      	ldr	r3, [pc, #468]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0dc      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ac6:	f000 f9d1 	bl	8002e6c <RCC_GetSysClockFreqFromPLLSource>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4a70      	ldr	r2, [pc, #448]	; (8002c90 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d946      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ad2:	4b6e      	ldr	r3, [pc, #440]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d140      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ade:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae6:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e035      	b.n	8002b60 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afc:	4b63      	ldr	r3, [pc, #396]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d115      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b9      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0ad      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0a5      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b34:	f000 f8b4 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d90f      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b40:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b54:	4a4d      	ldr	r2, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b60:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 0203 	bic.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4947      	ldr	r1, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b72:	f7fe ffad 	bl	8001ad0 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7a:	f7fe ffa9 	bl	8001ad0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e077      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b90:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 020c 	and.w	r2, r3, #12
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d1eb      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ba8:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d208      	bcs.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	492b      	ldr	r1, [pc, #172]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d210      	bcs.n	8002c12 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 020f 	bic.w	r2, r3, #15
 8002bf8:	4923      	ldr	r1, [pc, #140]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e036      	b.n	8002c80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4918      	ldr	r1, [pc, #96]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4910      	ldr	r1, [pc, #64]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c50:	f000 f826 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	490c      	ldr	r1, [pc, #48]	; (8002c94 <HAL_RCC_ClockConfig+0x268>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x26c>)
 8002c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fedb 	bl	8001a30 <HAL_InitTick>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	04c4b400 	.word	0x04c4b400
 8002c94:	08005bc0 	.word	0x08005bc0
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d11e      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ce0:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d102      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e004      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d134      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d003      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0xac>
 8002d44:	e005      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d48:	617b      	str	r3, [r7, #20]
      break;
 8002d4a:	e005      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d4e:	617b      	str	r3, [r7, #20]
      break;
 8002d50:	e002      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	617b      	str	r3, [r7, #20]
      break;
 8002d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3301      	adds	r3, #1
 8002d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	fb03 f202 	mul.w	r2, r3, r2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	0e5b      	lsrs	r3, r3, #25
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d98:	69bb      	ldr	r3, [r7, #24]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08005bd0 	.word	0x08005bd0
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	007a1200 	.word	0x007a1200

08002db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd0:	f7ff f93e 	bl	8002050 <HAL_PWREx_GetVoltageRange>
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	e014      	b.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	; 0x58
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f92e 	bl	8002050 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d10b      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d913      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2ba0      	cmp	r3, #160	; 0xa0
 8002e14:	d902      	bls.n	8002e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e16:	2302      	movs	r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e00d      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e00a      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b7f      	cmp	r3, #127	; 0x7f
 8002e26:	d902      	bls.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e28:	2302      	movs	r3, #2
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	e004      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b70      	cmp	r3, #112	; 0x70
 8002e32:	d101      	bne.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 020f 	bic.w	r2, r3, #15
 8002e40:	4909      	ldr	r1, [pc, #36]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40022000 	.word	0x40022000

08002e6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d00b      	beq.n	8002e9a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d825      	bhi.n	8002ed4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d008      	beq.n	8002ea0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d11f      	bne.n	8002ed4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e96:	613b      	str	r3, [r7, #16]
    break;
 8002e98:	e01f      	b.n	8002eda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e9a:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e9c:	613b      	str	r3, [r7, #16]
    break;
 8002e9e:	e01c      	b.n	8002eda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ea0:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d107      	bne.n	8002ebc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e005      	b.n	8002ec8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	613b      	str	r3, [r7, #16]
    break;
 8002ed2:	e002      	b.n	8002eda <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
    break;
 8002ed8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	fb03 f202 	mul.w	r2, r3, r2
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0e5b      	lsrs	r3, r3, #25
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f1a:	683b      	ldr	r3, [r7, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	00f42400 	.word	0x00f42400
 8002f30:	007a1200 	.word	0x007a1200
 8002f34:	08005bd0 	.word	0x08005bd0

08002f38 <atoi>:
 8002f38:	220a      	movs	r2, #10
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f000 bd5e 	b.w	80039fc <strtol>

08002f40 <__errno>:
 8002f40:	4b01      	ldr	r3, [pc, #4]	; (8002f48 <__errno+0x8>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <exit>:
 8002f4c:	b508      	push	{r3, lr}
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <exit+0x20>)
 8002f50:	4604      	mov	r4, r0
 8002f52:	b113      	cbz	r3, 8002f5a <exit+0xe>
 8002f54:	2100      	movs	r1, #0
 8002f56:	f3af 8000 	nop.w
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <exit+0x24>)
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f60:	b103      	cbz	r3, 8002f64 <exit+0x18>
 8002f62:	4798      	blx	r3
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7fe fc61 	bl	800182c <_exit>
 8002f6a:	bf00      	nop
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	08005c00 	.word	0x08005c00

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	4d0d      	ldr	r5, [pc, #52]	; (8002fac <__libc_init_array+0x38>)
 8002f78:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	2600      	movs	r6, #0
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	4d0b      	ldr	r5, [pc, #44]	; (8002fb4 <__libc_init_array+0x40>)
 8002f86:	4c0c      	ldr	r4, [pc, #48]	; (8002fb8 <__libc_init_array+0x44>)
 8002f88:	f002 fdee 	bl	8005b68 <_init>
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	2600      	movs	r6, #0
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08005fdc 	.word	0x08005fdc
 8002fb0:	08005fdc 	.word	0x08005fdc
 8002fb4:	08005fdc 	.word	0x08005fdc
 8002fb8:	08005fe0 	.word	0x08005fe0

08002fbc <memset>:
 8002fbc:	4402      	add	r2, r0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <__cvt>:
 8002fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	ec55 4b10 	vmov	r4, r5, d0
 8002fd4:	2d00      	cmp	r5, #0
 8002fd6:	460e      	mov	r6, r1
 8002fd8:	4619      	mov	r1, r3
 8002fda:	462b      	mov	r3, r5
 8002fdc:	bfbb      	ittet	lt
 8002fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002fe2:	461d      	movlt	r5, r3
 8002fe4:	2300      	movge	r3, #0
 8002fe6:	232d      	movlt	r3, #45	; 0x2d
 8002fe8:	700b      	strb	r3, [r1, #0]
 8002fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002ff0:	4691      	mov	r9, r2
 8002ff2:	f023 0820 	bic.w	r8, r3, #32
 8002ff6:	bfbc      	itt	lt
 8002ff8:	4622      	movlt	r2, r4
 8002ffa:	4614      	movlt	r4, r2
 8002ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003000:	d005      	beq.n	800300e <__cvt+0x42>
 8003002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003006:	d100      	bne.n	800300a <__cvt+0x3e>
 8003008:	3601      	adds	r6, #1
 800300a:	2102      	movs	r1, #2
 800300c:	e000      	b.n	8003010 <__cvt+0x44>
 800300e:	2103      	movs	r1, #3
 8003010:	ab03      	add	r3, sp, #12
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	ab02      	add	r3, sp, #8
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	ec45 4b10 	vmov	d0, r4, r5
 800301c:	4653      	mov	r3, sl
 800301e:	4632      	mov	r2, r6
 8003020:	f000 fd82 	bl	8003b28 <_dtoa_r>
 8003024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003028:	4607      	mov	r7, r0
 800302a:	d102      	bne.n	8003032 <__cvt+0x66>
 800302c:	f019 0f01 	tst.w	r9, #1
 8003030:	d022      	beq.n	8003078 <__cvt+0xac>
 8003032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003036:	eb07 0906 	add.w	r9, r7, r6
 800303a:	d110      	bne.n	800305e <__cvt+0x92>
 800303c:	783b      	ldrb	r3, [r7, #0]
 800303e:	2b30      	cmp	r3, #48	; 0x30
 8003040:	d10a      	bne.n	8003058 <__cvt+0x8c>
 8003042:	2200      	movs	r2, #0
 8003044:	2300      	movs	r3, #0
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f7fd fd65 	bl	8000b18 <__aeabi_dcmpeq>
 800304e:	b918      	cbnz	r0, 8003058 <__cvt+0x8c>
 8003050:	f1c6 0601 	rsb	r6, r6, #1
 8003054:	f8ca 6000 	str.w	r6, [sl]
 8003058:	f8da 3000 	ldr.w	r3, [sl]
 800305c:	4499      	add	r9, r3
 800305e:	2200      	movs	r2, #0
 8003060:	2300      	movs	r3, #0
 8003062:	4620      	mov	r0, r4
 8003064:	4629      	mov	r1, r5
 8003066:	f7fd fd57 	bl	8000b18 <__aeabi_dcmpeq>
 800306a:	b108      	cbz	r0, 8003070 <__cvt+0xa4>
 800306c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003070:	2230      	movs	r2, #48	; 0x30
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	454b      	cmp	r3, r9
 8003076:	d307      	bcc.n	8003088 <__cvt+0xbc>
 8003078:	9b03      	ldr	r3, [sp, #12]
 800307a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800307c:	1bdb      	subs	r3, r3, r7
 800307e:	4638      	mov	r0, r7
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	b004      	add	sp, #16
 8003084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	9103      	str	r1, [sp, #12]
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e7f0      	b.n	8003072 <__cvt+0xa6>

08003090 <__exponent>:
 8003090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003092:	4603      	mov	r3, r0
 8003094:	2900      	cmp	r1, #0
 8003096:	bfb8      	it	lt
 8003098:	4249      	neglt	r1, r1
 800309a:	f803 2b02 	strb.w	r2, [r3], #2
 800309e:	bfb4      	ite	lt
 80030a0:	222d      	movlt	r2, #45	; 0x2d
 80030a2:	222b      	movge	r2, #43	; 0x2b
 80030a4:	2909      	cmp	r1, #9
 80030a6:	7042      	strb	r2, [r0, #1]
 80030a8:	dd2a      	ble.n	8003100 <__exponent+0x70>
 80030aa:	f10d 0407 	add.w	r4, sp, #7
 80030ae:	46a4      	mov	ip, r4
 80030b0:	270a      	movs	r7, #10
 80030b2:	46a6      	mov	lr, r4
 80030b4:	460a      	mov	r2, r1
 80030b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80030ba:	fb07 1516 	mls	r5, r7, r6, r1
 80030be:	3530      	adds	r5, #48	; 0x30
 80030c0:	2a63      	cmp	r2, #99	; 0x63
 80030c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80030c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80030ca:	4631      	mov	r1, r6
 80030cc:	dcf1      	bgt.n	80030b2 <__exponent+0x22>
 80030ce:	3130      	adds	r1, #48	; 0x30
 80030d0:	f1ae 0502 	sub.w	r5, lr, #2
 80030d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80030d8:	1c44      	adds	r4, r0, #1
 80030da:	4629      	mov	r1, r5
 80030dc:	4561      	cmp	r1, ip
 80030de:	d30a      	bcc.n	80030f6 <__exponent+0x66>
 80030e0:	f10d 0209 	add.w	r2, sp, #9
 80030e4:	eba2 020e 	sub.w	r2, r2, lr
 80030e8:	4565      	cmp	r5, ip
 80030ea:	bf88      	it	hi
 80030ec:	2200      	movhi	r2, #0
 80030ee:	4413      	add	r3, r2
 80030f0:	1a18      	subs	r0, r3, r0
 80030f2:	b003      	add	sp, #12
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80030fe:	e7ed      	b.n	80030dc <__exponent+0x4c>
 8003100:	2330      	movs	r3, #48	; 0x30
 8003102:	3130      	adds	r1, #48	; 0x30
 8003104:	7083      	strb	r3, [r0, #2]
 8003106:	70c1      	strb	r1, [r0, #3]
 8003108:	1d03      	adds	r3, r0, #4
 800310a:	e7f1      	b.n	80030f0 <__exponent+0x60>

0800310c <_printf_float>:
 800310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003110:	ed2d 8b02 	vpush	{d8}
 8003114:	b08d      	sub	sp, #52	; 0x34
 8003116:	460c      	mov	r4, r1
 8003118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800311c:	4616      	mov	r6, r2
 800311e:	461f      	mov	r7, r3
 8003120:	4605      	mov	r5, r0
 8003122:	f001 fbe5 	bl	80048f0 <_localeconv_r>
 8003126:	f8d0 a000 	ldr.w	sl, [r0]
 800312a:	4650      	mov	r0, sl
 800312c:	f7fd f872 	bl	8000214 <strlen>
 8003130:	2300      	movs	r3, #0
 8003132:	930a      	str	r3, [sp, #40]	; 0x28
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	9305      	str	r3, [sp, #20]
 8003138:	f8d8 3000 	ldr.w	r3, [r8]
 800313c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003140:	3307      	adds	r3, #7
 8003142:	f023 0307 	bic.w	r3, r3, #7
 8003146:	f103 0208 	add.w	r2, r3, #8
 800314a:	f8c8 2000 	str.w	r2, [r8]
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800315a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800315e:	9307      	str	r3, [sp, #28]
 8003160:	f8cd 8018 	str.w	r8, [sp, #24]
 8003164:	ee08 0a10 	vmov	s16, r0
 8003168:	4b9f      	ldr	r3, [pc, #636]	; (80033e8 <_printf_float+0x2dc>)
 800316a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800316e:	f04f 32ff 	mov.w	r2, #4294967295
 8003172:	f7fd fd03 	bl	8000b7c <__aeabi_dcmpun>
 8003176:	bb88      	cbnz	r0, 80031dc <_printf_float+0xd0>
 8003178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800317c:	4b9a      	ldr	r3, [pc, #616]	; (80033e8 <_printf_float+0x2dc>)
 800317e:	f04f 32ff 	mov.w	r2, #4294967295
 8003182:	f7fd fcdd 	bl	8000b40 <__aeabi_dcmple>
 8003186:	bb48      	cbnz	r0, 80031dc <_printf_float+0xd0>
 8003188:	2200      	movs	r2, #0
 800318a:	2300      	movs	r3, #0
 800318c:	4640      	mov	r0, r8
 800318e:	4649      	mov	r1, r9
 8003190:	f7fd fccc 	bl	8000b2c <__aeabi_dcmplt>
 8003194:	b110      	cbz	r0, 800319c <_printf_float+0x90>
 8003196:	232d      	movs	r3, #45	; 0x2d
 8003198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800319c:	4b93      	ldr	r3, [pc, #588]	; (80033ec <_printf_float+0x2e0>)
 800319e:	4894      	ldr	r0, [pc, #592]	; (80033f0 <_printf_float+0x2e4>)
 80031a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80031a4:	bf94      	ite	ls
 80031a6:	4698      	movls	r8, r3
 80031a8:	4680      	movhi	r8, r0
 80031aa:	2303      	movs	r3, #3
 80031ac:	6123      	str	r3, [r4, #16]
 80031ae:	9b05      	ldr	r3, [sp, #20]
 80031b0:	f023 0204 	bic.w	r2, r3, #4
 80031b4:	6022      	str	r2, [r4, #0]
 80031b6:	f04f 0900 	mov.w	r9, #0
 80031ba:	9700      	str	r7, [sp, #0]
 80031bc:	4633      	mov	r3, r6
 80031be:	aa0b      	add	r2, sp, #44	; 0x2c
 80031c0:	4621      	mov	r1, r4
 80031c2:	4628      	mov	r0, r5
 80031c4:	f000 f9d8 	bl	8003578 <_printf_common>
 80031c8:	3001      	adds	r0, #1
 80031ca:	f040 8090 	bne.w	80032ee <_printf_float+0x1e2>
 80031ce:	f04f 30ff 	mov.w	r0, #4294967295
 80031d2:	b00d      	add	sp, #52	; 0x34
 80031d4:	ecbd 8b02 	vpop	{d8}
 80031d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	4640      	mov	r0, r8
 80031e2:	4649      	mov	r1, r9
 80031e4:	f7fd fcca 	bl	8000b7c <__aeabi_dcmpun>
 80031e8:	b140      	cbz	r0, 80031fc <_printf_float+0xf0>
 80031ea:	464b      	mov	r3, r9
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bfbc      	itt	lt
 80031f0:	232d      	movlt	r3, #45	; 0x2d
 80031f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031f6:	487f      	ldr	r0, [pc, #508]	; (80033f4 <_printf_float+0x2e8>)
 80031f8:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <_printf_float+0x2ec>)
 80031fa:	e7d1      	b.n	80031a0 <_printf_float+0x94>
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003202:	9206      	str	r2, [sp, #24]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	d13f      	bne.n	8003288 <_printf_float+0x17c>
 8003208:	2306      	movs	r3, #6
 800320a:	6063      	str	r3, [r4, #4]
 800320c:	9b05      	ldr	r3, [sp, #20]
 800320e:	6861      	ldr	r1, [r4, #4]
 8003210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003214:	2300      	movs	r3, #0
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	ab0a      	add	r3, sp, #40	; 0x28
 800321a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800321e:	ab09      	add	r3, sp, #36	; 0x24
 8003220:	ec49 8b10 	vmov	d0, r8, r9
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6022      	str	r2, [r4, #0]
 8003228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800322c:	4628      	mov	r0, r5
 800322e:	f7ff fecd 	bl	8002fcc <__cvt>
 8003232:	9b06      	ldr	r3, [sp, #24]
 8003234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003236:	2b47      	cmp	r3, #71	; 0x47
 8003238:	4680      	mov	r8, r0
 800323a:	d108      	bne.n	800324e <_printf_float+0x142>
 800323c:	1cc8      	adds	r0, r1, #3
 800323e:	db02      	blt.n	8003246 <_printf_float+0x13a>
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	4299      	cmp	r1, r3
 8003244:	dd41      	ble.n	80032ca <_printf_float+0x1be>
 8003246:	f1ab 0b02 	sub.w	fp, fp, #2
 800324a:	fa5f fb8b 	uxtb.w	fp, fp
 800324e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003252:	d820      	bhi.n	8003296 <_printf_float+0x18a>
 8003254:	3901      	subs	r1, #1
 8003256:	465a      	mov	r2, fp
 8003258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800325c:	9109      	str	r1, [sp, #36]	; 0x24
 800325e:	f7ff ff17 	bl	8003090 <__exponent>
 8003262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003264:	1813      	adds	r3, r2, r0
 8003266:	2a01      	cmp	r2, #1
 8003268:	4681      	mov	r9, r0
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	dc02      	bgt.n	8003274 <_printf_float+0x168>
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	07d2      	lsls	r2, r2, #31
 8003272:	d501      	bpl.n	8003278 <_printf_float+0x16c>
 8003274:	3301      	adds	r3, #1
 8003276:	6123      	str	r3, [r4, #16]
 8003278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800327c:	2b00      	cmp	r3, #0
 800327e:	d09c      	beq.n	80031ba <_printf_float+0xae>
 8003280:	232d      	movs	r3, #45	; 0x2d
 8003282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003286:	e798      	b.n	80031ba <_printf_float+0xae>
 8003288:	9a06      	ldr	r2, [sp, #24]
 800328a:	2a47      	cmp	r2, #71	; 0x47
 800328c:	d1be      	bne.n	800320c <_printf_float+0x100>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1bc      	bne.n	800320c <_printf_float+0x100>
 8003292:	2301      	movs	r3, #1
 8003294:	e7b9      	b.n	800320a <_printf_float+0xfe>
 8003296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800329a:	d118      	bne.n	80032ce <_printf_float+0x1c2>
 800329c:	2900      	cmp	r1, #0
 800329e:	6863      	ldr	r3, [r4, #4]
 80032a0:	dd0b      	ble.n	80032ba <_printf_float+0x1ae>
 80032a2:	6121      	str	r1, [r4, #16]
 80032a4:	b913      	cbnz	r3, 80032ac <_printf_float+0x1a0>
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	07d0      	lsls	r0, r2, #31
 80032aa:	d502      	bpl.n	80032b2 <_printf_float+0x1a6>
 80032ac:	3301      	adds	r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	6123      	str	r3, [r4, #16]
 80032b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80032b4:	f04f 0900 	mov.w	r9, #0
 80032b8:	e7de      	b.n	8003278 <_printf_float+0x16c>
 80032ba:	b913      	cbnz	r3, 80032c2 <_printf_float+0x1b6>
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	07d2      	lsls	r2, r2, #31
 80032c0:	d501      	bpl.n	80032c6 <_printf_float+0x1ba>
 80032c2:	3302      	adds	r3, #2
 80032c4:	e7f4      	b.n	80032b0 <_printf_float+0x1a4>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7f2      	b.n	80032b0 <_printf_float+0x1a4>
 80032ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80032ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032d0:	4299      	cmp	r1, r3
 80032d2:	db05      	blt.n	80032e0 <_printf_float+0x1d4>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	6121      	str	r1, [r4, #16]
 80032d8:	07d8      	lsls	r0, r3, #31
 80032da:	d5ea      	bpl.n	80032b2 <_printf_float+0x1a6>
 80032dc:	1c4b      	adds	r3, r1, #1
 80032de:	e7e7      	b.n	80032b0 <_printf_float+0x1a4>
 80032e0:	2900      	cmp	r1, #0
 80032e2:	bfd4      	ite	le
 80032e4:	f1c1 0202 	rsble	r2, r1, #2
 80032e8:	2201      	movgt	r2, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	e7e0      	b.n	80032b0 <_printf_float+0x1a4>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	055a      	lsls	r2, r3, #21
 80032f2:	d407      	bmi.n	8003304 <_printf_float+0x1f8>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	4642      	mov	r2, r8
 80032f8:	4631      	mov	r1, r6
 80032fa:	4628      	mov	r0, r5
 80032fc:	47b8      	blx	r7
 80032fe:	3001      	adds	r0, #1
 8003300:	d12c      	bne.n	800335c <_printf_float+0x250>
 8003302:	e764      	b.n	80031ce <_printf_float+0xc2>
 8003304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003308:	f240 80e0 	bls.w	80034cc <_printf_float+0x3c0>
 800330c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003310:	2200      	movs	r2, #0
 8003312:	2300      	movs	r3, #0
 8003314:	f7fd fc00 	bl	8000b18 <__aeabi_dcmpeq>
 8003318:	2800      	cmp	r0, #0
 800331a:	d034      	beq.n	8003386 <_printf_float+0x27a>
 800331c:	4a37      	ldr	r2, [pc, #220]	; (80033fc <_printf_float+0x2f0>)
 800331e:	2301      	movs	r3, #1
 8003320:	4631      	mov	r1, r6
 8003322:	4628      	mov	r0, r5
 8003324:	47b8      	blx	r7
 8003326:	3001      	adds	r0, #1
 8003328:	f43f af51 	beq.w	80031ce <_printf_float+0xc2>
 800332c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003330:	429a      	cmp	r2, r3
 8003332:	db02      	blt.n	800333a <_printf_float+0x22e>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	07d8      	lsls	r0, r3, #31
 8003338:	d510      	bpl.n	800335c <_printf_float+0x250>
 800333a:	ee18 3a10 	vmov	r3, s16
 800333e:	4652      	mov	r2, sl
 8003340:	4631      	mov	r1, r6
 8003342:	4628      	mov	r0, r5
 8003344:	47b8      	blx	r7
 8003346:	3001      	adds	r0, #1
 8003348:	f43f af41 	beq.w	80031ce <_printf_float+0xc2>
 800334c:	f04f 0800 	mov.w	r8, #0
 8003350:	f104 091a 	add.w	r9, r4, #26
 8003354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	4543      	cmp	r3, r8
 800335a:	dc09      	bgt.n	8003370 <_printf_float+0x264>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	079b      	lsls	r3, r3, #30
 8003360:	f100 8105 	bmi.w	800356e <_printf_float+0x462>
 8003364:	68e0      	ldr	r0, [r4, #12]
 8003366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003368:	4298      	cmp	r0, r3
 800336a:	bfb8      	it	lt
 800336c:	4618      	movlt	r0, r3
 800336e:	e730      	b.n	80031d2 <_printf_float+0xc6>
 8003370:	2301      	movs	r3, #1
 8003372:	464a      	mov	r2, r9
 8003374:	4631      	mov	r1, r6
 8003376:	4628      	mov	r0, r5
 8003378:	47b8      	blx	r7
 800337a:	3001      	adds	r0, #1
 800337c:	f43f af27 	beq.w	80031ce <_printf_float+0xc2>
 8003380:	f108 0801 	add.w	r8, r8, #1
 8003384:	e7e6      	b.n	8003354 <_printf_float+0x248>
 8003386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	dc39      	bgt.n	8003400 <_printf_float+0x2f4>
 800338c:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <_printf_float+0x2f0>)
 800338e:	2301      	movs	r3, #1
 8003390:	4631      	mov	r1, r6
 8003392:	4628      	mov	r0, r5
 8003394:	47b8      	blx	r7
 8003396:	3001      	adds	r0, #1
 8003398:	f43f af19 	beq.w	80031ce <_printf_float+0xc2>
 800339c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033a0:	4313      	orrs	r3, r2
 80033a2:	d102      	bne.n	80033aa <_printf_float+0x29e>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	07d9      	lsls	r1, r3, #31
 80033a8:	d5d8      	bpl.n	800335c <_printf_float+0x250>
 80033aa:	ee18 3a10 	vmov	r3, s16
 80033ae:	4652      	mov	r2, sl
 80033b0:	4631      	mov	r1, r6
 80033b2:	4628      	mov	r0, r5
 80033b4:	47b8      	blx	r7
 80033b6:	3001      	adds	r0, #1
 80033b8:	f43f af09 	beq.w	80031ce <_printf_float+0xc2>
 80033bc:	f04f 0900 	mov.w	r9, #0
 80033c0:	f104 0a1a 	add.w	sl, r4, #26
 80033c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033c6:	425b      	negs	r3, r3
 80033c8:	454b      	cmp	r3, r9
 80033ca:	dc01      	bgt.n	80033d0 <_printf_float+0x2c4>
 80033cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ce:	e792      	b.n	80032f6 <_printf_float+0x1ea>
 80033d0:	2301      	movs	r3, #1
 80033d2:	4652      	mov	r2, sl
 80033d4:	4631      	mov	r1, r6
 80033d6:	4628      	mov	r0, r5
 80033d8:	47b8      	blx	r7
 80033da:	3001      	adds	r0, #1
 80033dc:	f43f aef7 	beq.w	80031ce <_printf_float+0xc2>
 80033e0:	f109 0901 	add.w	r9, r9, #1
 80033e4:	e7ee      	b.n	80033c4 <_printf_float+0x2b8>
 80033e6:	bf00      	nop
 80033e8:	7fefffff 	.word	0x7fefffff
 80033ec:	08005c04 	.word	0x08005c04
 80033f0:	08005c08 	.word	0x08005c08
 80033f4:	08005c10 	.word	0x08005c10
 80033f8:	08005c0c 	.word	0x08005c0c
 80033fc:	08005c14 	.word	0x08005c14
 8003400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003404:	429a      	cmp	r2, r3
 8003406:	bfa8      	it	ge
 8003408:	461a      	movge	r2, r3
 800340a:	2a00      	cmp	r2, #0
 800340c:	4691      	mov	r9, r2
 800340e:	dc37      	bgt.n	8003480 <_printf_float+0x374>
 8003410:	f04f 0b00 	mov.w	fp, #0
 8003414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003418:	f104 021a 	add.w	r2, r4, #26
 800341c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800341e:	9305      	str	r3, [sp, #20]
 8003420:	eba3 0309 	sub.w	r3, r3, r9
 8003424:	455b      	cmp	r3, fp
 8003426:	dc33      	bgt.n	8003490 <_printf_float+0x384>
 8003428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800342c:	429a      	cmp	r2, r3
 800342e:	db3b      	blt.n	80034a8 <_printf_float+0x39c>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	07da      	lsls	r2, r3, #31
 8003434:	d438      	bmi.n	80034a8 <_printf_float+0x39c>
 8003436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003438:	9a05      	ldr	r2, [sp, #20]
 800343a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800343c:	1a9a      	subs	r2, r3, r2
 800343e:	eba3 0901 	sub.w	r9, r3, r1
 8003442:	4591      	cmp	r9, r2
 8003444:	bfa8      	it	ge
 8003446:	4691      	movge	r9, r2
 8003448:	f1b9 0f00 	cmp.w	r9, #0
 800344c:	dc35      	bgt.n	80034ba <_printf_float+0x3ae>
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003456:	f104 0a1a 	add.w	sl, r4, #26
 800345a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	eba3 0309 	sub.w	r3, r3, r9
 8003464:	4543      	cmp	r3, r8
 8003466:	f77f af79 	ble.w	800335c <_printf_float+0x250>
 800346a:	2301      	movs	r3, #1
 800346c:	4652      	mov	r2, sl
 800346e:	4631      	mov	r1, r6
 8003470:	4628      	mov	r0, r5
 8003472:	47b8      	blx	r7
 8003474:	3001      	adds	r0, #1
 8003476:	f43f aeaa 	beq.w	80031ce <_printf_float+0xc2>
 800347a:	f108 0801 	add.w	r8, r8, #1
 800347e:	e7ec      	b.n	800345a <_printf_float+0x34e>
 8003480:	4613      	mov	r3, r2
 8003482:	4631      	mov	r1, r6
 8003484:	4642      	mov	r2, r8
 8003486:	4628      	mov	r0, r5
 8003488:	47b8      	blx	r7
 800348a:	3001      	adds	r0, #1
 800348c:	d1c0      	bne.n	8003410 <_printf_float+0x304>
 800348e:	e69e      	b.n	80031ce <_printf_float+0xc2>
 8003490:	2301      	movs	r3, #1
 8003492:	4631      	mov	r1, r6
 8003494:	4628      	mov	r0, r5
 8003496:	9205      	str	r2, [sp, #20]
 8003498:	47b8      	blx	r7
 800349a:	3001      	adds	r0, #1
 800349c:	f43f ae97 	beq.w	80031ce <_printf_float+0xc2>
 80034a0:	9a05      	ldr	r2, [sp, #20]
 80034a2:	f10b 0b01 	add.w	fp, fp, #1
 80034a6:	e7b9      	b.n	800341c <_printf_float+0x310>
 80034a8:	ee18 3a10 	vmov	r3, s16
 80034ac:	4652      	mov	r2, sl
 80034ae:	4631      	mov	r1, r6
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b8      	blx	r7
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1be      	bne.n	8003436 <_printf_float+0x32a>
 80034b8:	e689      	b.n	80031ce <_printf_float+0xc2>
 80034ba:	9a05      	ldr	r2, [sp, #20]
 80034bc:	464b      	mov	r3, r9
 80034be:	4442      	add	r2, r8
 80034c0:	4631      	mov	r1, r6
 80034c2:	4628      	mov	r0, r5
 80034c4:	47b8      	blx	r7
 80034c6:	3001      	adds	r0, #1
 80034c8:	d1c1      	bne.n	800344e <_printf_float+0x342>
 80034ca:	e680      	b.n	80031ce <_printf_float+0xc2>
 80034cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	dc01      	bgt.n	80034d6 <_printf_float+0x3ca>
 80034d2:	07db      	lsls	r3, r3, #31
 80034d4:	d538      	bpl.n	8003548 <_printf_float+0x43c>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4642      	mov	r2, r8
 80034da:	4631      	mov	r1, r6
 80034dc:	4628      	mov	r0, r5
 80034de:	47b8      	blx	r7
 80034e0:	3001      	adds	r0, #1
 80034e2:	f43f ae74 	beq.w	80031ce <_printf_float+0xc2>
 80034e6:	ee18 3a10 	vmov	r3, s16
 80034ea:	4652      	mov	r2, sl
 80034ec:	4631      	mov	r1, r6
 80034ee:	4628      	mov	r0, r5
 80034f0:	47b8      	blx	r7
 80034f2:	3001      	adds	r0, #1
 80034f4:	f43f ae6b 	beq.w	80031ce <_printf_float+0xc2>
 80034f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034fc:	2200      	movs	r2, #0
 80034fe:	2300      	movs	r3, #0
 8003500:	f7fd fb0a 	bl	8000b18 <__aeabi_dcmpeq>
 8003504:	b9d8      	cbnz	r0, 800353e <_printf_float+0x432>
 8003506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003508:	f108 0201 	add.w	r2, r8, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	d10e      	bne.n	8003536 <_printf_float+0x42a>
 8003518:	e659      	b.n	80031ce <_printf_float+0xc2>
 800351a:	2301      	movs	r3, #1
 800351c:	4652      	mov	r2, sl
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	47b8      	blx	r7
 8003524:	3001      	adds	r0, #1
 8003526:	f43f ae52 	beq.w	80031ce <_printf_float+0xc2>
 800352a:	f108 0801 	add.w	r8, r8, #1
 800352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	4543      	cmp	r3, r8
 8003534:	dcf1      	bgt.n	800351a <_printf_float+0x40e>
 8003536:	464b      	mov	r3, r9
 8003538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800353c:	e6dc      	b.n	80032f8 <_printf_float+0x1ec>
 800353e:	f04f 0800 	mov.w	r8, #0
 8003542:	f104 0a1a 	add.w	sl, r4, #26
 8003546:	e7f2      	b.n	800352e <_printf_float+0x422>
 8003548:	2301      	movs	r3, #1
 800354a:	4642      	mov	r2, r8
 800354c:	e7df      	b.n	800350e <_printf_float+0x402>
 800354e:	2301      	movs	r3, #1
 8003550:	464a      	mov	r2, r9
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	47b8      	blx	r7
 8003558:	3001      	adds	r0, #1
 800355a:	f43f ae38 	beq.w	80031ce <_printf_float+0xc2>
 800355e:	f108 0801 	add.w	r8, r8, #1
 8003562:	68e3      	ldr	r3, [r4, #12]
 8003564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003566:	1a5b      	subs	r3, r3, r1
 8003568:	4543      	cmp	r3, r8
 800356a:	dcf0      	bgt.n	800354e <_printf_float+0x442>
 800356c:	e6fa      	b.n	8003364 <_printf_float+0x258>
 800356e:	f04f 0800 	mov.w	r8, #0
 8003572:	f104 0919 	add.w	r9, r4, #25
 8003576:	e7f4      	b.n	8003562 <_printf_float+0x456>

08003578 <_printf_common>:
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	4616      	mov	r6, r2
 800357e:	4699      	mov	r9, r3
 8003580:	688a      	ldr	r2, [r1, #8]
 8003582:	690b      	ldr	r3, [r1, #16]
 8003584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003588:	4293      	cmp	r3, r2
 800358a:	bfb8      	it	lt
 800358c:	4613      	movlt	r3, r2
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003594:	4607      	mov	r7, r0
 8003596:	460c      	mov	r4, r1
 8003598:	b10a      	cbz	r2, 800359e <_printf_common+0x26>
 800359a:	3301      	adds	r3, #1
 800359c:	6033      	str	r3, [r6, #0]
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	0699      	lsls	r1, r3, #26
 80035a2:	bf42      	ittt	mi
 80035a4:	6833      	ldrmi	r3, [r6, #0]
 80035a6:	3302      	addmi	r3, #2
 80035a8:	6033      	strmi	r3, [r6, #0]
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	f015 0506 	ands.w	r5, r5, #6
 80035b0:	d106      	bne.n	80035c0 <_printf_common+0x48>
 80035b2:	f104 0a19 	add.w	sl, r4, #25
 80035b6:	68e3      	ldr	r3, [r4, #12]
 80035b8:	6832      	ldr	r2, [r6, #0]
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	42ab      	cmp	r3, r5
 80035be:	dc26      	bgt.n	800360e <_printf_common+0x96>
 80035c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035c4:	1e13      	subs	r3, r2, #0
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	bf18      	it	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	0692      	lsls	r2, r2, #26
 80035ce:	d42b      	bmi.n	8003628 <_printf_common+0xb0>
 80035d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d4:	4649      	mov	r1, r9
 80035d6:	4638      	mov	r0, r7
 80035d8:	47c0      	blx	r8
 80035da:	3001      	adds	r0, #1
 80035dc:	d01e      	beq.n	800361c <_printf_common+0xa4>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	68e5      	ldr	r5, [r4, #12]
 80035e2:	6832      	ldr	r2, [r6, #0]
 80035e4:	f003 0306 	and.w	r3, r3, #6
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	bf08      	it	eq
 80035ec:	1aad      	subeq	r5, r5, r2
 80035ee:	68a3      	ldr	r3, [r4, #8]
 80035f0:	6922      	ldr	r2, [r4, #16]
 80035f2:	bf0c      	ite	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	2500      	movne	r5, #0
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bfc4      	itt	gt
 80035fe:	1a9b      	subgt	r3, r3, r2
 8003600:	18ed      	addgt	r5, r5, r3
 8003602:	2600      	movs	r6, #0
 8003604:	341a      	adds	r4, #26
 8003606:	42b5      	cmp	r5, r6
 8003608:	d11a      	bne.n	8003640 <_printf_common+0xc8>
 800360a:	2000      	movs	r0, #0
 800360c:	e008      	b.n	8003620 <_printf_common+0xa8>
 800360e:	2301      	movs	r3, #1
 8003610:	4652      	mov	r2, sl
 8003612:	4649      	mov	r1, r9
 8003614:	4638      	mov	r0, r7
 8003616:	47c0      	blx	r8
 8003618:	3001      	adds	r0, #1
 800361a:	d103      	bne.n	8003624 <_printf_common+0xac>
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003624:	3501      	adds	r5, #1
 8003626:	e7c6      	b.n	80035b6 <_printf_common+0x3e>
 8003628:	18e1      	adds	r1, r4, r3
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	2030      	movs	r0, #48	; 0x30
 800362e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003632:	4422      	add	r2, r4
 8003634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800363c:	3302      	adds	r3, #2
 800363e:	e7c7      	b.n	80035d0 <_printf_common+0x58>
 8003640:	2301      	movs	r3, #1
 8003642:	4622      	mov	r2, r4
 8003644:	4649      	mov	r1, r9
 8003646:	4638      	mov	r0, r7
 8003648:	47c0      	blx	r8
 800364a:	3001      	adds	r0, #1
 800364c:	d0e6      	beq.n	800361c <_printf_common+0xa4>
 800364e:	3601      	adds	r6, #1
 8003650:	e7d9      	b.n	8003606 <_printf_common+0x8e>
	...

08003654 <_printf_i>:
 8003654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	7e0f      	ldrb	r7, [r1, #24]
 800365a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800365c:	2f78      	cmp	r7, #120	; 0x78
 800365e:	4691      	mov	r9, r2
 8003660:	4680      	mov	r8, r0
 8003662:	460c      	mov	r4, r1
 8003664:	469a      	mov	sl, r3
 8003666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800366a:	d807      	bhi.n	800367c <_printf_i+0x28>
 800366c:	2f62      	cmp	r7, #98	; 0x62
 800366e:	d80a      	bhi.n	8003686 <_printf_i+0x32>
 8003670:	2f00      	cmp	r7, #0
 8003672:	f000 80d8 	beq.w	8003826 <_printf_i+0x1d2>
 8003676:	2f58      	cmp	r7, #88	; 0x58
 8003678:	f000 80a3 	beq.w	80037c2 <_printf_i+0x16e>
 800367c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003684:	e03a      	b.n	80036fc <_printf_i+0xa8>
 8003686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800368a:	2b15      	cmp	r3, #21
 800368c:	d8f6      	bhi.n	800367c <_printf_i+0x28>
 800368e:	a101      	add	r1, pc, #4	; (adr r1, 8003694 <_printf_i+0x40>)
 8003690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003694:	080036ed 	.word	0x080036ed
 8003698:	08003701 	.word	0x08003701
 800369c:	0800367d 	.word	0x0800367d
 80036a0:	0800367d 	.word	0x0800367d
 80036a4:	0800367d 	.word	0x0800367d
 80036a8:	0800367d 	.word	0x0800367d
 80036ac:	08003701 	.word	0x08003701
 80036b0:	0800367d 	.word	0x0800367d
 80036b4:	0800367d 	.word	0x0800367d
 80036b8:	0800367d 	.word	0x0800367d
 80036bc:	0800367d 	.word	0x0800367d
 80036c0:	0800380d 	.word	0x0800380d
 80036c4:	08003731 	.word	0x08003731
 80036c8:	080037ef 	.word	0x080037ef
 80036cc:	0800367d 	.word	0x0800367d
 80036d0:	0800367d 	.word	0x0800367d
 80036d4:	0800382f 	.word	0x0800382f
 80036d8:	0800367d 	.word	0x0800367d
 80036dc:	08003731 	.word	0x08003731
 80036e0:	0800367d 	.word	0x0800367d
 80036e4:	0800367d 	.word	0x0800367d
 80036e8:	080037f7 	.word	0x080037f7
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	602a      	str	r2, [r5, #0]
 80036f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0a3      	b.n	8003848 <_printf_i+0x1f4>
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	6829      	ldr	r1, [r5, #0]
 8003704:	0606      	lsls	r6, r0, #24
 8003706:	f101 0304 	add.w	r3, r1, #4
 800370a:	d50a      	bpl.n	8003722 <_printf_i+0xce>
 800370c:	680e      	ldr	r6, [r1, #0]
 800370e:	602b      	str	r3, [r5, #0]
 8003710:	2e00      	cmp	r6, #0
 8003712:	da03      	bge.n	800371c <_printf_i+0xc8>
 8003714:	232d      	movs	r3, #45	; 0x2d
 8003716:	4276      	negs	r6, r6
 8003718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800371c:	485e      	ldr	r0, [pc, #376]	; (8003898 <_printf_i+0x244>)
 800371e:	230a      	movs	r3, #10
 8003720:	e019      	b.n	8003756 <_printf_i+0x102>
 8003722:	680e      	ldr	r6, [r1, #0]
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800372a:	bf18      	it	ne
 800372c:	b236      	sxthne	r6, r6
 800372e:	e7ef      	b.n	8003710 <_printf_i+0xbc>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	6820      	ldr	r0, [r4, #0]
 8003734:	1d19      	adds	r1, r3, #4
 8003736:	6029      	str	r1, [r5, #0]
 8003738:	0601      	lsls	r1, r0, #24
 800373a:	d501      	bpl.n	8003740 <_printf_i+0xec>
 800373c:	681e      	ldr	r6, [r3, #0]
 800373e:	e002      	b.n	8003746 <_printf_i+0xf2>
 8003740:	0646      	lsls	r6, r0, #25
 8003742:	d5fb      	bpl.n	800373c <_printf_i+0xe8>
 8003744:	881e      	ldrh	r6, [r3, #0]
 8003746:	4854      	ldr	r0, [pc, #336]	; (8003898 <_printf_i+0x244>)
 8003748:	2f6f      	cmp	r7, #111	; 0x6f
 800374a:	bf0c      	ite	eq
 800374c:	2308      	moveq	r3, #8
 800374e:	230a      	movne	r3, #10
 8003750:	2100      	movs	r1, #0
 8003752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003756:	6865      	ldr	r5, [r4, #4]
 8003758:	60a5      	str	r5, [r4, #8]
 800375a:	2d00      	cmp	r5, #0
 800375c:	bfa2      	ittt	ge
 800375e:	6821      	ldrge	r1, [r4, #0]
 8003760:	f021 0104 	bicge.w	r1, r1, #4
 8003764:	6021      	strge	r1, [r4, #0]
 8003766:	b90e      	cbnz	r6, 800376c <_printf_i+0x118>
 8003768:	2d00      	cmp	r5, #0
 800376a:	d04d      	beq.n	8003808 <_printf_i+0x1b4>
 800376c:	4615      	mov	r5, r2
 800376e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003772:	fb03 6711 	mls	r7, r3, r1, r6
 8003776:	5dc7      	ldrb	r7, [r0, r7]
 8003778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800377c:	4637      	mov	r7, r6
 800377e:	42bb      	cmp	r3, r7
 8003780:	460e      	mov	r6, r1
 8003782:	d9f4      	bls.n	800376e <_printf_i+0x11a>
 8003784:	2b08      	cmp	r3, #8
 8003786:	d10b      	bne.n	80037a0 <_printf_i+0x14c>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	07de      	lsls	r6, r3, #31
 800378c:	d508      	bpl.n	80037a0 <_printf_i+0x14c>
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	6861      	ldr	r1, [r4, #4]
 8003792:	4299      	cmp	r1, r3
 8003794:	bfde      	ittt	le
 8003796:	2330      	movle	r3, #48	; 0x30
 8003798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800379c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037a0:	1b52      	subs	r2, r2, r5
 80037a2:	6122      	str	r2, [r4, #16]
 80037a4:	f8cd a000 	str.w	sl, [sp]
 80037a8:	464b      	mov	r3, r9
 80037aa:	aa03      	add	r2, sp, #12
 80037ac:	4621      	mov	r1, r4
 80037ae:	4640      	mov	r0, r8
 80037b0:	f7ff fee2 	bl	8003578 <_printf_common>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d14c      	bne.n	8003852 <_printf_i+0x1fe>
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	b004      	add	sp, #16
 80037be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c2:	4835      	ldr	r0, [pc, #212]	; (8003898 <_printf_i+0x244>)
 80037c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037c8:	6829      	ldr	r1, [r5, #0]
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80037d0:	6029      	str	r1, [r5, #0]
 80037d2:	061d      	lsls	r5, r3, #24
 80037d4:	d514      	bpl.n	8003800 <_printf_i+0x1ac>
 80037d6:	07df      	lsls	r7, r3, #31
 80037d8:	bf44      	itt	mi
 80037da:	f043 0320 	orrmi.w	r3, r3, #32
 80037de:	6023      	strmi	r3, [r4, #0]
 80037e0:	b91e      	cbnz	r6, 80037ea <_printf_i+0x196>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f023 0320 	bic.w	r3, r3, #32
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	2310      	movs	r3, #16
 80037ec:	e7b0      	b.n	8003750 <_printf_i+0xfc>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	f043 0320 	orr.w	r3, r3, #32
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	2378      	movs	r3, #120	; 0x78
 80037f8:	4828      	ldr	r0, [pc, #160]	; (800389c <_printf_i+0x248>)
 80037fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037fe:	e7e3      	b.n	80037c8 <_printf_i+0x174>
 8003800:	0659      	lsls	r1, r3, #25
 8003802:	bf48      	it	mi
 8003804:	b2b6      	uxthmi	r6, r6
 8003806:	e7e6      	b.n	80037d6 <_printf_i+0x182>
 8003808:	4615      	mov	r5, r2
 800380a:	e7bb      	b.n	8003784 <_printf_i+0x130>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	6826      	ldr	r6, [r4, #0]
 8003810:	6961      	ldr	r1, [r4, #20]
 8003812:	1d18      	adds	r0, r3, #4
 8003814:	6028      	str	r0, [r5, #0]
 8003816:	0635      	lsls	r5, r6, #24
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	d501      	bpl.n	8003820 <_printf_i+0x1cc>
 800381c:	6019      	str	r1, [r3, #0]
 800381e:	e002      	b.n	8003826 <_printf_i+0x1d2>
 8003820:	0670      	lsls	r0, r6, #25
 8003822:	d5fb      	bpl.n	800381c <_printf_i+0x1c8>
 8003824:	8019      	strh	r1, [r3, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	6123      	str	r3, [r4, #16]
 800382a:	4615      	mov	r5, r2
 800382c:	e7ba      	b.n	80037a4 <_printf_i+0x150>
 800382e:	682b      	ldr	r3, [r5, #0]
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	602a      	str	r2, [r5, #0]
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	6862      	ldr	r2, [r4, #4]
 8003838:	2100      	movs	r1, #0
 800383a:	4628      	mov	r0, r5
 800383c:	f7fc fcf8 	bl	8000230 <memchr>
 8003840:	b108      	cbz	r0, 8003846 <_printf_i+0x1f2>
 8003842:	1b40      	subs	r0, r0, r5
 8003844:	6060      	str	r0, [r4, #4]
 8003846:	6863      	ldr	r3, [r4, #4]
 8003848:	6123      	str	r3, [r4, #16]
 800384a:	2300      	movs	r3, #0
 800384c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003850:	e7a8      	b.n	80037a4 <_printf_i+0x150>
 8003852:	6923      	ldr	r3, [r4, #16]
 8003854:	462a      	mov	r2, r5
 8003856:	4649      	mov	r1, r9
 8003858:	4640      	mov	r0, r8
 800385a:	47d0      	blx	sl
 800385c:	3001      	adds	r0, #1
 800385e:	d0ab      	beq.n	80037b8 <_printf_i+0x164>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	079b      	lsls	r3, r3, #30
 8003864:	d413      	bmi.n	800388e <_printf_i+0x23a>
 8003866:	68e0      	ldr	r0, [r4, #12]
 8003868:	9b03      	ldr	r3, [sp, #12]
 800386a:	4298      	cmp	r0, r3
 800386c:	bfb8      	it	lt
 800386e:	4618      	movlt	r0, r3
 8003870:	e7a4      	b.n	80037bc <_printf_i+0x168>
 8003872:	2301      	movs	r3, #1
 8003874:	4632      	mov	r2, r6
 8003876:	4649      	mov	r1, r9
 8003878:	4640      	mov	r0, r8
 800387a:	47d0      	blx	sl
 800387c:	3001      	adds	r0, #1
 800387e:	d09b      	beq.n	80037b8 <_printf_i+0x164>
 8003880:	3501      	adds	r5, #1
 8003882:	68e3      	ldr	r3, [r4, #12]
 8003884:	9903      	ldr	r1, [sp, #12]
 8003886:	1a5b      	subs	r3, r3, r1
 8003888:	42ab      	cmp	r3, r5
 800388a:	dcf2      	bgt.n	8003872 <_printf_i+0x21e>
 800388c:	e7eb      	b.n	8003866 <_printf_i+0x212>
 800388e:	2500      	movs	r5, #0
 8003890:	f104 0619 	add.w	r6, r4, #25
 8003894:	e7f5      	b.n	8003882 <_printf_i+0x22e>
 8003896:	bf00      	nop
 8003898:	08005c16 	.word	0x08005c16
 800389c:	08005c27 	.word	0x08005c27

080038a0 <iprintf>:
 80038a0:	b40f      	push	{r0, r1, r2, r3}
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <iprintf+0x2c>)
 80038a4:	b513      	push	{r0, r1, r4, lr}
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	b124      	cbz	r4, 80038b4 <iprintf+0x14>
 80038aa:	69a3      	ldr	r3, [r4, #24]
 80038ac:	b913      	cbnz	r3, 80038b4 <iprintf+0x14>
 80038ae:	4620      	mov	r0, r4
 80038b0:	f000 ff80 	bl	80047b4 <__sinit>
 80038b4:	ab05      	add	r3, sp, #20
 80038b6:	9a04      	ldr	r2, [sp, #16]
 80038b8:	68a1      	ldr	r1, [r4, #8]
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	4620      	mov	r0, r4
 80038be:	f001 fcd9 	bl	8005274 <_vfiprintf_r>
 80038c2:	b002      	add	sp, #8
 80038c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c8:	b004      	add	sp, #16
 80038ca:	4770      	bx	lr
 80038cc:	2000000c 	.word	0x2000000c

080038d0 <strncpy>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	3901      	subs	r1, #1
 80038d4:	4603      	mov	r3, r0
 80038d6:	b132      	cbz	r2, 80038e6 <strncpy+0x16>
 80038d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80038dc:	f803 4b01 	strb.w	r4, [r3], #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d1f7      	bne.n	80038d6 <strncpy+0x6>
 80038e6:	441a      	add	r2, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d100      	bne.n	80038f0 <strncpy+0x20>
 80038ee:	bd10      	pop	{r4, pc}
 80038f0:	f803 1b01 	strb.w	r1, [r3], #1
 80038f4:	e7f9      	b.n	80038ea <strncpy+0x1a>
	...

080038f8 <_strtol_l.constprop.0>:
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fe:	d001      	beq.n	8003904 <_strtol_l.constprop.0+0xc>
 8003900:	2b24      	cmp	r3, #36	; 0x24
 8003902:	d906      	bls.n	8003912 <_strtol_l.constprop.0+0x1a>
 8003904:	f7ff fb1c 	bl	8002f40 <__errno>
 8003908:	2316      	movs	r3, #22
 800390a:	6003      	str	r3, [r0, #0]
 800390c:	2000      	movs	r0, #0
 800390e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80039f8 <_strtol_l.constprop.0+0x100>
 8003916:	460d      	mov	r5, r1
 8003918:	462e      	mov	r6, r5
 800391a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800391e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003922:	f017 0708 	ands.w	r7, r7, #8
 8003926:	d1f7      	bne.n	8003918 <_strtol_l.constprop.0+0x20>
 8003928:	2c2d      	cmp	r4, #45	; 0x2d
 800392a:	d132      	bne.n	8003992 <_strtol_l.constprop.0+0x9a>
 800392c:	782c      	ldrb	r4, [r5, #0]
 800392e:	2701      	movs	r7, #1
 8003930:	1cb5      	adds	r5, r6, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05b      	beq.n	80039ee <_strtol_l.constprop.0+0xf6>
 8003936:	2b10      	cmp	r3, #16
 8003938:	d109      	bne.n	800394e <_strtol_l.constprop.0+0x56>
 800393a:	2c30      	cmp	r4, #48	; 0x30
 800393c:	d107      	bne.n	800394e <_strtol_l.constprop.0+0x56>
 800393e:	782c      	ldrb	r4, [r5, #0]
 8003940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003944:	2c58      	cmp	r4, #88	; 0x58
 8003946:	d14d      	bne.n	80039e4 <_strtol_l.constprop.0+0xec>
 8003948:	786c      	ldrb	r4, [r5, #1]
 800394a:	2310      	movs	r3, #16
 800394c:	3502      	adds	r5, #2
 800394e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003952:	f108 38ff 	add.w	r8, r8, #4294967295
 8003956:	f04f 0c00 	mov.w	ip, #0
 800395a:	fbb8 f9f3 	udiv	r9, r8, r3
 800395e:	4666      	mov	r6, ip
 8003960:	fb03 8a19 	mls	sl, r3, r9, r8
 8003964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003968:	f1be 0f09 	cmp.w	lr, #9
 800396c:	d816      	bhi.n	800399c <_strtol_l.constprop.0+0xa4>
 800396e:	4674      	mov	r4, lr
 8003970:	42a3      	cmp	r3, r4
 8003972:	dd24      	ble.n	80039be <_strtol_l.constprop.0+0xc6>
 8003974:	f1bc 0f00 	cmp.w	ip, #0
 8003978:	db1e      	blt.n	80039b8 <_strtol_l.constprop.0+0xc0>
 800397a:	45b1      	cmp	r9, r6
 800397c:	d31c      	bcc.n	80039b8 <_strtol_l.constprop.0+0xc0>
 800397e:	d101      	bne.n	8003984 <_strtol_l.constprop.0+0x8c>
 8003980:	45a2      	cmp	sl, r4
 8003982:	db19      	blt.n	80039b8 <_strtol_l.constprop.0+0xc0>
 8003984:	fb06 4603 	mla	r6, r6, r3, r4
 8003988:	f04f 0c01 	mov.w	ip, #1
 800398c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003990:	e7e8      	b.n	8003964 <_strtol_l.constprop.0+0x6c>
 8003992:	2c2b      	cmp	r4, #43	; 0x2b
 8003994:	bf04      	itt	eq
 8003996:	782c      	ldrbeq	r4, [r5, #0]
 8003998:	1cb5      	addeq	r5, r6, #2
 800399a:	e7ca      	b.n	8003932 <_strtol_l.constprop.0+0x3a>
 800399c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80039a0:	f1be 0f19 	cmp.w	lr, #25
 80039a4:	d801      	bhi.n	80039aa <_strtol_l.constprop.0+0xb2>
 80039a6:	3c37      	subs	r4, #55	; 0x37
 80039a8:	e7e2      	b.n	8003970 <_strtol_l.constprop.0+0x78>
 80039aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80039ae:	f1be 0f19 	cmp.w	lr, #25
 80039b2:	d804      	bhi.n	80039be <_strtol_l.constprop.0+0xc6>
 80039b4:	3c57      	subs	r4, #87	; 0x57
 80039b6:	e7db      	b.n	8003970 <_strtol_l.constprop.0+0x78>
 80039b8:	f04f 3cff 	mov.w	ip, #4294967295
 80039bc:	e7e6      	b.n	800398c <_strtol_l.constprop.0+0x94>
 80039be:	f1bc 0f00 	cmp.w	ip, #0
 80039c2:	da05      	bge.n	80039d0 <_strtol_l.constprop.0+0xd8>
 80039c4:	2322      	movs	r3, #34	; 0x22
 80039c6:	6003      	str	r3, [r0, #0]
 80039c8:	4646      	mov	r6, r8
 80039ca:	b942      	cbnz	r2, 80039de <_strtol_l.constprop.0+0xe6>
 80039cc:	4630      	mov	r0, r6
 80039ce:	e79e      	b.n	800390e <_strtol_l.constprop.0+0x16>
 80039d0:	b107      	cbz	r7, 80039d4 <_strtol_l.constprop.0+0xdc>
 80039d2:	4276      	negs	r6, r6
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d0f9      	beq.n	80039cc <_strtol_l.constprop.0+0xd4>
 80039d8:	f1bc 0f00 	cmp.w	ip, #0
 80039dc:	d000      	beq.n	80039e0 <_strtol_l.constprop.0+0xe8>
 80039de:	1e69      	subs	r1, r5, #1
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	e7f3      	b.n	80039cc <_strtol_l.constprop.0+0xd4>
 80039e4:	2430      	movs	r4, #48	; 0x30
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1b1      	bne.n	800394e <_strtol_l.constprop.0+0x56>
 80039ea:	2308      	movs	r3, #8
 80039ec:	e7af      	b.n	800394e <_strtol_l.constprop.0+0x56>
 80039ee:	2c30      	cmp	r4, #48	; 0x30
 80039f0:	d0a5      	beq.n	800393e <_strtol_l.constprop.0+0x46>
 80039f2:	230a      	movs	r3, #10
 80039f4:	e7ab      	b.n	800394e <_strtol_l.constprop.0+0x56>
 80039f6:	bf00      	nop
 80039f8:	08005c39 	.word	0x08005c39

080039fc <strtol>:
 80039fc:	4613      	mov	r3, r2
 80039fe:	460a      	mov	r2, r1
 8003a00:	4601      	mov	r1, r0
 8003a02:	4802      	ldr	r0, [pc, #8]	; (8003a0c <strtol+0x10>)
 8003a04:	6800      	ldr	r0, [r0, #0]
 8003a06:	f7ff bf77 	b.w	80038f8 <_strtol_l.constprop.0>
 8003a0a:	bf00      	nop
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <quorem>:
 8003a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	6903      	ldr	r3, [r0, #16]
 8003a16:	690c      	ldr	r4, [r1, #16]
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	4607      	mov	r7, r0
 8003a1c:	f2c0 8081 	blt.w	8003b22 <quorem+0x112>
 8003a20:	3c01      	subs	r4, #1
 8003a22:	f101 0814 	add.w	r8, r1, #20
 8003a26:	f100 0514 	add.w	r5, r0, #20
 8003a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a48:	d331      	bcc.n	8003aae <quorem+0x9e>
 8003a4a:	f04f 0e00 	mov.w	lr, #0
 8003a4e:	4640      	mov	r0, r8
 8003a50:	46ac      	mov	ip, r5
 8003a52:	46f2      	mov	sl, lr
 8003a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a58:	b293      	uxth	r3, r2
 8003a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8003a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	ebaa 0303 	sub.w	r3, sl, r3
 8003a68:	f8dc a000 	ldr.w	sl, [ip]
 8003a6c:	0c12      	lsrs	r2, r2, #16
 8003a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8003a72:	fb06 e202 	mla	r2, r6, r2, lr
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	9b00      	ldr	r3, [sp, #0]
 8003a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a7e:	b292      	uxth	r2, r2
 8003a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8003a8c:	4581      	cmp	r9, r0
 8003a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a92:	f84c 3b04 	str.w	r3, [ip], #4
 8003a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003a9a:	d2db      	bcs.n	8003a54 <quorem+0x44>
 8003a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003aa0:	b92b      	cbnz	r3, 8003aae <quorem+0x9e>
 8003aa2:	9b01      	ldr	r3, [sp, #4]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	429d      	cmp	r5, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	d32e      	bcc.n	8003b0a <quorem+0xfa>
 8003aac:	613c      	str	r4, [r7, #16]
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f001 f9be 	bl	8004e30 <__mcmp>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	db24      	blt.n	8003b02 <quorem+0xf2>
 8003ab8:	3601      	adds	r6, #1
 8003aba:	4628      	mov	r0, r5
 8003abc:	f04f 0c00 	mov.w	ip, #0
 8003ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8003ac8:	b293      	uxth	r3, r2
 8003aca:	ebac 0303 	sub.w	r3, ip, r3
 8003ace:	0c12      	lsrs	r2, r2, #16
 8003ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8003ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ae2:	45c1      	cmp	r9, r8
 8003ae4:	f840 3b04 	str.w	r3, [r0], #4
 8003ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003aec:	d2e8      	bcs.n	8003ac0 <quorem+0xb0>
 8003aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003af6:	b922      	cbnz	r2, 8003b02 <quorem+0xf2>
 8003af8:	3b04      	subs	r3, #4
 8003afa:	429d      	cmp	r5, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	d30a      	bcc.n	8003b16 <quorem+0x106>
 8003b00:	613c      	str	r4, [r7, #16]
 8003b02:	4630      	mov	r0, r6
 8003b04:	b003      	add	sp, #12
 8003b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	3b04      	subs	r3, #4
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	d1cc      	bne.n	8003aac <quorem+0x9c>
 8003b12:	3c01      	subs	r4, #1
 8003b14:	e7c7      	b.n	8003aa6 <quorem+0x96>
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	3b04      	subs	r3, #4
 8003b1a:	2a00      	cmp	r2, #0
 8003b1c:	d1f0      	bne.n	8003b00 <quorem+0xf0>
 8003b1e:	3c01      	subs	r4, #1
 8003b20:	e7eb      	b.n	8003afa <quorem+0xea>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e7ee      	b.n	8003b04 <quorem+0xf4>
	...

08003b28 <_dtoa_r>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	ed2d 8b04 	vpush	{d8-d9}
 8003b30:	ec57 6b10 	vmov	r6, r7, d0
 8003b34:	b093      	sub	sp, #76	; 0x4c
 8003b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003b3c:	9106      	str	r1, [sp, #24]
 8003b3e:	ee10 aa10 	vmov	sl, s0
 8003b42:	4604      	mov	r4, r0
 8003b44:	9209      	str	r2, [sp, #36]	; 0x24
 8003b46:	930c      	str	r3, [sp, #48]	; 0x30
 8003b48:	46bb      	mov	fp, r7
 8003b4a:	b975      	cbnz	r5, 8003b6a <_dtoa_r+0x42>
 8003b4c:	2010      	movs	r0, #16
 8003b4e:	f000 fed7 	bl	8004900 <malloc>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6260      	str	r0, [r4, #36]	; 0x24
 8003b56:	b920      	cbnz	r0, 8003b62 <_dtoa_r+0x3a>
 8003b58:	4ba7      	ldr	r3, [pc, #668]	; (8003df8 <_dtoa_r+0x2d0>)
 8003b5a:	21ea      	movs	r1, #234	; 0xea
 8003b5c:	48a7      	ldr	r0, [pc, #668]	; (8003dfc <_dtoa_r+0x2d4>)
 8003b5e:	f001 fddf 	bl	8005720 <__assert_func>
 8003b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003b66:	6005      	str	r5, [r0, #0]
 8003b68:	60c5      	str	r5, [r0, #12]
 8003b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	b151      	cbz	r1, 8003b86 <_dtoa_r+0x5e>
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	604a      	str	r2, [r1, #4]
 8003b74:	2301      	movs	r3, #1
 8003b76:	4093      	lsls	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 ff16 	bl	80049ac <_Bfree>
 8003b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	1e3b      	subs	r3, r7, #0
 8003b88:	bfaa      	itet	ge
 8003b8a:	2300      	movge	r3, #0
 8003b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003b90:	f8c8 3000 	strge.w	r3, [r8]
 8003b94:	4b9a      	ldr	r3, [pc, #616]	; (8003e00 <_dtoa_r+0x2d8>)
 8003b96:	bfbc      	itt	lt
 8003b98:	2201      	movlt	r2, #1
 8003b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8003b9e:	ea33 030b 	bics.w	r3, r3, fp
 8003ba2:	d11b      	bne.n	8003bdc <_dtoa_r+0xb4>
 8003ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003bb0:	4333      	orrs	r3, r6
 8003bb2:	f000 8592 	beq.w	80046da <_dtoa_r+0xbb2>
 8003bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bb8:	b963      	cbnz	r3, 8003bd4 <_dtoa_r+0xac>
 8003bba:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <_dtoa_r+0x2dc>)
 8003bbc:	e022      	b.n	8003c04 <_dtoa_r+0xdc>
 8003bbe:	4b92      	ldr	r3, [pc, #584]	; (8003e08 <_dtoa_r+0x2e0>)
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	9801      	ldr	r0, [sp, #4]
 8003bca:	b013      	add	sp, #76	; 0x4c
 8003bcc:	ecbd 8b04 	vpop	{d8-d9}
 8003bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd4:	4b8b      	ldr	r3, [pc, #556]	; (8003e04 <_dtoa_r+0x2dc>)
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	3303      	adds	r3, #3
 8003bda:	e7f3      	b.n	8003bc4 <_dtoa_r+0x9c>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2300      	movs	r3, #0
 8003be0:	4650      	mov	r0, sl
 8003be2:	4659      	mov	r1, fp
 8003be4:	f7fc ff98 	bl	8000b18 <__aeabi_dcmpeq>
 8003be8:	ec4b ab19 	vmov	d9, sl, fp
 8003bec:	4680      	mov	r8, r0
 8003bee:	b158      	cbz	r0, 8003c08 <_dtoa_r+0xe0>
 8003bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 856b 	beq.w	80046d4 <_dtoa_r+0xbac>
 8003bfe:	4883      	ldr	r0, [pc, #524]	; (8003e0c <_dtoa_r+0x2e4>)
 8003c00:	6018      	str	r0, [r3, #0]
 8003c02:	1e43      	subs	r3, r0, #1
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	e7df      	b.n	8003bc8 <_dtoa_r+0xa0>
 8003c08:	ec4b ab10 	vmov	d0, sl, fp
 8003c0c:	aa10      	add	r2, sp, #64	; 0x40
 8003c0e:	a911      	add	r1, sp, #68	; 0x44
 8003c10:	4620      	mov	r0, r4
 8003c12:	f001 f9b3 	bl	8004f7c <__d2b>
 8003c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003c1a:	ee08 0a10 	vmov	s16, r0
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	f000 8084 	beq.w	8003d2c <_dtoa_r+0x204>
 8003c24:	ee19 3a90 	vmov	r3, s19
 8003c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003c30:	4656      	mov	r6, sl
 8003c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003c3e:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <_dtoa_r+0x2e8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	4630      	mov	r0, r6
 8003c44:	4639      	mov	r1, r7
 8003c46:	f7fc fb47 	bl	80002d8 <__aeabi_dsub>
 8003c4a:	a365      	add	r3, pc, #404	; (adr r3, 8003de0 <_dtoa_r+0x2b8>)
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f7fc fcfa 	bl	8000648 <__aeabi_dmul>
 8003c54:	a364      	add	r3, pc, #400	; (adr r3, 8003de8 <_dtoa_r+0x2c0>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fb3f 	bl	80002dc <__adddf3>
 8003c5e:	4606      	mov	r6, r0
 8003c60:	4628      	mov	r0, r5
 8003c62:	460f      	mov	r7, r1
 8003c64:	f7fc fc86 	bl	8000574 <__aeabi_i2d>
 8003c68:	a361      	add	r3, pc, #388	; (adr r3, 8003df0 <_dtoa_r+0x2c8>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc fceb 	bl	8000648 <__aeabi_dmul>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4630      	mov	r0, r6
 8003c78:	4639      	mov	r1, r7
 8003c7a:	f7fc fb2f 	bl	80002dc <__adddf3>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	460f      	mov	r7, r1
 8003c82:	f7fc ff91 	bl	8000ba8 <__aeabi_d2iz>
 8003c86:	2200      	movs	r2, #0
 8003c88:	9000      	str	r0, [sp, #0]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	4639      	mov	r1, r7
 8003c90:	f7fc ff4c 	bl	8000b2c <__aeabi_dcmplt>
 8003c94:	b150      	cbz	r0, 8003cac <_dtoa_r+0x184>
 8003c96:	9800      	ldr	r0, [sp, #0]
 8003c98:	f7fc fc6c 	bl	8000574 <__aeabi_i2d>
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	f7fc ff3a 	bl	8000b18 <__aeabi_dcmpeq>
 8003ca4:	b910      	cbnz	r0, 8003cac <_dtoa_r+0x184>
 8003ca6:	9b00      	ldr	r3, [sp, #0]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	9b00      	ldr	r3, [sp, #0]
 8003cae:	2b16      	cmp	r3, #22
 8003cb0:	d85a      	bhi.n	8003d68 <_dtoa_r+0x240>
 8003cb2:	9a00      	ldr	r2, [sp, #0]
 8003cb4:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <_dtoa_r+0x2ec>)
 8003cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	ec51 0b19 	vmov	r0, r1, d9
 8003cc2:	f7fc ff33 	bl	8000b2c <__aeabi_dcmplt>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d050      	beq.n	8003d6c <_dtoa_r+0x244>
 8003cca:	9b00      	ldr	r3, [sp, #0]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cd6:	1b5d      	subs	r5, r3, r5
 8003cd8:	1e6b      	subs	r3, r5, #1
 8003cda:	9305      	str	r3, [sp, #20]
 8003cdc:	bf45      	ittet	mi
 8003cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8003ce2:	9304      	strmi	r3, [sp, #16]
 8003ce4:	2300      	movpl	r3, #0
 8003ce6:	2300      	movmi	r3, #0
 8003ce8:	bf4c      	ite	mi
 8003cea:	9305      	strmi	r3, [sp, #20]
 8003cec:	9304      	strpl	r3, [sp, #16]
 8003cee:	9b00      	ldr	r3, [sp, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	db3d      	blt.n	8003d70 <_dtoa_r+0x248>
 8003cf4:	9b05      	ldr	r3, [sp, #20]
 8003cf6:	9a00      	ldr	r2, [sp, #0]
 8003cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8003cfa:	4413      	add	r3, r2
 8003cfc:	9305      	str	r3, [sp, #20]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9307      	str	r3, [sp, #28]
 8003d02:	9b06      	ldr	r3, [sp, #24]
 8003d04:	2b09      	cmp	r3, #9
 8003d06:	f200 8089 	bhi.w	8003e1c <_dtoa_r+0x2f4>
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	bfc4      	itt	gt
 8003d0e:	3b04      	subgt	r3, #4
 8003d10:	9306      	strgt	r3, [sp, #24]
 8003d12:	9b06      	ldr	r3, [sp, #24]
 8003d14:	f1a3 0302 	sub.w	r3, r3, #2
 8003d18:	bfcc      	ite	gt
 8003d1a:	2500      	movgt	r5, #0
 8003d1c:	2501      	movle	r5, #1
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	f200 8087 	bhi.w	8003e32 <_dtoa_r+0x30a>
 8003d24:	e8df f003 	tbb	[pc, r3]
 8003d28:	59383a2d 	.word	0x59383a2d
 8003d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003d30:	441d      	add	r5, r3
 8003d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	bfc1      	itttt	gt
 8003d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8003d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d4a:	bfda      	itte	le
 8003d4c:	f1c3 0320 	rsble	r3, r3, #32
 8003d50:	fa06 f003 	lslle.w	r0, r6, r3
 8003d54:	4318      	orrgt	r0, r3
 8003d56:	f7fc fbfd 	bl	8000554 <__aeabi_ui2d>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003d62:	3d01      	subs	r5, #1
 8003d64:	930e      	str	r3, [sp, #56]	; 0x38
 8003d66:	e76a      	b.n	8003c3e <_dtoa_r+0x116>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e7b2      	b.n	8003cd2 <_dtoa_r+0x1aa>
 8003d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8003d6e:	e7b1      	b.n	8003cd4 <_dtoa_r+0x1ac>
 8003d70:	9b04      	ldr	r3, [sp, #16]
 8003d72:	9a00      	ldr	r2, [sp, #0]
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	4253      	negs	r3, r2
 8003d7a:	9307      	str	r3, [sp, #28]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d80:	e7bf      	b.n	8003d02 <_dtoa_r+0x1da>
 8003d82:	2300      	movs	r3, #0
 8003d84:	9308      	str	r3, [sp, #32]
 8003d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dc55      	bgt.n	8003e38 <_dtoa_r+0x310>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d92:	461a      	mov	r2, r3
 8003d94:	9209      	str	r2, [sp, #36]	; 0x24
 8003d96:	e00c      	b.n	8003db2 <_dtoa_r+0x28a>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e7f3      	b.n	8003d84 <_dtoa_r+0x25c>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003da0:	9308      	str	r3, [sp, #32]
 8003da2:	9b00      	ldr	r3, [sp, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	3301      	adds	r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	9303      	str	r3, [sp, #12]
 8003dae:	bfb8      	it	lt
 8003db0:	2301      	movlt	r3, #1
 8003db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003db4:	2200      	movs	r2, #0
 8003db6:	6042      	str	r2, [r0, #4]
 8003db8:	2204      	movs	r2, #4
 8003dba:	f102 0614 	add.w	r6, r2, #20
 8003dbe:	429e      	cmp	r6, r3
 8003dc0:	6841      	ldr	r1, [r0, #4]
 8003dc2:	d93d      	bls.n	8003e40 <_dtoa_r+0x318>
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f000 fdb1 	bl	800492c <_Balloc>
 8003dca:	9001      	str	r0, [sp, #4]
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d13b      	bne.n	8003e48 <_dtoa_r+0x320>
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <_dtoa_r+0x2f0>)
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003dd8:	e6c0      	b.n	8003b5c <_dtoa_r+0x34>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e7df      	b.n	8003d9e <_dtoa_r+0x276>
 8003dde:	bf00      	nop
 8003de0:	636f4361 	.word	0x636f4361
 8003de4:	3fd287a7 	.word	0x3fd287a7
 8003de8:	8b60c8b3 	.word	0x8b60c8b3
 8003dec:	3fc68a28 	.word	0x3fc68a28
 8003df0:	509f79fb 	.word	0x509f79fb
 8003df4:	3fd34413 	.word	0x3fd34413
 8003df8:	08005d46 	.word	0x08005d46
 8003dfc:	08005d5d 	.word	0x08005d5d
 8003e00:	7ff00000 	.word	0x7ff00000
 8003e04:	08005d42 	.word	0x08005d42
 8003e08:	08005d39 	.word	0x08005d39
 8003e0c:	08005c15 	.word	0x08005c15
 8003e10:	3ff80000 	.word	0x3ff80000
 8003e14:	08005eb0 	.word	0x08005eb0
 8003e18:	08005db8 	.word	0x08005db8
 8003e1c:	2501      	movs	r5, #1
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9306      	str	r3, [sp, #24]
 8003e22:	9508      	str	r5, [sp, #32]
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2312      	movs	r3, #18
 8003e30:	e7b0      	b.n	8003d94 <_dtoa_r+0x26c>
 8003e32:	2301      	movs	r3, #1
 8003e34:	9308      	str	r3, [sp, #32]
 8003e36:	e7f5      	b.n	8003e24 <_dtoa_r+0x2fc>
 8003e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e3e:	e7b8      	b.n	8003db2 <_dtoa_r+0x28a>
 8003e40:	3101      	adds	r1, #1
 8003e42:	6041      	str	r1, [r0, #4]
 8003e44:	0052      	lsls	r2, r2, #1
 8003e46:	e7b8      	b.n	8003dba <_dtoa_r+0x292>
 8003e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e4a:	9a01      	ldr	r2, [sp, #4]
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	2b0e      	cmp	r3, #14
 8003e52:	f200 809d 	bhi.w	8003f90 <_dtoa_r+0x468>
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	f000 809a 	beq.w	8003f90 <_dtoa_r+0x468>
 8003e5c:	9b00      	ldr	r3, [sp, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	dd32      	ble.n	8003ec8 <_dtoa_r+0x3a0>
 8003e62:	4ab7      	ldr	r2, [pc, #732]	; (8004140 <_dtoa_r+0x618>)
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e70:	9b00      	ldr	r3, [sp, #0]
 8003e72:	05d8      	lsls	r0, r3, #23
 8003e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003e78:	d516      	bpl.n	8003ea8 <_dtoa_r+0x380>
 8003e7a:	4bb2      	ldr	r3, [pc, #712]	; (8004144 <_dtoa_r+0x61c>)
 8003e7c:	ec51 0b19 	vmov	r0, r1, d9
 8003e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e84:	f7fc fd0a 	bl	800089c <__aeabi_ddiv>
 8003e88:	f007 070f 	and.w	r7, r7, #15
 8003e8c:	4682      	mov	sl, r0
 8003e8e:	468b      	mov	fp, r1
 8003e90:	2503      	movs	r5, #3
 8003e92:	4eac      	ldr	r6, [pc, #688]	; (8004144 <_dtoa_r+0x61c>)
 8003e94:	b957      	cbnz	r7, 8003eac <_dtoa_r+0x384>
 8003e96:	4642      	mov	r2, r8
 8003e98:	464b      	mov	r3, r9
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	f7fc fcfd 	bl	800089c <__aeabi_ddiv>
 8003ea2:	4682      	mov	sl, r0
 8003ea4:	468b      	mov	fp, r1
 8003ea6:	e028      	b.n	8003efa <_dtoa_r+0x3d2>
 8003ea8:	2502      	movs	r5, #2
 8003eaa:	e7f2      	b.n	8003e92 <_dtoa_r+0x36a>
 8003eac:	07f9      	lsls	r1, r7, #31
 8003eae:	d508      	bpl.n	8003ec2 <_dtoa_r+0x39a>
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003eb8:	f7fc fbc6 	bl	8000648 <__aeabi_dmul>
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	4680      	mov	r8, r0
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	107f      	asrs	r7, r7, #1
 8003ec4:	3608      	adds	r6, #8
 8003ec6:	e7e5      	b.n	8003e94 <_dtoa_r+0x36c>
 8003ec8:	f000 809b 	beq.w	8004002 <_dtoa_r+0x4da>
 8003ecc:	9b00      	ldr	r3, [sp, #0]
 8003ece:	4f9d      	ldr	r7, [pc, #628]	; (8004144 <_dtoa_r+0x61c>)
 8003ed0:	425e      	negs	r6, r3
 8003ed2:	4b9b      	ldr	r3, [pc, #620]	; (8004140 <_dtoa_r+0x618>)
 8003ed4:	f006 020f 	and.w	r2, r6, #15
 8003ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	ec51 0b19 	vmov	r0, r1, d9
 8003ee4:	f7fc fbb0 	bl	8000648 <__aeabi_dmul>
 8003ee8:	1136      	asrs	r6, r6, #4
 8003eea:	4682      	mov	sl, r0
 8003eec:	468b      	mov	fp, r1
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2502      	movs	r5, #2
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d17a      	bne.n	8003fec <_dtoa_r+0x4c4>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1d3      	bne.n	8003ea2 <_dtoa_r+0x37a>
 8003efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8082 	beq.w	8004006 <_dtoa_r+0x4de>
 8003f02:	4b91      	ldr	r3, [pc, #580]	; (8004148 <_dtoa_r+0x620>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	4650      	mov	r0, sl
 8003f08:	4659      	mov	r1, fp
 8003f0a:	f7fc fe0f 	bl	8000b2c <__aeabi_dcmplt>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d079      	beq.n	8004006 <_dtoa_r+0x4de>
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d076      	beq.n	8004006 <_dtoa_r+0x4de>
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	dd36      	ble.n	8003f8c <_dtoa_r+0x464>
 8003f1e:	9b00      	ldr	r3, [sp, #0]
 8003f20:	4650      	mov	r0, sl
 8003f22:	4659      	mov	r1, fp
 8003f24:	1e5f      	subs	r7, r3, #1
 8003f26:	2200      	movs	r2, #0
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <_dtoa_r+0x624>)
 8003f2a:	f7fc fb8d 	bl	8000648 <__aeabi_dmul>
 8003f2e:	9e02      	ldr	r6, [sp, #8]
 8003f30:	4682      	mov	sl, r0
 8003f32:	468b      	mov	fp, r1
 8003f34:	3501      	adds	r5, #1
 8003f36:	4628      	mov	r0, r5
 8003f38:	f7fc fb1c 	bl	8000574 <__aeabi_i2d>
 8003f3c:	4652      	mov	r2, sl
 8003f3e:	465b      	mov	r3, fp
 8003f40:	f7fc fb82 	bl	8000648 <__aeabi_dmul>
 8003f44:	4b82      	ldr	r3, [pc, #520]	; (8004150 <_dtoa_r+0x628>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	f7fc f9c8 	bl	80002dc <__adddf3>
 8003f4c:	46d0      	mov	r8, sl
 8003f4e:	46d9      	mov	r9, fp
 8003f50:	4682      	mov	sl, r0
 8003f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	d158      	bne.n	800400c <_dtoa_r+0x4e4>
 8003f5a:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <_dtoa_r+0x62c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4649      	mov	r1, r9
 8003f62:	f7fc f9b9 	bl	80002d8 <__aeabi_dsub>
 8003f66:	4652      	mov	r2, sl
 8003f68:	465b      	mov	r3, fp
 8003f6a:	4680      	mov	r8, r0
 8003f6c:	4689      	mov	r9, r1
 8003f6e:	f7fc fdfb 	bl	8000b68 <__aeabi_dcmpgt>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	f040 8295 	bne.w	80044a2 <_dtoa_r+0x97a>
 8003f78:	4652      	mov	r2, sl
 8003f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4649      	mov	r1, r9
 8003f82:	f7fc fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f040 8289 	bne.w	800449e <_dtoa_r+0x976>
 8003f8c:	ec5b ab19 	vmov	sl, fp, d9
 8003f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f2c0 8148 	blt.w	8004228 <_dtoa_r+0x700>
 8003f98:	9a00      	ldr	r2, [sp, #0]
 8003f9a:	2a0e      	cmp	r2, #14
 8003f9c:	f300 8144 	bgt.w	8004228 <_dtoa_r+0x700>
 8003fa0:	4b67      	ldr	r3, [pc, #412]	; (8004140 <_dtoa_r+0x618>)
 8003fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f280 80d5 	bge.w	800415c <_dtoa_r+0x634>
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f300 80d1 	bgt.w	800415c <_dtoa_r+0x634>
 8003fba:	f040 826f 	bne.w	800449c <_dtoa_r+0x974>
 8003fbe:	4b65      	ldr	r3, [pc, #404]	; (8004154 <_dtoa_r+0x62c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	f7fc fb3f 	bl	8000648 <__aeabi_dmul>
 8003fca:	4652      	mov	r2, sl
 8003fcc:	465b      	mov	r3, fp
 8003fce:	f7fc fdc1 	bl	8000b54 <__aeabi_dcmpge>
 8003fd2:	9e03      	ldr	r6, [sp, #12]
 8003fd4:	4637      	mov	r7, r6
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	f040 8245 	bne.w	8004466 <_dtoa_r+0x93e>
 8003fdc:	9d01      	ldr	r5, [sp, #4]
 8003fde:	2331      	movs	r3, #49	; 0x31
 8003fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8003fe4:	9b00      	ldr	r3, [sp, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	e240      	b.n	800446e <_dtoa_r+0x946>
 8003fec:	07f2      	lsls	r2, r6, #31
 8003fee:	d505      	bpl.n	8003ffc <_dtoa_r+0x4d4>
 8003ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff4:	f7fc fb28 	bl	8000648 <__aeabi_dmul>
 8003ff8:	3501      	adds	r5, #1
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	1076      	asrs	r6, r6, #1
 8003ffe:	3708      	adds	r7, #8
 8004000:	e777      	b.n	8003ef2 <_dtoa_r+0x3ca>
 8004002:	2502      	movs	r5, #2
 8004004:	e779      	b.n	8003efa <_dtoa_r+0x3d2>
 8004006:	9f00      	ldr	r7, [sp, #0]
 8004008:	9e03      	ldr	r6, [sp, #12]
 800400a:	e794      	b.n	8003f36 <_dtoa_r+0x40e>
 800400c:	9901      	ldr	r1, [sp, #4]
 800400e:	4b4c      	ldr	r3, [pc, #304]	; (8004140 <_dtoa_r+0x618>)
 8004010:	4431      	add	r1, r6
 8004012:	910d      	str	r1, [sp, #52]	; 0x34
 8004014:	9908      	ldr	r1, [sp, #32]
 8004016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800401a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800401e:	2900      	cmp	r1, #0
 8004020:	d043      	beq.n	80040aa <_dtoa_r+0x582>
 8004022:	494d      	ldr	r1, [pc, #308]	; (8004158 <_dtoa_r+0x630>)
 8004024:	2000      	movs	r0, #0
 8004026:	f7fc fc39 	bl	800089c <__aeabi_ddiv>
 800402a:	4652      	mov	r2, sl
 800402c:	465b      	mov	r3, fp
 800402e:	f7fc f953 	bl	80002d8 <__aeabi_dsub>
 8004032:	9d01      	ldr	r5, [sp, #4]
 8004034:	4682      	mov	sl, r0
 8004036:	468b      	mov	fp, r1
 8004038:	4649      	mov	r1, r9
 800403a:	4640      	mov	r0, r8
 800403c:	f7fc fdb4 	bl	8000ba8 <__aeabi_d2iz>
 8004040:	4606      	mov	r6, r0
 8004042:	f7fc fa97 	bl	8000574 <__aeabi_i2d>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4640      	mov	r0, r8
 800404c:	4649      	mov	r1, r9
 800404e:	f7fc f943 	bl	80002d8 <__aeabi_dsub>
 8004052:	3630      	adds	r6, #48	; 0x30
 8004054:	f805 6b01 	strb.w	r6, [r5], #1
 8004058:	4652      	mov	r2, sl
 800405a:	465b      	mov	r3, fp
 800405c:	4680      	mov	r8, r0
 800405e:	4689      	mov	r9, r1
 8004060:	f7fc fd64 	bl	8000b2c <__aeabi_dcmplt>
 8004064:	2800      	cmp	r0, #0
 8004066:	d163      	bne.n	8004130 <_dtoa_r+0x608>
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	4936      	ldr	r1, [pc, #216]	; (8004148 <_dtoa_r+0x620>)
 800406e:	2000      	movs	r0, #0
 8004070:	f7fc f932 	bl	80002d8 <__aeabi_dsub>
 8004074:	4652      	mov	r2, sl
 8004076:	465b      	mov	r3, fp
 8004078:	f7fc fd58 	bl	8000b2c <__aeabi_dcmplt>
 800407c:	2800      	cmp	r0, #0
 800407e:	f040 80b5 	bne.w	80041ec <_dtoa_r+0x6c4>
 8004082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004084:	429d      	cmp	r5, r3
 8004086:	d081      	beq.n	8003f8c <_dtoa_r+0x464>
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <_dtoa_r+0x624>)
 800408a:	2200      	movs	r2, #0
 800408c:	4650      	mov	r0, sl
 800408e:	4659      	mov	r1, fp
 8004090:	f7fc fada 	bl	8000648 <__aeabi_dmul>
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <_dtoa_r+0x624>)
 8004096:	4682      	mov	sl, r0
 8004098:	468b      	mov	fp, r1
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	2200      	movs	r2, #0
 80040a0:	f7fc fad2 	bl	8000648 <__aeabi_dmul>
 80040a4:	4680      	mov	r8, r0
 80040a6:	4689      	mov	r9, r1
 80040a8:	e7c6      	b.n	8004038 <_dtoa_r+0x510>
 80040aa:	4650      	mov	r0, sl
 80040ac:	4659      	mov	r1, fp
 80040ae:	f7fc facb 	bl	8000648 <__aeabi_dmul>
 80040b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040b4:	9d01      	ldr	r5, [sp, #4]
 80040b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80040b8:	4682      	mov	sl, r0
 80040ba:	468b      	mov	fp, r1
 80040bc:	4649      	mov	r1, r9
 80040be:	4640      	mov	r0, r8
 80040c0:	f7fc fd72 	bl	8000ba8 <__aeabi_d2iz>
 80040c4:	4606      	mov	r6, r0
 80040c6:	f7fc fa55 	bl	8000574 <__aeabi_i2d>
 80040ca:	3630      	adds	r6, #48	; 0x30
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4640      	mov	r0, r8
 80040d2:	4649      	mov	r1, r9
 80040d4:	f7fc f900 	bl	80002d8 <__aeabi_dsub>
 80040d8:	f805 6b01 	strb.w	r6, [r5], #1
 80040dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040de:	429d      	cmp	r5, r3
 80040e0:	4680      	mov	r8, r0
 80040e2:	4689      	mov	r9, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	d124      	bne.n	8004134 <_dtoa_r+0x60c>
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <_dtoa_r+0x630>)
 80040ec:	4650      	mov	r0, sl
 80040ee:	4659      	mov	r1, fp
 80040f0:	f7fc f8f4 	bl	80002dc <__adddf3>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4640      	mov	r0, r8
 80040fa:	4649      	mov	r1, r9
 80040fc:	f7fc fd34 	bl	8000b68 <__aeabi_dcmpgt>
 8004100:	2800      	cmp	r0, #0
 8004102:	d173      	bne.n	80041ec <_dtoa_r+0x6c4>
 8004104:	4652      	mov	r2, sl
 8004106:	465b      	mov	r3, fp
 8004108:	4913      	ldr	r1, [pc, #76]	; (8004158 <_dtoa_r+0x630>)
 800410a:	2000      	movs	r0, #0
 800410c:	f7fc f8e4 	bl	80002d8 <__aeabi_dsub>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4640      	mov	r0, r8
 8004116:	4649      	mov	r1, r9
 8004118:	f7fc fd08 	bl	8000b2c <__aeabi_dcmplt>
 800411c:	2800      	cmp	r0, #0
 800411e:	f43f af35 	beq.w	8003f8c <_dtoa_r+0x464>
 8004122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004124:	1e6b      	subs	r3, r5, #1
 8004126:	930f      	str	r3, [sp, #60]	; 0x3c
 8004128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d0f8      	beq.n	8004122 <_dtoa_r+0x5fa>
 8004130:	9700      	str	r7, [sp, #0]
 8004132:	e049      	b.n	80041c8 <_dtoa_r+0x6a0>
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <_dtoa_r+0x624>)
 8004136:	f7fc fa87 	bl	8000648 <__aeabi_dmul>
 800413a:	4680      	mov	r8, r0
 800413c:	4689      	mov	r9, r1
 800413e:	e7bd      	b.n	80040bc <_dtoa_r+0x594>
 8004140:	08005eb0 	.word	0x08005eb0
 8004144:	08005e88 	.word	0x08005e88
 8004148:	3ff00000 	.word	0x3ff00000
 800414c:	40240000 	.word	0x40240000
 8004150:	401c0000 	.word	0x401c0000
 8004154:	40140000 	.word	0x40140000
 8004158:	3fe00000 	.word	0x3fe00000
 800415c:	9d01      	ldr	r5, [sp, #4]
 800415e:	4656      	mov	r6, sl
 8004160:	465f      	mov	r7, fp
 8004162:	4642      	mov	r2, r8
 8004164:	464b      	mov	r3, r9
 8004166:	4630      	mov	r0, r6
 8004168:	4639      	mov	r1, r7
 800416a:	f7fc fb97 	bl	800089c <__aeabi_ddiv>
 800416e:	f7fc fd1b 	bl	8000ba8 <__aeabi_d2iz>
 8004172:	4682      	mov	sl, r0
 8004174:	f7fc f9fe 	bl	8000574 <__aeabi_i2d>
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	f7fc fa64 	bl	8000648 <__aeabi_dmul>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4630      	mov	r0, r6
 8004186:	4639      	mov	r1, r7
 8004188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800418c:	f7fc f8a4 	bl	80002d8 <__aeabi_dsub>
 8004190:	f805 6b01 	strb.w	r6, [r5], #1
 8004194:	9e01      	ldr	r6, [sp, #4]
 8004196:	9f03      	ldr	r7, [sp, #12]
 8004198:	1bae      	subs	r6, r5, r6
 800419a:	42b7      	cmp	r7, r6
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	d135      	bne.n	800420e <_dtoa_r+0x6e6>
 80041a2:	f7fc f89b 	bl	80002dc <__adddf3>
 80041a6:	4642      	mov	r2, r8
 80041a8:	464b      	mov	r3, r9
 80041aa:	4606      	mov	r6, r0
 80041ac:	460f      	mov	r7, r1
 80041ae:	f7fc fcdb 	bl	8000b68 <__aeabi_dcmpgt>
 80041b2:	b9d0      	cbnz	r0, 80041ea <_dtoa_r+0x6c2>
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	4630      	mov	r0, r6
 80041ba:	4639      	mov	r1, r7
 80041bc:	f7fc fcac 	bl	8000b18 <__aeabi_dcmpeq>
 80041c0:	b110      	cbz	r0, 80041c8 <_dtoa_r+0x6a0>
 80041c2:	f01a 0f01 	tst.w	sl, #1
 80041c6:	d110      	bne.n	80041ea <_dtoa_r+0x6c2>
 80041c8:	4620      	mov	r0, r4
 80041ca:	ee18 1a10 	vmov	r1, s16
 80041ce:	f000 fbed 	bl	80049ac <_Bfree>
 80041d2:	2300      	movs	r3, #0
 80041d4:	9800      	ldr	r0, [sp, #0]
 80041d6:	702b      	strb	r3, [r5, #0]
 80041d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041da:	3001      	adds	r0, #1
 80041dc:	6018      	str	r0, [r3, #0]
 80041de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f43f acf1 	beq.w	8003bc8 <_dtoa_r+0xa0>
 80041e6:	601d      	str	r5, [r3, #0]
 80041e8:	e4ee      	b.n	8003bc8 <_dtoa_r+0xa0>
 80041ea:	9f00      	ldr	r7, [sp, #0]
 80041ec:	462b      	mov	r3, r5
 80041ee:	461d      	mov	r5, r3
 80041f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041f4:	2a39      	cmp	r2, #57	; 0x39
 80041f6:	d106      	bne.n	8004206 <_dtoa_r+0x6de>
 80041f8:	9a01      	ldr	r2, [sp, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d1f7      	bne.n	80041ee <_dtoa_r+0x6c6>
 80041fe:	9901      	ldr	r1, [sp, #4]
 8004200:	2230      	movs	r2, #48	; 0x30
 8004202:	3701      	adds	r7, #1
 8004204:	700a      	strb	r2, [r1, #0]
 8004206:	781a      	ldrb	r2, [r3, #0]
 8004208:	3201      	adds	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e790      	b.n	8004130 <_dtoa_r+0x608>
 800420e:	4ba6      	ldr	r3, [pc, #664]	; (80044a8 <_dtoa_r+0x980>)
 8004210:	2200      	movs	r2, #0
 8004212:	f7fc fa19 	bl	8000648 <__aeabi_dmul>
 8004216:	2200      	movs	r2, #0
 8004218:	2300      	movs	r3, #0
 800421a:	4606      	mov	r6, r0
 800421c:	460f      	mov	r7, r1
 800421e:	f7fc fc7b 	bl	8000b18 <__aeabi_dcmpeq>
 8004222:	2800      	cmp	r0, #0
 8004224:	d09d      	beq.n	8004162 <_dtoa_r+0x63a>
 8004226:	e7cf      	b.n	80041c8 <_dtoa_r+0x6a0>
 8004228:	9a08      	ldr	r2, [sp, #32]
 800422a:	2a00      	cmp	r2, #0
 800422c:	f000 80d7 	beq.w	80043de <_dtoa_r+0x8b6>
 8004230:	9a06      	ldr	r2, [sp, #24]
 8004232:	2a01      	cmp	r2, #1
 8004234:	f300 80ba 	bgt.w	80043ac <_dtoa_r+0x884>
 8004238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800423a:	2a00      	cmp	r2, #0
 800423c:	f000 80b2 	beq.w	80043a4 <_dtoa_r+0x87c>
 8004240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004244:	9e07      	ldr	r6, [sp, #28]
 8004246:	9d04      	ldr	r5, [sp, #16]
 8004248:	9a04      	ldr	r2, [sp, #16]
 800424a:	441a      	add	r2, r3
 800424c:	9204      	str	r2, [sp, #16]
 800424e:	9a05      	ldr	r2, [sp, #20]
 8004250:	2101      	movs	r1, #1
 8004252:	441a      	add	r2, r3
 8004254:	4620      	mov	r0, r4
 8004256:	9205      	str	r2, [sp, #20]
 8004258:	f000 fc60 	bl	8004b1c <__i2b>
 800425c:	4607      	mov	r7, r0
 800425e:	2d00      	cmp	r5, #0
 8004260:	dd0c      	ble.n	800427c <_dtoa_r+0x754>
 8004262:	9b05      	ldr	r3, [sp, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	dd09      	ble.n	800427c <_dtoa_r+0x754>
 8004268:	42ab      	cmp	r3, r5
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	bfa8      	it	ge
 800426e:	462b      	movge	r3, r5
 8004270:	1ad2      	subs	r2, r2, r3
 8004272:	9204      	str	r2, [sp, #16]
 8004274:	9a05      	ldr	r2, [sp, #20]
 8004276:	1aed      	subs	r5, r5, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	9305      	str	r3, [sp, #20]
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	b31b      	cbz	r3, 80042c8 <_dtoa_r+0x7a0>
 8004280:	9b08      	ldr	r3, [sp, #32]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80af 	beq.w	80043e6 <_dtoa_r+0x8be>
 8004288:	2e00      	cmp	r6, #0
 800428a:	dd13      	ble.n	80042b4 <_dtoa_r+0x78c>
 800428c:	4639      	mov	r1, r7
 800428e:	4632      	mov	r2, r6
 8004290:	4620      	mov	r0, r4
 8004292:	f000 fd03 	bl	8004c9c <__pow5mult>
 8004296:	ee18 2a10 	vmov	r2, s16
 800429a:	4601      	mov	r1, r0
 800429c:	4607      	mov	r7, r0
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 fc52 	bl	8004b48 <__multiply>
 80042a4:	ee18 1a10 	vmov	r1, s16
 80042a8:	4680      	mov	r8, r0
 80042aa:	4620      	mov	r0, r4
 80042ac:	f000 fb7e 	bl	80049ac <_Bfree>
 80042b0:	ee08 8a10 	vmov	s16, r8
 80042b4:	9b07      	ldr	r3, [sp, #28]
 80042b6:	1b9a      	subs	r2, r3, r6
 80042b8:	d006      	beq.n	80042c8 <_dtoa_r+0x7a0>
 80042ba:	ee18 1a10 	vmov	r1, s16
 80042be:	4620      	mov	r0, r4
 80042c0:	f000 fcec 	bl	8004c9c <__pow5mult>
 80042c4:	ee08 0a10 	vmov	s16, r0
 80042c8:	2101      	movs	r1, #1
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fc26 	bl	8004b1c <__i2b>
 80042d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	4606      	mov	r6, r0
 80042d6:	f340 8088 	ble.w	80043ea <_dtoa_r+0x8c2>
 80042da:	461a      	mov	r2, r3
 80042dc:	4601      	mov	r1, r0
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 fcdc 	bl	8004c9c <__pow5mult>
 80042e4:	9b06      	ldr	r3, [sp, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	4606      	mov	r6, r0
 80042ea:	f340 8081 	ble.w	80043f0 <_dtoa_r+0x8c8>
 80042ee:	f04f 0800 	mov.w	r8, #0
 80042f2:	6933      	ldr	r3, [r6, #16]
 80042f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80042f8:	6918      	ldr	r0, [r3, #16]
 80042fa:	f000 fbbf 	bl	8004a7c <__hi0bits>
 80042fe:	f1c0 0020 	rsb	r0, r0, #32
 8004302:	9b05      	ldr	r3, [sp, #20]
 8004304:	4418      	add	r0, r3
 8004306:	f010 001f 	ands.w	r0, r0, #31
 800430a:	f000 8092 	beq.w	8004432 <_dtoa_r+0x90a>
 800430e:	f1c0 0320 	rsb	r3, r0, #32
 8004312:	2b04      	cmp	r3, #4
 8004314:	f340 808a 	ble.w	800442c <_dtoa_r+0x904>
 8004318:	f1c0 001c 	rsb	r0, r0, #28
 800431c:	9b04      	ldr	r3, [sp, #16]
 800431e:	4403      	add	r3, r0
 8004320:	9304      	str	r3, [sp, #16]
 8004322:	9b05      	ldr	r3, [sp, #20]
 8004324:	4403      	add	r3, r0
 8004326:	4405      	add	r5, r0
 8004328:	9305      	str	r3, [sp, #20]
 800432a:	9b04      	ldr	r3, [sp, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	dd07      	ble.n	8004340 <_dtoa_r+0x818>
 8004330:	ee18 1a10 	vmov	r1, s16
 8004334:	461a      	mov	r2, r3
 8004336:	4620      	mov	r0, r4
 8004338:	f000 fd0a 	bl	8004d50 <__lshift>
 800433c:	ee08 0a10 	vmov	s16, r0
 8004340:	9b05      	ldr	r3, [sp, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	dd05      	ble.n	8004352 <_dtoa_r+0x82a>
 8004346:	4631      	mov	r1, r6
 8004348:	461a      	mov	r2, r3
 800434a:	4620      	mov	r0, r4
 800434c:	f000 fd00 	bl	8004d50 <__lshift>
 8004350:	4606      	mov	r6, r0
 8004352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d06e      	beq.n	8004436 <_dtoa_r+0x90e>
 8004358:	ee18 0a10 	vmov	r0, s16
 800435c:	4631      	mov	r1, r6
 800435e:	f000 fd67 	bl	8004e30 <__mcmp>
 8004362:	2800      	cmp	r0, #0
 8004364:	da67      	bge.n	8004436 <_dtoa_r+0x90e>
 8004366:	9b00      	ldr	r3, [sp, #0]
 8004368:	3b01      	subs	r3, #1
 800436a:	ee18 1a10 	vmov	r1, s16
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	220a      	movs	r2, #10
 8004372:	2300      	movs	r3, #0
 8004374:	4620      	mov	r0, r4
 8004376:	f000 fb3b 	bl	80049f0 <__multadd>
 800437a:	9b08      	ldr	r3, [sp, #32]
 800437c:	ee08 0a10 	vmov	s16, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 81b1 	beq.w	80046e8 <_dtoa_r+0xbc0>
 8004386:	2300      	movs	r3, #0
 8004388:	4639      	mov	r1, r7
 800438a:	220a      	movs	r2, #10
 800438c:	4620      	mov	r0, r4
 800438e:	f000 fb2f 	bl	80049f0 <__multadd>
 8004392:	9b02      	ldr	r3, [sp, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	4607      	mov	r7, r0
 8004398:	f300 808e 	bgt.w	80044b8 <_dtoa_r+0x990>
 800439c:	9b06      	ldr	r3, [sp, #24]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	dc51      	bgt.n	8004446 <_dtoa_r+0x91e>
 80043a2:	e089      	b.n	80044b8 <_dtoa_r+0x990>
 80043a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80043aa:	e74b      	b.n	8004244 <_dtoa_r+0x71c>
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	1e5e      	subs	r6, r3, #1
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	42b3      	cmp	r3, r6
 80043b4:	bfbf      	itttt	lt
 80043b6:	9b07      	ldrlt	r3, [sp, #28]
 80043b8:	9607      	strlt	r6, [sp, #28]
 80043ba:	1af2      	sublt	r2, r6, r3
 80043bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80043be:	bfb6      	itet	lt
 80043c0:	189b      	addlt	r3, r3, r2
 80043c2:	1b9e      	subge	r6, r3, r6
 80043c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	bfb8      	it	lt
 80043ca:	2600      	movlt	r6, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bfb7      	itett	lt
 80043d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80043d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80043d8:	1a9d      	sublt	r5, r3, r2
 80043da:	2300      	movlt	r3, #0
 80043dc:	e734      	b.n	8004248 <_dtoa_r+0x720>
 80043de:	9e07      	ldr	r6, [sp, #28]
 80043e0:	9d04      	ldr	r5, [sp, #16]
 80043e2:	9f08      	ldr	r7, [sp, #32]
 80043e4:	e73b      	b.n	800425e <_dtoa_r+0x736>
 80043e6:	9a07      	ldr	r2, [sp, #28]
 80043e8:	e767      	b.n	80042ba <_dtoa_r+0x792>
 80043ea:	9b06      	ldr	r3, [sp, #24]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	dc18      	bgt.n	8004422 <_dtoa_r+0x8fa>
 80043f0:	f1ba 0f00 	cmp.w	sl, #0
 80043f4:	d115      	bne.n	8004422 <_dtoa_r+0x8fa>
 80043f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80043fa:	b993      	cbnz	r3, 8004422 <_dtoa_r+0x8fa>
 80043fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004400:	0d1b      	lsrs	r3, r3, #20
 8004402:	051b      	lsls	r3, r3, #20
 8004404:	b183      	cbz	r3, 8004428 <_dtoa_r+0x900>
 8004406:	9b04      	ldr	r3, [sp, #16]
 8004408:	3301      	adds	r3, #1
 800440a:	9304      	str	r3, [sp, #16]
 800440c:	9b05      	ldr	r3, [sp, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	9305      	str	r3, [sp, #20]
 8004412:	f04f 0801 	mov.w	r8, #1
 8004416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af6a 	bne.w	80042f2 <_dtoa_r+0x7ca>
 800441e:	2001      	movs	r0, #1
 8004420:	e76f      	b.n	8004302 <_dtoa_r+0x7da>
 8004422:	f04f 0800 	mov.w	r8, #0
 8004426:	e7f6      	b.n	8004416 <_dtoa_r+0x8ee>
 8004428:	4698      	mov	r8, r3
 800442a:	e7f4      	b.n	8004416 <_dtoa_r+0x8ee>
 800442c:	f43f af7d 	beq.w	800432a <_dtoa_r+0x802>
 8004430:	4618      	mov	r0, r3
 8004432:	301c      	adds	r0, #28
 8004434:	e772      	b.n	800431c <_dtoa_r+0x7f4>
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc37      	bgt.n	80044ac <_dtoa_r+0x984>
 800443c:	9b06      	ldr	r3, [sp, #24]
 800443e:	2b02      	cmp	r3, #2
 8004440:	dd34      	ble.n	80044ac <_dtoa_r+0x984>
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	9302      	str	r3, [sp, #8]
 8004446:	9b02      	ldr	r3, [sp, #8]
 8004448:	b96b      	cbnz	r3, 8004466 <_dtoa_r+0x93e>
 800444a:	4631      	mov	r1, r6
 800444c:	2205      	movs	r2, #5
 800444e:	4620      	mov	r0, r4
 8004450:	f000 face 	bl	80049f0 <__multadd>
 8004454:	4601      	mov	r1, r0
 8004456:	4606      	mov	r6, r0
 8004458:	ee18 0a10 	vmov	r0, s16
 800445c:	f000 fce8 	bl	8004e30 <__mcmp>
 8004460:	2800      	cmp	r0, #0
 8004462:	f73f adbb 	bgt.w	8003fdc <_dtoa_r+0x4b4>
 8004466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004468:	9d01      	ldr	r5, [sp, #4]
 800446a:	43db      	mvns	r3, r3
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	f04f 0800 	mov.w	r8, #0
 8004472:	4631      	mov	r1, r6
 8004474:	4620      	mov	r0, r4
 8004476:	f000 fa99 	bl	80049ac <_Bfree>
 800447a:	2f00      	cmp	r7, #0
 800447c:	f43f aea4 	beq.w	80041c8 <_dtoa_r+0x6a0>
 8004480:	f1b8 0f00 	cmp.w	r8, #0
 8004484:	d005      	beq.n	8004492 <_dtoa_r+0x96a>
 8004486:	45b8      	cmp	r8, r7
 8004488:	d003      	beq.n	8004492 <_dtoa_r+0x96a>
 800448a:	4641      	mov	r1, r8
 800448c:	4620      	mov	r0, r4
 800448e:	f000 fa8d 	bl	80049ac <_Bfree>
 8004492:	4639      	mov	r1, r7
 8004494:	4620      	mov	r0, r4
 8004496:	f000 fa89 	bl	80049ac <_Bfree>
 800449a:	e695      	b.n	80041c8 <_dtoa_r+0x6a0>
 800449c:	2600      	movs	r6, #0
 800449e:	4637      	mov	r7, r6
 80044a0:	e7e1      	b.n	8004466 <_dtoa_r+0x93e>
 80044a2:	9700      	str	r7, [sp, #0]
 80044a4:	4637      	mov	r7, r6
 80044a6:	e599      	b.n	8003fdc <_dtoa_r+0x4b4>
 80044a8:	40240000 	.word	0x40240000
 80044ac:	9b08      	ldr	r3, [sp, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80ca 	beq.w	8004648 <_dtoa_r+0xb20>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	dd05      	ble.n	80044c8 <_dtoa_r+0x9a0>
 80044bc:	4639      	mov	r1, r7
 80044be:	462a      	mov	r2, r5
 80044c0:	4620      	mov	r0, r4
 80044c2:	f000 fc45 	bl	8004d50 <__lshift>
 80044c6:	4607      	mov	r7, r0
 80044c8:	f1b8 0f00 	cmp.w	r8, #0
 80044cc:	d05b      	beq.n	8004586 <_dtoa_r+0xa5e>
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4620      	mov	r0, r4
 80044d2:	f000 fa2b 	bl	800492c <_Balloc>
 80044d6:	4605      	mov	r5, r0
 80044d8:	b928      	cbnz	r0, 80044e6 <_dtoa_r+0x9be>
 80044da:	4b87      	ldr	r3, [pc, #540]	; (80046f8 <_dtoa_r+0xbd0>)
 80044dc:	4602      	mov	r2, r0
 80044de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80044e2:	f7ff bb3b 	b.w	8003b5c <_dtoa_r+0x34>
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	3202      	adds	r2, #2
 80044ea:	0092      	lsls	r2, r2, #2
 80044ec:	f107 010c 	add.w	r1, r7, #12
 80044f0:	300c      	adds	r0, #12
 80044f2:	f000 fa0d 	bl	8004910 <memcpy>
 80044f6:	2201      	movs	r2, #1
 80044f8:	4629      	mov	r1, r5
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 fc28 	bl	8004d50 <__lshift>
 8004500:	9b01      	ldr	r3, [sp, #4]
 8004502:	f103 0901 	add.w	r9, r3, #1
 8004506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800450a:	4413      	add	r3, r2
 800450c:	9305      	str	r3, [sp, #20]
 800450e:	f00a 0301 	and.w	r3, sl, #1
 8004512:	46b8      	mov	r8, r7
 8004514:	9304      	str	r3, [sp, #16]
 8004516:	4607      	mov	r7, r0
 8004518:	4631      	mov	r1, r6
 800451a:	ee18 0a10 	vmov	r0, s16
 800451e:	f7ff fa77 	bl	8003a10 <quorem>
 8004522:	4641      	mov	r1, r8
 8004524:	9002      	str	r0, [sp, #8]
 8004526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800452a:	ee18 0a10 	vmov	r0, s16
 800452e:	f000 fc7f 	bl	8004e30 <__mcmp>
 8004532:	463a      	mov	r2, r7
 8004534:	9003      	str	r0, [sp, #12]
 8004536:	4631      	mov	r1, r6
 8004538:	4620      	mov	r0, r4
 800453a:	f000 fc95 	bl	8004e68 <__mdiff>
 800453e:	68c2      	ldr	r2, [r0, #12]
 8004540:	f109 3bff 	add.w	fp, r9, #4294967295
 8004544:	4605      	mov	r5, r0
 8004546:	bb02      	cbnz	r2, 800458a <_dtoa_r+0xa62>
 8004548:	4601      	mov	r1, r0
 800454a:	ee18 0a10 	vmov	r0, s16
 800454e:	f000 fc6f 	bl	8004e30 <__mcmp>
 8004552:	4602      	mov	r2, r0
 8004554:	4629      	mov	r1, r5
 8004556:	4620      	mov	r0, r4
 8004558:	9207      	str	r2, [sp, #28]
 800455a:	f000 fa27 	bl	80049ac <_Bfree>
 800455e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004562:	ea43 0102 	orr.w	r1, r3, r2
 8004566:	9b04      	ldr	r3, [sp, #16]
 8004568:	430b      	orrs	r3, r1
 800456a:	464d      	mov	r5, r9
 800456c:	d10f      	bne.n	800458e <_dtoa_r+0xa66>
 800456e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004572:	d02a      	beq.n	80045ca <_dtoa_r+0xaa2>
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	dd02      	ble.n	8004580 <_dtoa_r+0xa58>
 800457a:	9b02      	ldr	r3, [sp, #8]
 800457c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004580:	f88b a000 	strb.w	sl, [fp]
 8004584:	e775      	b.n	8004472 <_dtoa_r+0x94a>
 8004586:	4638      	mov	r0, r7
 8004588:	e7ba      	b.n	8004500 <_dtoa_r+0x9d8>
 800458a:	2201      	movs	r2, #1
 800458c:	e7e2      	b.n	8004554 <_dtoa_r+0xa2c>
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db04      	blt.n	800459e <_dtoa_r+0xa76>
 8004594:	9906      	ldr	r1, [sp, #24]
 8004596:	430b      	orrs	r3, r1
 8004598:	9904      	ldr	r1, [sp, #16]
 800459a:	430b      	orrs	r3, r1
 800459c:	d122      	bne.n	80045e4 <_dtoa_r+0xabc>
 800459e:	2a00      	cmp	r2, #0
 80045a0:	ddee      	ble.n	8004580 <_dtoa_r+0xa58>
 80045a2:	ee18 1a10 	vmov	r1, s16
 80045a6:	2201      	movs	r2, #1
 80045a8:	4620      	mov	r0, r4
 80045aa:	f000 fbd1 	bl	8004d50 <__lshift>
 80045ae:	4631      	mov	r1, r6
 80045b0:	ee08 0a10 	vmov	s16, r0
 80045b4:	f000 fc3c 	bl	8004e30 <__mcmp>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dc03      	bgt.n	80045c4 <_dtoa_r+0xa9c>
 80045bc:	d1e0      	bne.n	8004580 <_dtoa_r+0xa58>
 80045be:	f01a 0f01 	tst.w	sl, #1
 80045c2:	d0dd      	beq.n	8004580 <_dtoa_r+0xa58>
 80045c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80045c8:	d1d7      	bne.n	800457a <_dtoa_r+0xa52>
 80045ca:	2339      	movs	r3, #57	; 0x39
 80045cc:	f88b 3000 	strb.w	r3, [fp]
 80045d0:	462b      	mov	r3, r5
 80045d2:	461d      	mov	r5, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80045da:	2a39      	cmp	r2, #57	; 0x39
 80045dc:	d071      	beq.n	80046c2 <_dtoa_r+0xb9a>
 80045de:	3201      	adds	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e746      	b.n	8004472 <_dtoa_r+0x94a>
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	dd07      	ble.n	80045f8 <_dtoa_r+0xad0>
 80045e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80045ec:	d0ed      	beq.n	80045ca <_dtoa_r+0xaa2>
 80045ee:	f10a 0301 	add.w	r3, sl, #1
 80045f2:	f88b 3000 	strb.w	r3, [fp]
 80045f6:	e73c      	b.n	8004472 <_dtoa_r+0x94a>
 80045f8:	9b05      	ldr	r3, [sp, #20]
 80045fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80045fe:	4599      	cmp	r9, r3
 8004600:	d047      	beq.n	8004692 <_dtoa_r+0xb6a>
 8004602:	ee18 1a10 	vmov	r1, s16
 8004606:	2300      	movs	r3, #0
 8004608:	220a      	movs	r2, #10
 800460a:	4620      	mov	r0, r4
 800460c:	f000 f9f0 	bl	80049f0 <__multadd>
 8004610:	45b8      	cmp	r8, r7
 8004612:	ee08 0a10 	vmov	s16, r0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	f04f 020a 	mov.w	r2, #10
 800461e:	4641      	mov	r1, r8
 8004620:	4620      	mov	r0, r4
 8004622:	d106      	bne.n	8004632 <_dtoa_r+0xb0a>
 8004624:	f000 f9e4 	bl	80049f0 <__multadd>
 8004628:	4680      	mov	r8, r0
 800462a:	4607      	mov	r7, r0
 800462c:	f109 0901 	add.w	r9, r9, #1
 8004630:	e772      	b.n	8004518 <_dtoa_r+0x9f0>
 8004632:	f000 f9dd 	bl	80049f0 <__multadd>
 8004636:	4639      	mov	r1, r7
 8004638:	4680      	mov	r8, r0
 800463a:	2300      	movs	r3, #0
 800463c:	220a      	movs	r2, #10
 800463e:	4620      	mov	r0, r4
 8004640:	f000 f9d6 	bl	80049f0 <__multadd>
 8004644:	4607      	mov	r7, r0
 8004646:	e7f1      	b.n	800462c <_dtoa_r+0xb04>
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	9302      	str	r3, [sp, #8]
 800464c:	9d01      	ldr	r5, [sp, #4]
 800464e:	ee18 0a10 	vmov	r0, s16
 8004652:	4631      	mov	r1, r6
 8004654:	f7ff f9dc 	bl	8003a10 <quorem>
 8004658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	f805 ab01 	strb.w	sl, [r5], #1
 8004662:	1aea      	subs	r2, r5, r3
 8004664:	9b02      	ldr	r3, [sp, #8]
 8004666:	4293      	cmp	r3, r2
 8004668:	dd09      	ble.n	800467e <_dtoa_r+0xb56>
 800466a:	ee18 1a10 	vmov	r1, s16
 800466e:	2300      	movs	r3, #0
 8004670:	220a      	movs	r2, #10
 8004672:	4620      	mov	r0, r4
 8004674:	f000 f9bc 	bl	80049f0 <__multadd>
 8004678:	ee08 0a10 	vmov	s16, r0
 800467c:	e7e7      	b.n	800464e <_dtoa_r+0xb26>
 800467e:	9b02      	ldr	r3, [sp, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	bfc8      	it	gt
 8004684:	461d      	movgt	r5, r3
 8004686:	9b01      	ldr	r3, [sp, #4]
 8004688:	bfd8      	it	le
 800468a:	2501      	movle	r5, #1
 800468c:	441d      	add	r5, r3
 800468e:	f04f 0800 	mov.w	r8, #0
 8004692:	ee18 1a10 	vmov	r1, s16
 8004696:	2201      	movs	r2, #1
 8004698:	4620      	mov	r0, r4
 800469a:	f000 fb59 	bl	8004d50 <__lshift>
 800469e:	4631      	mov	r1, r6
 80046a0:	ee08 0a10 	vmov	s16, r0
 80046a4:	f000 fbc4 	bl	8004e30 <__mcmp>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	dc91      	bgt.n	80045d0 <_dtoa_r+0xaa8>
 80046ac:	d102      	bne.n	80046b4 <_dtoa_r+0xb8c>
 80046ae:	f01a 0f01 	tst.w	sl, #1
 80046b2:	d18d      	bne.n	80045d0 <_dtoa_r+0xaa8>
 80046b4:	462b      	mov	r3, r5
 80046b6:	461d      	mov	r5, r3
 80046b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046bc:	2a30      	cmp	r2, #48	; 0x30
 80046be:	d0fa      	beq.n	80046b6 <_dtoa_r+0xb8e>
 80046c0:	e6d7      	b.n	8004472 <_dtoa_r+0x94a>
 80046c2:	9a01      	ldr	r2, [sp, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d184      	bne.n	80045d2 <_dtoa_r+0xaaa>
 80046c8:	9b00      	ldr	r3, [sp, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2331      	movs	r3, #49	; 0x31
 80046d0:	7013      	strb	r3, [r2, #0]
 80046d2:	e6ce      	b.n	8004472 <_dtoa_r+0x94a>
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <_dtoa_r+0xbd4>)
 80046d6:	f7ff ba95 	b.w	8003c04 <_dtoa_r+0xdc>
 80046da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f aa6e 	bne.w	8003bbe <_dtoa_r+0x96>
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <_dtoa_r+0xbd8>)
 80046e4:	f7ff ba8e 	b.w	8003c04 <_dtoa_r+0xdc>
 80046e8:	9b02      	ldr	r3, [sp, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dcae      	bgt.n	800464c <_dtoa_r+0xb24>
 80046ee:	9b06      	ldr	r3, [sp, #24]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	f73f aea8 	bgt.w	8004446 <_dtoa_r+0x91e>
 80046f6:	e7a9      	b.n	800464c <_dtoa_r+0xb24>
 80046f8:	08005db8 	.word	0x08005db8
 80046fc:	08005c14 	.word	0x08005c14
 8004700:	08005d39 	.word	0x08005d39

08004704 <std>:
 8004704:	2300      	movs	r3, #0
 8004706:	b510      	push	{r4, lr}
 8004708:	4604      	mov	r4, r0
 800470a:	e9c0 3300 	strd	r3, r3, [r0]
 800470e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004712:	6083      	str	r3, [r0, #8]
 8004714:	8181      	strh	r1, [r0, #12]
 8004716:	6643      	str	r3, [r0, #100]	; 0x64
 8004718:	81c2      	strh	r2, [r0, #14]
 800471a:	6183      	str	r3, [r0, #24]
 800471c:	4619      	mov	r1, r3
 800471e:	2208      	movs	r2, #8
 8004720:	305c      	adds	r0, #92	; 0x5c
 8004722:	f7fe fc4b 	bl	8002fbc <memset>
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <std+0x38>)
 8004728:	6263      	str	r3, [r4, #36]	; 0x24
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <std+0x3c>)
 800472c:	62a3      	str	r3, [r4, #40]	; 0x28
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <std+0x40>)
 8004730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <std+0x44>)
 8004734:	6224      	str	r4, [r4, #32]
 8004736:	6323      	str	r3, [r4, #48]	; 0x30
 8004738:	bd10      	pop	{r4, pc}
 800473a:	bf00      	nop
 800473c:	080054f5 	.word	0x080054f5
 8004740:	08005517 	.word	0x08005517
 8004744:	0800554f 	.word	0x0800554f
 8004748:	08005573 	.word	0x08005573

0800474c <_cleanup_r>:
 800474c:	4901      	ldr	r1, [pc, #4]	; (8004754 <_cleanup_r+0x8>)
 800474e:	f000 b8af 	b.w	80048b0 <_fwalk_reent>
 8004752:	bf00      	nop
 8004754:	08005889 	.word	0x08005889

08004758 <__sfmoreglue>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2268      	movs	r2, #104	; 0x68
 800475c:	1e4d      	subs	r5, r1, #1
 800475e:	4355      	muls	r5, r2
 8004760:	460e      	mov	r6, r1
 8004762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004766:	f000 fce7 	bl	8005138 <_malloc_r>
 800476a:	4604      	mov	r4, r0
 800476c:	b140      	cbz	r0, 8004780 <__sfmoreglue+0x28>
 800476e:	2100      	movs	r1, #0
 8004770:	e9c0 1600 	strd	r1, r6, [r0]
 8004774:	300c      	adds	r0, #12
 8004776:	60a0      	str	r0, [r4, #8]
 8004778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800477c:	f7fe fc1e 	bl	8002fbc <memset>
 8004780:	4620      	mov	r0, r4
 8004782:	bd70      	pop	{r4, r5, r6, pc}

08004784 <__sfp_lock_acquire>:
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__sfp_lock_acquire+0x8>)
 8004786:	f000 b8b8 	b.w	80048fa <__retarget_lock_acquire_recursive>
 800478a:	bf00      	nop
 800478c:	20000209 	.word	0x20000209

08004790 <__sfp_lock_release>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__sfp_lock_release+0x8>)
 8004792:	f000 b8b3 	b.w	80048fc <__retarget_lock_release_recursive>
 8004796:	bf00      	nop
 8004798:	20000209 	.word	0x20000209

0800479c <__sinit_lock_acquire>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__sinit_lock_acquire+0x8>)
 800479e:	f000 b8ac 	b.w	80048fa <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	2000020a 	.word	0x2000020a

080047a8 <__sinit_lock_release>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__sinit_lock_release+0x8>)
 80047aa:	f000 b8a7 	b.w	80048fc <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	2000020a 	.word	0x2000020a

080047b4 <__sinit>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
 80047b8:	f7ff fff0 	bl	800479c <__sinit_lock_acquire>
 80047bc:	69a3      	ldr	r3, [r4, #24]
 80047be:	b11b      	cbz	r3, 80047c8 <__sinit+0x14>
 80047c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c4:	f7ff bff0 	b.w	80047a8 <__sinit_lock_release>
 80047c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047cc:	6523      	str	r3, [r4, #80]	; 0x50
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <__sinit+0x68>)
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <__sinit+0x6c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	bf04      	itt	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	61a3      	streq	r3, [r4, #24]
 80047de:	4620      	mov	r0, r4
 80047e0:	f000 f820 	bl	8004824 <__sfp>
 80047e4:	6060      	str	r0, [r4, #4]
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 f81c 	bl	8004824 <__sfp>
 80047ec:	60a0      	str	r0, [r4, #8]
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 f818 	bl	8004824 <__sfp>
 80047f4:	2200      	movs	r2, #0
 80047f6:	60e0      	str	r0, [r4, #12]
 80047f8:	2104      	movs	r1, #4
 80047fa:	6860      	ldr	r0, [r4, #4]
 80047fc:	f7ff ff82 	bl	8004704 <std>
 8004800:	68a0      	ldr	r0, [r4, #8]
 8004802:	2201      	movs	r2, #1
 8004804:	2109      	movs	r1, #9
 8004806:	f7ff ff7d 	bl	8004704 <std>
 800480a:	68e0      	ldr	r0, [r4, #12]
 800480c:	2202      	movs	r2, #2
 800480e:	2112      	movs	r1, #18
 8004810:	f7ff ff78 	bl	8004704 <std>
 8004814:	2301      	movs	r3, #1
 8004816:	61a3      	str	r3, [r4, #24]
 8004818:	e7d2      	b.n	80047c0 <__sinit+0xc>
 800481a:	bf00      	nop
 800481c:	08005c00 	.word	0x08005c00
 8004820:	0800474d 	.word	0x0800474d

08004824 <__sfp>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	4607      	mov	r7, r0
 8004828:	f7ff ffac 	bl	8004784 <__sfp_lock_acquire>
 800482c:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <__sfp+0x84>)
 800482e:	681e      	ldr	r6, [r3, #0]
 8004830:	69b3      	ldr	r3, [r6, #24]
 8004832:	b913      	cbnz	r3, 800483a <__sfp+0x16>
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff ffbd 	bl	80047b4 <__sinit>
 800483a:	3648      	adds	r6, #72	; 0x48
 800483c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004840:	3b01      	subs	r3, #1
 8004842:	d503      	bpl.n	800484c <__sfp+0x28>
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	b30b      	cbz	r3, 800488c <__sfp+0x68>
 8004848:	6836      	ldr	r6, [r6, #0]
 800484a:	e7f7      	b.n	800483c <__sfp+0x18>
 800484c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004850:	b9d5      	cbnz	r5, 8004888 <__sfp+0x64>
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <__sfp+0x88>)
 8004854:	60e3      	str	r3, [r4, #12]
 8004856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800485a:	6665      	str	r5, [r4, #100]	; 0x64
 800485c:	f000 f84c 	bl	80048f8 <__retarget_lock_init_recursive>
 8004860:	f7ff ff96 	bl	8004790 <__sfp_lock_release>
 8004864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800486c:	6025      	str	r5, [r4, #0]
 800486e:	61a5      	str	r5, [r4, #24]
 8004870:	2208      	movs	r2, #8
 8004872:	4629      	mov	r1, r5
 8004874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004878:	f7fe fba0 	bl	8002fbc <memset>
 800487c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004884:	4620      	mov	r0, r4
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004888:	3468      	adds	r4, #104	; 0x68
 800488a:	e7d9      	b.n	8004840 <__sfp+0x1c>
 800488c:	2104      	movs	r1, #4
 800488e:	4638      	mov	r0, r7
 8004890:	f7ff ff62 	bl	8004758 <__sfmoreglue>
 8004894:	4604      	mov	r4, r0
 8004896:	6030      	str	r0, [r6, #0]
 8004898:	2800      	cmp	r0, #0
 800489a:	d1d5      	bne.n	8004848 <__sfp+0x24>
 800489c:	f7ff ff78 	bl	8004790 <__sfp_lock_release>
 80048a0:	230c      	movs	r3, #12
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	e7ee      	b.n	8004884 <__sfp+0x60>
 80048a6:	bf00      	nop
 80048a8:	08005c00 	.word	0x08005c00
 80048ac:	ffff0001 	.word	0xffff0001

080048b0 <_fwalk_reent>:
 80048b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b4:	4606      	mov	r6, r0
 80048b6:	4688      	mov	r8, r1
 80048b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048bc:	2700      	movs	r7, #0
 80048be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048c2:	f1b9 0901 	subs.w	r9, r9, #1
 80048c6:	d505      	bpl.n	80048d4 <_fwalk_reent+0x24>
 80048c8:	6824      	ldr	r4, [r4, #0]
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d1f7      	bne.n	80048be <_fwalk_reent+0xe>
 80048ce:	4638      	mov	r0, r7
 80048d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d4:	89ab      	ldrh	r3, [r5, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d907      	bls.n	80048ea <_fwalk_reent+0x3a>
 80048da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048de:	3301      	adds	r3, #1
 80048e0:	d003      	beq.n	80048ea <_fwalk_reent+0x3a>
 80048e2:	4629      	mov	r1, r5
 80048e4:	4630      	mov	r0, r6
 80048e6:	47c0      	blx	r8
 80048e8:	4307      	orrs	r7, r0
 80048ea:	3568      	adds	r5, #104	; 0x68
 80048ec:	e7e9      	b.n	80048c2 <_fwalk_reent+0x12>
	...

080048f0 <_localeconv_r>:
 80048f0:	4800      	ldr	r0, [pc, #0]	; (80048f4 <_localeconv_r+0x4>)
 80048f2:	4770      	bx	lr
 80048f4:	20000160 	.word	0x20000160

080048f8 <__retarget_lock_init_recursive>:
 80048f8:	4770      	bx	lr

080048fa <__retarget_lock_acquire_recursive>:
 80048fa:	4770      	bx	lr

080048fc <__retarget_lock_release_recursive>:
 80048fc:	4770      	bx	lr
	...

08004900 <malloc>:
 8004900:	4b02      	ldr	r3, [pc, #8]	; (800490c <malloc+0xc>)
 8004902:	4601      	mov	r1, r0
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	f000 bc17 	b.w	8005138 <_malloc_r>
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c

08004910 <memcpy>:
 8004910:	440a      	add	r2, r1
 8004912:	4291      	cmp	r1, r2
 8004914:	f100 33ff 	add.w	r3, r0, #4294967295
 8004918:	d100      	bne.n	800491c <memcpy+0xc>
 800491a:	4770      	bx	lr
 800491c:	b510      	push	{r4, lr}
 800491e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004926:	4291      	cmp	r1, r2
 8004928:	d1f9      	bne.n	800491e <memcpy+0xe>
 800492a:	bd10      	pop	{r4, pc}

0800492c <_Balloc>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004930:	4604      	mov	r4, r0
 8004932:	460d      	mov	r5, r1
 8004934:	b976      	cbnz	r6, 8004954 <_Balloc+0x28>
 8004936:	2010      	movs	r0, #16
 8004938:	f7ff ffe2 	bl	8004900 <malloc>
 800493c:	4602      	mov	r2, r0
 800493e:	6260      	str	r0, [r4, #36]	; 0x24
 8004940:	b920      	cbnz	r0, 800494c <_Balloc+0x20>
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <_Balloc+0x78>)
 8004944:	4818      	ldr	r0, [pc, #96]	; (80049a8 <_Balloc+0x7c>)
 8004946:	2166      	movs	r1, #102	; 0x66
 8004948:	f000 feea 	bl	8005720 <__assert_func>
 800494c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004950:	6006      	str	r6, [r0, #0]
 8004952:	60c6      	str	r6, [r0, #12]
 8004954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004956:	68f3      	ldr	r3, [r6, #12]
 8004958:	b183      	cbz	r3, 800497c <_Balloc+0x50>
 800495a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004962:	b9b8      	cbnz	r0, 8004994 <_Balloc+0x68>
 8004964:	2101      	movs	r1, #1
 8004966:	fa01 f605 	lsl.w	r6, r1, r5
 800496a:	1d72      	adds	r2, r6, #5
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	4620      	mov	r0, r4
 8004970:	f000 fb60 	bl	8005034 <_calloc_r>
 8004974:	b160      	cbz	r0, 8004990 <_Balloc+0x64>
 8004976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800497a:	e00e      	b.n	800499a <_Balloc+0x6e>
 800497c:	2221      	movs	r2, #33	; 0x21
 800497e:	2104      	movs	r1, #4
 8004980:	4620      	mov	r0, r4
 8004982:	f000 fb57 	bl	8005034 <_calloc_r>
 8004986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004988:	60f0      	str	r0, [r6, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e4      	bne.n	800495a <_Balloc+0x2e>
 8004990:	2000      	movs	r0, #0
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	6802      	ldr	r2, [r0, #0]
 8004996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800499a:	2300      	movs	r3, #0
 800499c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049a0:	e7f7      	b.n	8004992 <_Balloc+0x66>
 80049a2:	bf00      	nop
 80049a4:	08005d46 	.word	0x08005d46
 80049a8:	08005e2c 	.word	0x08005e2c

080049ac <_Bfree>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049b0:	4605      	mov	r5, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	b976      	cbnz	r6, 80049d4 <_Bfree+0x28>
 80049b6:	2010      	movs	r0, #16
 80049b8:	f7ff ffa2 	bl	8004900 <malloc>
 80049bc:	4602      	mov	r2, r0
 80049be:	6268      	str	r0, [r5, #36]	; 0x24
 80049c0:	b920      	cbnz	r0, 80049cc <_Bfree+0x20>
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <_Bfree+0x3c>)
 80049c4:	4809      	ldr	r0, [pc, #36]	; (80049ec <_Bfree+0x40>)
 80049c6:	218a      	movs	r1, #138	; 0x8a
 80049c8:	f000 feaa 	bl	8005720 <__assert_func>
 80049cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049d0:	6006      	str	r6, [r0, #0]
 80049d2:	60c6      	str	r6, [r0, #12]
 80049d4:	b13c      	cbz	r4, 80049e6 <_Bfree+0x3a>
 80049d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049d8:	6862      	ldr	r2, [r4, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e0:	6021      	str	r1, [r4, #0]
 80049e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	08005d46 	.word	0x08005d46
 80049ec:	08005e2c 	.word	0x08005e2c

080049f0 <__multadd>:
 80049f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f4:	690d      	ldr	r5, [r1, #16]
 80049f6:	4607      	mov	r7, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	461e      	mov	r6, r3
 80049fc:	f101 0c14 	add.w	ip, r1, #20
 8004a00:	2000      	movs	r0, #0
 8004a02:	f8dc 3000 	ldr.w	r3, [ip]
 8004a06:	b299      	uxth	r1, r3
 8004a08:	fb02 6101 	mla	r1, r2, r1, r6
 8004a0c:	0c1e      	lsrs	r6, r3, #16
 8004a0e:	0c0b      	lsrs	r3, r1, #16
 8004a10:	fb02 3306 	mla	r3, r2, r6, r3
 8004a14:	b289      	uxth	r1, r1
 8004a16:	3001      	adds	r0, #1
 8004a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a1c:	4285      	cmp	r5, r0
 8004a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8004a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a26:	dcec      	bgt.n	8004a02 <__multadd+0x12>
 8004a28:	b30e      	cbz	r6, 8004a6e <__multadd+0x7e>
 8004a2a:	68a3      	ldr	r3, [r4, #8]
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	dc19      	bgt.n	8004a64 <__multadd+0x74>
 8004a30:	6861      	ldr	r1, [r4, #4]
 8004a32:	4638      	mov	r0, r7
 8004a34:	3101      	adds	r1, #1
 8004a36:	f7ff ff79 	bl	800492c <_Balloc>
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	b928      	cbnz	r0, 8004a4a <__multadd+0x5a>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <__multadd+0x84>)
 8004a42:	480d      	ldr	r0, [pc, #52]	; (8004a78 <__multadd+0x88>)
 8004a44:	21b5      	movs	r1, #181	; 0xb5
 8004a46:	f000 fe6b 	bl	8005720 <__assert_func>
 8004a4a:	6922      	ldr	r2, [r4, #16]
 8004a4c:	3202      	adds	r2, #2
 8004a4e:	f104 010c 	add.w	r1, r4, #12
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	300c      	adds	r0, #12
 8004a56:	f7ff ff5b 	bl	8004910 <memcpy>
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f7ff ffa5 	bl	80049ac <_Bfree>
 8004a62:	4644      	mov	r4, r8
 8004a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a68:	3501      	adds	r5, #1
 8004a6a:	615e      	str	r6, [r3, #20]
 8004a6c:	6125      	str	r5, [r4, #16]
 8004a6e:	4620      	mov	r0, r4
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	08005db8 	.word	0x08005db8
 8004a78:	08005e2c 	.word	0x08005e2c

08004a7c <__hi0bits>:
 8004a7c:	0c03      	lsrs	r3, r0, #16
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	b9d3      	cbnz	r3, 8004ab8 <__hi0bits+0x3c>
 8004a82:	0400      	lsls	r0, r0, #16
 8004a84:	2310      	movs	r3, #16
 8004a86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a8a:	bf04      	itt	eq
 8004a8c:	0200      	lsleq	r0, r0, #8
 8004a8e:	3308      	addeq	r3, #8
 8004a90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a94:	bf04      	itt	eq
 8004a96:	0100      	lsleq	r0, r0, #4
 8004a98:	3304      	addeq	r3, #4
 8004a9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a9e:	bf04      	itt	eq
 8004aa0:	0080      	lsleq	r0, r0, #2
 8004aa2:	3302      	addeq	r3, #2
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	db05      	blt.n	8004ab4 <__hi0bits+0x38>
 8004aa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004aac:	f103 0301 	add.w	r3, r3, #1
 8004ab0:	bf08      	it	eq
 8004ab2:	2320      	moveq	r3, #32
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	4770      	bx	lr
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e7e4      	b.n	8004a86 <__hi0bits+0xa>

08004abc <__lo0bits>:
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	f013 0207 	ands.w	r2, r3, #7
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	d00b      	beq.n	8004ade <__lo0bits+0x22>
 8004ac6:	07da      	lsls	r2, r3, #31
 8004ac8:	d423      	bmi.n	8004b12 <__lo0bits+0x56>
 8004aca:	0798      	lsls	r0, r3, #30
 8004acc:	bf49      	itett	mi
 8004ace:	085b      	lsrmi	r3, r3, #1
 8004ad0:	089b      	lsrpl	r3, r3, #2
 8004ad2:	2001      	movmi	r0, #1
 8004ad4:	600b      	strmi	r3, [r1, #0]
 8004ad6:	bf5c      	itt	pl
 8004ad8:	600b      	strpl	r3, [r1, #0]
 8004ada:	2002      	movpl	r0, #2
 8004adc:	4770      	bx	lr
 8004ade:	b298      	uxth	r0, r3
 8004ae0:	b9a8      	cbnz	r0, 8004b0e <__lo0bits+0x52>
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	2010      	movs	r0, #16
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	b90a      	cbnz	r2, 8004aee <__lo0bits+0x32>
 8004aea:	3008      	adds	r0, #8
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	071a      	lsls	r2, r3, #28
 8004af0:	bf04      	itt	eq
 8004af2:	091b      	lsreq	r3, r3, #4
 8004af4:	3004      	addeq	r0, #4
 8004af6:	079a      	lsls	r2, r3, #30
 8004af8:	bf04      	itt	eq
 8004afa:	089b      	lsreq	r3, r3, #2
 8004afc:	3002      	addeq	r0, #2
 8004afe:	07da      	lsls	r2, r3, #31
 8004b00:	d403      	bmi.n	8004b0a <__lo0bits+0x4e>
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	f100 0001 	add.w	r0, r0, #1
 8004b08:	d005      	beq.n	8004b16 <__lo0bits+0x5a>
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	4610      	mov	r0, r2
 8004b10:	e7e9      	b.n	8004ae6 <__lo0bits+0x2a>
 8004b12:	2000      	movs	r0, #0
 8004b14:	4770      	bx	lr
 8004b16:	2020      	movs	r0, #32
 8004b18:	4770      	bx	lr
	...

08004b1c <__i2b>:
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	460c      	mov	r4, r1
 8004b20:	2101      	movs	r1, #1
 8004b22:	f7ff ff03 	bl	800492c <_Balloc>
 8004b26:	4602      	mov	r2, r0
 8004b28:	b928      	cbnz	r0, 8004b36 <__i2b+0x1a>
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <__i2b+0x24>)
 8004b2c:	4805      	ldr	r0, [pc, #20]	; (8004b44 <__i2b+0x28>)
 8004b2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b32:	f000 fdf5 	bl	8005720 <__assert_func>
 8004b36:	2301      	movs	r3, #1
 8004b38:	6144      	str	r4, [r0, #20]
 8004b3a:	6103      	str	r3, [r0, #16]
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	08005db8 	.word	0x08005db8
 8004b44:	08005e2c 	.word	0x08005e2c

08004b48 <__multiply>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	4691      	mov	r9, r2
 8004b4e:	690a      	ldr	r2, [r1, #16]
 8004b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	bfb8      	it	lt
 8004b58:	460b      	movlt	r3, r1
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	bfbc      	itt	lt
 8004b5e:	464c      	movlt	r4, r9
 8004b60:	4699      	movlt	r9, r3
 8004b62:	6927      	ldr	r7, [r4, #16]
 8004b64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004b68:	68a3      	ldr	r3, [r4, #8]
 8004b6a:	6861      	ldr	r1, [r4, #4]
 8004b6c:	eb07 060a 	add.w	r6, r7, sl
 8004b70:	42b3      	cmp	r3, r6
 8004b72:	b085      	sub	sp, #20
 8004b74:	bfb8      	it	lt
 8004b76:	3101      	addlt	r1, #1
 8004b78:	f7ff fed8 	bl	800492c <_Balloc>
 8004b7c:	b930      	cbnz	r0, 8004b8c <__multiply+0x44>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b44      	ldr	r3, [pc, #272]	; (8004c94 <__multiply+0x14c>)
 8004b82:	4845      	ldr	r0, [pc, #276]	; (8004c98 <__multiply+0x150>)
 8004b84:	f240 115d 	movw	r1, #349	; 0x15d
 8004b88:	f000 fdca 	bl	8005720 <__assert_func>
 8004b8c:	f100 0514 	add.w	r5, r0, #20
 8004b90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b94:	462b      	mov	r3, r5
 8004b96:	2200      	movs	r2, #0
 8004b98:	4543      	cmp	r3, r8
 8004b9a:	d321      	bcc.n	8004be0 <__multiply+0x98>
 8004b9c:	f104 0314 	add.w	r3, r4, #20
 8004ba0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ba4:	f109 0314 	add.w	r3, r9, #20
 8004ba8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004bac:	9202      	str	r2, [sp, #8]
 8004bae:	1b3a      	subs	r2, r7, r4
 8004bb0:	3a15      	subs	r2, #21
 8004bb2:	f022 0203 	bic.w	r2, r2, #3
 8004bb6:	3204      	adds	r2, #4
 8004bb8:	f104 0115 	add.w	r1, r4, #21
 8004bbc:	428f      	cmp	r7, r1
 8004bbe:	bf38      	it	cc
 8004bc0:	2204      	movcc	r2, #4
 8004bc2:	9201      	str	r2, [sp, #4]
 8004bc4:	9a02      	ldr	r2, [sp, #8]
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d80c      	bhi.n	8004be6 <__multiply+0x9e>
 8004bcc:	2e00      	cmp	r6, #0
 8004bce:	dd03      	ble.n	8004bd8 <__multiply+0x90>
 8004bd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05a      	beq.n	8004c8e <__multiply+0x146>
 8004bd8:	6106      	str	r6, [r0, #16]
 8004bda:	b005      	add	sp, #20
 8004bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be0:	f843 2b04 	str.w	r2, [r3], #4
 8004be4:	e7d8      	b.n	8004b98 <__multiply+0x50>
 8004be6:	f8b3 a000 	ldrh.w	sl, [r3]
 8004bea:	f1ba 0f00 	cmp.w	sl, #0
 8004bee:	d024      	beq.n	8004c3a <__multiply+0xf2>
 8004bf0:	f104 0e14 	add.w	lr, r4, #20
 8004bf4:	46a9      	mov	r9, r5
 8004bf6:	f04f 0c00 	mov.w	ip, #0
 8004bfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004bfe:	f8d9 1000 	ldr.w	r1, [r9]
 8004c02:	fa1f fb82 	uxth.w	fp, r2
 8004c06:	b289      	uxth	r1, r1
 8004c08:	fb0a 110b 	mla	r1, sl, fp, r1
 8004c0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004c10:	f8d9 2000 	ldr.w	r2, [r9]
 8004c14:	4461      	add	r1, ip
 8004c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004c1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8004c1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004c22:	b289      	uxth	r1, r1
 8004c24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c28:	4577      	cmp	r7, lr
 8004c2a:	f849 1b04 	str.w	r1, [r9], #4
 8004c2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004c32:	d8e2      	bhi.n	8004bfa <__multiply+0xb2>
 8004c34:	9a01      	ldr	r2, [sp, #4]
 8004c36:	f845 c002 	str.w	ip, [r5, r2]
 8004c3a:	9a03      	ldr	r2, [sp, #12]
 8004c3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c40:	3304      	adds	r3, #4
 8004c42:	f1b9 0f00 	cmp.w	r9, #0
 8004c46:	d020      	beq.n	8004c8a <__multiply+0x142>
 8004c48:	6829      	ldr	r1, [r5, #0]
 8004c4a:	f104 0c14 	add.w	ip, r4, #20
 8004c4e:	46ae      	mov	lr, r5
 8004c50:	f04f 0a00 	mov.w	sl, #0
 8004c54:	f8bc b000 	ldrh.w	fp, [ip]
 8004c58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004c5c:	fb09 220b 	mla	r2, r9, fp, r2
 8004c60:	4492      	add	sl, r2
 8004c62:	b289      	uxth	r1, r1
 8004c64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004c68:	f84e 1b04 	str.w	r1, [lr], #4
 8004c6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004c70:	f8be 1000 	ldrh.w	r1, [lr]
 8004c74:	0c12      	lsrs	r2, r2, #16
 8004c76:	fb09 1102 	mla	r1, r9, r2, r1
 8004c7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004c7e:	4567      	cmp	r7, ip
 8004c80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004c84:	d8e6      	bhi.n	8004c54 <__multiply+0x10c>
 8004c86:	9a01      	ldr	r2, [sp, #4]
 8004c88:	50a9      	str	r1, [r5, r2]
 8004c8a:	3504      	adds	r5, #4
 8004c8c:	e79a      	b.n	8004bc4 <__multiply+0x7c>
 8004c8e:	3e01      	subs	r6, #1
 8004c90:	e79c      	b.n	8004bcc <__multiply+0x84>
 8004c92:	bf00      	nop
 8004c94:	08005db8 	.word	0x08005db8
 8004c98:	08005e2c 	.word	0x08005e2c

08004c9c <__pow5mult>:
 8004c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca0:	4615      	mov	r5, r2
 8004ca2:	f012 0203 	ands.w	r2, r2, #3
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	460f      	mov	r7, r1
 8004caa:	d007      	beq.n	8004cbc <__pow5mult+0x20>
 8004cac:	4c25      	ldr	r4, [pc, #148]	; (8004d44 <__pow5mult+0xa8>)
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cb6:	f7ff fe9b 	bl	80049f0 <__multadd>
 8004cba:	4607      	mov	r7, r0
 8004cbc:	10ad      	asrs	r5, r5, #2
 8004cbe:	d03d      	beq.n	8004d3c <__pow5mult+0xa0>
 8004cc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004cc2:	b97c      	cbnz	r4, 8004ce4 <__pow5mult+0x48>
 8004cc4:	2010      	movs	r0, #16
 8004cc6:	f7ff fe1b 	bl	8004900 <malloc>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6270      	str	r0, [r6, #36]	; 0x24
 8004cce:	b928      	cbnz	r0, 8004cdc <__pow5mult+0x40>
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <__pow5mult+0xac>)
 8004cd2:	481e      	ldr	r0, [pc, #120]	; (8004d4c <__pow5mult+0xb0>)
 8004cd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004cd8:	f000 fd22 	bl	8005720 <__assert_func>
 8004cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ce0:	6004      	str	r4, [r0, #0]
 8004ce2:	60c4      	str	r4, [r0, #12]
 8004ce4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004cec:	b94c      	cbnz	r4, 8004d02 <__pow5mult+0x66>
 8004cee:	f240 2171 	movw	r1, #625	; 0x271
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7ff ff12 	bl	8004b1c <__i2b>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8004cfe:	4604      	mov	r4, r0
 8004d00:	6003      	str	r3, [r0, #0]
 8004d02:	f04f 0900 	mov.w	r9, #0
 8004d06:	07eb      	lsls	r3, r5, #31
 8004d08:	d50a      	bpl.n	8004d20 <__pow5mult+0x84>
 8004d0a:	4639      	mov	r1, r7
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7ff ff1a 	bl	8004b48 <__multiply>
 8004d14:	4639      	mov	r1, r7
 8004d16:	4680      	mov	r8, r0
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff fe47 	bl	80049ac <_Bfree>
 8004d1e:	4647      	mov	r7, r8
 8004d20:	106d      	asrs	r5, r5, #1
 8004d22:	d00b      	beq.n	8004d3c <__pow5mult+0xa0>
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	b938      	cbnz	r0, 8004d38 <__pow5mult+0x9c>
 8004d28:	4622      	mov	r2, r4
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7ff ff0b 	bl	8004b48 <__multiply>
 8004d32:	6020      	str	r0, [r4, #0]
 8004d34:	f8c0 9000 	str.w	r9, [r0]
 8004d38:	4604      	mov	r4, r0
 8004d3a:	e7e4      	b.n	8004d06 <__pow5mult+0x6a>
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d42:	bf00      	nop
 8004d44:	08005f78 	.word	0x08005f78
 8004d48:	08005d46 	.word	0x08005d46
 8004d4c:	08005e2c 	.word	0x08005e2c

08004d50 <__lshift>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	460c      	mov	r4, r1
 8004d56:	6849      	ldr	r1, [r1, #4]
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d5e:	68a3      	ldr	r3, [r4, #8]
 8004d60:	4607      	mov	r7, r0
 8004d62:	4691      	mov	r9, r2
 8004d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d68:	f108 0601 	add.w	r6, r8, #1
 8004d6c:	42b3      	cmp	r3, r6
 8004d6e:	db0b      	blt.n	8004d88 <__lshift+0x38>
 8004d70:	4638      	mov	r0, r7
 8004d72:	f7ff fddb 	bl	800492c <_Balloc>
 8004d76:	4605      	mov	r5, r0
 8004d78:	b948      	cbnz	r0, 8004d8e <__lshift+0x3e>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <__lshift+0xd8>)
 8004d7e:	482b      	ldr	r0, [pc, #172]	; (8004e2c <__lshift+0xdc>)
 8004d80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d84:	f000 fccc 	bl	8005720 <__assert_func>
 8004d88:	3101      	adds	r1, #1
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	e7ee      	b.n	8004d6c <__lshift+0x1c>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f100 0114 	add.w	r1, r0, #20
 8004d94:	f100 0210 	add.w	r2, r0, #16
 8004d98:	4618      	mov	r0, r3
 8004d9a:	4553      	cmp	r3, sl
 8004d9c:	db37      	blt.n	8004e0e <__lshift+0xbe>
 8004d9e:	6920      	ldr	r0, [r4, #16]
 8004da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004da4:	f104 0314 	add.w	r3, r4, #20
 8004da8:	f019 091f 	ands.w	r9, r9, #31
 8004dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004db0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004db4:	d02f      	beq.n	8004e16 <__lshift+0xc6>
 8004db6:	f1c9 0e20 	rsb	lr, r9, #32
 8004dba:	468a      	mov	sl, r1
 8004dbc:	f04f 0c00 	mov.w	ip, #0
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	fa02 f209 	lsl.w	r2, r2, r9
 8004dc6:	ea42 020c 	orr.w	r2, r2, ip
 8004dca:	f84a 2b04 	str.w	r2, [sl], #4
 8004dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd2:	4298      	cmp	r0, r3
 8004dd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004dd8:	d8f2      	bhi.n	8004dc0 <__lshift+0x70>
 8004dda:	1b03      	subs	r3, r0, r4
 8004ddc:	3b15      	subs	r3, #21
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	3304      	adds	r3, #4
 8004de4:	f104 0215 	add.w	r2, r4, #21
 8004de8:	4290      	cmp	r0, r2
 8004dea:	bf38      	it	cc
 8004dec:	2304      	movcc	r3, #4
 8004dee:	f841 c003 	str.w	ip, [r1, r3]
 8004df2:	f1bc 0f00 	cmp.w	ip, #0
 8004df6:	d001      	beq.n	8004dfc <__lshift+0xac>
 8004df8:	f108 0602 	add.w	r6, r8, #2
 8004dfc:	3e01      	subs	r6, #1
 8004dfe:	4638      	mov	r0, r7
 8004e00:	612e      	str	r6, [r5, #16]
 8004e02:	4621      	mov	r1, r4
 8004e04:	f7ff fdd2 	bl	80049ac <_Bfree>
 8004e08:	4628      	mov	r0, r5
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e12:	3301      	adds	r3, #1
 8004e14:	e7c1      	b.n	8004d9a <__lshift+0x4a>
 8004e16:	3904      	subs	r1, #4
 8004e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e20:	4298      	cmp	r0, r3
 8004e22:	d8f9      	bhi.n	8004e18 <__lshift+0xc8>
 8004e24:	e7ea      	b.n	8004dfc <__lshift+0xac>
 8004e26:	bf00      	nop
 8004e28:	08005db8 	.word	0x08005db8
 8004e2c:	08005e2c 	.word	0x08005e2c

08004e30 <__mcmp>:
 8004e30:	b530      	push	{r4, r5, lr}
 8004e32:	6902      	ldr	r2, [r0, #16]
 8004e34:	690c      	ldr	r4, [r1, #16]
 8004e36:	1b12      	subs	r2, r2, r4
 8004e38:	d10e      	bne.n	8004e58 <__mcmp+0x28>
 8004e3a:	f100 0314 	add.w	r3, r0, #20
 8004e3e:	3114      	adds	r1, #20
 8004e40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004e44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004e48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004e4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004e50:	42a5      	cmp	r5, r4
 8004e52:	d003      	beq.n	8004e5c <__mcmp+0x2c>
 8004e54:	d305      	bcc.n	8004e62 <__mcmp+0x32>
 8004e56:	2201      	movs	r2, #1
 8004e58:	4610      	mov	r0, r2
 8004e5a:	bd30      	pop	{r4, r5, pc}
 8004e5c:	4283      	cmp	r3, r0
 8004e5e:	d3f3      	bcc.n	8004e48 <__mcmp+0x18>
 8004e60:	e7fa      	b.n	8004e58 <__mcmp+0x28>
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295
 8004e66:	e7f7      	b.n	8004e58 <__mcmp+0x28>

08004e68 <__mdiff>:
 8004e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	4606      	mov	r6, r0
 8004e70:	4611      	mov	r1, r2
 8004e72:	4620      	mov	r0, r4
 8004e74:	4690      	mov	r8, r2
 8004e76:	f7ff ffdb 	bl	8004e30 <__mcmp>
 8004e7a:	1e05      	subs	r5, r0, #0
 8004e7c:	d110      	bne.n	8004ea0 <__mdiff+0x38>
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff fd53 	bl	800492c <_Balloc>
 8004e86:	b930      	cbnz	r0, 8004e96 <__mdiff+0x2e>
 8004e88:	4b3a      	ldr	r3, [pc, #232]	; (8004f74 <__mdiff+0x10c>)
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f240 2132 	movw	r1, #562	; 0x232
 8004e90:	4839      	ldr	r0, [pc, #228]	; (8004f78 <__mdiff+0x110>)
 8004e92:	f000 fc45 	bl	8005720 <__assert_func>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea0:	bfa4      	itt	ge
 8004ea2:	4643      	movge	r3, r8
 8004ea4:	46a0      	movge	r8, r4
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004eac:	bfa6      	itte	ge
 8004eae:	461c      	movge	r4, r3
 8004eb0:	2500      	movge	r5, #0
 8004eb2:	2501      	movlt	r5, #1
 8004eb4:	f7ff fd3a 	bl	800492c <_Balloc>
 8004eb8:	b920      	cbnz	r0, 8004ec4 <__mdiff+0x5c>
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <__mdiff+0x10c>)
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ec2:	e7e5      	b.n	8004e90 <__mdiff+0x28>
 8004ec4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004ec8:	6926      	ldr	r6, [r4, #16]
 8004eca:	60c5      	str	r5, [r0, #12]
 8004ecc:	f104 0914 	add.w	r9, r4, #20
 8004ed0:	f108 0514 	add.w	r5, r8, #20
 8004ed4:	f100 0e14 	add.w	lr, r0, #20
 8004ed8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004edc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004ee0:	f108 0210 	add.w	r2, r8, #16
 8004ee4:	46f2      	mov	sl, lr
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f859 3b04 	ldr.w	r3, [r9], #4
 8004eec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004ef0:	fa1f f883 	uxth.w	r8, r3
 8004ef4:	fa11 f18b 	uxtah	r1, r1, fp
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	eba1 0808 	sub.w	r8, r1, r8
 8004efe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004f02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004f06:	fa1f f888 	uxth.w	r8, r8
 8004f0a:	1419      	asrs	r1, r3, #16
 8004f0c:	454e      	cmp	r6, r9
 8004f0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004f12:	f84a 3b04 	str.w	r3, [sl], #4
 8004f16:	d8e7      	bhi.n	8004ee8 <__mdiff+0x80>
 8004f18:	1b33      	subs	r3, r6, r4
 8004f1a:	3b15      	subs	r3, #21
 8004f1c:	f023 0303 	bic.w	r3, r3, #3
 8004f20:	3304      	adds	r3, #4
 8004f22:	3415      	adds	r4, #21
 8004f24:	42a6      	cmp	r6, r4
 8004f26:	bf38      	it	cc
 8004f28:	2304      	movcc	r3, #4
 8004f2a:	441d      	add	r5, r3
 8004f2c:	4473      	add	r3, lr
 8004f2e:	469e      	mov	lr, r3
 8004f30:	462e      	mov	r6, r5
 8004f32:	4566      	cmp	r6, ip
 8004f34:	d30e      	bcc.n	8004f54 <__mdiff+0xec>
 8004f36:	f10c 0203 	add.w	r2, ip, #3
 8004f3a:	1b52      	subs	r2, r2, r5
 8004f3c:	f022 0203 	bic.w	r2, r2, #3
 8004f40:	3d03      	subs	r5, #3
 8004f42:	45ac      	cmp	ip, r5
 8004f44:	bf38      	it	cc
 8004f46:	2200      	movcc	r2, #0
 8004f48:	441a      	add	r2, r3
 8004f4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004f4e:	b17b      	cbz	r3, 8004f70 <__mdiff+0x108>
 8004f50:	6107      	str	r7, [r0, #16]
 8004f52:	e7a3      	b.n	8004e9c <__mdiff+0x34>
 8004f54:	f856 8b04 	ldr.w	r8, [r6], #4
 8004f58:	fa11 f288 	uxtah	r2, r1, r8
 8004f5c:	1414      	asrs	r4, r2, #16
 8004f5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004f62:	b292      	uxth	r2, r2
 8004f64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004f68:	f84e 2b04 	str.w	r2, [lr], #4
 8004f6c:	1421      	asrs	r1, r4, #16
 8004f6e:	e7e0      	b.n	8004f32 <__mdiff+0xca>
 8004f70:	3f01      	subs	r7, #1
 8004f72:	e7ea      	b.n	8004f4a <__mdiff+0xe2>
 8004f74:	08005db8 	.word	0x08005db8
 8004f78:	08005e2c 	.word	0x08005e2c

08004f7c <__d2b>:
 8004f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	4689      	mov	r9, r1
 8004f82:	2101      	movs	r1, #1
 8004f84:	ec57 6b10 	vmov	r6, r7, d0
 8004f88:	4690      	mov	r8, r2
 8004f8a:	f7ff fccf 	bl	800492c <_Balloc>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	b930      	cbnz	r0, 8004fa0 <__d2b+0x24>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b25      	ldr	r3, [pc, #148]	; (800502c <__d2b+0xb0>)
 8004f96:	4826      	ldr	r0, [pc, #152]	; (8005030 <__d2b+0xb4>)
 8004f98:	f240 310a 	movw	r1, #778	; 0x30a
 8004f9c:	f000 fbc0 	bl	8005720 <__assert_func>
 8004fa0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004fa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fa8:	bb35      	cbnz	r5, 8004ff8 <__d2b+0x7c>
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	d028      	beq.n	8005002 <__d2b+0x86>
 8004fb0:	4668      	mov	r0, sp
 8004fb2:	9600      	str	r6, [sp, #0]
 8004fb4:	f7ff fd82 	bl	8004abc <__lo0bits>
 8004fb8:	9900      	ldr	r1, [sp, #0]
 8004fba:	b300      	cbz	r0, 8004ffe <__d2b+0x82>
 8004fbc:	9a01      	ldr	r2, [sp, #4]
 8004fbe:	f1c0 0320 	rsb	r3, r0, #32
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	40c2      	lsrs	r2, r0
 8004fca:	6163      	str	r3, [r4, #20]
 8004fcc:	9201      	str	r2, [sp, #4]
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	61a3      	str	r3, [r4, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf14      	ite	ne
 8004fd6:	2202      	movne	r2, #2
 8004fd8:	2201      	moveq	r2, #1
 8004fda:	6122      	str	r2, [r4, #16]
 8004fdc:	b1d5      	cbz	r5, 8005014 <__d2b+0x98>
 8004fde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004fe2:	4405      	add	r5, r0
 8004fe4:	f8c9 5000 	str.w	r5, [r9]
 8004fe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fec:	f8c8 0000 	str.w	r0, [r8]
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	b003      	add	sp, #12
 8004ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffc:	e7d5      	b.n	8004faa <__d2b+0x2e>
 8004ffe:	6161      	str	r1, [r4, #20]
 8005000:	e7e5      	b.n	8004fce <__d2b+0x52>
 8005002:	a801      	add	r0, sp, #4
 8005004:	f7ff fd5a 	bl	8004abc <__lo0bits>
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	6163      	str	r3, [r4, #20]
 800500c:	2201      	movs	r2, #1
 800500e:	6122      	str	r2, [r4, #16]
 8005010:	3020      	adds	r0, #32
 8005012:	e7e3      	b.n	8004fdc <__d2b+0x60>
 8005014:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005018:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800501c:	f8c9 0000 	str.w	r0, [r9]
 8005020:	6918      	ldr	r0, [r3, #16]
 8005022:	f7ff fd2b 	bl	8004a7c <__hi0bits>
 8005026:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800502a:	e7df      	b.n	8004fec <__d2b+0x70>
 800502c:	08005db8 	.word	0x08005db8
 8005030:	08005e2c 	.word	0x08005e2c

08005034 <_calloc_r>:
 8005034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005036:	fba1 2402 	umull	r2, r4, r1, r2
 800503a:	b94c      	cbnz	r4, 8005050 <_calloc_r+0x1c>
 800503c:	4611      	mov	r1, r2
 800503e:	9201      	str	r2, [sp, #4]
 8005040:	f000 f87a 	bl	8005138 <_malloc_r>
 8005044:	9a01      	ldr	r2, [sp, #4]
 8005046:	4605      	mov	r5, r0
 8005048:	b930      	cbnz	r0, 8005058 <_calloc_r+0x24>
 800504a:	4628      	mov	r0, r5
 800504c:	b003      	add	sp, #12
 800504e:	bd30      	pop	{r4, r5, pc}
 8005050:	220c      	movs	r2, #12
 8005052:	6002      	str	r2, [r0, #0]
 8005054:	2500      	movs	r5, #0
 8005056:	e7f8      	b.n	800504a <_calloc_r+0x16>
 8005058:	4621      	mov	r1, r4
 800505a:	f7fd ffaf 	bl	8002fbc <memset>
 800505e:	e7f4      	b.n	800504a <_calloc_r+0x16>

08005060 <_free_r>:
 8005060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005062:	2900      	cmp	r1, #0
 8005064:	d044      	beq.n	80050f0 <_free_r+0x90>
 8005066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506a:	9001      	str	r0, [sp, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f1a1 0404 	sub.w	r4, r1, #4
 8005072:	bfb8      	it	lt
 8005074:	18e4      	addlt	r4, r4, r3
 8005076:	f000 fcdf 	bl	8005a38 <__malloc_lock>
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <_free_r+0x94>)
 800507c:	9801      	ldr	r0, [sp, #4]
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	b933      	cbnz	r3, 8005090 <_free_r+0x30>
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	6014      	str	r4, [r2, #0]
 8005086:	b003      	add	sp, #12
 8005088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800508c:	f000 bcda 	b.w	8005a44 <__malloc_unlock>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d908      	bls.n	80050a6 <_free_r+0x46>
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	1961      	adds	r1, r4, r5
 8005098:	428b      	cmp	r3, r1
 800509a:	bf01      	itttt	eq
 800509c:	6819      	ldreq	r1, [r3, #0]
 800509e:	685b      	ldreq	r3, [r3, #4]
 80050a0:	1949      	addeq	r1, r1, r5
 80050a2:	6021      	streq	r1, [r4, #0]
 80050a4:	e7ed      	b.n	8005082 <_free_r+0x22>
 80050a6:	461a      	mov	r2, r3
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	b10b      	cbz	r3, 80050b0 <_free_r+0x50>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d9fa      	bls.n	80050a6 <_free_r+0x46>
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	1855      	adds	r5, r2, r1
 80050b4:	42a5      	cmp	r5, r4
 80050b6:	d10b      	bne.n	80050d0 <_free_r+0x70>
 80050b8:	6824      	ldr	r4, [r4, #0]
 80050ba:	4421      	add	r1, r4
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	42a3      	cmp	r3, r4
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	d1e0      	bne.n	8005086 <_free_r+0x26>
 80050c4:	681c      	ldr	r4, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	6053      	str	r3, [r2, #4]
 80050ca:	4421      	add	r1, r4
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	e7da      	b.n	8005086 <_free_r+0x26>
 80050d0:	d902      	bls.n	80050d8 <_free_r+0x78>
 80050d2:	230c      	movs	r3, #12
 80050d4:	6003      	str	r3, [r0, #0]
 80050d6:	e7d6      	b.n	8005086 <_free_r+0x26>
 80050d8:	6825      	ldr	r5, [r4, #0]
 80050da:	1961      	adds	r1, r4, r5
 80050dc:	428b      	cmp	r3, r1
 80050de:	bf04      	itt	eq
 80050e0:	6819      	ldreq	r1, [r3, #0]
 80050e2:	685b      	ldreq	r3, [r3, #4]
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	bf04      	itt	eq
 80050e8:	1949      	addeq	r1, r1, r5
 80050ea:	6021      	streq	r1, [r4, #0]
 80050ec:	6054      	str	r4, [r2, #4]
 80050ee:	e7ca      	b.n	8005086 <_free_r+0x26>
 80050f0:	b003      	add	sp, #12
 80050f2:	bd30      	pop	{r4, r5, pc}
 80050f4:	2000020c 	.word	0x2000020c

080050f8 <sbrk_aligned>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4e0e      	ldr	r6, [pc, #56]	; (8005134 <sbrk_aligned+0x3c>)
 80050fc:	460c      	mov	r4, r1
 80050fe:	6831      	ldr	r1, [r6, #0]
 8005100:	4605      	mov	r5, r0
 8005102:	b911      	cbnz	r1, 800510a <sbrk_aligned+0x12>
 8005104:	f000 f9e6 	bl	80054d4 <_sbrk_r>
 8005108:	6030      	str	r0, [r6, #0]
 800510a:	4621      	mov	r1, r4
 800510c:	4628      	mov	r0, r5
 800510e:	f000 f9e1 	bl	80054d4 <_sbrk_r>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	d00a      	beq.n	800512c <sbrk_aligned+0x34>
 8005116:	1cc4      	adds	r4, r0, #3
 8005118:	f024 0403 	bic.w	r4, r4, #3
 800511c:	42a0      	cmp	r0, r4
 800511e:	d007      	beq.n	8005130 <sbrk_aligned+0x38>
 8005120:	1a21      	subs	r1, r4, r0
 8005122:	4628      	mov	r0, r5
 8005124:	f000 f9d6 	bl	80054d4 <_sbrk_r>
 8005128:	3001      	adds	r0, #1
 800512a:	d101      	bne.n	8005130 <sbrk_aligned+0x38>
 800512c:	f04f 34ff 	mov.w	r4, #4294967295
 8005130:	4620      	mov	r0, r4
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	20000210 	.word	0x20000210

08005138 <_malloc_r>:
 8005138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513c:	1ccd      	adds	r5, r1, #3
 800513e:	f025 0503 	bic.w	r5, r5, #3
 8005142:	3508      	adds	r5, #8
 8005144:	2d0c      	cmp	r5, #12
 8005146:	bf38      	it	cc
 8005148:	250c      	movcc	r5, #12
 800514a:	2d00      	cmp	r5, #0
 800514c:	4607      	mov	r7, r0
 800514e:	db01      	blt.n	8005154 <_malloc_r+0x1c>
 8005150:	42a9      	cmp	r1, r5
 8005152:	d905      	bls.n	8005160 <_malloc_r+0x28>
 8005154:	230c      	movs	r3, #12
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	2600      	movs	r6, #0
 800515a:	4630      	mov	r0, r6
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	4e2e      	ldr	r6, [pc, #184]	; (800521c <_malloc_r+0xe4>)
 8005162:	f000 fc69 	bl	8005a38 <__malloc_lock>
 8005166:	6833      	ldr	r3, [r6, #0]
 8005168:	461c      	mov	r4, r3
 800516a:	bb34      	cbnz	r4, 80051ba <_malloc_r+0x82>
 800516c:	4629      	mov	r1, r5
 800516e:	4638      	mov	r0, r7
 8005170:	f7ff ffc2 	bl	80050f8 <sbrk_aligned>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	4604      	mov	r4, r0
 8005178:	d14d      	bne.n	8005216 <_malloc_r+0xde>
 800517a:	6834      	ldr	r4, [r6, #0]
 800517c:	4626      	mov	r6, r4
 800517e:	2e00      	cmp	r6, #0
 8005180:	d140      	bne.n	8005204 <_malloc_r+0xcc>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	4631      	mov	r1, r6
 8005186:	4638      	mov	r0, r7
 8005188:	eb04 0803 	add.w	r8, r4, r3
 800518c:	f000 f9a2 	bl	80054d4 <_sbrk_r>
 8005190:	4580      	cmp	r8, r0
 8005192:	d13a      	bne.n	800520a <_malloc_r+0xd2>
 8005194:	6821      	ldr	r1, [r4, #0]
 8005196:	3503      	adds	r5, #3
 8005198:	1a6d      	subs	r5, r5, r1
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	4629      	mov	r1, r5
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff ffa5 	bl	80050f8 <sbrk_aligned>
 80051ae:	3001      	adds	r0, #1
 80051b0:	d02b      	beq.n	800520a <_malloc_r+0xd2>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	442b      	add	r3, r5
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	e00e      	b.n	80051d8 <_malloc_r+0xa0>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	1b52      	subs	r2, r2, r5
 80051be:	d41e      	bmi.n	80051fe <_malloc_r+0xc6>
 80051c0:	2a0b      	cmp	r2, #11
 80051c2:	d916      	bls.n	80051f2 <_malloc_r+0xba>
 80051c4:	1961      	adds	r1, r4, r5
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	6025      	str	r5, [r4, #0]
 80051ca:	bf18      	it	ne
 80051cc:	6059      	strne	r1, [r3, #4]
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	bf08      	it	eq
 80051d2:	6031      	streq	r1, [r6, #0]
 80051d4:	5162      	str	r2, [r4, r5]
 80051d6:	604b      	str	r3, [r1, #4]
 80051d8:	4638      	mov	r0, r7
 80051da:	f104 060b 	add.w	r6, r4, #11
 80051de:	f000 fc31 	bl	8005a44 <__malloc_unlock>
 80051e2:	f026 0607 	bic.w	r6, r6, #7
 80051e6:	1d23      	adds	r3, r4, #4
 80051e8:	1af2      	subs	r2, r6, r3
 80051ea:	d0b6      	beq.n	800515a <_malloc_r+0x22>
 80051ec:	1b9b      	subs	r3, r3, r6
 80051ee:	50a3      	str	r3, [r4, r2]
 80051f0:	e7b3      	b.n	800515a <_malloc_r+0x22>
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	bf0c      	ite	eq
 80051f8:	6032      	streq	r2, [r6, #0]
 80051fa:	605a      	strne	r2, [r3, #4]
 80051fc:	e7ec      	b.n	80051d8 <_malloc_r+0xa0>
 80051fe:	4623      	mov	r3, r4
 8005200:	6864      	ldr	r4, [r4, #4]
 8005202:	e7b2      	b.n	800516a <_malloc_r+0x32>
 8005204:	4634      	mov	r4, r6
 8005206:	6876      	ldr	r6, [r6, #4]
 8005208:	e7b9      	b.n	800517e <_malloc_r+0x46>
 800520a:	230c      	movs	r3, #12
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	4638      	mov	r0, r7
 8005210:	f000 fc18 	bl	8005a44 <__malloc_unlock>
 8005214:	e7a1      	b.n	800515a <_malloc_r+0x22>
 8005216:	6025      	str	r5, [r4, #0]
 8005218:	e7de      	b.n	80051d8 <_malloc_r+0xa0>
 800521a:	bf00      	nop
 800521c:	2000020c 	.word	0x2000020c

08005220 <__sfputc_r>:
 8005220:	6893      	ldr	r3, [r2, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	b410      	push	{r4}
 8005228:	6093      	str	r3, [r2, #8]
 800522a:	da08      	bge.n	800523e <__sfputc_r+0x1e>
 800522c:	6994      	ldr	r4, [r2, #24]
 800522e:	42a3      	cmp	r3, r4
 8005230:	db01      	blt.n	8005236 <__sfputc_r+0x16>
 8005232:	290a      	cmp	r1, #10
 8005234:	d103      	bne.n	800523e <__sfputc_r+0x1e>
 8005236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800523a:	f000 b99f 	b.w	800557c <__swbuf_r>
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	1c58      	adds	r0, r3, #1
 8005242:	6010      	str	r0, [r2, #0]
 8005244:	7019      	strb	r1, [r3, #0]
 8005246:	4608      	mov	r0, r1
 8005248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800524c:	4770      	bx	lr

0800524e <__sfputs_r>:
 800524e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005250:	4606      	mov	r6, r0
 8005252:	460f      	mov	r7, r1
 8005254:	4614      	mov	r4, r2
 8005256:	18d5      	adds	r5, r2, r3
 8005258:	42ac      	cmp	r4, r5
 800525a:	d101      	bne.n	8005260 <__sfputs_r+0x12>
 800525c:	2000      	movs	r0, #0
 800525e:	e007      	b.n	8005270 <__sfputs_r+0x22>
 8005260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005264:	463a      	mov	r2, r7
 8005266:	4630      	mov	r0, r6
 8005268:	f7ff ffda 	bl	8005220 <__sfputc_r>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d1f3      	bne.n	8005258 <__sfputs_r+0xa>
 8005270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005274 <_vfiprintf_r>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	460d      	mov	r5, r1
 800527a:	b09d      	sub	sp, #116	; 0x74
 800527c:	4614      	mov	r4, r2
 800527e:	4698      	mov	r8, r3
 8005280:	4606      	mov	r6, r0
 8005282:	b118      	cbz	r0, 800528c <_vfiprintf_r+0x18>
 8005284:	6983      	ldr	r3, [r0, #24]
 8005286:	b90b      	cbnz	r3, 800528c <_vfiprintf_r+0x18>
 8005288:	f7ff fa94 	bl	80047b4 <__sinit>
 800528c:	4b89      	ldr	r3, [pc, #548]	; (80054b4 <_vfiprintf_r+0x240>)
 800528e:	429d      	cmp	r5, r3
 8005290:	d11b      	bne.n	80052ca <_vfiprintf_r+0x56>
 8005292:	6875      	ldr	r5, [r6, #4]
 8005294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005296:	07d9      	lsls	r1, r3, #31
 8005298:	d405      	bmi.n	80052a6 <_vfiprintf_r+0x32>
 800529a:	89ab      	ldrh	r3, [r5, #12]
 800529c:	059a      	lsls	r2, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_vfiprintf_r+0x32>
 80052a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052a2:	f7ff fb2a 	bl	80048fa <__retarget_lock_acquire_recursive>
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	071b      	lsls	r3, r3, #28
 80052aa:	d501      	bpl.n	80052b0 <_vfiprintf_r+0x3c>
 80052ac:	692b      	ldr	r3, [r5, #16]
 80052ae:	b9eb      	cbnz	r3, 80052ec <_vfiprintf_r+0x78>
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f000 f9c6 	bl	8005644 <__swsetup_r>
 80052b8:	b1c0      	cbz	r0, 80052ec <_vfiprintf_r+0x78>
 80052ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052bc:	07dc      	lsls	r4, r3, #31
 80052be:	d50e      	bpl.n	80052de <_vfiprintf_r+0x6a>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	b01d      	add	sp, #116	; 0x74
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	4b7b      	ldr	r3, [pc, #492]	; (80054b8 <_vfiprintf_r+0x244>)
 80052cc:	429d      	cmp	r5, r3
 80052ce:	d101      	bne.n	80052d4 <_vfiprintf_r+0x60>
 80052d0:	68b5      	ldr	r5, [r6, #8]
 80052d2:	e7df      	b.n	8005294 <_vfiprintf_r+0x20>
 80052d4:	4b79      	ldr	r3, [pc, #484]	; (80054bc <_vfiprintf_r+0x248>)
 80052d6:	429d      	cmp	r5, r3
 80052d8:	bf08      	it	eq
 80052da:	68f5      	ldreq	r5, [r6, #12]
 80052dc:	e7da      	b.n	8005294 <_vfiprintf_r+0x20>
 80052de:	89ab      	ldrh	r3, [r5, #12]
 80052e0:	0598      	lsls	r0, r3, #22
 80052e2:	d4ed      	bmi.n	80052c0 <_vfiprintf_r+0x4c>
 80052e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052e6:	f7ff fb09 	bl	80048fc <__retarget_lock_release_recursive>
 80052ea:	e7e9      	b.n	80052c0 <_vfiprintf_r+0x4c>
 80052ec:	2300      	movs	r3, #0
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	2320      	movs	r3, #32
 80052f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80052fa:	2330      	movs	r3, #48	; 0x30
 80052fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80054c0 <_vfiprintf_r+0x24c>
 8005300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005304:	f04f 0901 	mov.w	r9, #1
 8005308:	4623      	mov	r3, r4
 800530a:	469a      	mov	sl, r3
 800530c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005310:	b10a      	cbz	r2, 8005316 <_vfiprintf_r+0xa2>
 8005312:	2a25      	cmp	r2, #37	; 0x25
 8005314:	d1f9      	bne.n	800530a <_vfiprintf_r+0x96>
 8005316:	ebba 0b04 	subs.w	fp, sl, r4
 800531a:	d00b      	beq.n	8005334 <_vfiprintf_r+0xc0>
 800531c:	465b      	mov	r3, fp
 800531e:	4622      	mov	r2, r4
 8005320:	4629      	mov	r1, r5
 8005322:	4630      	mov	r0, r6
 8005324:	f7ff ff93 	bl	800524e <__sfputs_r>
 8005328:	3001      	adds	r0, #1
 800532a:	f000 80aa 	beq.w	8005482 <_vfiprintf_r+0x20e>
 800532e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005330:	445a      	add	r2, fp
 8005332:	9209      	str	r2, [sp, #36]	; 0x24
 8005334:	f89a 3000 	ldrb.w	r3, [sl]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80a2 	beq.w	8005482 <_vfiprintf_r+0x20e>
 800533e:	2300      	movs	r3, #0
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005348:	f10a 0a01 	add.w	sl, sl, #1
 800534c:	9304      	str	r3, [sp, #16]
 800534e:	9307      	str	r3, [sp, #28]
 8005350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005354:	931a      	str	r3, [sp, #104]	; 0x68
 8005356:	4654      	mov	r4, sl
 8005358:	2205      	movs	r2, #5
 800535a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535e:	4858      	ldr	r0, [pc, #352]	; (80054c0 <_vfiprintf_r+0x24c>)
 8005360:	f7fa ff66 	bl	8000230 <memchr>
 8005364:	9a04      	ldr	r2, [sp, #16]
 8005366:	b9d8      	cbnz	r0, 80053a0 <_vfiprintf_r+0x12c>
 8005368:	06d1      	lsls	r1, r2, #27
 800536a:	bf44      	itt	mi
 800536c:	2320      	movmi	r3, #32
 800536e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005372:	0713      	lsls	r3, r2, #28
 8005374:	bf44      	itt	mi
 8005376:	232b      	movmi	r3, #43	; 0x2b
 8005378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800537c:	f89a 3000 	ldrb.w	r3, [sl]
 8005380:	2b2a      	cmp	r3, #42	; 0x2a
 8005382:	d015      	beq.n	80053b0 <_vfiprintf_r+0x13c>
 8005384:	9a07      	ldr	r2, [sp, #28]
 8005386:	4654      	mov	r4, sl
 8005388:	2000      	movs	r0, #0
 800538a:	f04f 0c0a 	mov.w	ip, #10
 800538e:	4621      	mov	r1, r4
 8005390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005394:	3b30      	subs	r3, #48	; 0x30
 8005396:	2b09      	cmp	r3, #9
 8005398:	d94e      	bls.n	8005438 <_vfiprintf_r+0x1c4>
 800539a:	b1b0      	cbz	r0, 80053ca <_vfiprintf_r+0x156>
 800539c:	9207      	str	r2, [sp, #28]
 800539e:	e014      	b.n	80053ca <_vfiprintf_r+0x156>
 80053a0:	eba0 0308 	sub.w	r3, r0, r8
 80053a4:	fa09 f303 	lsl.w	r3, r9, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	9304      	str	r3, [sp, #16]
 80053ac:	46a2      	mov	sl, r4
 80053ae:	e7d2      	b.n	8005356 <_vfiprintf_r+0xe2>
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	1d19      	adds	r1, r3, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	9103      	str	r1, [sp, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbb      	ittet	lt
 80053bc:	425b      	neglt	r3, r3
 80053be:	f042 0202 	orrlt.w	r2, r2, #2
 80053c2:	9307      	strge	r3, [sp, #28]
 80053c4:	9307      	strlt	r3, [sp, #28]
 80053c6:	bfb8      	it	lt
 80053c8:	9204      	strlt	r2, [sp, #16]
 80053ca:	7823      	ldrb	r3, [r4, #0]
 80053cc:	2b2e      	cmp	r3, #46	; 0x2e
 80053ce:	d10c      	bne.n	80053ea <_vfiprintf_r+0x176>
 80053d0:	7863      	ldrb	r3, [r4, #1]
 80053d2:	2b2a      	cmp	r3, #42	; 0x2a
 80053d4:	d135      	bne.n	8005442 <_vfiprintf_r+0x1ce>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9203      	str	r2, [sp, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bfb8      	it	lt
 80053e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80053e6:	3402      	adds	r4, #2
 80053e8:	9305      	str	r3, [sp, #20]
 80053ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054d0 <_vfiprintf_r+0x25c>
 80053ee:	7821      	ldrb	r1, [r4, #0]
 80053f0:	2203      	movs	r2, #3
 80053f2:	4650      	mov	r0, sl
 80053f4:	f7fa ff1c 	bl	8000230 <memchr>
 80053f8:	b140      	cbz	r0, 800540c <_vfiprintf_r+0x198>
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	eba0 000a 	sub.w	r0, r0, sl
 8005400:	fa03 f000 	lsl.w	r0, r3, r0
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	4303      	orrs	r3, r0
 8005408:	3401      	adds	r4, #1
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005410:	482c      	ldr	r0, [pc, #176]	; (80054c4 <_vfiprintf_r+0x250>)
 8005412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005416:	2206      	movs	r2, #6
 8005418:	f7fa ff0a 	bl	8000230 <memchr>
 800541c:	2800      	cmp	r0, #0
 800541e:	d03f      	beq.n	80054a0 <_vfiprintf_r+0x22c>
 8005420:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <_vfiprintf_r+0x254>)
 8005422:	bb1b      	cbnz	r3, 800546c <_vfiprintf_r+0x1f8>
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	3307      	adds	r3, #7
 8005428:	f023 0307 	bic.w	r3, r3, #7
 800542c:	3308      	adds	r3, #8
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005432:	443b      	add	r3, r7
 8005434:	9309      	str	r3, [sp, #36]	; 0x24
 8005436:	e767      	b.n	8005308 <_vfiprintf_r+0x94>
 8005438:	fb0c 3202 	mla	r2, ip, r2, r3
 800543c:	460c      	mov	r4, r1
 800543e:	2001      	movs	r0, #1
 8005440:	e7a5      	b.n	800538e <_vfiprintf_r+0x11a>
 8005442:	2300      	movs	r3, #0
 8005444:	3401      	adds	r4, #1
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	4619      	mov	r1, r3
 800544a:	f04f 0c0a 	mov.w	ip, #10
 800544e:	4620      	mov	r0, r4
 8005450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005454:	3a30      	subs	r2, #48	; 0x30
 8005456:	2a09      	cmp	r2, #9
 8005458:	d903      	bls.n	8005462 <_vfiprintf_r+0x1ee>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0c5      	beq.n	80053ea <_vfiprintf_r+0x176>
 800545e:	9105      	str	r1, [sp, #20]
 8005460:	e7c3      	b.n	80053ea <_vfiprintf_r+0x176>
 8005462:	fb0c 2101 	mla	r1, ip, r1, r2
 8005466:	4604      	mov	r4, r0
 8005468:	2301      	movs	r3, #1
 800546a:	e7f0      	b.n	800544e <_vfiprintf_r+0x1da>
 800546c:	ab03      	add	r3, sp, #12
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	462a      	mov	r2, r5
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <_vfiprintf_r+0x258>)
 8005474:	a904      	add	r1, sp, #16
 8005476:	4630      	mov	r0, r6
 8005478:	f7fd fe48 	bl	800310c <_printf_float>
 800547c:	4607      	mov	r7, r0
 800547e:	1c78      	adds	r0, r7, #1
 8005480:	d1d6      	bne.n	8005430 <_vfiprintf_r+0x1bc>
 8005482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005484:	07d9      	lsls	r1, r3, #31
 8005486:	d405      	bmi.n	8005494 <_vfiprintf_r+0x220>
 8005488:	89ab      	ldrh	r3, [r5, #12]
 800548a:	059a      	lsls	r2, r3, #22
 800548c:	d402      	bmi.n	8005494 <_vfiprintf_r+0x220>
 800548e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005490:	f7ff fa34 	bl	80048fc <__retarget_lock_release_recursive>
 8005494:	89ab      	ldrh	r3, [r5, #12]
 8005496:	065b      	lsls	r3, r3, #25
 8005498:	f53f af12 	bmi.w	80052c0 <_vfiprintf_r+0x4c>
 800549c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800549e:	e711      	b.n	80052c4 <_vfiprintf_r+0x50>
 80054a0:	ab03      	add	r3, sp, #12
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	462a      	mov	r2, r5
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <_vfiprintf_r+0x258>)
 80054a8:	a904      	add	r1, sp, #16
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7fe f8d2 	bl	8003654 <_printf_i>
 80054b0:	e7e4      	b.n	800547c <_vfiprintf_r+0x208>
 80054b2:	bf00      	nop
 80054b4:	08005dec 	.word	0x08005dec
 80054b8:	08005e0c 	.word	0x08005e0c
 80054bc:	08005dcc 	.word	0x08005dcc
 80054c0:	08005f84 	.word	0x08005f84
 80054c4:	08005f8e 	.word	0x08005f8e
 80054c8:	0800310d 	.word	0x0800310d
 80054cc:	0800524f 	.word	0x0800524f
 80054d0:	08005f8a 	.word	0x08005f8a

080054d4 <_sbrk_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d06      	ldr	r5, [pc, #24]	; (80054f0 <_sbrk_r+0x1c>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fc fa1c 	bl	800191c <_sbrk>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_sbrk_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_sbrk_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000214 	.word	0x20000214

080054f4 <__sread>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	460c      	mov	r4, r1
 80054f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fc:	f000 faa8 	bl	8005a50 <_read_r>
 8005500:	2800      	cmp	r0, #0
 8005502:	bfab      	itete	ge
 8005504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005506:	89a3      	ldrhlt	r3, [r4, #12]
 8005508:	181b      	addge	r3, r3, r0
 800550a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800550e:	bfac      	ite	ge
 8005510:	6563      	strge	r3, [r4, #84]	; 0x54
 8005512:	81a3      	strhlt	r3, [r4, #12]
 8005514:	bd10      	pop	{r4, pc}

08005516 <__swrite>:
 8005516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	461f      	mov	r7, r3
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	05db      	lsls	r3, r3, #23
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4616      	mov	r6, r2
 8005526:	d505      	bpl.n	8005534 <__swrite+0x1e>
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	2302      	movs	r3, #2
 800552e:	2200      	movs	r2, #0
 8005530:	f000 f9f8 	bl	8005924 <_lseek_r>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800553a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	4632      	mov	r2, r6
 8005542:	463b      	mov	r3, r7
 8005544:	4628      	mov	r0, r5
 8005546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	f000 b869 	b.w	8005620 <_write_r>

0800554e <__sseek>:
 800554e:	b510      	push	{r4, lr}
 8005550:	460c      	mov	r4, r1
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 f9e5 	bl	8005924 <_lseek_r>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	bf15      	itete	ne
 8005560:	6560      	strne	r0, [r4, #84]	; 0x54
 8005562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800556a:	81a3      	strheq	r3, [r4, #12]
 800556c:	bf18      	it	ne
 800556e:	81a3      	strhne	r3, [r4, #12]
 8005570:	bd10      	pop	{r4, pc}

08005572 <__sclose>:
 8005572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005576:	f000 b8f1 	b.w	800575c <_close_r>
	...

0800557c <__swbuf_r>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	460e      	mov	r6, r1
 8005580:	4614      	mov	r4, r2
 8005582:	4605      	mov	r5, r0
 8005584:	b118      	cbz	r0, 800558e <__swbuf_r+0x12>
 8005586:	6983      	ldr	r3, [r0, #24]
 8005588:	b90b      	cbnz	r3, 800558e <__swbuf_r+0x12>
 800558a:	f7ff f913 	bl	80047b4 <__sinit>
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <__swbuf_r+0x98>)
 8005590:	429c      	cmp	r4, r3
 8005592:	d12b      	bne.n	80055ec <__swbuf_r+0x70>
 8005594:	686c      	ldr	r4, [r5, #4]
 8005596:	69a3      	ldr	r3, [r4, #24]
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	071a      	lsls	r2, r3, #28
 800559e:	d52f      	bpl.n	8005600 <__swbuf_r+0x84>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	b36b      	cbz	r3, 8005600 <__swbuf_r+0x84>
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	1ac0      	subs	r0, r0, r3
 80055aa:	6963      	ldr	r3, [r4, #20]
 80055ac:	b2f6      	uxtb	r6, r6
 80055ae:	4283      	cmp	r3, r0
 80055b0:	4637      	mov	r7, r6
 80055b2:	dc04      	bgt.n	80055be <__swbuf_r+0x42>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 f966 	bl	8005888 <_fflush_r>
 80055bc:	bb30      	cbnz	r0, 800560c <__swbuf_r+0x90>
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	701e      	strb	r6, [r3, #0]
 80055cc:	6963      	ldr	r3, [r4, #20]
 80055ce:	3001      	adds	r0, #1
 80055d0:	4283      	cmp	r3, r0
 80055d2:	d004      	beq.n	80055de <__swbuf_r+0x62>
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	07db      	lsls	r3, r3, #31
 80055d8:	d506      	bpl.n	80055e8 <__swbuf_r+0x6c>
 80055da:	2e0a      	cmp	r6, #10
 80055dc:	d104      	bne.n	80055e8 <__swbuf_r+0x6c>
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f951 	bl	8005888 <_fflush_r>
 80055e6:	b988      	cbnz	r0, 800560c <__swbuf_r+0x90>
 80055e8:	4638      	mov	r0, r7
 80055ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <__swbuf_r+0x9c>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d101      	bne.n	80055f6 <__swbuf_r+0x7a>
 80055f2:	68ac      	ldr	r4, [r5, #8]
 80055f4:	e7cf      	b.n	8005596 <__swbuf_r+0x1a>
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <__swbuf_r+0xa0>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	bf08      	it	eq
 80055fc:	68ec      	ldreq	r4, [r5, #12]
 80055fe:	e7ca      	b.n	8005596 <__swbuf_r+0x1a>
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f81e 	bl	8005644 <__swsetup_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	d0cb      	beq.n	80055a4 <__swbuf_r+0x28>
 800560c:	f04f 37ff 	mov.w	r7, #4294967295
 8005610:	e7ea      	b.n	80055e8 <__swbuf_r+0x6c>
 8005612:	bf00      	nop
 8005614:	08005dec 	.word	0x08005dec
 8005618:	08005e0c 	.word	0x08005e0c
 800561c:	08005dcc 	.word	0x08005dcc

08005620 <_write_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d07      	ldr	r5, [pc, #28]	; (8005640 <_write_r+0x20>)
 8005624:	4604      	mov	r4, r0
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	2200      	movs	r2, #0
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fc f923 	bl	800187a <_write>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_write_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_write_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000214 	.word	0x20000214

08005644 <__swsetup_r>:
 8005644:	4b32      	ldr	r3, [pc, #200]	; (8005710 <__swsetup_r+0xcc>)
 8005646:	b570      	push	{r4, r5, r6, lr}
 8005648:	681d      	ldr	r5, [r3, #0]
 800564a:	4606      	mov	r6, r0
 800564c:	460c      	mov	r4, r1
 800564e:	b125      	cbz	r5, 800565a <__swsetup_r+0x16>
 8005650:	69ab      	ldr	r3, [r5, #24]
 8005652:	b913      	cbnz	r3, 800565a <__swsetup_r+0x16>
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff f8ad 	bl	80047b4 <__sinit>
 800565a:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <__swsetup_r+0xd0>)
 800565c:	429c      	cmp	r4, r3
 800565e:	d10f      	bne.n	8005680 <__swsetup_r+0x3c>
 8005660:	686c      	ldr	r4, [r5, #4]
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005668:	0719      	lsls	r1, r3, #28
 800566a:	d42c      	bmi.n	80056c6 <__swsetup_r+0x82>
 800566c:	06dd      	lsls	r5, r3, #27
 800566e:	d411      	bmi.n	8005694 <__swsetup_r+0x50>
 8005670:	2309      	movs	r3, #9
 8005672:	6033      	str	r3, [r6, #0]
 8005674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	e03e      	b.n	80056fe <__swsetup_r+0xba>
 8005680:	4b25      	ldr	r3, [pc, #148]	; (8005718 <__swsetup_r+0xd4>)
 8005682:	429c      	cmp	r4, r3
 8005684:	d101      	bne.n	800568a <__swsetup_r+0x46>
 8005686:	68ac      	ldr	r4, [r5, #8]
 8005688:	e7eb      	b.n	8005662 <__swsetup_r+0x1e>
 800568a:	4b24      	ldr	r3, [pc, #144]	; (800571c <__swsetup_r+0xd8>)
 800568c:	429c      	cmp	r4, r3
 800568e:	bf08      	it	eq
 8005690:	68ec      	ldreq	r4, [r5, #12]
 8005692:	e7e6      	b.n	8005662 <__swsetup_r+0x1e>
 8005694:	0758      	lsls	r0, r3, #29
 8005696:	d512      	bpl.n	80056be <__swsetup_r+0x7a>
 8005698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569a:	b141      	cbz	r1, 80056ae <__swsetup_r+0x6a>
 800569c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <__swsetup_r+0x66>
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff fcdb 	bl	8005060 <_free_r>
 80056aa:	2300      	movs	r3, #0
 80056ac:	6363      	str	r3, [r4, #52]	; 0x34
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	2300      	movs	r3, #0
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	f043 0308 	orr.w	r3, r3, #8
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	b94b      	cbnz	r3, 80056de <__swsetup_r+0x9a>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d4:	d003      	beq.n	80056de <__swsetup_r+0x9a>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f95b 	bl	8005994 <__smakebuf_r>
 80056de:	89a0      	ldrh	r0, [r4, #12]
 80056e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e4:	f010 0301 	ands.w	r3, r0, #1
 80056e8:	d00a      	beq.n	8005700 <__swsetup_r+0xbc>
 80056ea:	2300      	movs	r3, #0
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	6963      	ldr	r3, [r4, #20]
 80056f0:	425b      	negs	r3, r3
 80056f2:	61a3      	str	r3, [r4, #24]
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b943      	cbnz	r3, 800570a <__swsetup_r+0xc6>
 80056f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056fc:	d1ba      	bne.n	8005674 <__swsetup_r+0x30>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	0781      	lsls	r1, r0, #30
 8005702:	bf58      	it	pl
 8005704:	6963      	ldrpl	r3, [r4, #20]
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	e7f4      	b.n	80056f4 <__swsetup_r+0xb0>
 800570a:	2000      	movs	r0, #0
 800570c:	e7f7      	b.n	80056fe <__swsetup_r+0xba>
 800570e:	bf00      	nop
 8005710:	2000000c 	.word	0x2000000c
 8005714:	08005dec 	.word	0x08005dec
 8005718:	08005e0c 	.word	0x08005e0c
 800571c:	08005dcc 	.word	0x08005dcc

08005720 <__assert_func>:
 8005720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005722:	4614      	mov	r4, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <__assert_func+0x2c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4605      	mov	r5, r0
 800572c:	68d8      	ldr	r0, [r3, #12]
 800572e:	b14c      	cbz	r4, 8005744 <__assert_func+0x24>
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <__assert_func+0x30>)
 8005732:	9100      	str	r1, [sp, #0]
 8005734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005738:	4906      	ldr	r1, [pc, #24]	; (8005754 <__assert_func+0x34>)
 800573a:	462b      	mov	r3, r5
 800573c:	f000 f8e0 	bl	8005900 <fiprintf>
 8005740:	f000 f9a5 	bl	8005a8e <abort>
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <__assert_func+0x38>)
 8005746:	461c      	mov	r4, r3
 8005748:	e7f3      	b.n	8005732 <__assert_func+0x12>
 800574a:	bf00      	nop
 800574c:	2000000c 	.word	0x2000000c
 8005750:	08005f95 	.word	0x08005f95
 8005754:	08005fa2 	.word	0x08005fa2
 8005758:	08005fd0 	.word	0x08005fd0

0800575c <_close_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d06      	ldr	r5, [pc, #24]	; (8005778 <_close_r+0x1c>)
 8005760:	2300      	movs	r3, #0
 8005762:	4604      	mov	r4, r0
 8005764:	4608      	mov	r0, r1
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	f7fc f8a3 	bl	80018b2 <_close>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_close_r+0x1a>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_close_r+0x1a>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20000214 	.word	0x20000214

0800577c <__sflush_r>:
 800577c:	898a      	ldrh	r2, [r1, #12]
 800577e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005782:	4605      	mov	r5, r0
 8005784:	0710      	lsls	r0, r2, #28
 8005786:	460c      	mov	r4, r1
 8005788:	d458      	bmi.n	800583c <__sflush_r+0xc0>
 800578a:	684b      	ldr	r3, [r1, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	dc05      	bgt.n	800579c <__sflush_r+0x20>
 8005790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	dc02      	bgt.n	800579c <__sflush_r+0x20>
 8005796:	2000      	movs	r0, #0
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800579e:	2e00      	cmp	r6, #0
 80057a0:	d0f9      	beq.n	8005796 <__sflush_r+0x1a>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057a8:	682f      	ldr	r7, [r5, #0]
 80057aa:	602b      	str	r3, [r5, #0]
 80057ac:	d032      	beq.n	8005814 <__sflush_r+0x98>
 80057ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	075a      	lsls	r2, r3, #29
 80057b4:	d505      	bpl.n	80057c2 <__sflush_r+0x46>
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	1ac0      	subs	r0, r0, r3
 80057ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057bc:	b10b      	cbz	r3, 80057c2 <__sflush_r+0x46>
 80057be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057c0:	1ac0      	subs	r0, r0, r3
 80057c2:	2300      	movs	r3, #0
 80057c4:	4602      	mov	r2, r0
 80057c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c8:	6a21      	ldr	r1, [r4, #32]
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b0      	blx	r6
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	d106      	bne.n	80057e2 <__sflush_r+0x66>
 80057d4:	6829      	ldr	r1, [r5, #0]
 80057d6:	291d      	cmp	r1, #29
 80057d8:	d82c      	bhi.n	8005834 <__sflush_r+0xb8>
 80057da:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <__sflush_r+0x108>)
 80057dc:	40ca      	lsrs	r2, r1
 80057de:	07d6      	lsls	r6, r2, #31
 80057e0:	d528      	bpl.n	8005834 <__sflush_r+0xb8>
 80057e2:	2200      	movs	r2, #0
 80057e4:	6062      	str	r2, [r4, #4]
 80057e6:	04d9      	lsls	r1, r3, #19
 80057e8:	6922      	ldr	r2, [r4, #16]
 80057ea:	6022      	str	r2, [r4, #0]
 80057ec:	d504      	bpl.n	80057f8 <__sflush_r+0x7c>
 80057ee:	1c42      	adds	r2, r0, #1
 80057f0:	d101      	bne.n	80057f6 <__sflush_r+0x7a>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	b903      	cbnz	r3, 80057f8 <__sflush_r+0x7c>
 80057f6:	6560      	str	r0, [r4, #84]	; 0x54
 80057f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057fa:	602f      	str	r7, [r5, #0]
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d0ca      	beq.n	8005796 <__sflush_r+0x1a>
 8005800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005804:	4299      	cmp	r1, r3
 8005806:	d002      	beq.n	800580e <__sflush_r+0x92>
 8005808:	4628      	mov	r0, r5
 800580a:	f7ff fc29 	bl	8005060 <_free_r>
 800580e:	2000      	movs	r0, #0
 8005810:	6360      	str	r0, [r4, #52]	; 0x34
 8005812:	e7c1      	b.n	8005798 <__sflush_r+0x1c>
 8005814:	6a21      	ldr	r1, [r4, #32]
 8005816:	2301      	movs	r3, #1
 8005818:	4628      	mov	r0, r5
 800581a:	47b0      	blx	r6
 800581c:	1c41      	adds	r1, r0, #1
 800581e:	d1c7      	bne.n	80057b0 <__sflush_r+0x34>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0c4      	beq.n	80057b0 <__sflush_r+0x34>
 8005826:	2b1d      	cmp	r3, #29
 8005828:	d001      	beq.n	800582e <__sflush_r+0xb2>
 800582a:	2b16      	cmp	r3, #22
 800582c:	d101      	bne.n	8005832 <__sflush_r+0xb6>
 800582e:	602f      	str	r7, [r5, #0]
 8005830:	e7b1      	b.n	8005796 <__sflush_r+0x1a>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005838:	81a3      	strh	r3, [r4, #12]
 800583a:	e7ad      	b.n	8005798 <__sflush_r+0x1c>
 800583c:	690f      	ldr	r7, [r1, #16]
 800583e:	2f00      	cmp	r7, #0
 8005840:	d0a9      	beq.n	8005796 <__sflush_r+0x1a>
 8005842:	0793      	lsls	r3, r2, #30
 8005844:	680e      	ldr	r6, [r1, #0]
 8005846:	bf08      	it	eq
 8005848:	694b      	ldreq	r3, [r1, #20]
 800584a:	600f      	str	r7, [r1, #0]
 800584c:	bf18      	it	ne
 800584e:	2300      	movne	r3, #0
 8005850:	eba6 0807 	sub.w	r8, r6, r7
 8005854:	608b      	str	r3, [r1, #8]
 8005856:	f1b8 0f00 	cmp.w	r8, #0
 800585a:	dd9c      	ble.n	8005796 <__sflush_r+0x1a>
 800585c:	6a21      	ldr	r1, [r4, #32]
 800585e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005860:	4643      	mov	r3, r8
 8005862:	463a      	mov	r2, r7
 8005864:	4628      	mov	r0, r5
 8005866:	47b0      	blx	r6
 8005868:	2800      	cmp	r0, #0
 800586a:	dc06      	bgt.n	800587a <__sflush_r+0xfe>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	e78e      	b.n	8005798 <__sflush_r+0x1c>
 800587a:	4407      	add	r7, r0
 800587c:	eba8 0800 	sub.w	r8, r8, r0
 8005880:	e7e9      	b.n	8005856 <__sflush_r+0xda>
 8005882:	bf00      	nop
 8005884:	20400001 	.word	0x20400001

08005888 <_fflush_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	690b      	ldr	r3, [r1, #16]
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b913      	cbnz	r3, 8005898 <_fflush_r+0x10>
 8005892:	2500      	movs	r5, #0
 8005894:	4628      	mov	r0, r5
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	b118      	cbz	r0, 80058a2 <_fflush_r+0x1a>
 800589a:	6983      	ldr	r3, [r0, #24]
 800589c:	b90b      	cbnz	r3, 80058a2 <_fflush_r+0x1a>
 800589e:	f7fe ff89 	bl	80047b4 <__sinit>
 80058a2:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <_fflush_r+0x6c>)
 80058a4:	429c      	cmp	r4, r3
 80058a6:	d11b      	bne.n	80058e0 <_fflush_r+0x58>
 80058a8:	686c      	ldr	r4, [r5, #4]
 80058aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ef      	beq.n	8005892 <_fflush_r+0xa>
 80058b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058b4:	07d0      	lsls	r0, r2, #31
 80058b6:	d404      	bmi.n	80058c2 <_fflush_r+0x3a>
 80058b8:	0599      	lsls	r1, r3, #22
 80058ba:	d402      	bmi.n	80058c2 <_fflush_r+0x3a>
 80058bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058be:	f7ff f81c 	bl	80048fa <__retarget_lock_acquire_recursive>
 80058c2:	4628      	mov	r0, r5
 80058c4:	4621      	mov	r1, r4
 80058c6:	f7ff ff59 	bl	800577c <__sflush_r>
 80058ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058cc:	07da      	lsls	r2, r3, #31
 80058ce:	4605      	mov	r5, r0
 80058d0:	d4e0      	bmi.n	8005894 <_fflush_r+0xc>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	059b      	lsls	r3, r3, #22
 80058d6:	d4dd      	bmi.n	8005894 <_fflush_r+0xc>
 80058d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058da:	f7ff f80f 	bl	80048fc <__retarget_lock_release_recursive>
 80058de:	e7d9      	b.n	8005894 <_fflush_r+0xc>
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <_fflush_r+0x70>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d101      	bne.n	80058ea <_fflush_r+0x62>
 80058e6:	68ac      	ldr	r4, [r5, #8]
 80058e8:	e7df      	b.n	80058aa <_fflush_r+0x22>
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <_fflush_r+0x74>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	bf08      	it	eq
 80058f0:	68ec      	ldreq	r4, [r5, #12]
 80058f2:	e7da      	b.n	80058aa <_fflush_r+0x22>
 80058f4:	08005dec 	.word	0x08005dec
 80058f8:	08005e0c 	.word	0x08005e0c
 80058fc:	08005dcc 	.word	0x08005dcc

08005900 <fiprintf>:
 8005900:	b40e      	push	{r1, r2, r3}
 8005902:	b503      	push	{r0, r1, lr}
 8005904:	4601      	mov	r1, r0
 8005906:	ab03      	add	r3, sp, #12
 8005908:	4805      	ldr	r0, [pc, #20]	; (8005920 <fiprintf+0x20>)
 800590a:	f853 2b04 	ldr.w	r2, [r3], #4
 800590e:	6800      	ldr	r0, [r0, #0]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	f7ff fcaf 	bl	8005274 <_vfiprintf_r>
 8005916:	b002      	add	sp, #8
 8005918:	f85d eb04 	ldr.w	lr, [sp], #4
 800591c:	b003      	add	sp, #12
 800591e:	4770      	bx	lr
 8005920:	2000000c 	.word	0x2000000c

08005924 <_lseek_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d07      	ldr	r5, [pc, #28]	; (8005944 <_lseek_r+0x20>)
 8005928:	4604      	mov	r4, r0
 800592a:	4608      	mov	r0, r1
 800592c:	4611      	mov	r1, r2
 800592e:	2200      	movs	r2, #0
 8005930:	602a      	str	r2, [r5, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f7fb ffe4 	bl	8001900 <_lseek>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_lseek_r+0x1e>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_lseek_r+0x1e>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	20000214 	.word	0x20000214

08005948 <__swhatbuf_r>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	460e      	mov	r6, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	2900      	cmp	r1, #0
 8005952:	b096      	sub	sp, #88	; 0x58
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	da08      	bge.n	800596c <__swhatbuf_r+0x24>
 800595a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	602a      	str	r2, [r5, #0]
 8005962:	061a      	lsls	r2, r3, #24
 8005964:	d410      	bmi.n	8005988 <__swhatbuf_r+0x40>
 8005966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596a:	e00e      	b.n	800598a <__swhatbuf_r+0x42>
 800596c:	466a      	mov	r2, sp
 800596e:	f000 f895 	bl	8005a9c <_fstat_r>
 8005972:	2800      	cmp	r0, #0
 8005974:	dbf1      	blt.n	800595a <__swhatbuf_r+0x12>
 8005976:	9a01      	ldr	r2, [sp, #4]
 8005978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800597c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005980:	425a      	negs	r2, r3
 8005982:	415a      	adcs	r2, r3
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	e7ee      	b.n	8005966 <__swhatbuf_r+0x1e>
 8005988:	2340      	movs	r3, #64	; 0x40
 800598a:	2000      	movs	r0, #0
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	b016      	add	sp, #88	; 0x58
 8005990:	bd70      	pop	{r4, r5, r6, pc}
	...

08005994 <__smakebuf_r>:
 8005994:	898b      	ldrh	r3, [r1, #12]
 8005996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005998:	079d      	lsls	r5, r3, #30
 800599a:	4606      	mov	r6, r0
 800599c:	460c      	mov	r4, r1
 800599e:	d507      	bpl.n	80059b0 <__smakebuf_r+0x1c>
 80059a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	2301      	movs	r3, #1
 80059aa:	6163      	str	r3, [r4, #20]
 80059ac:	b002      	add	sp, #8
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	ab01      	add	r3, sp, #4
 80059b2:	466a      	mov	r2, sp
 80059b4:	f7ff ffc8 	bl	8005948 <__swhatbuf_r>
 80059b8:	9900      	ldr	r1, [sp, #0]
 80059ba:	4605      	mov	r5, r0
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fbbb 	bl	8005138 <_malloc_r>
 80059c2:	b948      	cbnz	r0, 80059d8 <__smakebuf_r+0x44>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	059a      	lsls	r2, r3, #22
 80059ca:	d4ef      	bmi.n	80059ac <__smakebuf_r+0x18>
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	e7e3      	b.n	80059a0 <__smakebuf_r+0xc>
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <__smakebuf_r+0x7c>)
 80059da:	62b3      	str	r3, [r6, #40]	; 0x28
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	6020      	str	r0, [r4, #0]
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	6163      	str	r3, [r4, #20]
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	6120      	str	r0, [r4, #16]
 80059ee:	b15b      	cbz	r3, 8005a08 <__smakebuf_r+0x74>
 80059f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f4:	4630      	mov	r0, r6
 80059f6:	f000 f863 	bl	8005ac0 <_isatty_r>
 80059fa:	b128      	cbz	r0, 8005a08 <__smakebuf_r+0x74>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	89a0      	ldrh	r0, [r4, #12]
 8005a0a:	4305      	orrs	r5, r0
 8005a0c:	81a5      	strh	r5, [r4, #12]
 8005a0e:	e7cd      	b.n	80059ac <__smakebuf_r+0x18>
 8005a10:	0800474d 	.word	0x0800474d

08005a14 <__ascii_mbtowc>:
 8005a14:	b082      	sub	sp, #8
 8005a16:	b901      	cbnz	r1, 8005a1a <__ascii_mbtowc+0x6>
 8005a18:	a901      	add	r1, sp, #4
 8005a1a:	b142      	cbz	r2, 8005a2e <__ascii_mbtowc+0x1a>
 8005a1c:	b14b      	cbz	r3, 8005a32 <__ascii_mbtowc+0x1e>
 8005a1e:	7813      	ldrb	r3, [r2, #0]
 8005a20:	600b      	str	r3, [r1, #0]
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	1e10      	subs	r0, r2, #0
 8005a26:	bf18      	it	ne
 8005a28:	2001      	movne	r0, #1
 8005a2a:	b002      	add	sp, #8
 8005a2c:	4770      	bx	lr
 8005a2e:	4610      	mov	r0, r2
 8005a30:	e7fb      	b.n	8005a2a <__ascii_mbtowc+0x16>
 8005a32:	f06f 0001 	mvn.w	r0, #1
 8005a36:	e7f8      	b.n	8005a2a <__ascii_mbtowc+0x16>

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f7fe bf5e 	b.w	80048fa <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20000208 	.word	0x20000208

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f7fe bf59 	b.w	80048fc <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20000208 	.word	0x20000208

08005a50 <_read_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d07      	ldr	r5, [pc, #28]	; (8005a70 <_read_r+0x20>)
 8005a54:	4604      	mov	r4, r0
 8005a56:	4608      	mov	r0, r1
 8005a58:	4611      	mov	r1, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	602a      	str	r2, [r5, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f7fb feee 	bl	8001840 <_read>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_read_r+0x1e>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_read_r+0x1e>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	20000214 	.word	0x20000214

08005a74 <__ascii_wctomb>:
 8005a74:	b149      	cbz	r1, 8005a8a <__ascii_wctomb+0x16>
 8005a76:	2aff      	cmp	r2, #255	; 0xff
 8005a78:	bf85      	ittet	hi
 8005a7a:	238a      	movhi	r3, #138	; 0x8a
 8005a7c:	6003      	strhi	r3, [r0, #0]
 8005a7e:	700a      	strbls	r2, [r1, #0]
 8005a80:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a84:	bf98      	it	ls
 8005a86:	2001      	movls	r0, #1
 8005a88:	4770      	bx	lr
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4770      	bx	lr

08005a8e <abort>:
 8005a8e:	b508      	push	{r3, lr}
 8005a90:	2006      	movs	r0, #6
 8005a92:	f000 f84d 	bl	8005b30 <raise>
 8005a96:	2001      	movs	r0, #1
 8005a98:	f7fb fec8 	bl	800182c <_exit>

08005a9c <_fstat_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d07      	ldr	r5, [pc, #28]	; (8005abc <_fstat_r+0x20>)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	f7fb ff0e 	bl	80018ca <_fstat>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d102      	bne.n	8005ab8 <_fstat_r+0x1c>
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	b103      	cbz	r3, 8005ab8 <_fstat_r+0x1c>
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	bf00      	nop
 8005abc:	20000214 	.word	0x20000214

08005ac0 <_isatty_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d06      	ldr	r5, [pc, #24]	; (8005adc <_isatty_r+0x1c>)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	4608      	mov	r0, r1
 8005aca:	602b      	str	r3, [r5, #0]
 8005acc:	f7fb ff0d 	bl	80018ea <_isatty>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_isatty_r+0x1a>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_isatty_r+0x1a>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	20000214 	.word	0x20000214

08005ae0 <_raise_r>:
 8005ae0:	291f      	cmp	r1, #31
 8005ae2:	b538      	push	{r3, r4, r5, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	d904      	bls.n	8005af4 <_raise_r+0x14>
 8005aea:	2316      	movs	r3, #22
 8005aec:	6003      	str	r3, [r0, #0]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005af6:	b112      	cbz	r2, 8005afe <_raise_r+0x1e>
 8005af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005afc:	b94b      	cbnz	r3, 8005b12 <_raise_r+0x32>
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 f830 	bl	8005b64 <_getpid_r>
 8005b04:	462a      	mov	r2, r5
 8005b06:	4601      	mov	r1, r0
 8005b08:	4620      	mov	r0, r4
 8005b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b0e:	f000 b817 	b.w	8005b40 <_kill_r>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d00a      	beq.n	8005b2c <_raise_r+0x4c>
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	d103      	bne.n	8005b22 <_raise_r+0x42>
 8005b1a:	2316      	movs	r3, #22
 8005b1c:	6003      	str	r3, [r0, #0]
 8005b1e:	2001      	movs	r0, #1
 8005b20:	e7e7      	b.n	8005af2 <_raise_r+0x12>
 8005b22:	2400      	movs	r4, #0
 8005b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b28:	4628      	mov	r0, r5
 8005b2a:	4798      	blx	r3
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e7e0      	b.n	8005af2 <_raise_r+0x12>

08005b30 <raise>:
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <raise+0xc>)
 8005b32:	4601      	mov	r1, r0
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f7ff bfd3 	b.w	8005ae0 <_raise_r>
 8005b3a:	bf00      	nop
 8005b3c:	2000000c 	.word	0x2000000c

08005b40 <_kill_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	; (8005b60 <_kill_r+0x20>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f7fb fe5d 	bl	800180c <_kill>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d102      	bne.n	8005b5c <_kill_r+0x1c>
 8005b56:	682b      	ldr	r3, [r5, #0]
 8005b58:	b103      	cbz	r3, 8005b5c <_kill_r+0x1c>
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	bd38      	pop	{r3, r4, r5, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000214 	.word	0x20000214

08005b64 <_getpid_r>:
 8005b64:	f7fb be4a 	b.w	80017fc <_getpid>

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
