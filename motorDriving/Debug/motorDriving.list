
motorDriving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08007450  08007450  00017450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d4  080078d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078dc  080078dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080078e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08007ac0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08007ac0  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d896  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea9  00000000  00000000  0002daa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00030410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034cb  00000000  00000000  00030e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daca  00000000  00000000  000342d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001007e0  00000000  00000000  00041d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014257d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c54  00000000  00000000  001425d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007434 	.word	0x08007434

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08007434 	.word	0x08007434

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <__io_putchar+0x20>)
 8000eee:	f002 fe4f 	bl	8003b90 <HAL_UART_Transmit>
  return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fe07 	bl	8001b16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f80c 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f89c 	bl	8001048 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f10:	f000 f84e 	bl	8000fb0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  struct coordinate coord = convertToCoord("A4");
//  coord = convertToCoord("P7");
  motorSetup();
 8000f14:	f000 fb28 	bl	8001568 <motorSetup>
  moveToCoord("H5");
 8000f18:	4801      	ldr	r0, [pc, #4]	; (8000f20 <main+0x20>)
 8000f1a:	f000 fbaf 	bl	800167c <moveToCoord>
//  moveToCoord("A1");
//  moveToCoord("H8");
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <main+0x1e>
 8000f20:	08007450 	.word	0x08007450

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	; 0x58
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2244      	movs	r2, #68	; 0x44
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fcc2 	bl	80048bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f4a:	f001 f92d 	bl	80021a8 <HAL_PWREx_ControlVoltageScaling>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f54:	f000 fb02 	bl	800155c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f64:	2360      	movs	r3, #96	; 0x60
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f9cd 	bl	8002310 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 faee 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fdd3 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fa4:	f000 fada 	bl	800155c <Error_Handler>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3758      	adds	r7, #88	; 0x58
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <MX_USART2_UART_Init+0x94>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff8:	4811      	ldr	r0, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x90>)
 8000ffa:	f002 fd79 	bl	8003af0 <HAL_UART_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001004:	f000 faaa 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_USART2_UART_Init+0x90>)
 800100c:	f003 fb42 	bl	8004694 <HAL_UARTEx_SetTxFifoThreshold>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001016:	f000 faa1 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x90>)
 800101e:	f003 fb77 	bl	8004710 <HAL_UARTEx_SetRxFifoThreshold>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001028:	f000 fa98 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_USART2_UART_Init+0x90>)
 800102e:	f003 faf8 	bl	8004622 <HAL_UARTEx_DisableFifoMode>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001038:	f000 fa90 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200001f8 	.word	0x200001f8
 8001044:	40004400 	.word	0x40004400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105e:	4bb3      	ldr	r3, [pc, #716]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4ab2      	ldr	r2, [pc, #712]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4bb0      	ldr	r3, [pc, #704]	; (800132c <MX_GPIO_Init+0x2e4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4bad      	ldr	r3, [pc, #692]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4aac      	ldr	r2, [pc, #688]	; (800132c <MX_GPIO_Init+0x2e4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4baa      	ldr	r3, [pc, #680]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	4ba7      	ldr	r3, [pc, #668]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4aa6      	ldr	r2, [pc, #664]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4ba4      	ldr	r3, [pc, #656]	; (800132c <MX_GPIO_Init+0x2e4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	4ba1      	ldr	r3, [pc, #644]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4aa0      	ldr	r2, [pc, #640]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b9e      	ldr	r3, [pc, #632]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b9b      	ldr	r3, [pc, #620]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a9a      	ldr	r2, [pc, #616]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b98      	ldr	r3, [pc, #608]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b95      	ldr	r3, [pc, #596]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a94      	ldr	r2, [pc, #592]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b8f      	ldr	r3, [pc, #572]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a8e      	ldr	r2, [pc, #568]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b8c      	ldr	r3, [pc, #560]	; (800132c <MX_GPIO_Init+0x2e4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	4b89      	ldr	r3, [pc, #548]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a88      	ldr	r2, [pc, #544]	; (800132c <MX_GPIO_Init+0x2e4>)
 800110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b86      	ldr	r3, [pc, #536]	; (800132c <MX_GPIO_Init+0x2e4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800111e:	f001 f8e7 	bl	80022f0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	211b      	movs	r1, #27
 8001126:	4882      	ldr	r0, [pc, #520]	; (8001330 <MX_GPIO_Init+0x2e8>)
 8001128:	f001 f806 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4880      	ldr	r0, [pc, #512]	; (8001334 <MX_GPIO_Init+0x2ec>)
 8001132:	f001 f801 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	21f0      	movs	r1, #240	; 0xf0
 800113a:	487f      	ldr	r0, [pc, #508]	; (8001338 <MX_GPIO_Init+0x2f0>)
 800113c:	f000 fffc 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001140:	230c      	movs	r3, #12
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001150:	230d      	movs	r3, #13
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4878      	ldr	r0, [pc, #480]	; (800133c <MX_GPIO_Init+0x2f4>)
 800115c:	f000 fe5a 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001160:	2307      	movs	r3, #7
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001170:	2304      	movs	r3, #4
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4871      	ldr	r0, [pc, #452]	; (8001340 <MX_GPIO_Init+0x2f8>)
 800117c:	f000 fe4a 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001190:	230d      	movs	r3, #13
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	4869      	ldr	r0, [pc, #420]	; (8001340 <MX_GPIO_Init+0x2f8>)
 800119c:	f000 fe3a 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80011a0:	231b      	movs	r3, #27
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	485e      	ldr	r0, [pc, #376]	; (8001330 <MX_GPIO_Init+0x2e8>)
 80011b8:	f000 fe2c 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011bc:	2304      	movs	r3, #4
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c0:	230b      	movs	r3, #11
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	4858      	ldr	r0, [pc, #352]	; (8001330 <MX_GPIO_Init+0x2e8>)
 80011d0:	f000 fe20 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d4:	2301      	movs	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011e4:	2301      	movs	r3, #1
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f000 fe0f 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011f6:	2302      	movs	r3, #2
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011fa:	230b      	movs	r3, #11
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f000 fe02 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001210:	23f0      	movs	r3, #240	; 0xf0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001220:	2305      	movs	r3, #5
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f000 fdf1 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001232:	2320      	movs	r3, #32
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	483a      	ldr	r0, [pc, #232]	; (8001330 <MX_GPIO_Init+0x2e8>)
 8001246:	f000 fde5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124a:	2301      	movs	r3, #1
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800125a:	2302      	movs	r3, #2
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	4833      	ldr	r0, [pc, #204]	; (8001334 <MX_GPIO_Init+0x2ec>)
 8001266:	f000 fdd5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800126a:	2302      	movs	r3, #2
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800126e:	230b      	movs	r3, #11
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <MX_GPIO_Init+0x2ec>)
 800127e:	f000 fdc9 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001282:	2304      	movs	r3, #4
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <MX_GPIO_Init+0x2ec>)
 800129a:	f000 fdbb 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800129e:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4820      	ldr	r0, [pc, #128]	; (800133c <MX_GPIO_Init+0x2f4>)
 80012bc:	f000 fdaa 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80012d2:	2303      	movs	r3, #3
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4817      	ldr	r0, [pc, #92]	; (800133c <MX_GPIO_Init+0x2f4>)
 80012de:	f000 fd99 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012f4:	2301      	movs	r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_GPIO_Init+0x2ec>)
 8001300:	f000 fd88 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001304:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001316:	230d      	movs	r3, #13
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_GPIO_Init+0x2ec>)
 8001322:	f000 fd77 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001326:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800132a:	e00b      	b.n	8001344 <MX_GPIO_Init+0x2fc>
 800132c:	40021000 	.word	0x40021000
 8001330:	48000800 	.word	0x48000800
 8001334:	48000400 	.word	0x48000400
 8001338:	48000c00 	.word	0x48000c00
 800133c:	48001000 	.word	0x48001000
 8001340:	48001400 	.word	0x48001400
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001352:	230e      	movs	r3, #14
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	487a      	ldr	r0, [pc, #488]	; (8001548 <MX_GPIO_Init+0x500>)
 800135e:	f000 fd59 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001374:	2307      	movs	r3, #7
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4873      	ldr	r0, [pc, #460]	; (800154c <MX_GPIO_Init+0x504>)
 8001380:	f000 fd48 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001384:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001396:	2302      	movs	r3, #2
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	486a      	ldr	r0, [pc, #424]	; (800154c <MX_GPIO_Init+0x504>)
 80013a2:	f000 fd37 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013b8:	2308      	movs	r3, #8
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4863      	ldr	r0, [pc, #396]	; (8001550 <MX_GPIO_Init+0x508>)
 80013c4:	f000 fd26 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80013d8:	230d      	movs	r3, #13
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	485c      	ldr	r0, [pc, #368]	; (8001554 <MX_GPIO_Init+0x50c>)
 80013e4:	f000 fd16 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013f8:	2302      	movs	r3, #2
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4854      	ldr	r0, [pc, #336]	; (8001554 <MX_GPIO_Init+0x50c>)
 8001404:	f000 fd06 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001408:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800141a:	230c      	movs	r3, #12
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	484b      	ldr	r0, [pc, #300]	; (8001554 <MX_GPIO_Init+0x50c>)
 8001426:	f000 fcf5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800142a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800143c:	230a      	movs	r3, #10
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f000 fce3 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f000 fcd5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146a:	2301      	movs	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800147a:	2309      	movs	r3, #9
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4831      	ldr	r0, [pc, #196]	; (800154c <MX_GPIO_Init+0x504>)
 8001486:	f000 fcc5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148a:	2304      	movs	r3, #4
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800149a:	230c      	movs	r3, #12
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	4829      	ldr	r0, [pc, #164]	; (800154c <MX_GPIO_Init+0x504>)
 80014a6:	f000 fcb5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014aa:	23f0      	movs	r3, #240	; 0xf0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4822      	ldr	r0, [pc, #136]	; (800154c <MX_GPIO_Init+0x504>)
 80014c2:	f000 fca7 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014c6:	2338      	movs	r3, #56	; 0x38
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014d6:	2306      	movs	r3, #6
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <MX_GPIO_Init+0x500>)
 80014e2:	f000 fc97 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <MX_GPIO_Init+0x500>)
 80014fa:	f000 fc8b 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <MX_GPIO_Init+0x500>)
 800151c:	f000 fc7a 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001520:	2301      	movs	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001530:	2302      	movs	r3, #2
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_GPIO_Init+0x510>)
 800153c:	f000 fc6a 	bl	8001e14 <HAL_GPIO_Init>

}
 8001540:	bf00      	nop
 8001542:	3738      	adds	r7, #56	; 0x38
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	48000400 	.word	0x48000400
 800154c:	48000c00 	.word	0x48000c00
 8001550:	48001800 	.word	0x48001800
 8001554:	48000800 	.word	0x48000800
 8001558:	48001000 	.word	0x48001000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <motorSetup>:
#define bigLength 2140 //TODO update for smaller steps

//X refers to larger space
struct coordinate curPosition = {0,0};

void motorSetup(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(rstBigPort, rstBig, 1);
 800156c:	2201      	movs	r2, #1
 800156e:	2101      	movs	r1, #1
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <motorSetup+0x44>)
 8001572:	f000 fde1 	bl	8002138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(slpBigPort, slpBig, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2108      	movs	r1, #8
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <motorSetup+0x44>)
 800157c:	f000 fddc 	bl	8002138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <motorSetup+0x44>)
 8001586:	f000 fdd7 	bl	8002138 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(rstSmallPort, rstSmall, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	2110      	movs	r1, #16
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <motorSetup+0x48>)
 8001590:	f000 fdd2 	bl	8002138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(slpSmallPort, slpSmall, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	2120      	movs	r1, #32
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <motorSetup+0x48>)
 800159a:	f000 fdcd 	bl	8002138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	4803      	ldr	r0, [pc, #12]	; (80015b0 <motorSetup+0x48>)
 80015a4:	f000 fdc8 	bl	8002138 <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	48000800 	.word	0x48000800
 80015b0:	48000c00 	.word	0x48000c00
 80015b4:	00000000 	.word	0x00000000

080015b8 <convertToCoord>:


//Square is input of form "{letter}{number}" for example "A4"
struct coordinate convertToCoord(char* square){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	struct coordinate coord;
	coord.x = (2*(square[0] - 'A') + 1)*(bigLength/16.0);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3b41      	subs	r3, #65	; 0x41
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	3301      	adds	r3, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffc1 	bl	8000554 <__aeabi_i2d>
 80015d2:	a326      	add	r3, pc, #152	; (adr r3, 800166c <convertToCoord+0xb4>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f826 	bl	8000628 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fad0 	bl	8000b88 <__aeabi_d2iz>
 80015e8:	4603      	mov	r3, r0
 80015ea:	60bb      	str	r3, [r7, #8]
	coord.y = (2*(atoi(&square[1])-1) + 1)*(smallLength/16.0);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 f919 	bl	8004828 <atoi>
 80015f6:	4603      	mov	r3, r0
 80015f8:	3b01      	subs	r3, #1
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	3301      	adds	r3, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa8 	bl	8000554 <__aeabi_i2d>
 8001604:	a31b      	add	r3, pc, #108	; (adr r3, 8001674 <convertToCoord+0xbc>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f80d 	bl	8000628 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fab7 	bl	8000b88 <__aeabi_d2iz>
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]
	if(coord.x<0 || coord.x>bigLength || coord.y<0 || coord.y>smallLength){
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0c      	blt.n	800163e <convertToCoord+0x86>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f640 025c 	movw	r2, #2140	; 0x85c
 800162a:	4293      	cmp	r3, r2
 800162c:	dc07      	bgt.n	800163e <convertToCoord+0x86>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db04      	blt.n	800163e <convertToCoord+0x86>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f640 022a 	movw	r2, #2090	; 0x82a
 800163a:	4293      	cmp	r3, r2
 800163c:	dd06      	ble.n	800164c <convertToCoord+0x94>
		printf("square %s doesn't exist or handled incorrectly", square);
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <convertToCoord+0xb0>)
 8001642:	f003 fea3 	bl	800538c <iprintf>
		exit(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f003 f8f8 	bl	800483c <exit>
	}
	return coord;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001658:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	08007454 	.word	0x08007454
 800166c:	00000000 	.word	0x00000000
 8001670:	4060b800 	.word	0x4060b800
 8001674:	00000000 	.word	0x00000000
 8001678:	40605400 	.word	0x40605400

0800167c <moveToCoord>:

//Square is input of form "{letter}{number}" for example "A4"
void moveToCoord(char* square){
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	struct coordinate pos = convertToCoord(square);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff94 	bl	80015b8 <convertToCoord>
	int deltaX = pos.x - curPosition.x;
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <moveToCoord+0xf0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
	int deltaY = pos.y - curPosition.y;
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <moveToCoord+0xf0>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	613b      	str	r3, [r7, #16]
	curPosition.x += deltaX;
 80016a4:	4b31      	ldr	r3, [pc, #196]	; (800176c <moveToCoord+0xf0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a2f      	ldr	r2, [pc, #188]	; (800176c <moveToCoord+0xf0>)
 80016ae:	6013      	str	r3, [r2, #0]
	curPosition.y += deltaY;
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <moveToCoord+0xf0>)
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a2c      	ldr	r2, [pc, #176]	; (800176c <moveToCoord+0xf0>)
 80016ba:	6053      	str	r3, [r2, #4]


	//Update direction moving
	if(deltaX < 0){
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da08      	bge.n	80016d4 <moveToCoord+0x58>
		HAL_GPIO_WritePin(dirBigPort, dirBig, 1);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2110      	movs	r1, #16
 80016c6:	482a      	ldr	r0, [pc, #168]	; (8001770 <moveToCoord+0xf4>)
 80016c8:	f000 fd36 	bl	8002138 <HAL_GPIO_WritePin>
		deltaX = deltaX*-1;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	425b      	negs	r3, r3
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e004      	b.n	80016de <moveToCoord+0x62>
	}
	else{
		HAL_GPIO_WritePin(dirBigPort, dirBig, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2110      	movs	r1, #16
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <moveToCoord+0xf4>)
 80016da:	f000 fd2d 	bl	8002138 <HAL_GPIO_WritePin>
	}
	if(deltaY < 0){
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da08      	bge.n	80016f6 <moveToCoord+0x7a>
		HAL_GPIO_WritePin(dirSmallPort, dirSmall, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	4822      	ldr	r0, [pc, #136]	; (8001774 <moveToCoord+0xf8>)
 80016ea:	f000 fd25 	bl	8002138 <HAL_GPIO_WritePin>
		deltaY = deltaY*-1;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	425b      	negs	r3, r3
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	e02e      	b.n	8001754 <moveToCoord+0xd8>
	}
	else{
		HAL_GPIO_WritePin(dirSmallPort, dirSmall, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	481e      	ldr	r0, [pc, #120]	; (8001774 <moveToCoord+0xf8>)
 80016fc:	f000 fd1c 	bl	8002138 <HAL_GPIO_WritePin>
	}


	//Move according to deltas
	while(deltaX > 0 || deltaY > 0){
 8001700:	e028      	b.n	8001754 <moveToCoord+0xd8>
		if(deltaX > 0){
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	dd04      	ble.n	8001712 <moveToCoord+0x96>
			HAL_GPIO_WritePin(stepBigPort, stepBig, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	2102      	movs	r1, #2
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <moveToCoord+0xf4>)
 800170e:	f000 fd13 	bl	8002138 <HAL_GPIO_WritePin>
		}
		if(deltaY > 0){
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dd04      	ble.n	8001722 <moveToCoord+0xa6>
			HAL_GPIO_WritePin(stepSmallPort, stepSmall, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <moveToCoord+0xf8>)
 800171e:	f000 fd0b 	bl	8002138 <HAL_GPIO_WritePin>
		}
		HAL_Delay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f000 fa6c 	bl	8001c00 <HAL_Delay>
		if(deltaX > 0){
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dd07      	ble.n	800173e <moveToCoord+0xc2>
			HAL_GPIO_WritePin(stepBigPort, stepBig, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2102      	movs	r1, #2
 8001732:	480f      	ldr	r0, [pc, #60]	; (8001770 <moveToCoord+0xf4>)
 8001734:	f000 fd00 	bl	8002138 <HAL_GPIO_WritePin>
			deltaX--;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3b01      	subs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
		}
		if(deltaY > 0){
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd07      	ble.n	8001754 <moveToCoord+0xd8>
			HAL_GPIO_WritePin(stepSmallPort, stepSmall, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <moveToCoord+0xf8>)
 800174a:	f000 fcf5 	bl	8002138 <HAL_GPIO_WritePin>
			deltaY--;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3b01      	subs	r3, #1
 8001752:	613b      	str	r3, [r7, #16]
	while(deltaX > 0 || deltaY > 0){
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dcd3      	bgt.n	8001702 <moveToCoord+0x86>
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	dcd0      	bgt.n	8001702 <moveToCoord+0x86>
		}
	}
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000288 	.word	0x20000288
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6613      	str	r3, [r2, #96]	; 0x60
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	; 0x58
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0b0      	sub	sp, #192	; 0xc0
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	2294      	movs	r2, #148	; 0x94
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 f86b 	bl	80048bc <memset>
  if(huart->Instance==USART2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <HAL_UART_MspInit+0xf4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d15c      	bne.n	80018aa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fc5f 	bl	80030c0 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001808:	f7ff fea8 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	6593      	str	r3, [r2, #88]	; 0x58
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_UART_MspInit+0xf8>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD3     ------> USART2_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001854:	230c      	movs	r3, #12
 8001856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186c:	2307      	movs	r3, #7
 800186e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f000 faca 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001880:	2308      	movs	r3, #8
 8001882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001898:	2307      	movs	r3, #7
 800189a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_UART_MspInit+0xfc>)
 80018a6:	f000 fab5 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	37c0      	adds	r7, #192	; 0xc0
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40004400 	.word	0x40004400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000c00 	.word	0x48000c00

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f000 f958 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_kill>:

int _kill(int pid, int sig)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192e:	f002 ff7f 	bl	8004830 <__errno>
 8001932:	4603      	mov	r3, r0
 8001934:	2216      	movs	r2, #22
 8001936:	601a      	str	r2, [r3, #0]
	return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_exit>:

void _exit (int status)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ffe7 	bl	8001924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001956:	e7fe      	b.n	8001956 <_exit+0x12>

08001958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e00a      	b.n	8001980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196a:	f3af 8000 	nop.w
 800196e:	4601      	mov	r1, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	b2ca      	uxtb	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf0      	blt.n	800196a <_read+0x12>
	}

return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e009      	b.n	80019b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fa95 	bl	8000edc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf1      	blt.n	80019a4 <_write+0x12>
	}
	return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_close>:

int _close(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f2:	605a      	str	r2, [r3, #4]
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_isatty>:

int _isatty(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f002 fee4 	bl	8004830 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200a0000 	.word	0x200a0000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	20000290 	.word	0x20000290
 8001a9c:	200002a8 	.word	0x200002a8

08001aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac8:	f7ff ffea 	bl	8001aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <LoopForever+0xe>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	; (8001b10 <LoopForever+0x16>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001af2:	f002 feb7 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af6:	f7ff fa03 	bl	8000f00 <main>

08001afa <LoopForever>:

LoopForever:
    b LoopForever
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001afc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b08:	080078e4 	.word	0x080078e4
  ldr r2, =_sbss
 8001b0c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b10:	200002a8 	.word	0x200002a8

08001b14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC1_IRQHandler>

08001b16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f943 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f80e 	bl	8001b48 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	e001      	b.n	8001b3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b38:	f7ff fe1e 	bl	8001778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_InitTick+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d023      	beq.n	8001ba4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_InitTick+0x70>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_InitTick+0x6c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f941 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d809      	bhi.n	8001b98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f919 	bl	8001dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_InitTick+0x74>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e007      	b.n	8001ba8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e004      	b.n	8001ba8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e001      	b.n	8001ba8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000294 	.word	0x20000294

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000294 	.word	0x20000294

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff47 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff5c 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffb0 	bl	8001d68 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e166      	b.n	80020f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8158 	beq.w	80020ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x40>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80b2 	beq.w	80020ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	4a60      	ldr	r2, [pc, #384]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6613      	str	r3, [r2, #96]	; 0x60
 8001f94:	4b5e      	ldr	r3, [pc, #376]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_GPIO_Init+0x300>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fca:	d02b      	beq.n	8002024 <HAL_GPIO_Init+0x210>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_GPIO_Init+0x304>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d025      	beq.n	8002020 <HAL_GPIO_Init+0x20c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_GPIO_Init+0x308>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01f      	beq.n	800201c <HAL_GPIO_Init+0x208>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_GPIO_Init+0x30c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d019      	beq.n	8002018 <HAL_GPIO_Init+0x204>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x310>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <HAL_GPIO_Init+0x200>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x314>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_GPIO_Init+0x1fc>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x318>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x1f8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x31c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_GPIO_Init+0x1f4>
 8002004:	2307      	movs	r3, #7
 8002006:	e00e      	b.n	8002026 <HAL_GPIO_Init+0x212>
 8002008:	2308      	movs	r3, #8
 800200a:	e00c      	b.n	8002026 <HAL_GPIO_Init+0x212>
 800200c:	2306      	movs	r3, #6
 800200e:	e00a      	b.n	8002026 <HAL_GPIO_Init+0x212>
 8002010:	2305      	movs	r3, #5
 8002012:	e008      	b.n	8002026 <HAL_GPIO_Init+0x212>
 8002014:	2304      	movs	r3, #4
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x212>
 8002018:	2303      	movs	r3, #3
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x212>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x212>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x212>
 8002024:	2300      	movs	r3, #0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002036:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_GPIO_Init+0x300>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_GPIO_Init+0x320>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002068:	4a32      	ldr	r2, [pc, #200]	; (8002134 <HAL_GPIO_Init+0x320>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_GPIO_Init+0x320>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <HAL_GPIO_Init+0x320>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_GPIO_Init+0x320>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f ae91 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800
 8002120:	48000c00 	.word	0x48000c00
 8002124:	48001000 	.word	0x48001000
 8002128:	48001400 	.word	0x48001400
 800212c:	48001800 	.word	0x48001800
 8002130:	48001c00 	.word	0x48001c00
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002178:	d102      	bne.n	8002180 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217e:	e00b      	b.n	8002198 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800218e:	d102      	bne.n	8002196 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	e000      	b.n	8002198 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002196:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40007000 	.word	0x40007000

080021a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d141      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b6:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d131      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ca:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021dc:	4a41      	ldr	r2, [pc, #260]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2232      	movs	r2, #50	; 0x32
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	4a3f      	ldr	r2, [pc, #252]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fa:	e002      	b.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3b01      	subs	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002202:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d102      	bne.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f2      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d158      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e057      	b.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002238:	e04d      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d141      	bne.n	80022c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d131      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2232      	movs	r2, #50	; 0x32
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	0c9b      	lsrs	r3, r3, #18
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002286:	e002      	b.n	800228e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3b01      	subs	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d102      	bne.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f2      	bne.n	8002288 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d112      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e011      	b.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022c4:	e007      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40007000 	.word	0x40007000
 80022e8:	20000000 	.word	0x20000000
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_PWREx_EnableVddIO2+0x1c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_PWREx_EnableVddIO2+0x1c>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6053      	str	r3, [r2, #4]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f000 bc08 	b.w	8002b34 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002324:	4b96      	ldr	r3, [pc, #600]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800232e:	4b94      	ldr	r3, [pc, #592]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80e4 	beq.w	800250e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_RCC_OscConfig+0x4c>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	f040 808b 	bne.w	800246a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b01      	cmp	r3, #1
 8002358:	f040 8087 	bne.w	800246a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800235c:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x64>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e3df      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_RCC_OscConfig+0x7e>
 8002384:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238c:	e005      	b.n	800239a <HAL_RCC_OscConfig+0x8a>
 800238e:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239a:	4293      	cmp	r3, r2
 800239c:	d223      	bcs.n	80023e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fdcc 	bl	8002f40 <RCC_SetFlashLatencyFromMSIRange>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3c0      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a72      	ldr	r2, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	496d      	ldr	r1, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d0:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4968      	ldr	r1, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e025      	b.n	8002432 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e6:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4960      	ldr	r1, [pc, #384]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	495b      	ldr	r1, [pc, #364]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fd8c 	bl	8002f40 <RCC_SetFlashLatencyFromMSIRange>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e380      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002432:	f000 fcc1 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b51      	ldr	r3, [pc, #324]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4950      	ldr	r1, [pc, #320]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a4e      	ldr	r2, [pc, #312]	; (8002588 <HAL_RCC_OscConfig+0x278>)
 8002450:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002452:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCC_OscConfig+0x27c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fb76 	bl	8001b48 <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d052      	beq.n	800250c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	e364      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d032      	beq.n	80024d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a42      	ldr	r2, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800247e:	f7ff fbb3 	bl	8001be8 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002486:	f7ff fbaf 	bl	8001be8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e34d      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a35      	ldr	r2, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4930      	ldr	r1, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	492b      	ldr	r1, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	e01a      	b.n	800250e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fb80 	bl	8001be8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ec:	f7ff fb7c 	bl	8001be8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e31a      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1dc>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d073      	beq.n	8002602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x21c>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d10e      	bne.n	8002544 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d10b      	bne.n	8002544 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d063      	beq.n	8002600 <HAL_RCC_OscConfig+0x2f0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d15f      	bne.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e2f7      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0x24c>
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e025      	b.n	80025a8 <HAL_RCC_OscConfig+0x298>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002564:	d114      	bne.n	8002590 <HAL_RCC_OscConfig+0x280>
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a02      	ldr	r2, [pc, #8]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x298>
 8002580:	40021000 	.word	0x40021000
 8002584:	08007484 	.word	0x08007484
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004
 8002590:	4ba0      	ldr	r3, [pc, #640]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a9f      	ldr	r2, [pc, #636]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b9d      	ldr	r3, [pc, #628]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a9c      	ldr	r2, [pc, #624]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff fb1a 	bl	8001be8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fb16 	bl	8001be8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e2b4      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ca:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2a8>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff fb06 	bl	8001be8 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fb02 	bl	8001be8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e2a0      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2d0>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d060      	beq.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d005      	beq.n	8002620 <HAL_RCC_OscConfig+0x310>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d119      	bne.n	800264e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d116      	bne.n	800264e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002620:	4b7c      	ldr	r3, [pc, #496]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x328>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e27d      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	4973      	ldr	r1, [pc, #460]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264c:	e040      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d023      	beq.n	800269e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002656:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff fac1 	bl	8001be8 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff fabd 	bl	8001be8 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e25b      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267c:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	495f      	ldr	r1, [pc, #380]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	e018      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a5c      	ldr	r2, [pc, #368]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7ff fa9d 	bl	8001be8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7ff fa99 	bl	8001be8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e237      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d03c      	beq.n	8002756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ea:	4a4a      	ldr	r2, [pc, #296]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7ff fa78 	bl	8001be8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff fa74 	bl	8001be8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e212      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ef      	beq.n	80026fc <HAL_RCC_OscConfig+0x3ec>
 800271c:	e01b      	b.n	8002756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002724:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff fa5b 	bl	8001be8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7ff fa57 	bl	8001be8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1f5      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ef      	bne.n	8002736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80a6 	beq.w	80028b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002764:	2300      	movs	r3, #0
 8002766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10d      	bne.n	8002790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278c:	2301      	movs	r3, #1
 800278e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x508>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d118      	bne.n	80027ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_OscConfig+0x508>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_RCC_OscConfig+0x508>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa1e 	bl	8001be8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7ff fa1a 	bl	8001be8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1b8      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_RCC_OscConfig+0x508>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4d8>
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e6:	e029      	b.n	800283c <HAL_RCC_OscConfig+0x52c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d115      	bne.n	800281c <HAL_RCC_OscConfig+0x50c>
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x52c>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	4b9d      	ldr	r3, [pc, #628]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	4a9c      	ldr	r2, [pc, #624]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800282c:	4b99      	ldr	r3, [pc, #612]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	4a98      	ldr	r2, [pc, #608]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7ff f9d0 	bl	8001be8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7ff f9cc 	bl	8001be8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e168      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002862:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ed      	beq.n	800284c <HAL_RCC_OscConfig+0x53c>
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7ff f9b9 	bl	8001be8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7ff f9b5 	bl	8001be8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e151      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002890:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ed      	bne.n	800287a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4a7a      	ldr	r2, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d03c      	beq.n	8002936 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01c      	beq.n	80028fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c4:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80028c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ca:	4a72      	ldr	r2, [pc, #456]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7ff f988 	bl	8001be8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028dc:	f7ff f984 	bl	8001be8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e122      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ee:	4b69      	ldr	r3, [pc, #420]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80028f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ef      	beq.n	80028dc <HAL_RCC_OscConfig+0x5cc>
 80028fc:	e01b      	b.n	8002936 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002904:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7ff f96b 	bl	8001be8 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002916:	f7ff f967 	bl	8001be8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e105      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002928:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 800292a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ef      	bne.n	8002916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80f9 	beq.w	8002b32 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b02      	cmp	r3, #2
 8002946:	f040 80cf 	bne.w	8002ae8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800294a:	4b52      	ldr	r3, [pc, #328]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	429a      	cmp	r2, r3
 800295c:	d12c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	3b01      	subs	r3, #1
 800296a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d123      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d11b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d113      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d109      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	3b01      	subs	r3, #1
 80029b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d071      	beq.n	8002a9c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d068      	beq.n	8002a90 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029be:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029ca:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0ac      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 80029e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e6:	f7ff f8ff 	bl	8001be8 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7ff f8fb 	bl	8001be8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e099      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCC_OscConfig+0x788>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a26:	0212      	lsls	r2, r2, #8
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a2e:	0852      	lsrs	r2, r2, #1
 8002a30:	3a01      	subs	r2, #1
 8002a32:	0552      	lsls	r2, r2, #21
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0652      	lsls	r2, r2, #25
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a46:	06d2      	lsls	r2, r2, #27
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	4912      	ldr	r1, [pc, #72]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a68:	f7ff f8be 	bl	8001be8 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff f8ba 	bl	8001be8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e058      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_RCC_OscConfig+0x784>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8e:	e050      	b.n	8002b32 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e04f      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
 8002a94:	40021000 	.word	0x40021000
 8002a98:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d144      	bne.n	8002b32 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac0:	f7ff f892 	bl	8001be8 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7ff f88e 	bl	8001be8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e02c      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x7b8>
 8002ae6:	e024      	b.n	8002b32 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d01f      	beq.n	8002b2e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7ff f875 	bl	8001be8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b02:	f7ff f871 	bl	8001be8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e00f      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	4905      	ldr	r1, [pc, #20]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x830>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60cb      	str	r3, [r1, #12]
 8002b2c:	e001      	b.n	8002b32 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	feeefffc 	.word	0xfeeefffc

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e11d      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b90      	ldr	r3, [pc, #576]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	498b      	ldr	r1, [pc, #556]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b89      	ldr	r3, [pc, #548]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e105      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d908      	bls.n	8002bba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	497b      	ldr	r1, [pc, #492]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d079      	beq.n	8002cba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d11e      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0dc      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bde:	f000 fa09 	bl	8002ff4 <RCC_GetSysClockFreqFromPLLSource>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d946      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d140      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bf6:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfe:	4a69      	ldr	r2, [pc, #420]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e035      	b.n	8002c78 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c14:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b9      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2c:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ad      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0a5      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c4c:	f000 f8b4 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4a55      	ldr	r2, [pc, #340]	; (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d90f      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c58:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6c:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c78:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 0203 	bic.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4947      	ldr	r1, [pc, #284]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8a:	f7fe ffad 	bl	8001be8 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c92:	f7fe ffa9 	bl	8001be8 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e077      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 020c 	and.w	r2, r3, #12
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d1eb      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cc0:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d208      	bcs.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	492b      	ldr	r1, [pc, #172]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d210      	bcs.n	8002d2a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 020f 	bic.w	r2, r3, #15
 8002d10:	4923      	ldr	r1, [pc, #140]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e036      	b.n	8002d98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4918      	ldr	r1, [pc, #96]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4910      	ldr	r1, [pc, #64]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d68:	f000 f826 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	490c      	ldr	r1, [pc, #48]	; (8002dac <HAL_RCC_ClockConfig+0x268>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x26c>)
 8002d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fedb 	bl	8001b48 <HAL_InitTick>
 8002d92:	4603      	mov	r3, r0
 8002d94:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	04c4b400 	.word	0x04c4b400
 8002dac:	08007484 	.word	0x08007484
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x34>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d121      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d11e      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e005      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e14:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e004      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d134      	bne.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xac>
 8002e5c:	e005      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e60:	617b      	str	r3, [r7, #20]
      break;
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e66:	617b      	str	r3, [r7, #20]
      break;
 8002e68:	e002      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	fb03 f202 	mul.w	r2, r3, r2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	0e5b      	lsrs	r3, r3, #25
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	0800749c 	.word	0x0800749c
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08007494 	.word	0x08007494

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f18:	f7ff ffda 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0adb      	lsrs	r3, r3, #11
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08007494 	.word	0x08007494

08002f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f906 	bl	8002168 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
 8002f5e:	e014      	b.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f78:	f7ff f8f6 	bl	8002168 <HAL_PWREx_GetVoltageRange>
 8002f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d10b      	bne.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d913      	bls.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f9c:	d902      	bls.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e00d      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e00a      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b7f      	cmp	r3, #127	; 0x7f
 8002fae:	d902      	bls.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e004      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b70      	cmp	r3, #112	; 0x70
 8002fba:	d101      	bne.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 020f 	bic.w	r2, r3, #15
 8002fc8:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d00b      	beq.n	8003022 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d825      	bhi.n	800305c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d008      	beq.n	8003028 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d11f      	bne.n	800305c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800301e:	613b      	str	r3, [r7, #16]
    break;
 8003020:	e01f      	b.n	8003062 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003024:	613b      	str	r3, [r7, #16]
    break;
 8003026:	e01c      	b.n	8003062 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e005      	b.n	8003050 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003050:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	613b      	str	r3, [r7, #16]
    break;
 800305a:	e002      	b.n	8003062 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
    break;
 8003060:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	3301      	adds	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	fb03 f202 	mul.w	r2, r3, r2
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0e5b      	lsrs	r3, r3, #25
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	3301      	adds	r3, #1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030a2:	683b      	ldr	r3, [r7, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	0800749c 	.word	0x0800749c

080030c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c8:	2300      	movs	r3, #0
 80030ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030cc:	2300      	movs	r3, #0
 80030ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d040      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d02a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d825      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030e8:	2b60      	cmp	r3, #96	; 0x60
 80030ea:	d026      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d821      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d006      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d81d      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d010      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003100:	e018      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4a88      	ldr	r2, [pc, #544]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800310e:	e015      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fb02 	bl	8003720 <RCCEx_PLLSAI1_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003120:	e00c      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3320      	adds	r3, #32
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fbed 	bl	8003908 <RCCEx_PLLSAI2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003132:	e003      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	74fb      	strb	r3, [r7, #19]
      break;
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800313a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003142:	4b79      	ldr	r3, [pc, #484]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003148:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003150:	4975      	ldr	r1, [pc, #468]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003158:	e001      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d047      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d030      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d82a      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800317a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317e:	d02a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003184:	d824      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003190:	d81e      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d010      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800319c:	e018      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a61      	ldr	r2, [pc, #388]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031aa:	e015      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fab4 	bl	8003720 <RCCEx_PLLSAI1_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031bc:	e00c      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3320      	adds	r3, #32
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fb9f 	bl	8003908 <RCCEx_PLLSAI2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ce:	e003      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	74fb      	strb	r3, [r7, #19]
      break;
 80031d4:	e000      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80031d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	494e      	ldr	r1, [pc, #312]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031f4:	e001      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 809f 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	4a40      	ldr	r2, [pc, #256]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322c:	6593      	str	r3, [r2, #88]	; 0x58
 800322e:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323a:	2301      	movs	r3, #1
 800323c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800324a:	f7fe fccd 	bl	8001be8 <HAL_GetTick>
 800324e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003250:	e009      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003252:	f7fe fcc9 	bl	8001be8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d902      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	74fb      	strb	r3, [r7, #19]
        break;
 8003264:	e005      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ef      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d15b      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003282:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01f      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	429a      	cmp	r2, r3
 8003294:	d019      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c2:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fc88 	bl	8001be8 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032da:	e00b      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe fc84 	bl	8001be8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d902      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	74fb      	strb	r3, [r7, #19]
            break;
 80032f2:	e006      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ec      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10c      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003320:	e008      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	74bb      	strb	r3, [r7, #18]
 8003326:	e005      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7c7b      	ldrb	r3, [r7, #17]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4ba0      	ldr	r3, [pc, #640]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a9f      	ldr	r2, [pc, #636]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003352:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f023 0203 	bic.w	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	4996      	ldr	r1, [pc, #600]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003374:	4b91      	ldr	r3, [pc, #580]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f023 020c 	bic.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	498e      	ldr	r1, [pc, #568]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	4985      	ldr	r1, [pc, #532]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	497d      	ldr	r1, [pc, #500]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033da:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e8:	4974      	ldr	r1, [pc, #464]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fc:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	496c      	ldr	r1, [pc, #432]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342c:	4963      	ldr	r1, [pc, #396]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003440:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344e:	495b      	ldr	r1, [pc, #364]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	4952      	ldr	r1, [pc, #328]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	494a      	ldr	r1, [pc, #296]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a6:	4b45      	ldr	r3, [pc, #276]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	4941      	ldr	r1, [pc, #260]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	4939      	ldr	r1, [pc, #228]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d028      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	4930      	ldr	r1, [pc, #192]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003508:	d106      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003514:	60d3      	str	r3, [r2, #12]
 8003516:	e011      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003520:	d10c      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2101      	movs	r1, #1
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f8f9 	bl	8003720 <RCCEx_PLLSAI1_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d04d      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d108      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003562:	e012      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800356a:	4a14      	ldr	r2, [pc, #80]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003570:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003582:	490e      	ldr	r1, [pc, #56]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003592:	d106      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	e020      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035aa:	d109      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	60d3      	str	r3, [r2, #12]
 80035b8:	e014      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f8a5 	bl	8003720 <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d028      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035f0:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fe:	4947      	ldr	r1, [pc, #284]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360e:	d106      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800361a:	60d3      	str	r3, [r2, #12]
 800361c:	e011      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003626:	d10c      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f876 	bl	8003720 <RCCEx_PLLSAI1_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01e      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365e:	492f      	ldr	r1, [pc, #188]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f851 	bl	8003720 <RCCEx_PLLSAI1_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800369e:	f023 0204 	bic.w	r2, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	491c      	ldr	r1, [pc, #112]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036c2:	f023 0218 	bic.w	r2, r3, #24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	4913      	ldr	r1, [pc, #76]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	490a      	ldr	r1, [pc, #40]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003710:	7cbb      	ldrb	r3, [r7, #18]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000

08003720 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800372e:	4b72      	ldr	r3, [pc, #456]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800373a:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d103      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
       ||
 800374e:	2b00      	cmp	r3, #0
 8003750:	d142      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	e03f      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d018      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0x72>
 8003760:	2b03      	cmp	r3, #3
 8003762:	d825      	bhi.n	80037b0 <RCCEx_PLLSAI1_Config+0x90>
 8003764:	2b01      	cmp	r3, #1
 8003766:	d002      	beq.n	800376e <RCCEx_PLLSAI1_Config+0x4e>
 8003768:	2b02      	cmp	r3, #2
 800376a:	d009      	beq.n	8003780 <RCCEx_PLLSAI1_Config+0x60>
 800376c:	e020      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800376e:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11d      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377e:	e01a      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003780:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e013      	b.n	80037ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800379e:	4b56      	ldr	r3, [pc, #344]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ae:	e006      	b.n	80037be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e004      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037be:	bf00      	nop
    }

    if(status == HAL_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80037c6:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4949      	ldr	r1, [pc, #292]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 8086 	bne.w	80038ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037e0:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fe f9fc 	bl	8001be8 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f4:	f7fe f9f8 	bl	8001be8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
        break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ef      	bne.n	80037f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d168      	bne.n	80038ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d113      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003820:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b35      	ldr	r3, [pc, #212]	; (80038fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6892      	ldr	r2, [r2, #8]
 800382c:	0211      	lsls	r1, r2, #8
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	06d2      	lsls	r2, r2, #27
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6852      	ldr	r2, [r2, #4]
 800383a:	3a01      	subs	r2, #1
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	430a      	orrs	r2, r1
 8003840:	492d      	ldr	r1, [pc, #180]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	610b      	str	r3, [r1, #16]
 8003846:	e02d      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d115      	bne.n	800387a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	0211      	lsls	r1, r2, #8
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6912      	ldr	r2, [r2, #16]
 8003860:	0852      	lsrs	r2, r2, #1
 8003862:	3a01      	subs	r2, #1
 8003864:	0552      	lsls	r2, r2, #21
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6852      	ldr	r2, [r2, #4]
 800386c:	3a01      	subs	r2, #1
 800386e:	0112      	lsls	r2, r2, #4
 8003870:	430a      	orrs	r2, r1
 8003872:	4921      	ldr	r1, [pc, #132]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]
 8003878:	e014      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	0211      	lsls	r1, r2, #8
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6952      	ldr	r2, [r2, #20]
 800388c:	0852      	lsrs	r2, r2, #1
 800388e:	3a01      	subs	r2, #1
 8003890:	0652      	lsls	r2, r2, #25
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	3a01      	subs	r2, #1
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	430a      	orrs	r2, r1
 800389e:	4916      	ldr	r1, [pc, #88]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe f99a 	bl	8001be8 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b6:	e009      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b8:	f7fe f996 	bl	8001be8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	73fb      	strb	r3, [r7, #15]
          break;
 80038ca:	e005      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	4904      	ldr	r1, [pc, #16]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	07ff800f 	.word	0x07ff800f
 8003900:	ff9f800f 	.word	0xff9f800f
 8003904:	f9ff800f 	.word	0xf9ff800f

08003908 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003916:	4b72      	ldr	r3, [pc, #456]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003922:	4b6f      	ldr	r3, [pc, #444]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d103      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
       ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d142      	bne.n	80039c0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	e03f      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d018      	beq.n	800397a <RCCEx_PLLSAI2_Config+0x72>
 8003948:	2b03      	cmp	r3, #3
 800394a:	d825      	bhi.n	8003998 <RCCEx_PLLSAI2_Config+0x90>
 800394c:	2b01      	cmp	r3, #1
 800394e:	d002      	beq.n	8003956 <RCCEx_PLLSAI2_Config+0x4e>
 8003950:	2b02      	cmp	r3, #2
 8003952:	d009      	beq.n	8003968 <RCCEx_PLLSAI2_Config+0x60>
 8003954:	e020      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003956:	4b62      	ldr	r3, [pc, #392]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11d      	bne.n	800399e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003966:	e01a      	b.n	800399e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003968:	4b5d      	ldr	r3, [pc, #372]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003978:	e013      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003986:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003996:	e006      	b.n	80039a6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e004      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80039ae:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4949      	ldr	r1, [pc, #292]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 8086 	bne.w	8003ad4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039c8:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a44      	ldr	r2, [pc, #272]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fe f908 	bl	8001be8 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039da:	e009      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039dc:	f7fe f904 	bl	8001be8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	73fb      	strb	r3, [r7, #15]
        break;
 80039ee:	e005      	b.n	80039fc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039f0:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ef      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d168      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d113      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6892      	ldr	r2, [r2, #8]
 8003a14:	0211      	lsls	r1, r2, #8
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	06d2      	lsls	r2, r2, #27
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6852      	ldr	r2, [r2, #4]
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	430a      	orrs	r2, r1
 8003a28:	492d      	ldr	r1, [pc, #180]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	614b      	str	r3, [r1, #20]
 8003a2e:	e02d      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d115      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a36:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6892      	ldr	r2, [r2, #8]
 8003a42:	0211      	lsls	r1, r2, #8
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6912      	ldr	r2, [r2, #16]
 8003a48:	0852      	lsrs	r2, r2, #1
 8003a4a:	3a01      	subs	r2, #1
 8003a4c:	0552      	lsls	r2, r2, #21
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	3a01      	subs	r2, #1
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	4921      	ldr	r1, [pc, #132]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	614b      	str	r3, [r1, #20]
 8003a60:	e014      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a62:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <RCCEx_PLLSAI2_Config+0x1e4>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6892      	ldr	r2, [r2, #8]
 8003a6e:	0211      	lsls	r1, r2, #8
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6952      	ldr	r2, [r2, #20]
 8003a74:	0852      	lsrs	r2, r2, #1
 8003a76:	3a01      	subs	r2, #1
 8003a78:	0652      	lsls	r2, r2, #25
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6852      	ldr	r2, [r2, #4]
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	430a      	orrs	r2, r1
 8003a86:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fe f8a6 	bl	8001be8 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa0:	f7fe f8a2 	bl	8001be8 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ef      	beq.n	8003aa0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	07ff800f 	.word	0x07ff800f
 8003ae8:	ff9f800f 	.word	0xff9f800f
 8003aec:	f9ff800f 	.word	0xf9ff800f

08003af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e042      	b.n	8003b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fd fe53 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2224      	movs	r2, #36	; 0x24
 8003b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8c4 	bl	8003cc0 <UART_SetConfig>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e022      	b.n	8003b88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fbb4 	bl	80042b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fc3b 	bl	80043fc <UART_CheckIdleState>
 8003b86:	4603      	mov	r3, r0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 8084 	bne.w	8003cb4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_UART_Transmit+0x28>
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e07c      	b.n	8003cb6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Transmit+0x3a>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e075      	b.n	8003cb6 <HAL_UART_Transmit+0x126>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be2:	f7fe f801 	bl	8001be8 <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d108      	bne.n	8003c14 <HAL_UART_Transmit+0x84>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e003      	b.n	8003c1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003c24:	e02d      	b.n	8003c82 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fc2e 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e03a      	b.n	8003cb6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c52:	b292      	uxth	r2, r2
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e008      	b.n	8003c70 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b292      	uxth	r2, r2
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1cb      	bne.n	8003c26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2140      	movs	r1, #64	; 0x40
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fbfa 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e006      	b.n	8003cb6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b08c      	sub	sp, #48	; 0x30
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4baa      	ldr	r3, [pc, #680]	; (8003f98 <UART_SetConfig+0x2d8>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a9f      	ldr	r2, [pc, #636]	; (8003f9c <UART_SetConfig+0x2dc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f023 010f 	bic.w	r1, r3, #15
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a90      	ldr	r2, [pc, #576]	; (8003fa0 <UART_SetConfig+0x2e0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d125      	bne.n	8003db0 <UART_SetConfig+0xf0>
 8003d64:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d81a      	bhi.n	8003da8 <UART_SetConfig+0xe8>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <UART_SetConfig+0xb8>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d99 	.word	0x08003d99
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003da1 	.word	0x08003da1
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8e:	e116      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d96:	e112      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e10e      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003da0:	2308      	movs	r3, #8
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e10a      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003da8:	2310      	movs	r3, #16
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e106      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7c      	ldr	r2, [pc, #496]	; (8003fa8 <UART_SetConfig+0x2e8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d138      	bne.n	8003e2c <UART_SetConfig+0x16c>
 8003dba:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d82d      	bhi.n	8003e24 <UART_SetConfig+0x164>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <UART_SetConfig+0x110>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003e25 	.word	0x08003e25
 8003dd8:	08003e25 	.word	0x08003e25
 8003ddc:	08003e25 	.word	0x08003e25
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e25 	.word	0x08003e25
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e0d 	.word	0x08003e0d
 8003df4:	08003e25 	.word	0x08003e25
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e25 	.word	0x08003e25
 8003e00:	08003e1d 	.word	0x08003e1d
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0a:	e0d8      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e12:	e0d4      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e14:	2304      	movs	r3, #4
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1a:	e0d0      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e22:	e0cc      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e24:	2310      	movs	r3, #16
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	e0c8      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a5e      	ldr	r2, [pc, #376]	; (8003fac <UART_SetConfig+0x2ec>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d125      	bne.n	8003e82 <UART_SetConfig+0x1c2>
 8003e36:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d016      	beq.n	8003e72 <UART_SetConfig+0x1b2>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d818      	bhi.n	8003e7a <UART_SetConfig+0x1ba>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d00a      	beq.n	8003e62 <UART_SetConfig+0x1a2>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d814      	bhi.n	8003e7a <UART_SetConfig+0x1ba>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <UART_SetConfig+0x19a>
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d008      	beq.n	8003e6a <UART_SetConfig+0x1aa>
 8003e58:	e00f      	b.n	8003e7a <UART_SetConfig+0x1ba>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e60:	e0ad      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e62:	2302      	movs	r3, #2
 8003e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e68:	e0a9      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e70:	e0a5      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e72:	2308      	movs	r3, #8
 8003e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e78:	e0a1      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e80:	e09d      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <UART_SetConfig+0x2f0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d125      	bne.n	8003ed8 <UART_SetConfig+0x218>
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e96:	2bc0      	cmp	r3, #192	; 0xc0
 8003e98:	d016      	beq.n	8003ec8 <UART_SetConfig+0x208>
 8003e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e9c:	d818      	bhi.n	8003ed0 <UART_SetConfig+0x210>
 8003e9e:	2b80      	cmp	r3, #128	; 0x80
 8003ea0:	d00a      	beq.n	8003eb8 <UART_SetConfig+0x1f8>
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d814      	bhi.n	8003ed0 <UART_SetConfig+0x210>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <UART_SetConfig+0x1f0>
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d008      	beq.n	8003ec0 <UART_SetConfig+0x200>
 8003eae:	e00f      	b.n	8003ed0 <UART_SetConfig+0x210>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e082      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	e07e      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec6:	e07a      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ece:	e076      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed6:	e072      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <UART_SetConfig+0x2f4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d12a      	bne.n	8003f38 <UART_SetConfig+0x278>
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef0:	d01a      	beq.n	8003f28 <UART_SetConfig+0x268>
 8003ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef6:	d81b      	bhi.n	8003f30 <UART_SetConfig+0x270>
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efc:	d00c      	beq.n	8003f18 <UART_SetConfig+0x258>
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f02:	d815      	bhi.n	8003f30 <UART_SetConfig+0x270>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <UART_SetConfig+0x250>
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0c:	d008      	beq.n	8003f20 <UART_SetConfig+0x260>
 8003f0e:	e00f      	b.n	8003f30 <UART_SetConfig+0x270>
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f16:	e052      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1e:	e04e      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f20:	2304      	movs	r3, #4
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f26:	e04a      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f28:	2308      	movs	r3, #8
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	e046      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f30:	2310      	movs	r3, #16
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f36:	e042      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <UART_SetConfig+0x2dc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d13a      	bne.n	8003fb8 <UART_SetConfig+0x2f8>
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f50:	d01a      	beq.n	8003f88 <UART_SetConfig+0x2c8>
 8003f52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f56:	d81b      	bhi.n	8003f90 <UART_SetConfig+0x2d0>
 8003f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5c:	d00c      	beq.n	8003f78 <UART_SetConfig+0x2b8>
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d815      	bhi.n	8003f90 <UART_SetConfig+0x2d0>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <UART_SetConfig+0x2b0>
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d008      	beq.n	8003f80 <UART_SetConfig+0x2c0>
 8003f6e:	e00f      	b.n	8003f90 <UART_SetConfig+0x2d0>
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f76:	e022      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7e:	e01e      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f80:	2304      	movs	r3, #4
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f86:	e01a      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f88:	2308      	movs	r3, #8
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8e:	e016      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f90:	2310      	movs	r3, #16
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f96:	e012      	b.n	8003fbe <UART_SetConfig+0x2fe>
 8003f98:	cfff69f3 	.word	0xcfff69f3
 8003f9c:	40008000 	.word	0x40008000
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40004400 	.word	0x40004400
 8003fac:	40004800 	.word	0x40004800
 8003fb0:	40004c00 	.word	0x40004c00
 8003fb4:	40005000 	.word	0x40005000
 8003fb8:	2310      	movs	r3, #16
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4aae      	ldr	r2, [pc, #696]	; (800427c <UART_SetConfig+0x5bc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f040 8097 	bne.w	80040f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d823      	bhi.n	800401a <UART_SetConfig+0x35a>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <UART_SetConfig+0x318>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	0800401b 	.word	0x0800401b
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800401b 	.word	0x0800401b
 8003fe8:	0800400b 	.word	0x0800400b
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800401b 	.word	0x0800401b
 8003ff8:	08004013 	.word	0x08004013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f7fe ff74 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004002:	e010      	b.n	8004026 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b9e      	ldr	r3, [pc, #632]	; (8004280 <UART_SetConfig+0x5c0>)
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004008:	e00d      	b.n	8004026 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7fe fed5 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 800400e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004010:	e009      	b.n	8004026 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004018:	e005      	b.n	8004026 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8130 	beq.w	800428e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	4a94      	ldr	r2, [pc, #592]	; (8004284 <UART_SetConfig+0x5c4>)
 8004034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004038:	461a      	mov	r2, r3
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004040:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	429a      	cmp	r2, r3
 8004050:	d305      	bcc.n	800405e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	429a      	cmp	r2, r3
 800405c:	d903      	bls.n	8004066 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004064:	e113      	b.n	800428e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2200      	movs	r2, #0
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	60fa      	str	r2, [r7, #12]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	4a84      	ldr	r2, [pc, #528]	; (8004284 <UART_SetConfig+0x5c4>)
 8004074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004078:	b29b      	uxth	r3, r3
 800407a:	2200      	movs	r2, #0
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004084:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004088:	f7fc fda6 	bl	8000bd8 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	020b      	lsls	r3, r1, #8
 800409e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040a2:	0202      	lsls	r2, r0, #8
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	6849      	ldr	r1, [r1, #4]
 80040a8:	0849      	lsrs	r1, r1, #1
 80040aa:	2000      	movs	r0, #0
 80040ac:	460c      	mov	r4, r1
 80040ae:	4605      	mov	r5, r0
 80040b0:	eb12 0804 	adds.w	r8, r2, r4
 80040b4:	eb43 0905 	adc.w	r9, r3, r5
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	469a      	mov	sl, r3
 80040c0:	4693      	mov	fp, r2
 80040c2:	4652      	mov	r2, sl
 80040c4:	465b      	mov	r3, fp
 80040c6:	4640      	mov	r0, r8
 80040c8:	4649      	mov	r1, r9
 80040ca:	f7fc fd85 	bl	8000bd8 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4613      	mov	r3, r2
 80040d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040dc:	d308      	bcc.n	80040f0 <UART_SetConfig+0x430>
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e4:	d204      	bcs.n	80040f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a3a      	ldr	r2, [r7, #32]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	e0ce      	b.n	800428e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040f6:	e0ca      	b.n	800428e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	d166      	bne.n	80041d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004106:	2b08      	cmp	r3, #8
 8004108:	d827      	bhi.n	800415a <UART_SetConfig+0x49a>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x450>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004135 	.word	0x08004135
 8004114:	0800413d 	.word	0x0800413d
 8004118:	08004145 	.word	0x08004145
 800411c:	0800415b 	.word	0x0800415b
 8004120:	0800414b 	.word	0x0800414b
 8004124:	0800415b 	.word	0x0800415b
 8004128:	0800415b 	.word	0x0800415b
 800412c:	0800415b 	.word	0x0800415b
 8004130:	08004153 	.word	0x08004153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004134:	f7fe fed8 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800413a:	e014      	b.n	8004166 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe feea 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004142:	e010      	b.n	8004166 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004144:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <UART_SetConfig+0x5c0>)
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004148:	e00d      	b.n	8004166 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414a:	f7fe fe35 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004150:	e009      	b.n	8004166 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004158:	e005      	b.n	8004166 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8090 	beq.w	800428e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	4a44      	ldr	r2, [pc, #272]	; (8004284 <UART_SetConfig+0x5c4>)
 8004174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004178:	461a      	mov	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004180:	005a      	lsls	r2, r3, #1
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	441a      	add	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d916      	bls.n	80041c8 <UART_SetConfig+0x508>
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d212      	bcs.n	80041c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f023 030f 	bic.w	r3, r3, #15
 80041aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	8bfb      	ldrh	r3, [r7, #30]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	8bfa      	ldrh	r2, [r7, #30]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	e062      	b.n	800428e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041ce:	e05e      	b.n	800428e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d828      	bhi.n	800422a <UART_SetConfig+0x56a>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x520>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe fe70 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800420a:	e014      	b.n	8004236 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe fe82 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004210:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004212:	e010      	b.n	8004236 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <UART_SetConfig+0x5c0>)
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004218:	e00d      	b.n	8004236 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe fdcd 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004220:	e009      	b.n	8004236 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004228:	e005      	b.n	8004236 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004234:	bf00      	nop
    }

    if (pclk != 0U)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	d028      	beq.n	800428e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	4a10      	ldr	r2, [pc, #64]	; (8004284 <UART_SetConfig+0x5c4>)
 8004242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004246:	461a      	mov	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	fbb3 f2f2 	udiv	r2, r3, r2
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	441a      	add	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	d910      	bls.n	8004288 <UART_SetConfig+0x5c8>
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d20c      	bcs.n	8004288 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	b29a      	uxth	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	e009      	b.n	800428e <UART_SetConfig+0x5ce>
 800427a:	bf00      	nop
 800427c:	40008000 	.word	0x40008000
 8004280:	00f42400 	.word	0x00f42400
 8004284:	080074cc 	.word	0x080074cc
      }
      else
      {
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2201      	movs	r2, #1
 8004292:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2201      	movs	r2, #1
 800429a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2200      	movs	r2, #0
 80042a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80042aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3730      	adds	r7, #48	; 0x30
 80042b2:	46bd      	mov	sp, r7
 80042b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01a      	beq.n	80043ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b6:	d10a      	bne.n	80043ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800440c:	f7fd fbec 	bl	8001be8 <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d10e      	bne.n	800443e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f82f 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e025      	b.n	800448a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d10e      	bne.n	800446a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f819 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00f      	b.n	800448a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b09c      	sub	sp, #112	; 0x70
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	e0a9      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	f000 80a5 	beq.w	80045f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7fd fb9b 	bl	8001be8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80044be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d140      	bne.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d8:	667b      	str	r3, [r7, #100]	; 0x64
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e6      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	663b      	str	r3, [r7, #96]	; 0x60
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004516:	64ba      	str	r2, [r7, #72]	; 0x48
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800451c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e069      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d051      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004562:	d149      	bne.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800456c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
 800458e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	613b      	str	r3, [r7, #16]
   return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045c0:	623a      	str	r2, [r7, #32]
 80045c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	6a3a      	ldr	r2, [r7, #32]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e010      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	f43f af46 	beq.w	80044a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3770      	adds	r7, #112	; 0x70
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_UARTEx_DisableFifoMode+0x16>
 8004634:	2302      	movs	r3, #2
 8004636:	e027      	b.n	8004688 <HAL_UARTEx_DisableFifoMode+0x66>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	; 0x24
 8004644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004666:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e02d      	b.n	8004708 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f84f 	bl	800478c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004724:	2302      	movs	r3, #2
 8004726:	e02d      	b.n	8004784 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f811 	bl	800478c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047ac:	e031      	b.n	8004812 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ae:	2308      	movs	r3, #8
 80047b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047b2:	2308      	movs	r3, #8
 80047b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	0e5b      	lsrs	r3, r3, #25
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	0f5b      	lsrs	r3, r3, #29
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047d6:	7bbb      	ldrb	r3, [r7, #14]
 80047d8:	7b3a      	ldrb	r2, [r7, #12]
 80047da:	4911      	ldr	r1, [pc, #68]	; (8004820 <UARTEx_SetNbDataToProcess+0x94>)
 80047dc:	5c8a      	ldrb	r2, [r1, r2]
 80047de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047e2:	7b3a      	ldrb	r2, [r7, #12]
 80047e4:	490f      	ldr	r1, [pc, #60]	; (8004824 <UARTEx_SetNbDataToProcess+0x98>)
 80047e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	7b7a      	ldrb	r2, [r7, #13]
 80047f8:	4909      	ldr	r1, [pc, #36]	; (8004820 <UARTEx_SetNbDataToProcess+0x94>)
 80047fa:	5c8a      	ldrb	r2, [r1, r2]
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004800:	7b7a      	ldrb	r2, [r7, #13]
 8004802:	4908      	ldr	r1, [pc, #32]	; (8004824 <UARTEx_SetNbDataToProcess+0x98>)
 8004804:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004806:	fb93 f3f2 	sdiv	r3, r3, r2
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	080074e4 	.word	0x080074e4
 8004824:	080074ec 	.word	0x080074ec

08004828 <atoi>:
 8004828:	220a      	movs	r2, #10
 800482a:	2100      	movs	r1, #0
 800482c:	f000 be58 	b.w	80054e0 <strtol>

08004830 <__errno>:
 8004830:	4b01      	ldr	r3, [pc, #4]	; (8004838 <__errno+0x8>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	2000000c 	.word	0x2000000c

0800483c <exit>:
 800483c:	b508      	push	{r3, lr}
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <exit+0x20>)
 8004840:	4604      	mov	r4, r0
 8004842:	b113      	cbz	r3, 800484a <exit+0xe>
 8004844:	2100      	movs	r1, #0
 8004846:	f3af 8000 	nop.w
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <exit+0x24>)
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004850:	b103      	cbz	r3, 8004854 <exit+0x18>
 8004852:	4798      	blx	r3
 8004854:	4620      	mov	r0, r4
 8004856:	f7fd f875 	bl	8001944 <_exit>
 800485a:	bf00      	nop
 800485c:	00000000 	.word	0x00000000
 8004860:	080074f4 	.word	0x080074f4

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f002 fddc 	bl	8007434 <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	080078dc 	.word	0x080078dc
 80048a0:	080078dc 	.word	0x080078dc
 80048a4:	080078dc 	.word	0x080078dc
 80048a8:	080078e0 	.word	0x080078e0

080048ac <malloc>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <malloc+0xc>)
 80048ae:	4601      	mov	r1, r0
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f000 b88d 	b.w	80049d0 <_malloc_r>
 80048b6:	bf00      	nop
 80048b8:	2000000c 	.word	0x2000000c

080048bc <memset>:
 80048bc:	4402      	add	r2, r0
 80048be:	4603      	mov	r3, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <_calloc_r>:
 80048cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ce:	fba1 2402 	umull	r2, r4, r1, r2
 80048d2:	b94c      	cbnz	r4, 80048e8 <_calloc_r+0x1c>
 80048d4:	4611      	mov	r1, r2
 80048d6:	9201      	str	r2, [sp, #4]
 80048d8:	f000 f87a 	bl	80049d0 <_malloc_r>
 80048dc:	9a01      	ldr	r2, [sp, #4]
 80048de:	4605      	mov	r5, r0
 80048e0:	b930      	cbnz	r0, 80048f0 <_calloc_r+0x24>
 80048e2:	4628      	mov	r0, r5
 80048e4:	b003      	add	sp, #12
 80048e6:	bd30      	pop	{r4, r5, pc}
 80048e8:	220c      	movs	r2, #12
 80048ea:	6002      	str	r2, [r0, #0]
 80048ec:	2500      	movs	r5, #0
 80048ee:	e7f8      	b.n	80048e2 <_calloc_r+0x16>
 80048f0:	4621      	mov	r1, r4
 80048f2:	f7ff ffe3 	bl	80048bc <memset>
 80048f6:	e7f4      	b.n	80048e2 <_calloc_r+0x16>

080048f8 <_free_r>:
 80048f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048fa:	2900      	cmp	r1, #0
 80048fc:	d044      	beq.n	8004988 <_free_r+0x90>
 80048fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004902:	9001      	str	r0, [sp, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f1a1 0404 	sub.w	r4, r1, #4
 800490a:	bfb8      	it	lt
 800490c:	18e4      	addlt	r4, r4, r3
 800490e:	f001 fd79 	bl	8006404 <__malloc_lock>
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <_free_r+0x94>)
 8004914:	9801      	ldr	r0, [sp, #4]
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	b933      	cbnz	r3, 8004928 <_free_r+0x30>
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	6014      	str	r4, [r2, #0]
 800491e:	b003      	add	sp, #12
 8004920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004924:	f001 bd74 	b.w	8006410 <__malloc_unlock>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d908      	bls.n	800493e <_free_r+0x46>
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	1961      	adds	r1, r4, r5
 8004930:	428b      	cmp	r3, r1
 8004932:	bf01      	itttt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	1949      	addeq	r1, r1, r5
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	e7ed      	b.n	800491a <_free_r+0x22>
 800493e:	461a      	mov	r2, r3
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b10b      	cbz	r3, 8004948 <_free_r+0x50>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d9fa      	bls.n	800493e <_free_r+0x46>
 8004948:	6811      	ldr	r1, [r2, #0]
 800494a:	1855      	adds	r5, r2, r1
 800494c:	42a5      	cmp	r5, r4
 800494e:	d10b      	bne.n	8004968 <_free_r+0x70>
 8004950:	6824      	ldr	r4, [r4, #0]
 8004952:	4421      	add	r1, r4
 8004954:	1854      	adds	r4, r2, r1
 8004956:	42a3      	cmp	r3, r4
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	d1e0      	bne.n	800491e <_free_r+0x26>
 800495c:	681c      	ldr	r4, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	6053      	str	r3, [r2, #4]
 8004962:	4421      	add	r1, r4
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	e7da      	b.n	800491e <_free_r+0x26>
 8004968:	d902      	bls.n	8004970 <_free_r+0x78>
 800496a:	230c      	movs	r3, #12
 800496c:	6003      	str	r3, [r0, #0]
 800496e:	e7d6      	b.n	800491e <_free_r+0x26>
 8004970:	6825      	ldr	r5, [r4, #0]
 8004972:	1961      	adds	r1, r4, r5
 8004974:	428b      	cmp	r3, r1
 8004976:	bf04      	itt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	bf04      	itt	eq
 8004980:	1949      	addeq	r1, r1, r5
 8004982:	6021      	streq	r1, [r4, #0]
 8004984:	6054      	str	r4, [r2, #4]
 8004986:	e7ca      	b.n	800491e <_free_r+0x26>
 8004988:	b003      	add	sp, #12
 800498a:	bd30      	pop	{r4, r5, pc}
 800498c:	20000298 	.word	0x20000298

08004990 <sbrk_aligned>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4e0e      	ldr	r6, [pc, #56]	; (80049cc <sbrk_aligned+0x3c>)
 8004994:	460c      	mov	r4, r1
 8004996:	6831      	ldr	r1, [r6, #0]
 8004998:	4605      	mov	r5, r0
 800499a:	b911      	cbnz	r1, 80049a2 <sbrk_aligned+0x12>
 800499c:	f000 fd0e 	bl	80053bc <_sbrk_r>
 80049a0:	6030      	str	r0, [r6, #0]
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fd09 	bl	80053bc <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d00a      	beq.n	80049c4 <sbrk_aligned+0x34>
 80049ae:	1cc4      	adds	r4, r0, #3
 80049b0:	f024 0403 	bic.w	r4, r4, #3
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d007      	beq.n	80049c8 <sbrk_aligned+0x38>
 80049b8:	1a21      	subs	r1, r4, r0
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 fcfe 	bl	80053bc <_sbrk_r>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d101      	bne.n	80049c8 <sbrk_aligned+0x38>
 80049c4:	f04f 34ff 	mov.w	r4, #4294967295
 80049c8:	4620      	mov	r0, r4
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	2000029c 	.word	0x2000029c

080049d0 <_malloc_r>:
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d4:	1ccd      	adds	r5, r1, #3
 80049d6:	f025 0503 	bic.w	r5, r5, #3
 80049da:	3508      	adds	r5, #8
 80049dc:	2d0c      	cmp	r5, #12
 80049de:	bf38      	it	cc
 80049e0:	250c      	movcc	r5, #12
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	4607      	mov	r7, r0
 80049e6:	db01      	blt.n	80049ec <_malloc_r+0x1c>
 80049e8:	42a9      	cmp	r1, r5
 80049ea:	d905      	bls.n	80049f8 <_malloc_r+0x28>
 80049ec:	230c      	movs	r3, #12
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	2600      	movs	r6, #0
 80049f2:	4630      	mov	r0, r6
 80049f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f8:	4e2e      	ldr	r6, [pc, #184]	; (8004ab4 <_malloc_r+0xe4>)
 80049fa:	f001 fd03 	bl	8006404 <__malloc_lock>
 80049fe:	6833      	ldr	r3, [r6, #0]
 8004a00:	461c      	mov	r4, r3
 8004a02:	bb34      	cbnz	r4, 8004a52 <_malloc_r+0x82>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	f7ff ffc2 	bl	8004990 <sbrk_aligned>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	4604      	mov	r4, r0
 8004a10:	d14d      	bne.n	8004aae <_malloc_r+0xde>
 8004a12:	6834      	ldr	r4, [r6, #0]
 8004a14:	4626      	mov	r6, r4
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d140      	bne.n	8004a9c <_malloc_r+0xcc>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4638      	mov	r0, r7
 8004a20:	eb04 0803 	add.w	r8, r4, r3
 8004a24:	f000 fcca 	bl	80053bc <_sbrk_r>
 8004a28:	4580      	cmp	r8, r0
 8004a2a:	d13a      	bne.n	8004aa2 <_malloc_r+0xd2>
 8004a2c:	6821      	ldr	r1, [r4, #0]
 8004a2e:	3503      	adds	r5, #3
 8004a30:	1a6d      	subs	r5, r5, r1
 8004a32:	f025 0503 	bic.w	r5, r5, #3
 8004a36:	3508      	adds	r5, #8
 8004a38:	2d0c      	cmp	r5, #12
 8004a3a:	bf38      	it	cc
 8004a3c:	250c      	movcc	r5, #12
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff ffa5 	bl	8004990 <sbrk_aligned>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d02b      	beq.n	8004aa2 <_malloc_r+0xd2>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	442b      	add	r3, r5
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	e00e      	b.n	8004a70 <_malloc_r+0xa0>
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	1b52      	subs	r2, r2, r5
 8004a56:	d41e      	bmi.n	8004a96 <_malloc_r+0xc6>
 8004a58:	2a0b      	cmp	r2, #11
 8004a5a:	d916      	bls.n	8004a8a <_malloc_r+0xba>
 8004a5c:	1961      	adds	r1, r4, r5
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	6025      	str	r5, [r4, #0]
 8004a62:	bf18      	it	ne
 8004a64:	6059      	strne	r1, [r3, #4]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	bf08      	it	eq
 8004a6a:	6031      	streq	r1, [r6, #0]
 8004a6c:	5162      	str	r2, [r4, r5]
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	4638      	mov	r0, r7
 8004a72:	f104 060b 	add.w	r6, r4, #11
 8004a76:	f001 fccb 	bl	8006410 <__malloc_unlock>
 8004a7a:	f026 0607 	bic.w	r6, r6, #7
 8004a7e:	1d23      	adds	r3, r4, #4
 8004a80:	1af2      	subs	r2, r6, r3
 8004a82:	d0b6      	beq.n	80049f2 <_malloc_r+0x22>
 8004a84:	1b9b      	subs	r3, r3, r6
 8004a86:	50a3      	str	r3, [r4, r2]
 8004a88:	e7b3      	b.n	80049f2 <_malloc_r+0x22>
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	bf0c      	ite	eq
 8004a90:	6032      	streq	r2, [r6, #0]
 8004a92:	605a      	strne	r2, [r3, #4]
 8004a94:	e7ec      	b.n	8004a70 <_malloc_r+0xa0>
 8004a96:	4623      	mov	r3, r4
 8004a98:	6864      	ldr	r4, [r4, #4]
 8004a9a:	e7b2      	b.n	8004a02 <_malloc_r+0x32>
 8004a9c:	4634      	mov	r4, r6
 8004a9e:	6876      	ldr	r6, [r6, #4]
 8004aa0:	e7b9      	b.n	8004a16 <_malloc_r+0x46>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f001 fcb2 	bl	8006410 <__malloc_unlock>
 8004aac:	e7a1      	b.n	80049f2 <_malloc_r+0x22>
 8004aae:	6025      	str	r5, [r4, #0]
 8004ab0:	e7de      	b.n	8004a70 <_malloc_r+0xa0>
 8004ab2:	bf00      	nop
 8004ab4:	20000298 	.word	0x20000298

08004ab8 <__cvt>:
 8004ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	ec55 4b10 	vmov	r4, r5, d0
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	460e      	mov	r6, r1
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	bfbb      	ittet	lt
 8004aca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ace:	461d      	movlt	r5, r3
 8004ad0:	2300      	movge	r3, #0
 8004ad2:	232d      	movlt	r3, #45	; 0x2d
 8004ad4:	700b      	strb	r3, [r1, #0]
 8004ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004adc:	4691      	mov	r9, r2
 8004ade:	f023 0820 	bic.w	r8, r3, #32
 8004ae2:	bfbc      	itt	lt
 8004ae4:	4622      	movlt	r2, r4
 8004ae6:	4614      	movlt	r4, r2
 8004ae8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aec:	d005      	beq.n	8004afa <__cvt+0x42>
 8004aee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004af2:	d100      	bne.n	8004af6 <__cvt+0x3e>
 8004af4:	3601      	adds	r6, #1
 8004af6:	2102      	movs	r1, #2
 8004af8:	e000      	b.n	8004afc <__cvt+0x44>
 8004afa:	2103      	movs	r1, #3
 8004afc:	ab03      	add	r3, sp, #12
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	ab02      	add	r3, sp, #8
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	ec45 4b10 	vmov	d0, r4, r5
 8004b08:	4653      	mov	r3, sl
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	f000 fd80 	bl	8005610 <_dtoa_r>
 8004b10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b14:	4607      	mov	r7, r0
 8004b16:	d102      	bne.n	8004b1e <__cvt+0x66>
 8004b18:	f019 0f01 	tst.w	r9, #1
 8004b1c:	d022      	beq.n	8004b64 <__cvt+0xac>
 8004b1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b22:	eb07 0906 	add.w	r9, r7, r6
 8004b26:	d110      	bne.n	8004b4a <__cvt+0x92>
 8004b28:	783b      	ldrb	r3, [r7, #0]
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d10a      	bne.n	8004b44 <__cvt+0x8c>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb ffdf 	bl	8000af8 <__aeabi_dcmpeq>
 8004b3a:	b918      	cbnz	r0, 8004b44 <__cvt+0x8c>
 8004b3c:	f1c6 0601 	rsb	r6, r6, #1
 8004b40:	f8ca 6000 	str.w	r6, [sl]
 8004b44:	f8da 3000 	ldr.w	r3, [sl]
 8004b48:	4499      	add	r9, r3
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb ffd1 	bl	8000af8 <__aeabi_dcmpeq>
 8004b56:	b108      	cbz	r0, 8004b5c <__cvt+0xa4>
 8004b58:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b5c:	2230      	movs	r2, #48	; 0x30
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	454b      	cmp	r3, r9
 8004b62:	d307      	bcc.n	8004b74 <__cvt+0xbc>
 8004b64:	9b03      	ldr	r3, [sp, #12]
 8004b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b68:	1bdb      	subs	r3, r3, r7
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	b004      	add	sp, #16
 8004b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b74:	1c59      	adds	r1, r3, #1
 8004b76:	9103      	str	r1, [sp, #12]
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e7f0      	b.n	8004b5e <__cvt+0xa6>

08004b7c <__exponent>:
 8004b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2900      	cmp	r1, #0
 8004b82:	bfb8      	it	lt
 8004b84:	4249      	neglt	r1, r1
 8004b86:	f803 2b02 	strb.w	r2, [r3], #2
 8004b8a:	bfb4      	ite	lt
 8004b8c:	222d      	movlt	r2, #45	; 0x2d
 8004b8e:	222b      	movge	r2, #43	; 0x2b
 8004b90:	2909      	cmp	r1, #9
 8004b92:	7042      	strb	r2, [r0, #1]
 8004b94:	dd2a      	ble.n	8004bec <__exponent+0x70>
 8004b96:	f10d 0407 	add.w	r4, sp, #7
 8004b9a:	46a4      	mov	ip, r4
 8004b9c:	270a      	movs	r7, #10
 8004b9e:	46a6      	mov	lr, r4
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ba6:	fb07 1516 	mls	r5, r7, r6, r1
 8004baa:	3530      	adds	r5, #48	; 0x30
 8004bac:	2a63      	cmp	r2, #99	; 0x63
 8004bae:	f104 34ff 	add.w	r4, r4, #4294967295
 8004bb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	dcf1      	bgt.n	8004b9e <__exponent+0x22>
 8004bba:	3130      	adds	r1, #48	; 0x30
 8004bbc:	f1ae 0502 	sub.w	r5, lr, #2
 8004bc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bc4:	1c44      	adds	r4, r0, #1
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4561      	cmp	r1, ip
 8004bca:	d30a      	bcc.n	8004be2 <__exponent+0x66>
 8004bcc:	f10d 0209 	add.w	r2, sp, #9
 8004bd0:	eba2 020e 	sub.w	r2, r2, lr
 8004bd4:	4565      	cmp	r5, ip
 8004bd6:	bf88      	it	hi
 8004bd8:	2200      	movhi	r2, #0
 8004bda:	4413      	add	r3, r2
 8004bdc:	1a18      	subs	r0, r3, r0
 8004bde:	b003      	add	sp, #12
 8004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004be6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bea:	e7ed      	b.n	8004bc8 <__exponent+0x4c>
 8004bec:	2330      	movs	r3, #48	; 0x30
 8004bee:	3130      	adds	r1, #48	; 0x30
 8004bf0:	7083      	strb	r3, [r0, #2]
 8004bf2:	70c1      	strb	r1, [r0, #3]
 8004bf4:	1d03      	adds	r3, r0, #4
 8004bf6:	e7f1      	b.n	8004bdc <__exponent+0x60>

08004bf8 <_printf_float>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	ed2d 8b02 	vpush	{d8}
 8004c00:	b08d      	sub	sp, #52	; 0x34
 8004c02:	460c      	mov	r4, r1
 8004c04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c08:	4616      	mov	r6, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	f001 fbe3 	bl	80063d8 <_localeconv_r>
 8004c12:	f8d0 a000 	ldr.w	sl, [r0]
 8004c16:	4650      	mov	r0, sl
 8004c18:	f7fb faf2 	bl	8000200 <strlen>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	9305      	str	r3, [sp, #20]
 8004c24:	f8d8 3000 	ldr.w	r3, [r8]
 8004c28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c2c:	3307      	adds	r3, #7
 8004c2e:	f023 0307 	bic.w	r3, r3, #7
 8004c32:	f103 0208 	add.w	r2, r3, #8
 8004c36:	f8c8 2000 	str.w	r2, [r8]
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c4a:	9307      	str	r3, [sp, #28]
 8004c4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c50:	ee08 0a10 	vmov	s16, r0
 8004c54:	4b9f      	ldr	r3, [pc, #636]	; (8004ed4 <_printf_float+0x2dc>)
 8004c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5e:	f7fb ff7d 	bl	8000b5c <__aeabi_dcmpun>
 8004c62:	bb88      	cbnz	r0, 8004cc8 <_printf_float+0xd0>
 8004c64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c68:	4b9a      	ldr	r3, [pc, #616]	; (8004ed4 <_printf_float+0x2dc>)
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	f7fb ff57 	bl	8000b20 <__aeabi_dcmple>
 8004c72:	bb48      	cbnz	r0, 8004cc8 <_printf_float+0xd0>
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	f7fb ff46 	bl	8000b0c <__aeabi_dcmplt>
 8004c80:	b110      	cbz	r0, 8004c88 <_printf_float+0x90>
 8004c82:	232d      	movs	r3, #45	; 0x2d
 8004c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c88:	4b93      	ldr	r3, [pc, #588]	; (8004ed8 <_printf_float+0x2e0>)
 8004c8a:	4894      	ldr	r0, [pc, #592]	; (8004edc <_printf_float+0x2e4>)
 8004c8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c90:	bf94      	ite	ls
 8004c92:	4698      	movls	r8, r3
 8004c94:	4680      	movhi	r8, r0
 8004c96:	2303      	movs	r3, #3
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	9b05      	ldr	r3, [sp, #20]
 8004c9c:	f023 0204 	bic.w	r2, r3, #4
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	f04f 0900 	mov.w	r9, #0
 8004ca6:	9700      	str	r7, [sp, #0]
 8004ca8:	4633      	mov	r3, r6
 8004caa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cac:	4621      	mov	r1, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 f9d8 	bl	8005064 <_printf_common>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	f040 8090 	bne.w	8004dda <_printf_float+0x1e2>
 8004cba:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbe:	b00d      	add	sp, #52	; 0x34
 8004cc0:	ecbd 8b02 	vpop	{d8}
 8004cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	4640      	mov	r0, r8
 8004cce:	4649      	mov	r1, r9
 8004cd0:	f7fb ff44 	bl	8000b5c <__aeabi_dcmpun>
 8004cd4:	b140      	cbz	r0, 8004ce8 <_printf_float+0xf0>
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bfbc      	itt	lt
 8004cdc:	232d      	movlt	r3, #45	; 0x2d
 8004cde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ce2:	487f      	ldr	r0, [pc, #508]	; (8004ee0 <_printf_float+0x2e8>)
 8004ce4:	4b7f      	ldr	r3, [pc, #508]	; (8004ee4 <_printf_float+0x2ec>)
 8004ce6:	e7d1      	b.n	8004c8c <_printf_float+0x94>
 8004ce8:	6863      	ldr	r3, [r4, #4]
 8004cea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cee:	9206      	str	r2, [sp, #24]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	d13f      	bne.n	8004d74 <_printf_float+0x17c>
 8004cf4:	2306      	movs	r3, #6
 8004cf6:	6063      	str	r3, [r4, #4]
 8004cf8:	9b05      	ldr	r3, [sp, #20]
 8004cfa:	6861      	ldr	r1, [r4, #4]
 8004cfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d00:	2300      	movs	r3, #0
 8004d02:	9303      	str	r3, [sp, #12]
 8004d04:	ab0a      	add	r3, sp, #40	; 0x28
 8004d06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d0a:	ab09      	add	r3, sp, #36	; 0x24
 8004d0c:	ec49 8b10 	vmov	d0, r8, r9
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6022      	str	r2, [r4, #0]
 8004d14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f7ff fecd 	bl	8004ab8 <__cvt>
 8004d1e:	9b06      	ldr	r3, [sp, #24]
 8004d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d22:	2b47      	cmp	r3, #71	; 0x47
 8004d24:	4680      	mov	r8, r0
 8004d26:	d108      	bne.n	8004d3a <_printf_float+0x142>
 8004d28:	1cc8      	adds	r0, r1, #3
 8004d2a:	db02      	blt.n	8004d32 <_printf_float+0x13a>
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	dd41      	ble.n	8004db6 <_printf_float+0x1be>
 8004d32:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d36:	fa5f fb8b 	uxtb.w	fp, fp
 8004d3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d3e:	d820      	bhi.n	8004d82 <_printf_float+0x18a>
 8004d40:	3901      	subs	r1, #1
 8004d42:	465a      	mov	r2, fp
 8004d44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d48:	9109      	str	r1, [sp, #36]	; 0x24
 8004d4a:	f7ff ff17 	bl	8004b7c <__exponent>
 8004d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d50:	1813      	adds	r3, r2, r0
 8004d52:	2a01      	cmp	r2, #1
 8004d54:	4681      	mov	r9, r0
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	dc02      	bgt.n	8004d60 <_printf_float+0x168>
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	07d2      	lsls	r2, r2, #31
 8004d5e:	d501      	bpl.n	8004d64 <_printf_float+0x16c>
 8004d60:	3301      	adds	r3, #1
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d09c      	beq.n	8004ca6 <_printf_float+0xae>
 8004d6c:	232d      	movs	r3, #45	; 0x2d
 8004d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d72:	e798      	b.n	8004ca6 <_printf_float+0xae>
 8004d74:	9a06      	ldr	r2, [sp, #24]
 8004d76:	2a47      	cmp	r2, #71	; 0x47
 8004d78:	d1be      	bne.n	8004cf8 <_printf_float+0x100>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1bc      	bne.n	8004cf8 <_printf_float+0x100>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7b9      	b.n	8004cf6 <_printf_float+0xfe>
 8004d82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d86:	d118      	bne.n	8004dba <_printf_float+0x1c2>
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	6863      	ldr	r3, [r4, #4]
 8004d8c:	dd0b      	ble.n	8004da6 <_printf_float+0x1ae>
 8004d8e:	6121      	str	r1, [r4, #16]
 8004d90:	b913      	cbnz	r3, 8004d98 <_printf_float+0x1a0>
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	07d0      	lsls	r0, r2, #31
 8004d96:	d502      	bpl.n	8004d9e <_printf_float+0x1a6>
 8004d98:	3301      	adds	r3, #1
 8004d9a:	440b      	add	r3, r1
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004da0:	f04f 0900 	mov.w	r9, #0
 8004da4:	e7de      	b.n	8004d64 <_printf_float+0x16c>
 8004da6:	b913      	cbnz	r3, 8004dae <_printf_float+0x1b6>
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	07d2      	lsls	r2, r2, #31
 8004dac:	d501      	bpl.n	8004db2 <_printf_float+0x1ba>
 8004dae:	3302      	adds	r3, #2
 8004db0:	e7f4      	b.n	8004d9c <_printf_float+0x1a4>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e7f2      	b.n	8004d9c <_printf_float+0x1a4>
 8004db6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	db05      	blt.n	8004dcc <_printf_float+0x1d4>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	6121      	str	r1, [r4, #16]
 8004dc4:	07d8      	lsls	r0, r3, #31
 8004dc6:	d5ea      	bpl.n	8004d9e <_printf_float+0x1a6>
 8004dc8:	1c4b      	adds	r3, r1, #1
 8004dca:	e7e7      	b.n	8004d9c <_printf_float+0x1a4>
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	bfd4      	ite	le
 8004dd0:	f1c1 0202 	rsble	r2, r1, #2
 8004dd4:	2201      	movgt	r2, #1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	e7e0      	b.n	8004d9c <_printf_float+0x1a4>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	055a      	lsls	r2, r3, #21
 8004dde:	d407      	bmi.n	8004df0 <_printf_float+0x1f8>
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	4642      	mov	r2, r8
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	d12c      	bne.n	8004e48 <_printf_float+0x250>
 8004dee:	e764      	b.n	8004cba <_printf_float+0xc2>
 8004df0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004df4:	f240 80e0 	bls.w	8004fb8 <_printf_float+0x3c0>
 8004df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f7fb fe7a 	bl	8000af8 <__aeabi_dcmpeq>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d034      	beq.n	8004e72 <_printf_float+0x27a>
 8004e08:	4a37      	ldr	r2, [pc, #220]	; (8004ee8 <_printf_float+0x2f0>)
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f af51 	beq.w	8004cba <_printf_float+0xc2>
 8004e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	db02      	blt.n	8004e26 <_printf_float+0x22e>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	07d8      	lsls	r0, r3, #31
 8004e24:	d510      	bpl.n	8004e48 <_printf_float+0x250>
 8004e26:	ee18 3a10 	vmov	r3, s16
 8004e2a:	4652      	mov	r2, sl
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	f43f af41 	beq.w	8004cba <_printf_float+0xc2>
 8004e38:	f04f 0800 	mov.w	r8, #0
 8004e3c:	f104 091a 	add.w	r9, r4, #26
 8004e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e42:	3b01      	subs	r3, #1
 8004e44:	4543      	cmp	r3, r8
 8004e46:	dc09      	bgt.n	8004e5c <_printf_float+0x264>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	079b      	lsls	r3, r3, #30
 8004e4c:	f100 8105 	bmi.w	800505a <_printf_float+0x462>
 8004e50:	68e0      	ldr	r0, [r4, #12]
 8004e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e54:	4298      	cmp	r0, r3
 8004e56:	bfb8      	it	lt
 8004e58:	4618      	movlt	r0, r3
 8004e5a:	e730      	b.n	8004cbe <_printf_float+0xc6>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	464a      	mov	r2, r9
 8004e60:	4631      	mov	r1, r6
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	f43f af27 	beq.w	8004cba <_printf_float+0xc2>
 8004e6c:	f108 0801 	add.w	r8, r8, #1
 8004e70:	e7e6      	b.n	8004e40 <_printf_float+0x248>
 8004e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	dc39      	bgt.n	8004eec <_printf_float+0x2f4>
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <_printf_float+0x2f0>)
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b8      	blx	r7
 8004e82:	3001      	adds	r0, #1
 8004e84:	f43f af19 	beq.w	8004cba <_printf_float+0xc2>
 8004e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d102      	bne.n	8004e96 <_printf_float+0x29e>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07d9      	lsls	r1, r3, #31
 8004e94:	d5d8      	bpl.n	8004e48 <_printf_float+0x250>
 8004e96:	ee18 3a10 	vmov	r3, s16
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f43f af09 	beq.w	8004cba <_printf_float+0xc2>
 8004ea8:	f04f 0900 	mov.w	r9, #0
 8004eac:	f104 0a1a 	add.w	sl, r4, #26
 8004eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb2:	425b      	negs	r3, r3
 8004eb4:	454b      	cmp	r3, r9
 8004eb6:	dc01      	bgt.n	8004ebc <_printf_float+0x2c4>
 8004eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eba:	e792      	b.n	8004de2 <_printf_float+0x1ea>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f43f aef7 	beq.w	8004cba <_printf_float+0xc2>
 8004ecc:	f109 0901 	add.w	r9, r9, #1
 8004ed0:	e7ee      	b.n	8004eb0 <_printf_float+0x2b8>
 8004ed2:	bf00      	nop
 8004ed4:	7fefffff 	.word	0x7fefffff
 8004ed8:	080074f8 	.word	0x080074f8
 8004edc:	080074fc 	.word	0x080074fc
 8004ee0:	08007504 	.word	0x08007504
 8004ee4:	08007500 	.word	0x08007500
 8004ee8:	08007508 	.word	0x08007508
 8004eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	bfa8      	it	ge
 8004ef4:	461a      	movge	r2, r3
 8004ef6:	2a00      	cmp	r2, #0
 8004ef8:	4691      	mov	r9, r2
 8004efa:	dc37      	bgt.n	8004f6c <_printf_float+0x374>
 8004efc:	f04f 0b00 	mov.w	fp, #0
 8004f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f04:	f104 021a 	add.w	r2, r4, #26
 8004f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f0a:	9305      	str	r3, [sp, #20]
 8004f0c:	eba3 0309 	sub.w	r3, r3, r9
 8004f10:	455b      	cmp	r3, fp
 8004f12:	dc33      	bgt.n	8004f7c <_printf_float+0x384>
 8004f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	db3b      	blt.n	8004f94 <_printf_float+0x39c>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	07da      	lsls	r2, r3, #31
 8004f20:	d438      	bmi.n	8004f94 <_printf_float+0x39c>
 8004f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f24:	9a05      	ldr	r2, [sp, #20]
 8004f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f28:	1a9a      	subs	r2, r3, r2
 8004f2a:	eba3 0901 	sub.w	r9, r3, r1
 8004f2e:	4591      	cmp	r9, r2
 8004f30:	bfa8      	it	ge
 8004f32:	4691      	movge	r9, r2
 8004f34:	f1b9 0f00 	cmp.w	r9, #0
 8004f38:	dc35      	bgt.n	8004fa6 <_printf_float+0x3ae>
 8004f3a:	f04f 0800 	mov.w	r8, #0
 8004f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f42:	f104 0a1a 	add.w	sl, r4, #26
 8004f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	eba3 0309 	sub.w	r3, r3, r9
 8004f50:	4543      	cmp	r3, r8
 8004f52:	f77f af79 	ble.w	8004e48 <_printf_float+0x250>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f aeaa 	beq.w	8004cba <_printf_float+0xc2>
 8004f66:	f108 0801 	add.w	r8, r8, #1
 8004f6a:	e7ec      	b.n	8004f46 <_printf_float+0x34e>
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4642      	mov	r2, r8
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	d1c0      	bne.n	8004efc <_printf_float+0x304>
 8004f7a:	e69e      	b.n	8004cba <_printf_float+0xc2>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	9205      	str	r2, [sp, #20]
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f ae97 	beq.w	8004cba <_printf_float+0xc2>
 8004f8c:	9a05      	ldr	r2, [sp, #20]
 8004f8e:	f10b 0b01 	add.w	fp, fp, #1
 8004f92:	e7b9      	b.n	8004f08 <_printf_float+0x310>
 8004f94:	ee18 3a10 	vmov	r3, s16
 8004f98:	4652      	mov	r2, sl
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d1be      	bne.n	8004f22 <_printf_float+0x32a>
 8004fa4:	e689      	b.n	8004cba <_printf_float+0xc2>
 8004fa6:	9a05      	ldr	r2, [sp, #20]
 8004fa8:	464b      	mov	r3, r9
 8004faa:	4442      	add	r2, r8
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d1c1      	bne.n	8004f3a <_printf_float+0x342>
 8004fb6:	e680      	b.n	8004cba <_printf_float+0xc2>
 8004fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fba:	2a01      	cmp	r2, #1
 8004fbc:	dc01      	bgt.n	8004fc2 <_printf_float+0x3ca>
 8004fbe:	07db      	lsls	r3, r3, #31
 8004fc0:	d538      	bpl.n	8005034 <_printf_float+0x43c>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f43f ae74 	beq.w	8004cba <_printf_float+0xc2>
 8004fd2:	ee18 3a10 	vmov	r3, s16
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f43f ae6b 	beq.w	8004cba <_printf_float+0xc2>
 8004fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2300      	movs	r3, #0
 8004fec:	f7fb fd84 	bl	8000af8 <__aeabi_dcmpeq>
 8004ff0:	b9d8      	cbnz	r0, 800502a <_printf_float+0x432>
 8004ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff4:	f108 0201 	add.w	r2, r8, #1
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	d10e      	bne.n	8005022 <_printf_float+0x42a>
 8005004:	e659      	b.n	8004cba <_printf_float+0xc2>
 8005006:	2301      	movs	r3, #1
 8005008:	4652      	mov	r2, sl
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	f43f ae52 	beq.w	8004cba <_printf_float+0xc2>
 8005016:	f108 0801 	add.w	r8, r8, #1
 800501a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	4543      	cmp	r3, r8
 8005020:	dcf1      	bgt.n	8005006 <_printf_float+0x40e>
 8005022:	464b      	mov	r3, r9
 8005024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005028:	e6dc      	b.n	8004de4 <_printf_float+0x1ec>
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	f104 0a1a 	add.w	sl, r4, #26
 8005032:	e7f2      	b.n	800501a <_printf_float+0x422>
 8005034:	2301      	movs	r3, #1
 8005036:	4642      	mov	r2, r8
 8005038:	e7df      	b.n	8004ffa <_printf_float+0x402>
 800503a:	2301      	movs	r3, #1
 800503c:	464a      	mov	r2, r9
 800503e:	4631      	mov	r1, r6
 8005040:	4628      	mov	r0, r5
 8005042:	47b8      	blx	r7
 8005044:	3001      	adds	r0, #1
 8005046:	f43f ae38 	beq.w	8004cba <_printf_float+0xc2>
 800504a:	f108 0801 	add.w	r8, r8, #1
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	4543      	cmp	r3, r8
 8005056:	dcf0      	bgt.n	800503a <_printf_float+0x442>
 8005058:	e6fa      	b.n	8004e50 <_printf_float+0x258>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	f104 0919 	add.w	r9, r4, #25
 8005062:	e7f4      	b.n	800504e <_printf_float+0x456>

08005064 <_printf_common>:
 8005064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	4616      	mov	r6, r2
 800506a:	4699      	mov	r9, r3
 800506c:	688a      	ldr	r2, [r1, #8]
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005074:	4293      	cmp	r3, r2
 8005076:	bfb8      	it	lt
 8005078:	4613      	movlt	r3, r2
 800507a:	6033      	str	r3, [r6, #0]
 800507c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005080:	4607      	mov	r7, r0
 8005082:	460c      	mov	r4, r1
 8005084:	b10a      	cbz	r2, 800508a <_printf_common+0x26>
 8005086:	3301      	adds	r3, #1
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	0699      	lsls	r1, r3, #26
 800508e:	bf42      	ittt	mi
 8005090:	6833      	ldrmi	r3, [r6, #0]
 8005092:	3302      	addmi	r3, #2
 8005094:	6033      	strmi	r3, [r6, #0]
 8005096:	6825      	ldr	r5, [r4, #0]
 8005098:	f015 0506 	ands.w	r5, r5, #6
 800509c:	d106      	bne.n	80050ac <_printf_common+0x48>
 800509e:	f104 0a19 	add.w	sl, r4, #25
 80050a2:	68e3      	ldr	r3, [r4, #12]
 80050a4:	6832      	ldr	r2, [r6, #0]
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	42ab      	cmp	r3, r5
 80050aa:	dc26      	bgt.n	80050fa <_printf_common+0x96>
 80050ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b0:	1e13      	subs	r3, r2, #0
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	bf18      	it	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	0692      	lsls	r2, r2, #26
 80050ba:	d42b      	bmi.n	8005114 <_printf_common+0xb0>
 80050bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c0:	4649      	mov	r1, r9
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c0      	blx	r8
 80050c6:	3001      	adds	r0, #1
 80050c8:	d01e      	beq.n	8005108 <_printf_common+0xa4>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	68e5      	ldr	r5, [r4, #12]
 80050ce:	6832      	ldr	r2, [r6, #0]
 80050d0:	f003 0306 	and.w	r3, r3, #6
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	bf08      	it	eq
 80050d8:	1aad      	subeq	r5, r5, r2
 80050da:	68a3      	ldr	r3, [r4, #8]
 80050dc:	6922      	ldr	r2, [r4, #16]
 80050de:	bf0c      	ite	eq
 80050e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e4:	2500      	movne	r5, #0
 80050e6:	4293      	cmp	r3, r2
 80050e8:	bfc4      	itt	gt
 80050ea:	1a9b      	subgt	r3, r3, r2
 80050ec:	18ed      	addgt	r5, r5, r3
 80050ee:	2600      	movs	r6, #0
 80050f0:	341a      	adds	r4, #26
 80050f2:	42b5      	cmp	r5, r6
 80050f4:	d11a      	bne.n	800512c <_printf_common+0xc8>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e008      	b.n	800510c <_printf_common+0xa8>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4652      	mov	r2, sl
 80050fe:	4649      	mov	r1, r9
 8005100:	4638      	mov	r0, r7
 8005102:	47c0      	blx	r8
 8005104:	3001      	adds	r0, #1
 8005106:	d103      	bne.n	8005110 <_printf_common+0xac>
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005110:	3501      	adds	r5, #1
 8005112:	e7c6      	b.n	80050a2 <_printf_common+0x3e>
 8005114:	18e1      	adds	r1, r4, r3
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	2030      	movs	r0, #48	; 0x30
 800511a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800511e:	4422      	add	r2, r4
 8005120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005128:	3302      	adds	r3, #2
 800512a:	e7c7      	b.n	80050bc <_printf_common+0x58>
 800512c:	2301      	movs	r3, #1
 800512e:	4622      	mov	r2, r4
 8005130:	4649      	mov	r1, r9
 8005132:	4638      	mov	r0, r7
 8005134:	47c0      	blx	r8
 8005136:	3001      	adds	r0, #1
 8005138:	d0e6      	beq.n	8005108 <_printf_common+0xa4>
 800513a:	3601      	adds	r6, #1
 800513c:	e7d9      	b.n	80050f2 <_printf_common+0x8e>
	...

08005140 <_printf_i>:
 8005140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005144:	7e0f      	ldrb	r7, [r1, #24]
 8005146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005148:	2f78      	cmp	r7, #120	; 0x78
 800514a:	4691      	mov	r9, r2
 800514c:	4680      	mov	r8, r0
 800514e:	460c      	mov	r4, r1
 8005150:	469a      	mov	sl, r3
 8005152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005156:	d807      	bhi.n	8005168 <_printf_i+0x28>
 8005158:	2f62      	cmp	r7, #98	; 0x62
 800515a:	d80a      	bhi.n	8005172 <_printf_i+0x32>
 800515c:	2f00      	cmp	r7, #0
 800515e:	f000 80d8 	beq.w	8005312 <_printf_i+0x1d2>
 8005162:	2f58      	cmp	r7, #88	; 0x58
 8005164:	f000 80a3 	beq.w	80052ae <_printf_i+0x16e>
 8005168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005170:	e03a      	b.n	80051e8 <_printf_i+0xa8>
 8005172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005176:	2b15      	cmp	r3, #21
 8005178:	d8f6      	bhi.n	8005168 <_printf_i+0x28>
 800517a:	a101      	add	r1, pc, #4	; (adr r1, 8005180 <_printf_i+0x40>)
 800517c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005180:	080051d9 	.word	0x080051d9
 8005184:	080051ed 	.word	0x080051ed
 8005188:	08005169 	.word	0x08005169
 800518c:	08005169 	.word	0x08005169
 8005190:	08005169 	.word	0x08005169
 8005194:	08005169 	.word	0x08005169
 8005198:	080051ed 	.word	0x080051ed
 800519c:	08005169 	.word	0x08005169
 80051a0:	08005169 	.word	0x08005169
 80051a4:	08005169 	.word	0x08005169
 80051a8:	08005169 	.word	0x08005169
 80051ac:	080052f9 	.word	0x080052f9
 80051b0:	0800521d 	.word	0x0800521d
 80051b4:	080052db 	.word	0x080052db
 80051b8:	08005169 	.word	0x08005169
 80051bc:	08005169 	.word	0x08005169
 80051c0:	0800531b 	.word	0x0800531b
 80051c4:	08005169 	.word	0x08005169
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	08005169 	.word	0x08005169
 80051d0:	08005169 	.word	0x08005169
 80051d4:	080052e3 	.word	0x080052e3
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	1d1a      	adds	r2, r3, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	602a      	str	r2, [r5, #0]
 80051e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0a3      	b.n	8005334 <_printf_i+0x1f4>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	6829      	ldr	r1, [r5, #0]
 80051f0:	0606      	lsls	r6, r0, #24
 80051f2:	f101 0304 	add.w	r3, r1, #4
 80051f6:	d50a      	bpl.n	800520e <_printf_i+0xce>
 80051f8:	680e      	ldr	r6, [r1, #0]
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	da03      	bge.n	8005208 <_printf_i+0xc8>
 8005200:	232d      	movs	r3, #45	; 0x2d
 8005202:	4276      	negs	r6, r6
 8005204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005208:	485e      	ldr	r0, [pc, #376]	; (8005384 <_printf_i+0x244>)
 800520a:	230a      	movs	r3, #10
 800520c:	e019      	b.n	8005242 <_printf_i+0x102>
 800520e:	680e      	ldr	r6, [r1, #0]
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005216:	bf18      	it	ne
 8005218:	b236      	sxthne	r6, r6
 800521a:	e7ef      	b.n	80051fc <_printf_i+0xbc>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	6029      	str	r1, [r5, #0]
 8005224:	0601      	lsls	r1, r0, #24
 8005226:	d501      	bpl.n	800522c <_printf_i+0xec>
 8005228:	681e      	ldr	r6, [r3, #0]
 800522a:	e002      	b.n	8005232 <_printf_i+0xf2>
 800522c:	0646      	lsls	r6, r0, #25
 800522e:	d5fb      	bpl.n	8005228 <_printf_i+0xe8>
 8005230:	881e      	ldrh	r6, [r3, #0]
 8005232:	4854      	ldr	r0, [pc, #336]	; (8005384 <_printf_i+0x244>)
 8005234:	2f6f      	cmp	r7, #111	; 0x6f
 8005236:	bf0c      	ite	eq
 8005238:	2308      	moveq	r3, #8
 800523a:	230a      	movne	r3, #10
 800523c:	2100      	movs	r1, #0
 800523e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005242:	6865      	ldr	r5, [r4, #4]
 8005244:	60a5      	str	r5, [r4, #8]
 8005246:	2d00      	cmp	r5, #0
 8005248:	bfa2      	ittt	ge
 800524a:	6821      	ldrge	r1, [r4, #0]
 800524c:	f021 0104 	bicge.w	r1, r1, #4
 8005250:	6021      	strge	r1, [r4, #0]
 8005252:	b90e      	cbnz	r6, 8005258 <_printf_i+0x118>
 8005254:	2d00      	cmp	r5, #0
 8005256:	d04d      	beq.n	80052f4 <_printf_i+0x1b4>
 8005258:	4615      	mov	r5, r2
 800525a:	fbb6 f1f3 	udiv	r1, r6, r3
 800525e:	fb03 6711 	mls	r7, r3, r1, r6
 8005262:	5dc7      	ldrb	r7, [r0, r7]
 8005264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005268:	4637      	mov	r7, r6
 800526a:	42bb      	cmp	r3, r7
 800526c:	460e      	mov	r6, r1
 800526e:	d9f4      	bls.n	800525a <_printf_i+0x11a>
 8005270:	2b08      	cmp	r3, #8
 8005272:	d10b      	bne.n	800528c <_printf_i+0x14c>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07de      	lsls	r6, r3, #31
 8005278:	d508      	bpl.n	800528c <_printf_i+0x14c>
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	6861      	ldr	r1, [r4, #4]
 800527e:	4299      	cmp	r1, r3
 8005280:	bfde      	ittt	le
 8005282:	2330      	movle	r3, #48	; 0x30
 8005284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800528c:	1b52      	subs	r2, r2, r5
 800528e:	6122      	str	r2, [r4, #16]
 8005290:	f8cd a000 	str.w	sl, [sp]
 8005294:	464b      	mov	r3, r9
 8005296:	aa03      	add	r2, sp, #12
 8005298:	4621      	mov	r1, r4
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fee2 	bl	8005064 <_printf_common>
 80052a0:	3001      	adds	r0, #1
 80052a2:	d14c      	bne.n	800533e <_printf_i+0x1fe>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	b004      	add	sp, #16
 80052aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ae:	4835      	ldr	r0, [pc, #212]	; (8005384 <_printf_i+0x244>)
 80052b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052b4:	6829      	ldr	r1, [r5, #0]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052bc:	6029      	str	r1, [r5, #0]
 80052be:	061d      	lsls	r5, r3, #24
 80052c0:	d514      	bpl.n	80052ec <_printf_i+0x1ac>
 80052c2:	07df      	lsls	r7, r3, #31
 80052c4:	bf44      	itt	mi
 80052c6:	f043 0320 	orrmi.w	r3, r3, #32
 80052ca:	6023      	strmi	r3, [r4, #0]
 80052cc:	b91e      	cbnz	r6, 80052d6 <_printf_i+0x196>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f023 0320 	bic.w	r3, r3, #32
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	2310      	movs	r3, #16
 80052d8:	e7b0      	b.n	800523c <_printf_i+0xfc>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f043 0320 	orr.w	r3, r3, #32
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	2378      	movs	r3, #120	; 0x78
 80052e4:	4828      	ldr	r0, [pc, #160]	; (8005388 <_printf_i+0x248>)
 80052e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ea:	e7e3      	b.n	80052b4 <_printf_i+0x174>
 80052ec:	0659      	lsls	r1, r3, #25
 80052ee:	bf48      	it	mi
 80052f0:	b2b6      	uxthmi	r6, r6
 80052f2:	e7e6      	b.n	80052c2 <_printf_i+0x182>
 80052f4:	4615      	mov	r5, r2
 80052f6:	e7bb      	b.n	8005270 <_printf_i+0x130>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	6826      	ldr	r6, [r4, #0]
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	1d18      	adds	r0, r3, #4
 8005300:	6028      	str	r0, [r5, #0]
 8005302:	0635      	lsls	r5, r6, #24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	d501      	bpl.n	800530c <_printf_i+0x1cc>
 8005308:	6019      	str	r1, [r3, #0]
 800530a:	e002      	b.n	8005312 <_printf_i+0x1d2>
 800530c:	0670      	lsls	r0, r6, #25
 800530e:	d5fb      	bpl.n	8005308 <_printf_i+0x1c8>
 8005310:	8019      	strh	r1, [r3, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	4615      	mov	r5, r2
 8005318:	e7ba      	b.n	8005290 <_printf_i+0x150>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	602a      	str	r2, [r5, #0]
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	4628      	mov	r0, r5
 8005328:	f7fa ff72 	bl	8000210 <memchr>
 800532c:	b108      	cbz	r0, 8005332 <_printf_i+0x1f2>
 800532e:	1b40      	subs	r0, r0, r5
 8005330:	6060      	str	r0, [r4, #4]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	e7a8      	b.n	8005290 <_printf_i+0x150>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	462a      	mov	r2, r5
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	47d0      	blx	sl
 8005348:	3001      	adds	r0, #1
 800534a:	d0ab      	beq.n	80052a4 <_printf_i+0x164>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d413      	bmi.n	800537a <_printf_i+0x23a>
 8005352:	68e0      	ldr	r0, [r4, #12]
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	4298      	cmp	r0, r3
 8005358:	bfb8      	it	lt
 800535a:	4618      	movlt	r0, r3
 800535c:	e7a4      	b.n	80052a8 <_printf_i+0x168>
 800535e:	2301      	movs	r3, #1
 8005360:	4632      	mov	r2, r6
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	47d0      	blx	sl
 8005368:	3001      	adds	r0, #1
 800536a:	d09b      	beq.n	80052a4 <_printf_i+0x164>
 800536c:	3501      	adds	r5, #1
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	9903      	ldr	r1, [sp, #12]
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	42ab      	cmp	r3, r5
 8005376:	dcf2      	bgt.n	800535e <_printf_i+0x21e>
 8005378:	e7eb      	b.n	8005352 <_printf_i+0x212>
 800537a:	2500      	movs	r5, #0
 800537c:	f104 0619 	add.w	r6, r4, #25
 8005380:	e7f5      	b.n	800536e <_printf_i+0x22e>
 8005382:	bf00      	nop
 8005384:	0800750a 	.word	0x0800750a
 8005388:	0800751b 	.word	0x0800751b

0800538c <iprintf>:
 800538c:	b40f      	push	{r0, r1, r2, r3}
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <iprintf+0x2c>)
 8005390:	b513      	push	{r0, r1, r4, lr}
 8005392:	681c      	ldr	r4, [r3, #0]
 8005394:	b124      	cbz	r4, 80053a0 <iprintf+0x14>
 8005396:	69a3      	ldr	r3, [r4, #24]
 8005398:	b913      	cbnz	r3, 80053a0 <iprintf+0x14>
 800539a:	4620      	mov	r0, r4
 800539c:	f000 ff7e 	bl	800629c <__sinit>
 80053a0:	ab05      	add	r3, sp, #20
 80053a2:	9a04      	ldr	r2, [sp, #16]
 80053a4:	68a1      	ldr	r1, [r4, #8]
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f001 fbe5 	bl	8006b78 <_vfiprintf_r>
 80053ae:	b002      	add	sp, #8
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	b004      	add	sp, #16
 80053b6:	4770      	bx	lr
 80053b8:	2000000c 	.word	0x2000000c

080053bc <_sbrk_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d06      	ldr	r5, [pc, #24]	; (80053d8 <_sbrk_r+0x1c>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fc fb34 	bl	8001a34 <_sbrk>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_sbrk_r+0x1a>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_sbrk_r+0x1a>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	200002a4 	.word	0x200002a4

080053dc <_strtol_l.constprop.0>:
 80053dc:	2b01      	cmp	r3, #1
 80053de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e2:	d001      	beq.n	80053e8 <_strtol_l.constprop.0+0xc>
 80053e4:	2b24      	cmp	r3, #36	; 0x24
 80053e6:	d906      	bls.n	80053f6 <_strtol_l.constprop.0+0x1a>
 80053e8:	f7ff fa22 	bl	8004830 <__errno>
 80053ec:	2316      	movs	r3, #22
 80053ee:	6003      	str	r3, [r0, #0]
 80053f0:	2000      	movs	r0, #0
 80053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80054dc <_strtol_l.constprop.0+0x100>
 80053fa:	460d      	mov	r5, r1
 80053fc:	462e      	mov	r6, r5
 80053fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005402:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005406:	f017 0708 	ands.w	r7, r7, #8
 800540a:	d1f7      	bne.n	80053fc <_strtol_l.constprop.0+0x20>
 800540c:	2c2d      	cmp	r4, #45	; 0x2d
 800540e:	d132      	bne.n	8005476 <_strtol_l.constprop.0+0x9a>
 8005410:	782c      	ldrb	r4, [r5, #0]
 8005412:	2701      	movs	r7, #1
 8005414:	1cb5      	adds	r5, r6, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d05b      	beq.n	80054d2 <_strtol_l.constprop.0+0xf6>
 800541a:	2b10      	cmp	r3, #16
 800541c:	d109      	bne.n	8005432 <_strtol_l.constprop.0+0x56>
 800541e:	2c30      	cmp	r4, #48	; 0x30
 8005420:	d107      	bne.n	8005432 <_strtol_l.constprop.0+0x56>
 8005422:	782c      	ldrb	r4, [r5, #0]
 8005424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005428:	2c58      	cmp	r4, #88	; 0x58
 800542a:	d14d      	bne.n	80054c8 <_strtol_l.constprop.0+0xec>
 800542c:	786c      	ldrb	r4, [r5, #1]
 800542e:	2310      	movs	r3, #16
 8005430:	3502      	adds	r5, #2
 8005432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005436:	f108 38ff 	add.w	r8, r8, #4294967295
 800543a:	f04f 0c00 	mov.w	ip, #0
 800543e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005442:	4666      	mov	r6, ip
 8005444:	fb03 8a19 	mls	sl, r3, r9, r8
 8005448:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800544c:	f1be 0f09 	cmp.w	lr, #9
 8005450:	d816      	bhi.n	8005480 <_strtol_l.constprop.0+0xa4>
 8005452:	4674      	mov	r4, lr
 8005454:	42a3      	cmp	r3, r4
 8005456:	dd24      	ble.n	80054a2 <_strtol_l.constprop.0+0xc6>
 8005458:	f1bc 0f00 	cmp.w	ip, #0
 800545c:	db1e      	blt.n	800549c <_strtol_l.constprop.0+0xc0>
 800545e:	45b1      	cmp	r9, r6
 8005460:	d31c      	bcc.n	800549c <_strtol_l.constprop.0+0xc0>
 8005462:	d101      	bne.n	8005468 <_strtol_l.constprop.0+0x8c>
 8005464:	45a2      	cmp	sl, r4
 8005466:	db19      	blt.n	800549c <_strtol_l.constprop.0+0xc0>
 8005468:	fb06 4603 	mla	r6, r6, r3, r4
 800546c:	f04f 0c01 	mov.w	ip, #1
 8005470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005474:	e7e8      	b.n	8005448 <_strtol_l.constprop.0+0x6c>
 8005476:	2c2b      	cmp	r4, #43	; 0x2b
 8005478:	bf04      	itt	eq
 800547a:	782c      	ldrbeq	r4, [r5, #0]
 800547c:	1cb5      	addeq	r5, r6, #2
 800547e:	e7ca      	b.n	8005416 <_strtol_l.constprop.0+0x3a>
 8005480:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005484:	f1be 0f19 	cmp.w	lr, #25
 8005488:	d801      	bhi.n	800548e <_strtol_l.constprop.0+0xb2>
 800548a:	3c37      	subs	r4, #55	; 0x37
 800548c:	e7e2      	b.n	8005454 <_strtol_l.constprop.0+0x78>
 800548e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005492:	f1be 0f19 	cmp.w	lr, #25
 8005496:	d804      	bhi.n	80054a2 <_strtol_l.constprop.0+0xc6>
 8005498:	3c57      	subs	r4, #87	; 0x57
 800549a:	e7db      	b.n	8005454 <_strtol_l.constprop.0+0x78>
 800549c:	f04f 3cff 	mov.w	ip, #4294967295
 80054a0:	e7e6      	b.n	8005470 <_strtol_l.constprop.0+0x94>
 80054a2:	f1bc 0f00 	cmp.w	ip, #0
 80054a6:	da05      	bge.n	80054b4 <_strtol_l.constprop.0+0xd8>
 80054a8:	2322      	movs	r3, #34	; 0x22
 80054aa:	6003      	str	r3, [r0, #0]
 80054ac:	4646      	mov	r6, r8
 80054ae:	b942      	cbnz	r2, 80054c2 <_strtol_l.constprop.0+0xe6>
 80054b0:	4630      	mov	r0, r6
 80054b2:	e79e      	b.n	80053f2 <_strtol_l.constprop.0+0x16>
 80054b4:	b107      	cbz	r7, 80054b8 <_strtol_l.constprop.0+0xdc>
 80054b6:	4276      	negs	r6, r6
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d0f9      	beq.n	80054b0 <_strtol_l.constprop.0+0xd4>
 80054bc:	f1bc 0f00 	cmp.w	ip, #0
 80054c0:	d000      	beq.n	80054c4 <_strtol_l.constprop.0+0xe8>
 80054c2:	1e69      	subs	r1, r5, #1
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	e7f3      	b.n	80054b0 <_strtol_l.constprop.0+0xd4>
 80054c8:	2430      	movs	r4, #48	; 0x30
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1b1      	bne.n	8005432 <_strtol_l.constprop.0+0x56>
 80054ce:	2308      	movs	r3, #8
 80054d0:	e7af      	b.n	8005432 <_strtol_l.constprop.0+0x56>
 80054d2:	2c30      	cmp	r4, #48	; 0x30
 80054d4:	d0a5      	beq.n	8005422 <_strtol_l.constprop.0+0x46>
 80054d6:	230a      	movs	r3, #10
 80054d8:	e7ab      	b.n	8005432 <_strtol_l.constprop.0+0x56>
 80054da:	bf00      	nop
 80054dc:	0800752d 	.word	0x0800752d

080054e0 <strtol>:
 80054e0:	4613      	mov	r3, r2
 80054e2:	460a      	mov	r2, r1
 80054e4:	4601      	mov	r1, r0
 80054e6:	4802      	ldr	r0, [pc, #8]	; (80054f0 <strtol+0x10>)
 80054e8:	6800      	ldr	r0, [r0, #0]
 80054ea:	f7ff bf77 	b.w	80053dc <_strtol_l.constprop.0>
 80054ee:	bf00      	nop
 80054f0:	2000000c 	.word	0x2000000c

080054f4 <quorem>:
 80054f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f8:	6903      	ldr	r3, [r0, #16]
 80054fa:	690c      	ldr	r4, [r1, #16]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	4607      	mov	r7, r0
 8005500:	f2c0 8081 	blt.w	8005606 <quorem+0x112>
 8005504:	3c01      	subs	r4, #1
 8005506:	f101 0814 	add.w	r8, r1, #20
 800550a:	f100 0514 	add.w	r5, r0, #20
 800550e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800551c:	3301      	adds	r3, #1
 800551e:	429a      	cmp	r2, r3
 8005520:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005528:	fbb2 f6f3 	udiv	r6, r2, r3
 800552c:	d331      	bcc.n	8005592 <quorem+0x9e>
 800552e:	f04f 0e00 	mov.w	lr, #0
 8005532:	4640      	mov	r0, r8
 8005534:	46ac      	mov	ip, r5
 8005536:	46f2      	mov	sl, lr
 8005538:	f850 2b04 	ldr.w	r2, [r0], #4
 800553c:	b293      	uxth	r3, r2
 800553e:	fb06 e303 	mla	r3, r6, r3, lr
 8005542:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005546:	b29b      	uxth	r3, r3
 8005548:	ebaa 0303 	sub.w	r3, sl, r3
 800554c:	f8dc a000 	ldr.w	sl, [ip]
 8005550:	0c12      	lsrs	r2, r2, #16
 8005552:	fa13 f38a 	uxtah	r3, r3, sl
 8005556:	fb06 e202 	mla	r2, r6, r2, lr
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005562:	b292      	uxth	r2, r2
 8005564:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800556c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005570:	4581      	cmp	r9, r0
 8005572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005576:	f84c 3b04 	str.w	r3, [ip], #4
 800557a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800557e:	d2db      	bcs.n	8005538 <quorem+0x44>
 8005580:	f855 300b 	ldr.w	r3, [r5, fp]
 8005584:	b92b      	cbnz	r3, 8005592 <quorem+0x9e>
 8005586:	9b01      	ldr	r3, [sp, #4]
 8005588:	3b04      	subs	r3, #4
 800558a:	429d      	cmp	r5, r3
 800558c:	461a      	mov	r2, r3
 800558e:	d32e      	bcc.n	80055ee <quorem+0xfa>
 8005590:	613c      	str	r4, [r7, #16]
 8005592:	4638      	mov	r0, r7
 8005594:	f001 f9c4 	bl	8006920 <__mcmp>
 8005598:	2800      	cmp	r0, #0
 800559a:	db24      	blt.n	80055e6 <quorem+0xf2>
 800559c:	3601      	adds	r6, #1
 800559e:	4628      	mov	r0, r5
 80055a0:	f04f 0c00 	mov.w	ip, #0
 80055a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80055a8:	f8d0 e000 	ldr.w	lr, [r0]
 80055ac:	b293      	uxth	r3, r2
 80055ae:	ebac 0303 	sub.w	r3, ip, r3
 80055b2:	0c12      	lsrs	r2, r2, #16
 80055b4:	fa13 f38e 	uxtah	r3, r3, lr
 80055b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c6:	45c1      	cmp	r9, r8
 80055c8:	f840 3b04 	str.w	r3, [r0], #4
 80055cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055d0:	d2e8      	bcs.n	80055a4 <quorem+0xb0>
 80055d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055da:	b922      	cbnz	r2, 80055e6 <quorem+0xf2>
 80055dc:	3b04      	subs	r3, #4
 80055de:	429d      	cmp	r5, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	d30a      	bcc.n	80055fa <quorem+0x106>
 80055e4:	613c      	str	r4, [r7, #16]
 80055e6:	4630      	mov	r0, r6
 80055e8:	b003      	add	sp, #12
 80055ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	3b04      	subs	r3, #4
 80055f2:	2a00      	cmp	r2, #0
 80055f4:	d1cc      	bne.n	8005590 <quorem+0x9c>
 80055f6:	3c01      	subs	r4, #1
 80055f8:	e7c7      	b.n	800558a <quorem+0x96>
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d1f0      	bne.n	80055e4 <quorem+0xf0>
 8005602:	3c01      	subs	r4, #1
 8005604:	e7eb      	b.n	80055de <quorem+0xea>
 8005606:	2000      	movs	r0, #0
 8005608:	e7ee      	b.n	80055e8 <quorem+0xf4>
 800560a:	0000      	movs	r0, r0
 800560c:	0000      	movs	r0, r0
	...

08005610 <_dtoa_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	ed2d 8b04 	vpush	{d8-d9}
 8005618:	ec57 6b10 	vmov	r6, r7, d0
 800561c:	b093      	sub	sp, #76	; 0x4c
 800561e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005624:	9106      	str	r1, [sp, #24]
 8005626:	ee10 aa10 	vmov	sl, s0
 800562a:	4604      	mov	r4, r0
 800562c:	9209      	str	r2, [sp, #36]	; 0x24
 800562e:	930c      	str	r3, [sp, #48]	; 0x30
 8005630:	46bb      	mov	fp, r7
 8005632:	b975      	cbnz	r5, 8005652 <_dtoa_r+0x42>
 8005634:	2010      	movs	r0, #16
 8005636:	f7ff f939 	bl	80048ac <malloc>
 800563a:	4602      	mov	r2, r0
 800563c:	6260      	str	r0, [r4, #36]	; 0x24
 800563e:	b920      	cbnz	r0, 800564a <_dtoa_r+0x3a>
 8005640:	4ba7      	ldr	r3, [pc, #668]	; (80058e0 <_dtoa_r+0x2d0>)
 8005642:	21ea      	movs	r1, #234	; 0xea
 8005644:	48a7      	ldr	r0, [pc, #668]	; (80058e4 <_dtoa_r+0x2d4>)
 8005646:	f001 fcdd 	bl	8007004 <__assert_func>
 800564a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800564e:	6005      	str	r5, [r0, #0]
 8005650:	60c5      	str	r5, [r0, #12]
 8005652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005654:	6819      	ldr	r1, [r3, #0]
 8005656:	b151      	cbz	r1, 800566e <_dtoa_r+0x5e>
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	604a      	str	r2, [r1, #4]
 800565c:	2301      	movs	r3, #1
 800565e:	4093      	lsls	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
 8005662:	4620      	mov	r0, r4
 8005664:	f000 ff1a 	bl	800649c <_Bfree>
 8005668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	1e3b      	subs	r3, r7, #0
 8005670:	bfaa      	itet	ge
 8005672:	2300      	movge	r3, #0
 8005674:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005678:	f8c8 3000 	strge.w	r3, [r8]
 800567c:	4b9a      	ldr	r3, [pc, #616]	; (80058e8 <_dtoa_r+0x2d8>)
 800567e:	bfbc      	itt	lt
 8005680:	2201      	movlt	r2, #1
 8005682:	f8c8 2000 	strlt.w	r2, [r8]
 8005686:	ea33 030b 	bics.w	r3, r3, fp
 800568a:	d11b      	bne.n	80056c4 <_dtoa_r+0xb4>
 800568c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800568e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005698:	4333      	orrs	r3, r6
 800569a:	f000 8592 	beq.w	80061c2 <_dtoa_r+0xbb2>
 800569e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056a0:	b963      	cbnz	r3, 80056bc <_dtoa_r+0xac>
 80056a2:	4b92      	ldr	r3, [pc, #584]	; (80058ec <_dtoa_r+0x2dc>)
 80056a4:	e022      	b.n	80056ec <_dtoa_r+0xdc>
 80056a6:	4b92      	ldr	r3, [pc, #584]	; (80058f0 <_dtoa_r+0x2e0>)
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	3308      	adds	r3, #8
 80056ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	b013      	add	sp, #76	; 0x4c
 80056b4:	ecbd 8b04 	vpop	{d8-d9}
 80056b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056bc:	4b8b      	ldr	r3, [pc, #556]	; (80058ec <_dtoa_r+0x2dc>)
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	3303      	adds	r3, #3
 80056c2:	e7f3      	b.n	80056ac <_dtoa_r+0x9c>
 80056c4:	2200      	movs	r2, #0
 80056c6:	2300      	movs	r3, #0
 80056c8:	4650      	mov	r0, sl
 80056ca:	4659      	mov	r1, fp
 80056cc:	f7fb fa14 	bl	8000af8 <__aeabi_dcmpeq>
 80056d0:	ec4b ab19 	vmov	d9, sl, fp
 80056d4:	4680      	mov	r8, r0
 80056d6:	b158      	cbz	r0, 80056f0 <_dtoa_r+0xe0>
 80056d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056da:	2301      	movs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 856b 	beq.w	80061bc <_dtoa_r+0xbac>
 80056e6:	4883      	ldr	r0, [pc, #524]	; (80058f4 <_dtoa_r+0x2e4>)
 80056e8:	6018      	str	r0, [r3, #0]
 80056ea:	1e43      	subs	r3, r0, #1
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	e7df      	b.n	80056b0 <_dtoa_r+0xa0>
 80056f0:	ec4b ab10 	vmov	d0, sl, fp
 80056f4:	aa10      	add	r2, sp, #64	; 0x40
 80056f6:	a911      	add	r1, sp, #68	; 0x44
 80056f8:	4620      	mov	r0, r4
 80056fa:	f001 f9b7 	bl	8006a6c <__d2b>
 80056fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005702:	ee08 0a10 	vmov	s16, r0
 8005706:	2d00      	cmp	r5, #0
 8005708:	f000 8084 	beq.w	8005814 <_dtoa_r+0x204>
 800570c:	ee19 3a90 	vmov	r3, s19
 8005710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005714:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005718:	4656      	mov	r6, sl
 800571a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800571e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005722:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005726:	4b74      	ldr	r3, [pc, #464]	; (80058f8 <_dtoa_r+0x2e8>)
 8005728:	2200      	movs	r2, #0
 800572a:	4630      	mov	r0, r6
 800572c:	4639      	mov	r1, r7
 800572e:	f7fa fdc3 	bl	80002b8 <__aeabi_dsub>
 8005732:	a365      	add	r3, pc, #404	; (adr r3, 80058c8 <_dtoa_r+0x2b8>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa ff76 	bl	8000628 <__aeabi_dmul>
 800573c:	a364      	add	r3, pc, #400	; (adr r3, 80058d0 <_dtoa_r+0x2c0>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f7fa fdbb 	bl	80002bc <__adddf3>
 8005746:	4606      	mov	r6, r0
 8005748:	4628      	mov	r0, r5
 800574a:	460f      	mov	r7, r1
 800574c:	f7fa ff02 	bl	8000554 <__aeabi_i2d>
 8005750:	a361      	add	r3, pc, #388	; (adr r3, 80058d8 <_dtoa_r+0x2c8>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fa ff67 	bl	8000628 <__aeabi_dmul>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4630      	mov	r0, r6
 8005760:	4639      	mov	r1, r7
 8005762:	f7fa fdab 	bl	80002bc <__adddf3>
 8005766:	4606      	mov	r6, r0
 8005768:	460f      	mov	r7, r1
 800576a:	f7fb fa0d 	bl	8000b88 <__aeabi_d2iz>
 800576e:	2200      	movs	r2, #0
 8005770:	9000      	str	r0, [sp, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	4630      	mov	r0, r6
 8005776:	4639      	mov	r1, r7
 8005778:	f7fb f9c8 	bl	8000b0c <__aeabi_dcmplt>
 800577c:	b150      	cbz	r0, 8005794 <_dtoa_r+0x184>
 800577e:	9800      	ldr	r0, [sp, #0]
 8005780:	f7fa fee8 	bl	8000554 <__aeabi_i2d>
 8005784:	4632      	mov	r2, r6
 8005786:	463b      	mov	r3, r7
 8005788:	f7fb f9b6 	bl	8000af8 <__aeabi_dcmpeq>
 800578c:	b910      	cbnz	r0, 8005794 <_dtoa_r+0x184>
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	3b01      	subs	r3, #1
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	9b00      	ldr	r3, [sp, #0]
 8005796:	2b16      	cmp	r3, #22
 8005798:	d85a      	bhi.n	8005850 <_dtoa_r+0x240>
 800579a:	9a00      	ldr	r2, [sp, #0]
 800579c:	4b57      	ldr	r3, [pc, #348]	; (80058fc <_dtoa_r+0x2ec>)
 800579e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	ec51 0b19 	vmov	r0, r1, d9
 80057aa:	f7fb f9af 	bl	8000b0c <__aeabi_dcmplt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d050      	beq.n	8005854 <_dtoa_r+0x244>
 80057b2:	9b00      	ldr	r3, [sp, #0]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80057bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057be:	1b5d      	subs	r5, r3, r5
 80057c0:	1e6b      	subs	r3, r5, #1
 80057c2:	9305      	str	r3, [sp, #20]
 80057c4:	bf45      	ittet	mi
 80057c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80057ca:	9304      	strmi	r3, [sp, #16]
 80057cc:	2300      	movpl	r3, #0
 80057ce:	2300      	movmi	r3, #0
 80057d0:	bf4c      	ite	mi
 80057d2:	9305      	strmi	r3, [sp, #20]
 80057d4:	9304      	strpl	r3, [sp, #16]
 80057d6:	9b00      	ldr	r3, [sp, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	db3d      	blt.n	8005858 <_dtoa_r+0x248>
 80057dc:	9b05      	ldr	r3, [sp, #20]
 80057de:	9a00      	ldr	r2, [sp, #0]
 80057e0:	920a      	str	r2, [sp, #40]	; 0x28
 80057e2:	4413      	add	r3, r2
 80057e4:	9305      	str	r3, [sp, #20]
 80057e6:	2300      	movs	r3, #0
 80057e8:	9307      	str	r3, [sp, #28]
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	f200 8089 	bhi.w	8005904 <_dtoa_r+0x2f4>
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	bfc4      	itt	gt
 80057f6:	3b04      	subgt	r3, #4
 80057f8:	9306      	strgt	r3, [sp, #24]
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	f1a3 0302 	sub.w	r3, r3, #2
 8005800:	bfcc      	ite	gt
 8005802:	2500      	movgt	r5, #0
 8005804:	2501      	movle	r5, #1
 8005806:	2b03      	cmp	r3, #3
 8005808:	f200 8087 	bhi.w	800591a <_dtoa_r+0x30a>
 800580c:	e8df f003 	tbb	[pc, r3]
 8005810:	59383a2d 	.word	0x59383a2d
 8005814:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005818:	441d      	add	r5, r3
 800581a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800581e:	2b20      	cmp	r3, #32
 8005820:	bfc1      	itttt	gt
 8005822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005826:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800582a:	fa0b f303 	lslgt.w	r3, fp, r3
 800582e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005832:	bfda      	itte	le
 8005834:	f1c3 0320 	rsble	r3, r3, #32
 8005838:	fa06 f003 	lslle.w	r0, r6, r3
 800583c:	4318      	orrgt	r0, r3
 800583e:	f7fa fe79 	bl	8000534 <__aeabi_ui2d>
 8005842:	2301      	movs	r3, #1
 8005844:	4606      	mov	r6, r0
 8005846:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800584a:	3d01      	subs	r5, #1
 800584c:	930e      	str	r3, [sp, #56]	; 0x38
 800584e:	e76a      	b.n	8005726 <_dtoa_r+0x116>
 8005850:	2301      	movs	r3, #1
 8005852:	e7b2      	b.n	80057ba <_dtoa_r+0x1aa>
 8005854:	900b      	str	r0, [sp, #44]	; 0x2c
 8005856:	e7b1      	b.n	80057bc <_dtoa_r+0x1ac>
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	9a00      	ldr	r2, [sp, #0]
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	4253      	negs	r3, r2
 8005862:	9307      	str	r3, [sp, #28]
 8005864:	2300      	movs	r3, #0
 8005866:	930a      	str	r3, [sp, #40]	; 0x28
 8005868:	e7bf      	b.n	80057ea <_dtoa_r+0x1da>
 800586a:	2300      	movs	r3, #0
 800586c:	9308      	str	r3, [sp, #32]
 800586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc55      	bgt.n	8005920 <_dtoa_r+0x310>
 8005874:	2301      	movs	r3, #1
 8005876:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800587a:	461a      	mov	r2, r3
 800587c:	9209      	str	r2, [sp, #36]	; 0x24
 800587e:	e00c      	b.n	800589a <_dtoa_r+0x28a>
 8005880:	2301      	movs	r3, #1
 8005882:	e7f3      	b.n	800586c <_dtoa_r+0x25c>
 8005884:	2300      	movs	r3, #0
 8005886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	4413      	add	r3, r2
 800588e:	9302      	str	r3, [sp, #8]
 8005890:	3301      	adds	r3, #1
 8005892:	2b01      	cmp	r3, #1
 8005894:	9303      	str	r3, [sp, #12]
 8005896:	bfb8      	it	lt
 8005898:	2301      	movlt	r3, #1
 800589a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800589c:	2200      	movs	r2, #0
 800589e:	6042      	str	r2, [r0, #4]
 80058a0:	2204      	movs	r2, #4
 80058a2:	f102 0614 	add.w	r6, r2, #20
 80058a6:	429e      	cmp	r6, r3
 80058a8:	6841      	ldr	r1, [r0, #4]
 80058aa:	d93d      	bls.n	8005928 <_dtoa_r+0x318>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fdb5 	bl	800641c <_Balloc>
 80058b2:	9001      	str	r0, [sp, #4]
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d13b      	bne.n	8005930 <_dtoa_r+0x320>
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <_dtoa_r+0x2f0>)
 80058ba:	4602      	mov	r2, r0
 80058bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058c0:	e6c0      	b.n	8005644 <_dtoa_r+0x34>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7df      	b.n	8005886 <_dtoa_r+0x276>
 80058c6:	bf00      	nop
 80058c8:	636f4361 	.word	0x636f4361
 80058cc:	3fd287a7 	.word	0x3fd287a7
 80058d0:	8b60c8b3 	.word	0x8b60c8b3
 80058d4:	3fc68a28 	.word	0x3fc68a28
 80058d8:	509f79fb 	.word	0x509f79fb
 80058dc:	3fd34413 	.word	0x3fd34413
 80058e0:	0800763a 	.word	0x0800763a
 80058e4:	08007651 	.word	0x08007651
 80058e8:	7ff00000 	.word	0x7ff00000
 80058ec:	08007636 	.word	0x08007636
 80058f0:	0800762d 	.word	0x0800762d
 80058f4:	08007509 	.word	0x08007509
 80058f8:	3ff80000 	.word	0x3ff80000
 80058fc:	080077a8 	.word	0x080077a8
 8005900:	080076ac 	.word	0x080076ac
 8005904:	2501      	movs	r5, #1
 8005906:	2300      	movs	r3, #0
 8005908:	9306      	str	r3, [sp, #24]
 800590a:	9508      	str	r5, [sp, #32]
 800590c:	f04f 33ff 	mov.w	r3, #4294967295
 8005910:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005914:	2200      	movs	r2, #0
 8005916:	2312      	movs	r3, #18
 8005918:	e7b0      	b.n	800587c <_dtoa_r+0x26c>
 800591a:	2301      	movs	r3, #1
 800591c:	9308      	str	r3, [sp, #32]
 800591e:	e7f5      	b.n	800590c <_dtoa_r+0x2fc>
 8005920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005922:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005926:	e7b8      	b.n	800589a <_dtoa_r+0x28a>
 8005928:	3101      	adds	r1, #1
 800592a:	6041      	str	r1, [r0, #4]
 800592c:	0052      	lsls	r2, r2, #1
 800592e:	e7b8      	b.n	80058a2 <_dtoa_r+0x292>
 8005930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005932:	9a01      	ldr	r2, [sp, #4]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	2b0e      	cmp	r3, #14
 800593a:	f200 809d 	bhi.w	8005a78 <_dtoa_r+0x468>
 800593e:	2d00      	cmp	r5, #0
 8005940:	f000 809a 	beq.w	8005a78 <_dtoa_r+0x468>
 8005944:	9b00      	ldr	r3, [sp, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	dd32      	ble.n	80059b0 <_dtoa_r+0x3a0>
 800594a:	4ab7      	ldr	r2, [pc, #732]	; (8005c28 <_dtoa_r+0x618>)
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005958:	9b00      	ldr	r3, [sp, #0]
 800595a:	05d8      	lsls	r0, r3, #23
 800595c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005960:	d516      	bpl.n	8005990 <_dtoa_r+0x380>
 8005962:	4bb2      	ldr	r3, [pc, #712]	; (8005c2c <_dtoa_r+0x61c>)
 8005964:	ec51 0b19 	vmov	r0, r1, d9
 8005968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800596c:	f7fa ff86 	bl	800087c <__aeabi_ddiv>
 8005970:	f007 070f 	and.w	r7, r7, #15
 8005974:	4682      	mov	sl, r0
 8005976:	468b      	mov	fp, r1
 8005978:	2503      	movs	r5, #3
 800597a:	4eac      	ldr	r6, [pc, #688]	; (8005c2c <_dtoa_r+0x61c>)
 800597c:	b957      	cbnz	r7, 8005994 <_dtoa_r+0x384>
 800597e:	4642      	mov	r2, r8
 8005980:	464b      	mov	r3, r9
 8005982:	4650      	mov	r0, sl
 8005984:	4659      	mov	r1, fp
 8005986:	f7fa ff79 	bl	800087c <__aeabi_ddiv>
 800598a:	4682      	mov	sl, r0
 800598c:	468b      	mov	fp, r1
 800598e:	e028      	b.n	80059e2 <_dtoa_r+0x3d2>
 8005990:	2502      	movs	r5, #2
 8005992:	e7f2      	b.n	800597a <_dtoa_r+0x36a>
 8005994:	07f9      	lsls	r1, r7, #31
 8005996:	d508      	bpl.n	80059aa <_dtoa_r+0x39a>
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059a0:	f7fa fe42 	bl	8000628 <__aeabi_dmul>
 80059a4:	3501      	adds	r5, #1
 80059a6:	4680      	mov	r8, r0
 80059a8:	4689      	mov	r9, r1
 80059aa:	107f      	asrs	r7, r7, #1
 80059ac:	3608      	adds	r6, #8
 80059ae:	e7e5      	b.n	800597c <_dtoa_r+0x36c>
 80059b0:	f000 809b 	beq.w	8005aea <_dtoa_r+0x4da>
 80059b4:	9b00      	ldr	r3, [sp, #0]
 80059b6:	4f9d      	ldr	r7, [pc, #628]	; (8005c2c <_dtoa_r+0x61c>)
 80059b8:	425e      	negs	r6, r3
 80059ba:	4b9b      	ldr	r3, [pc, #620]	; (8005c28 <_dtoa_r+0x618>)
 80059bc:	f006 020f 	and.w	r2, r6, #15
 80059c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	ec51 0b19 	vmov	r0, r1, d9
 80059cc:	f7fa fe2c 	bl	8000628 <__aeabi_dmul>
 80059d0:	1136      	asrs	r6, r6, #4
 80059d2:	4682      	mov	sl, r0
 80059d4:	468b      	mov	fp, r1
 80059d6:	2300      	movs	r3, #0
 80059d8:	2502      	movs	r5, #2
 80059da:	2e00      	cmp	r6, #0
 80059dc:	d17a      	bne.n	8005ad4 <_dtoa_r+0x4c4>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1d3      	bne.n	800598a <_dtoa_r+0x37a>
 80059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8082 	beq.w	8005aee <_dtoa_r+0x4de>
 80059ea:	4b91      	ldr	r3, [pc, #580]	; (8005c30 <_dtoa_r+0x620>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	4650      	mov	r0, sl
 80059f0:	4659      	mov	r1, fp
 80059f2:	f7fb f88b 	bl	8000b0c <__aeabi_dcmplt>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d079      	beq.n	8005aee <_dtoa_r+0x4de>
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d076      	beq.n	8005aee <_dtoa_r+0x4de>
 8005a00:	9b02      	ldr	r3, [sp, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dd36      	ble.n	8005a74 <_dtoa_r+0x464>
 8005a06:	9b00      	ldr	r3, [sp, #0]
 8005a08:	4650      	mov	r0, sl
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	1e5f      	subs	r7, r3, #1
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4b88      	ldr	r3, [pc, #544]	; (8005c34 <_dtoa_r+0x624>)
 8005a12:	f7fa fe09 	bl	8000628 <__aeabi_dmul>
 8005a16:	9e02      	ldr	r6, [sp, #8]
 8005a18:	4682      	mov	sl, r0
 8005a1a:	468b      	mov	fp, r1
 8005a1c:	3501      	adds	r5, #1
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7fa fd98 	bl	8000554 <__aeabi_i2d>
 8005a24:	4652      	mov	r2, sl
 8005a26:	465b      	mov	r3, fp
 8005a28:	f7fa fdfe 	bl	8000628 <__aeabi_dmul>
 8005a2c:	4b82      	ldr	r3, [pc, #520]	; (8005c38 <_dtoa_r+0x628>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f7fa fc44 	bl	80002bc <__adddf3>
 8005a34:	46d0      	mov	r8, sl
 8005a36:	46d9      	mov	r9, fp
 8005a38:	4682      	mov	sl, r0
 8005a3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	d158      	bne.n	8005af4 <_dtoa_r+0x4e4>
 8005a42:	4b7e      	ldr	r3, [pc, #504]	; (8005c3c <_dtoa_r+0x62c>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	4640      	mov	r0, r8
 8005a48:	4649      	mov	r1, r9
 8005a4a:	f7fa fc35 	bl	80002b8 <__aeabi_dsub>
 8005a4e:	4652      	mov	r2, sl
 8005a50:	465b      	mov	r3, fp
 8005a52:	4680      	mov	r8, r0
 8005a54:	4689      	mov	r9, r1
 8005a56:	f7fb f877 	bl	8000b48 <__aeabi_dcmpgt>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f040 8295 	bne.w	8005f8a <_dtoa_r+0x97a>
 8005a60:	4652      	mov	r2, sl
 8005a62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a66:	4640      	mov	r0, r8
 8005a68:	4649      	mov	r1, r9
 8005a6a:	f7fb f84f 	bl	8000b0c <__aeabi_dcmplt>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f040 8289 	bne.w	8005f86 <_dtoa_r+0x976>
 8005a74:	ec5b ab19 	vmov	sl, fp, d9
 8005a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f2c0 8148 	blt.w	8005d10 <_dtoa_r+0x700>
 8005a80:	9a00      	ldr	r2, [sp, #0]
 8005a82:	2a0e      	cmp	r2, #14
 8005a84:	f300 8144 	bgt.w	8005d10 <_dtoa_r+0x700>
 8005a88:	4b67      	ldr	r3, [pc, #412]	; (8005c28 <_dtoa_r+0x618>)
 8005a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f280 80d5 	bge.w	8005c44 <_dtoa_r+0x634>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f300 80d1 	bgt.w	8005c44 <_dtoa_r+0x634>
 8005aa2:	f040 826f 	bne.w	8005f84 <_dtoa_r+0x974>
 8005aa6:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <_dtoa_r+0x62c>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fa fdbb 	bl	8000628 <__aeabi_dmul>
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	f7fb f83d 	bl	8000b34 <__aeabi_dcmpge>
 8005aba:	9e03      	ldr	r6, [sp, #12]
 8005abc:	4637      	mov	r7, r6
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f040 8245 	bne.w	8005f4e <_dtoa_r+0x93e>
 8005ac4:	9d01      	ldr	r5, [sp, #4]
 8005ac6:	2331      	movs	r3, #49	; 0x31
 8005ac8:	f805 3b01 	strb.w	r3, [r5], #1
 8005acc:	9b00      	ldr	r3, [sp, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	e240      	b.n	8005f56 <_dtoa_r+0x946>
 8005ad4:	07f2      	lsls	r2, r6, #31
 8005ad6:	d505      	bpl.n	8005ae4 <_dtoa_r+0x4d4>
 8005ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005adc:	f7fa fda4 	bl	8000628 <__aeabi_dmul>
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	1076      	asrs	r6, r6, #1
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	e777      	b.n	80059da <_dtoa_r+0x3ca>
 8005aea:	2502      	movs	r5, #2
 8005aec:	e779      	b.n	80059e2 <_dtoa_r+0x3d2>
 8005aee:	9f00      	ldr	r7, [sp, #0]
 8005af0:	9e03      	ldr	r6, [sp, #12]
 8005af2:	e794      	b.n	8005a1e <_dtoa_r+0x40e>
 8005af4:	9901      	ldr	r1, [sp, #4]
 8005af6:	4b4c      	ldr	r3, [pc, #304]	; (8005c28 <_dtoa_r+0x618>)
 8005af8:	4431      	add	r1, r6
 8005afa:	910d      	str	r1, [sp, #52]	; 0x34
 8005afc:	9908      	ldr	r1, [sp, #32]
 8005afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d043      	beq.n	8005b92 <_dtoa_r+0x582>
 8005b0a:	494d      	ldr	r1, [pc, #308]	; (8005c40 <_dtoa_r+0x630>)
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f7fa feb5 	bl	800087c <__aeabi_ddiv>
 8005b12:	4652      	mov	r2, sl
 8005b14:	465b      	mov	r3, fp
 8005b16:	f7fa fbcf 	bl	80002b8 <__aeabi_dsub>
 8005b1a:	9d01      	ldr	r5, [sp, #4]
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	468b      	mov	fp, r1
 8005b20:	4649      	mov	r1, r9
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7fb f830 	bl	8000b88 <__aeabi_d2iz>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	f7fa fd13 	bl	8000554 <__aeabi_i2d>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fbbf 	bl	80002b8 <__aeabi_dsub>
 8005b3a:	3630      	adds	r6, #48	; 0x30
 8005b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b40:	4652      	mov	r2, sl
 8005b42:	465b      	mov	r3, fp
 8005b44:	4680      	mov	r8, r0
 8005b46:	4689      	mov	r9, r1
 8005b48:	f7fa ffe0 	bl	8000b0c <__aeabi_dcmplt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d163      	bne.n	8005c18 <_dtoa_r+0x608>
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	4936      	ldr	r1, [pc, #216]	; (8005c30 <_dtoa_r+0x620>)
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fa fbae 	bl	80002b8 <__aeabi_dsub>
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	465b      	mov	r3, fp
 8005b60:	f7fa ffd4 	bl	8000b0c <__aeabi_dcmplt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f040 80b5 	bne.w	8005cd4 <_dtoa_r+0x6c4>
 8005b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b6c:	429d      	cmp	r5, r3
 8005b6e:	d081      	beq.n	8005a74 <_dtoa_r+0x464>
 8005b70:	4b30      	ldr	r3, [pc, #192]	; (8005c34 <_dtoa_r+0x624>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	4650      	mov	r0, sl
 8005b76:	4659      	mov	r1, fp
 8005b78:	f7fa fd56 	bl	8000628 <__aeabi_dmul>
 8005b7c:	4b2d      	ldr	r3, [pc, #180]	; (8005c34 <_dtoa_r+0x624>)
 8005b7e:	4682      	mov	sl, r0
 8005b80:	468b      	mov	fp, r1
 8005b82:	4640      	mov	r0, r8
 8005b84:	4649      	mov	r1, r9
 8005b86:	2200      	movs	r2, #0
 8005b88:	f7fa fd4e 	bl	8000628 <__aeabi_dmul>
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	4689      	mov	r9, r1
 8005b90:	e7c6      	b.n	8005b20 <_dtoa_r+0x510>
 8005b92:	4650      	mov	r0, sl
 8005b94:	4659      	mov	r1, fp
 8005b96:	f7fa fd47 	bl	8000628 <__aeabi_dmul>
 8005b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b9c:	9d01      	ldr	r5, [sp, #4]
 8005b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	468b      	mov	fp, r1
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f7fa ffee 	bl	8000b88 <__aeabi_d2iz>
 8005bac:	4606      	mov	r6, r0
 8005bae:	f7fa fcd1 	bl	8000554 <__aeabi_i2d>
 8005bb2:	3630      	adds	r6, #48	; 0x30
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa fb7c 	bl	80002b8 <__aeabi_dsub>
 8005bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc6:	429d      	cmp	r5, r3
 8005bc8:	4680      	mov	r8, r0
 8005bca:	4689      	mov	r9, r1
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	d124      	bne.n	8005c1c <_dtoa_r+0x60c>
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <_dtoa_r+0x630>)
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	f7fa fb70 	bl	80002bc <__adddf3>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa ffb0 	bl	8000b48 <__aeabi_dcmpgt>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d173      	bne.n	8005cd4 <_dtoa_r+0x6c4>
 8005bec:	4652      	mov	r2, sl
 8005bee:	465b      	mov	r3, fp
 8005bf0:	4913      	ldr	r1, [pc, #76]	; (8005c40 <_dtoa_r+0x630>)
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f7fa fb60 	bl	80002b8 <__aeabi_dsub>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4649      	mov	r1, r9
 8005c00:	f7fa ff84 	bl	8000b0c <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f43f af35 	beq.w	8005a74 <_dtoa_r+0x464>
 8005c0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c0c:	1e6b      	subs	r3, r5, #1
 8005c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d0f8      	beq.n	8005c0a <_dtoa_r+0x5fa>
 8005c18:	9700      	str	r7, [sp, #0]
 8005c1a:	e049      	b.n	8005cb0 <_dtoa_r+0x6a0>
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <_dtoa_r+0x624>)
 8005c1e:	f7fa fd03 	bl	8000628 <__aeabi_dmul>
 8005c22:	4680      	mov	r8, r0
 8005c24:	4689      	mov	r9, r1
 8005c26:	e7bd      	b.n	8005ba4 <_dtoa_r+0x594>
 8005c28:	080077a8 	.word	0x080077a8
 8005c2c:	08007780 	.word	0x08007780
 8005c30:	3ff00000 	.word	0x3ff00000
 8005c34:	40240000 	.word	0x40240000
 8005c38:	401c0000 	.word	0x401c0000
 8005c3c:	40140000 	.word	0x40140000
 8005c40:	3fe00000 	.word	0x3fe00000
 8005c44:	9d01      	ldr	r5, [sp, #4]
 8005c46:	4656      	mov	r6, sl
 8005c48:	465f      	mov	r7, fp
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa fe13 	bl	800087c <__aeabi_ddiv>
 8005c56:	f7fa ff97 	bl	8000b88 <__aeabi_d2iz>
 8005c5a:	4682      	mov	sl, r0
 8005c5c:	f7fa fc7a 	bl	8000554 <__aeabi_i2d>
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	f7fa fce0 	bl	8000628 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005c74:	f7fa fb20 	bl	80002b8 <__aeabi_dsub>
 8005c78:	f805 6b01 	strb.w	r6, [r5], #1
 8005c7c:	9e01      	ldr	r6, [sp, #4]
 8005c7e:	9f03      	ldr	r7, [sp, #12]
 8005c80:	1bae      	subs	r6, r5, r6
 8005c82:	42b7      	cmp	r7, r6
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	d135      	bne.n	8005cf6 <_dtoa_r+0x6e6>
 8005c8a:	f7fa fb17 	bl	80002bc <__adddf3>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	4606      	mov	r6, r0
 8005c94:	460f      	mov	r7, r1
 8005c96:	f7fa ff57 	bl	8000b48 <__aeabi_dcmpgt>
 8005c9a:	b9d0      	cbnz	r0, 8005cd2 <_dtoa_r+0x6c2>
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa ff28 	bl	8000af8 <__aeabi_dcmpeq>
 8005ca8:	b110      	cbz	r0, 8005cb0 <_dtoa_r+0x6a0>
 8005caa:	f01a 0f01 	tst.w	sl, #1
 8005cae:	d110      	bne.n	8005cd2 <_dtoa_r+0x6c2>
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	ee18 1a10 	vmov	r1, s16
 8005cb6:	f000 fbf1 	bl	800649c <_Bfree>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9800      	ldr	r0, [sp, #0]
 8005cbe:	702b      	strb	r3, [r5, #0]
 8005cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	6018      	str	r0, [r3, #0]
 8005cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f43f acf1 	beq.w	80056b0 <_dtoa_r+0xa0>
 8005cce:	601d      	str	r5, [r3, #0]
 8005cd0:	e4ee      	b.n	80056b0 <_dtoa_r+0xa0>
 8005cd2:	9f00      	ldr	r7, [sp, #0]
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cdc:	2a39      	cmp	r2, #57	; 0x39
 8005cde:	d106      	bne.n	8005cee <_dtoa_r+0x6de>
 8005ce0:	9a01      	ldr	r2, [sp, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d1f7      	bne.n	8005cd6 <_dtoa_r+0x6c6>
 8005ce6:	9901      	ldr	r1, [sp, #4]
 8005ce8:	2230      	movs	r2, #48	; 0x30
 8005cea:	3701      	adds	r7, #1
 8005cec:	700a      	strb	r2, [r1, #0]
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	3201      	adds	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e790      	b.n	8005c18 <_dtoa_r+0x608>
 8005cf6:	4ba6      	ldr	r3, [pc, #664]	; (8005f90 <_dtoa_r+0x980>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f7fa fc95 	bl	8000628 <__aeabi_dmul>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2300      	movs	r3, #0
 8005d02:	4606      	mov	r6, r0
 8005d04:	460f      	mov	r7, r1
 8005d06:	f7fa fef7 	bl	8000af8 <__aeabi_dcmpeq>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d09d      	beq.n	8005c4a <_dtoa_r+0x63a>
 8005d0e:	e7cf      	b.n	8005cb0 <_dtoa_r+0x6a0>
 8005d10:	9a08      	ldr	r2, [sp, #32]
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	f000 80d7 	beq.w	8005ec6 <_dtoa_r+0x8b6>
 8005d18:	9a06      	ldr	r2, [sp, #24]
 8005d1a:	2a01      	cmp	r2, #1
 8005d1c:	f300 80ba 	bgt.w	8005e94 <_dtoa_r+0x884>
 8005d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	f000 80b2 	beq.w	8005e8c <_dtoa_r+0x87c>
 8005d28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d2c:	9e07      	ldr	r6, [sp, #28]
 8005d2e:	9d04      	ldr	r5, [sp, #16]
 8005d30:	9a04      	ldr	r2, [sp, #16]
 8005d32:	441a      	add	r2, r3
 8005d34:	9204      	str	r2, [sp, #16]
 8005d36:	9a05      	ldr	r2, [sp, #20]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	441a      	add	r2, r3
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	9205      	str	r2, [sp, #20]
 8005d40:	f000 fc64 	bl	800660c <__i2b>
 8005d44:	4607      	mov	r7, r0
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	dd0c      	ble.n	8005d64 <_dtoa_r+0x754>
 8005d4a:	9b05      	ldr	r3, [sp, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd09      	ble.n	8005d64 <_dtoa_r+0x754>
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	bfa8      	it	ge
 8005d56:	462b      	movge	r3, r5
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	9204      	str	r2, [sp, #16]
 8005d5c:	9a05      	ldr	r2, [sp, #20]
 8005d5e:	1aed      	subs	r5, r5, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	9b07      	ldr	r3, [sp, #28]
 8005d66:	b31b      	cbz	r3, 8005db0 <_dtoa_r+0x7a0>
 8005d68:	9b08      	ldr	r3, [sp, #32]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80af 	beq.w	8005ece <_dtoa_r+0x8be>
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	dd13      	ble.n	8005d9c <_dtoa_r+0x78c>
 8005d74:	4639      	mov	r1, r7
 8005d76:	4632      	mov	r2, r6
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fd07 	bl	800678c <__pow5mult>
 8005d7e:	ee18 2a10 	vmov	r2, s16
 8005d82:	4601      	mov	r1, r0
 8005d84:	4607      	mov	r7, r0
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 fc56 	bl	8006638 <__multiply>
 8005d8c:	ee18 1a10 	vmov	r1, s16
 8005d90:	4680      	mov	r8, r0
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 fb82 	bl	800649c <_Bfree>
 8005d98:	ee08 8a10 	vmov	s16, r8
 8005d9c:	9b07      	ldr	r3, [sp, #28]
 8005d9e:	1b9a      	subs	r2, r3, r6
 8005da0:	d006      	beq.n	8005db0 <_dtoa_r+0x7a0>
 8005da2:	ee18 1a10 	vmov	r1, s16
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fcf0 	bl	800678c <__pow5mult>
 8005dac:	ee08 0a10 	vmov	s16, r0
 8005db0:	2101      	movs	r1, #1
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 fc2a 	bl	800660c <__i2b>
 8005db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	f340 8088 	ble.w	8005ed2 <_dtoa_r+0x8c2>
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 fce0 	bl	800678c <__pow5mult>
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	f340 8081 	ble.w	8005ed8 <_dtoa_r+0x8c8>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	6933      	ldr	r3, [r6, #16]
 8005ddc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005de0:	6918      	ldr	r0, [r3, #16]
 8005de2:	f000 fbc3 	bl	800656c <__hi0bits>
 8005de6:	f1c0 0020 	rsb	r0, r0, #32
 8005dea:	9b05      	ldr	r3, [sp, #20]
 8005dec:	4418      	add	r0, r3
 8005dee:	f010 001f 	ands.w	r0, r0, #31
 8005df2:	f000 8092 	beq.w	8005f1a <_dtoa_r+0x90a>
 8005df6:	f1c0 0320 	rsb	r3, r0, #32
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	f340 808a 	ble.w	8005f14 <_dtoa_r+0x904>
 8005e00:	f1c0 001c 	rsb	r0, r0, #28
 8005e04:	9b04      	ldr	r3, [sp, #16]
 8005e06:	4403      	add	r3, r0
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	9b05      	ldr	r3, [sp, #20]
 8005e0c:	4403      	add	r3, r0
 8005e0e:	4405      	add	r5, r0
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	9b04      	ldr	r3, [sp, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dd07      	ble.n	8005e28 <_dtoa_r+0x818>
 8005e18:	ee18 1a10 	vmov	r1, s16
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 fd0e 	bl	8006840 <__lshift>
 8005e24:	ee08 0a10 	vmov	s16, r0
 8005e28:	9b05      	ldr	r3, [sp, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dd05      	ble.n	8005e3a <_dtoa_r+0x82a>
 8005e2e:	4631      	mov	r1, r6
 8005e30:	461a      	mov	r2, r3
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 fd04 	bl	8006840 <__lshift>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d06e      	beq.n	8005f1e <_dtoa_r+0x90e>
 8005e40:	ee18 0a10 	vmov	r0, s16
 8005e44:	4631      	mov	r1, r6
 8005e46:	f000 fd6b 	bl	8006920 <__mcmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	da67      	bge.n	8005f1e <_dtoa_r+0x90e>
 8005e4e:	9b00      	ldr	r3, [sp, #0]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	ee18 1a10 	vmov	r1, s16
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	220a      	movs	r2, #10
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fb3f 	bl	80064e0 <__multadd>
 8005e62:	9b08      	ldr	r3, [sp, #32]
 8005e64:	ee08 0a10 	vmov	s16, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 81b1 	beq.w	80061d0 <_dtoa_r+0xbc0>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4639      	mov	r1, r7
 8005e72:	220a      	movs	r2, #10
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fb33 	bl	80064e0 <__multadd>
 8005e7a:	9b02      	ldr	r3, [sp, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	4607      	mov	r7, r0
 8005e80:	f300 808e 	bgt.w	8005fa0 <_dtoa_r+0x990>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	dc51      	bgt.n	8005f2e <_dtoa_r+0x91e>
 8005e8a:	e089      	b.n	8005fa0 <_dtoa_r+0x990>
 8005e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e92:	e74b      	b.n	8005d2c <_dtoa_r+0x71c>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	1e5e      	subs	r6, r3, #1
 8005e98:	9b07      	ldr	r3, [sp, #28]
 8005e9a:	42b3      	cmp	r3, r6
 8005e9c:	bfbf      	itttt	lt
 8005e9e:	9b07      	ldrlt	r3, [sp, #28]
 8005ea0:	9607      	strlt	r6, [sp, #28]
 8005ea2:	1af2      	sublt	r2, r6, r3
 8005ea4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ea6:	bfb6      	itet	lt
 8005ea8:	189b      	addlt	r3, r3, r2
 8005eaa:	1b9e      	subge	r6, r3, r6
 8005eac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	bfb8      	it	lt
 8005eb2:	2600      	movlt	r6, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb7      	itett	lt
 8005eb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ebc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ec0:	1a9d      	sublt	r5, r3, r2
 8005ec2:	2300      	movlt	r3, #0
 8005ec4:	e734      	b.n	8005d30 <_dtoa_r+0x720>
 8005ec6:	9e07      	ldr	r6, [sp, #28]
 8005ec8:	9d04      	ldr	r5, [sp, #16]
 8005eca:	9f08      	ldr	r7, [sp, #32]
 8005ecc:	e73b      	b.n	8005d46 <_dtoa_r+0x736>
 8005ece:	9a07      	ldr	r2, [sp, #28]
 8005ed0:	e767      	b.n	8005da2 <_dtoa_r+0x792>
 8005ed2:	9b06      	ldr	r3, [sp, #24]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	dc18      	bgt.n	8005f0a <_dtoa_r+0x8fa>
 8005ed8:	f1ba 0f00 	cmp.w	sl, #0
 8005edc:	d115      	bne.n	8005f0a <_dtoa_r+0x8fa>
 8005ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ee2:	b993      	cbnz	r3, 8005f0a <_dtoa_r+0x8fa>
 8005ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ee8:	0d1b      	lsrs	r3, r3, #20
 8005eea:	051b      	lsls	r3, r3, #20
 8005eec:	b183      	cbz	r3, 8005f10 <_dtoa_r+0x900>
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	9b05      	ldr	r3, [sp, #20]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	9305      	str	r3, [sp, #20]
 8005efa:	f04f 0801 	mov.w	r8, #1
 8005efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f af6a 	bne.w	8005dda <_dtoa_r+0x7ca>
 8005f06:	2001      	movs	r0, #1
 8005f08:	e76f      	b.n	8005dea <_dtoa_r+0x7da>
 8005f0a:	f04f 0800 	mov.w	r8, #0
 8005f0e:	e7f6      	b.n	8005efe <_dtoa_r+0x8ee>
 8005f10:	4698      	mov	r8, r3
 8005f12:	e7f4      	b.n	8005efe <_dtoa_r+0x8ee>
 8005f14:	f43f af7d 	beq.w	8005e12 <_dtoa_r+0x802>
 8005f18:	4618      	mov	r0, r3
 8005f1a:	301c      	adds	r0, #28
 8005f1c:	e772      	b.n	8005e04 <_dtoa_r+0x7f4>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc37      	bgt.n	8005f94 <_dtoa_r+0x984>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	dd34      	ble.n	8005f94 <_dtoa_r+0x984>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	9302      	str	r3, [sp, #8]
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	b96b      	cbnz	r3, 8005f4e <_dtoa_r+0x93e>
 8005f32:	4631      	mov	r1, r6
 8005f34:	2205      	movs	r2, #5
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fad2 	bl	80064e0 <__multadd>
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	4606      	mov	r6, r0
 8005f40:	ee18 0a10 	vmov	r0, s16
 8005f44:	f000 fcec 	bl	8006920 <__mcmp>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f73f adbb 	bgt.w	8005ac4 <_dtoa_r+0x4b4>
 8005f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f50:	9d01      	ldr	r5, [sp, #4]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	f04f 0800 	mov.w	r8, #0
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 fa9d 	bl	800649c <_Bfree>
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	f43f aea4 	beq.w	8005cb0 <_dtoa_r+0x6a0>
 8005f68:	f1b8 0f00 	cmp.w	r8, #0
 8005f6c:	d005      	beq.n	8005f7a <_dtoa_r+0x96a>
 8005f6e:	45b8      	cmp	r8, r7
 8005f70:	d003      	beq.n	8005f7a <_dtoa_r+0x96a>
 8005f72:	4641      	mov	r1, r8
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 fa91 	bl	800649c <_Bfree>
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fa8d 	bl	800649c <_Bfree>
 8005f82:	e695      	b.n	8005cb0 <_dtoa_r+0x6a0>
 8005f84:	2600      	movs	r6, #0
 8005f86:	4637      	mov	r7, r6
 8005f88:	e7e1      	b.n	8005f4e <_dtoa_r+0x93e>
 8005f8a:	9700      	str	r7, [sp, #0]
 8005f8c:	4637      	mov	r7, r6
 8005f8e:	e599      	b.n	8005ac4 <_dtoa_r+0x4b4>
 8005f90:	40240000 	.word	0x40240000
 8005f94:	9b08      	ldr	r3, [sp, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80ca 	beq.w	8006130 <_dtoa_r+0xb20>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	9302      	str	r3, [sp, #8]
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	dd05      	ble.n	8005fb0 <_dtoa_r+0x9a0>
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	462a      	mov	r2, r5
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fc49 	bl	8006840 <__lshift>
 8005fae:	4607      	mov	r7, r0
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	d05b      	beq.n	800606e <_dtoa_r+0xa5e>
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fa2f 	bl	800641c <_Balloc>
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	b928      	cbnz	r0, 8005fce <_dtoa_r+0x9be>
 8005fc2:	4b87      	ldr	r3, [pc, #540]	; (80061e0 <_dtoa_r+0xbd0>)
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fca:	f7ff bb3b 	b.w	8005644 <_dtoa_r+0x34>
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	3202      	adds	r2, #2
 8005fd2:	0092      	lsls	r2, r2, #2
 8005fd4:	f107 010c 	add.w	r1, r7, #12
 8005fd8:	300c      	adds	r0, #12
 8005fda:	f000 fa04 	bl	80063e6 <memcpy>
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 fc2c 	bl	8006840 <__lshift>
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	f103 0901 	add.w	r9, r3, #1
 8005fee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	f00a 0301 	and.w	r3, sl, #1
 8005ffa:	46b8      	mov	r8, r7
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	4607      	mov	r7, r0
 8006000:	4631      	mov	r1, r6
 8006002:	ee18 0a10 	vmov	r0, s16
 8006006:	f7ff fa75 	bl	80054f4 <quorem>
 800600a:	4641      	mov	r1, r8
 800600c:	9002      	str	r0, [sp, #8]
 800600e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006012:	ee18 0a10 	vmov	r0, s16
 8006016:	f000 fc83 	bl	8006920 <__mcmp>
 800601a:	463a      	mov	r2, r7
 800601c:	9003      	str	r0, [sp, #12]
 800601e:	4631      	mov	r1, r6
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fc99 	bl	8006958 <__mdiff>
 8006026:	68c2      	ldr	r2, [r0, #12]
 8006028:	f109 3bff 	add.w	fp, r9, #4294967295
 800602c:	4605      	mov	r5, r0
 800602e:	bb02      	cbnz	r2, 8006072 <_dtoa_r+0xa62>
 8006030:	4601      	mov	r1, r0
 8006032:	ee18 0a10 	vmov	r0, s16
 8006036:	f000 fc73 	bl	8006920 <__mcmp>
 800603a:	4602      	mov	r2, r0
 800603c:	4629      	mov	r1, r5
 800603e:	4620      	mov	r0, r4
 8006040:	9207      	str	r2, [sp, #28]
 8006042:	f000 fa2b 	bl	800649c <_Bfree>
 8006046:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800604a:	ea43 0102 	orr.w	r1, r3, r2
 800604e:	9b04      	ldr	r3, [sp, #16]
 8006050:	430b      	orrs	r3, r1
 8006052:	464d      	mov	r5, r9
 8006054:	d10f      	bne.n	8006076 <_dtoa_r+0xa66>
 8006056:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800605a:	d02a      	beq.n	80060b2 <_dtoa_r+0xaa2>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd02      	ble.n	8006068 <_dtoa_r+0xa58>
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006068:	f88b a000 	strb.w	sl, [fp]
 800606c:	e775      	b.n	8005f5a <_dtoa_r+0x94a>
 800606e:	4638      	mov	r0, r7
 8006070:	e7ba      	b.n	8005fe8 <_dtoa_r+0x9d8>
 8006072:	2201      	movs	r2, #1
 8006074:	e7e2      	b.n	800603c <_dtoa_r+0xa2c>
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	db04      	blt.n	8006086 <_dtoa_r+0xa76>
 800607c:	9906      	ldr	r1, [sp, #24]
 800607e:	430b      	orrs	r3, r1
 8006080:	9904      	ldr	r1, [sp, #16]
 8006082:	430b      	orrs	r3, r1
 8006084:	d122      	bne.n	80060cc <_dtoa_r+0xabc>
 8006086:	2a00      	cmp	r2, #0
 8006088:	ddee      	ble.n	8006068 <_dtoa_r+0xa58>
 800608a:	ee18 1a10 	vmov	r1, s16
 800608e:	2201      	movs	r2, #1
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fbd5 	bl	8006840 <__lshift>
 8006096:	4631      	mov	r1, r6
 8006098:	ee08 0a10 	vmov	s16, r0
 800609c:	f000 fc40 	bl	8006920 <__mcmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	dc03      	bgt.n	80060ac <_dtoa_r+0xa9c>
 80060a4:	d1e0      	bne.n	8006068 <_dtoa_r+0xa58>
 80060a6:	f01a 0f01 	tst.w	sl, #1
 80060aa:	d0dd      	beq.n	8006068 <_dtoa_r+0xa58>
 80060ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060b0:	d1d7      	bne.n	8006062 <_dtoa_r+0xa52>
 80060b2:	2339      	movs	r3, #57	; 0x39
 80060b4:	f88b 3000 	strb.w	r3, [fp]
 80060b8:	462b      	mov	r3, r5
 80060ba:	461d      	mov	r5, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060c2:	2a39      	cmp	r2, #57	; 0x39
 80060c4:	d071      	beq.n	80061aa <_dtoa_r+0xb9a>
 80060c6:	3201      	adds	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e746      	b.n	8005f5a <_dtoa_r+0x94a>
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	dd07      	ble.n	80060e0 <_dtoa_r+0xad0>
 80060d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060d4:	d0ed      	beq.n	80060b2 <_dtoa_r+0xaa2>
 80060d6:	f10a 0301 	add.w	r3, sl, #1
 80060da:	f88b 3000 	strb.w	r3, [fp]
 80060de:	e73c      	b.n	8005f5a <_dtoa_r+0x94a>
 80060e0:	9b05      	ldr	r3, [sp, #20]
 80060e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80060e6:	4599      	cmp	r9, r3
 80060e8:	d047      	beq.n	800617a <_dtoa_r+0xb6a>
 80060ea:	ee18 1a10 	vmov	r1, s16
 80060ee:	2300      	movs	r3, #0
 80060f0:	220a      	movs	r2, #10
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 f9f4 	bl	80064e0 <__multadd>
 80060f8:	45b8      	cmp	r8, r7
 80060fa:	ee08 0a10 	vmov	s16, r0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	f04f 020a 	mov.w	r2, #10
 8006106:	4641      	mov	r1, r8
 8006108:	4620      	mov	r0, r4
 800610a:	d106      	bne.n	800611a <_dtoa_r+0xb0a>
 800610c:	f000 f9e8 	bl	80064e0 <__multadd>
 8006110:	4680      	mov	r8, r0
 8006112:	4607      	mov	r7, r0
 8006114:	f109 0901 	add.w	r9, r9, #1
 8006118:	e772      	b.n	8006000 <_dtoa_r+0x9f0>
 800611a:	f000 f9e1 	bl	80064e0 <__multadd>
 800611e:	4639      	mov	r1, r7
 8006120:	4680      	mov	r8, r0
 8006122:	2300      	movs	r3, #0
 8006124:	220a      	movs	r2, #10
 8006126:	4620      	mov	r0, r4
 8006128:	f000 f9da 	bl	80064e0 <__multadd>
 800612c:	4607      	mov	r7, r0
 800612e:	e7f1      	b.n	8006114 <_dtoa_r+0xb04>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	9d01      	ldr	r5, [sp, #4]
 8006136:	ee18 0a10 	vmov	r0, s16
 800613a:	4631      	mov	r1, r6
 800613c:	f7ff f9da 	bl	80054f4 <quorem>
 8006140:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006144:	9b01      	ldr	r3, [sp, #4]
 8006146:	f805 ab01 	strb.w	sl, [r5], #1
 800614a:	1aea      	subs	r2, r5, r3
 800614c:	9b02      	ldr	r3, [sp, #8]
 800614e:	4293      	cmp	r3, r2
 8006150:	dd09      	ble.n	8006166 <_dtoa_r+0xb56>
 8006152:	ee18 1a10 	vmov	r1, s16
 8006156:	2300      	movs	r3, #0
 8006158:	220a      	movs	r2, #10
 800615a:	4620      	mov	r0, r4
 800615c:	f000 f9c0 	bl	80064e0 <__multadd>
 8006160:	ee08 0a10 	vmov	s16, r0
 8006164:	e7e7      	b.n	8006136 <_dtoa_r+0xb26>
 8006166:	9b02      	ldr	r3, [sp, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	bfc8      	it	gt
 800616c:	461d      	movgt	r5, r3
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	bfd8      	it	le
 8006172:	2501      	movle	r5, #1
 8006174:	441d      	add	r5, r3
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	ee18 1a10 	vmov	r1, s16
 800617e:	2201      	movs	r2, #1
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fb5d 	bl	8006840 <__lshift>
 8006186:	4631      	mov	r1, r6
 8006188:	ee08 0a10 	vmov	s16, r0
 800618c:	f000 fbc8 	bl	8006920 <__mcmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	dc91      	bgt.n	80060b8 <_dtoa_r+0xaa8>
 8006194:	d102      	bne.n	800619c <_dtoa_r+0xb8c>
 8006196:	f01a 0f01 	tst.w	sl, #1
 800619a:	d18d      	bne.n	80060b8 <_dtoa_r+0xaa8>
 800619c:	462b      	mov	r3, r5
 800619e:	461d      	mov	r5, r3
 80061a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061a4:	2a30      	cmp	r2, #48	; 0x30
 80061a6:	d0fa      	beq.n	800619e <_dtoa_r+0xb8e>
 80061a8:	e6d7      	b.n	8005f5a <_dtoa_r+0x94a>
 80061aa:	9a01      	ldr	r2, [sp, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d184      	bne.n	80060ba <_dtoa_r+0xaaa>
 80061b0:	9b00      	ldr	r3, [sp, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2331      	movs	r3, #49	; 0x31
 80061b8:	7013      	strb	r3, [r2, #0]
 80061ba:	e6ce      	b.n	8005f5a <_dtoa_r+0x94a>
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <_dtoa_r+0xbd4>)
 80061be:	f7ff ba95 	b.w	80056ec <_dtoa_r+0xdc>
 80061c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f47f aa6e 	bne.w	80056a6 <_dtoa_r+0x96>
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <_dtoa_r+0xbd8>)
 80061cc:	f7ff ba8e 	b.w	80056ec <_dtoa_r+0xdc>
 80061d0:	9b02      	ldr	r3, [sp, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dcae      	bgt.n	8006134 <_dtoa_r+0xb24>
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f73f aea8 	bgt.w	8005f2e <_dtoa_r+0x91e>
 80061de:	e7a9      	b.n	8006134 <_dtoa_r+0xb24>
 80061e0:	080076ac 	.word	0x080076ac
 80061e4:	08007508 	.word	0x08007508
 80061e8:	0800762d 	.word	0x0800762d

080061ec <std>:
 80061ec:	2300      	movs	r3, #0
 80061ee:	b510      	push	{r4, lr}
 80061f0:	4604      	mov	r4, r0
 80061f2:	e9c0 3300 	strd	r3, r3, [r0]
 80061f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061fa:	6083      	str	r3, [r0, #8]
 80061fc:	8181      	strh	r1, [r0, #12]
 80061fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006200:	81c2      	strh	r2, [r0, #14]
 8006202:	6183      	str	r3, [r0, #24]
 8006204:	4619      	mov	r1, r3
 8006206:	2208      	movs	r2, #8
 8006208:	305c      	adds	r0, #92	; 0x5c
 800620a:	f7fe fb57 	bl	80048bc <memset>
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <std+0x38>)
 8006210:	6263      	str	r3, [r4, #36]	; 0x24
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <std+0x3c>)
 8006214:	62a3      	str	r3, [r4, #40]	; 0x28
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <std+0x40>)
 8006218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <std+0x44>)
 800621c:	6224      	str	r4, [r4, #32]
 800621e:	6323      	str	r3, [r4, #48]	; 0x30
 8006220:	bd10      	pop	{r4, pc}
 8006222:	bf00      	nop
 8006224:	08006dd9 	.word	0x08006dd9
 8006228:	08006dfb 	.word	0x08006dfb
 800622c:	08006e33 	.word	0x08006e33
 8006230:	08006e57 	.word	0x08006e57

08006234 <_cleanup_r>:
 8006234:	4901      	ldr	r1, [pc, #4]	; (800623c <_cleanup_r+0x8>)
 8006236:	f000 b8af 	b.w	8006398 <_fwalk_reent>
 800623a:	bf00      	nop
 800623c:	0800716d 	.word	0x0800716d

08006240 <__sfmoreglue>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	2268      	movs	r2, #104	; 0x68
 8006244:	1e4d      	subs	r5, r1, #1
 8006246:	4355      	muls	r5, r2
 8006248:	460e      	mov	r6, r1
 800624a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800624e:	f7fe fbbf 	bl	80049d0 <_malloc_r>
 8006252:	4604      	mov	r4, r0
 8006254:	b140      	cbz	r0, 8006268 <__sfmoreglue+0x28>
 8006256:	2100      	movs	r1, #0
 8006258:	e9c0 1600 	strd	r1, r6, [r0]
 800625c:	300c      	adds	r0, #12
 800625e:	60a0      	str	r0, [r4, #8]
 8006260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006264:	f7fe fb2a 	bl	80048bc <memset>
 8006268:	4620      	mov	r0, r4
 800626a:	bd70      	pop	{r4, r5, r6, pc}

0800626c <__sfp_lock_acquire>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__sfp_lock_acquire+0x8>)
 800626e:	f000 b8b8 	b.w	80063e2 <__retarget_lock_acquire_recursive>
 8006272:	bf00      	nop
 8006274:	200002a1 	.word	0x200002a1

08006278 <__sfp_lock_release>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__sfp_lock_release+0x8>)
 800627a:	f000 b8b3 	b.w	80063e4 <__retarget_lock_release_recursive>
 800627e:	bf00      	nop
 8006280:	200002a1 	.word	0x200002a1

08006284 <__sinit_lock_acquire>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__sinit_lock_acquire+0x8>)
 8006286:	f000 b8ac 	b.w	80063e2 <__retarget_lock_acquire_recursive>
 800628a:	bf00      	nop
 800628c:	200002a2 	.word	0x200002a2

08006290 <__sinit_lock_release>:
 8006290:	4801      	ldr	r0, [pc, #4]	; (8006298 <__sinit_lock_release+0x8>)
 8006292:	f000 b8a7 	b.w	80063e4 <__retarget_lock_release_recursive>
 8006296:	bf00      	nop
 8006298:	200002a2 	.word	0x200002a2

0800629c <__sinit>:
 800629c:	b510      	push	{r4, lr}
 800629e:	4604      	mov	r4, r0
 80062a0:	f7ff fff0 	bl	8006284 <__sinit_lock_acquire>
 80062a4:	69a3      	ldr	r3, [r4, #24]
 80062a6:	b11b      	cbz	r3, 80062b0 <__sinit+0x14>
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ac:	f7ff bff0 	b.w	8006290 <__sinit_lock_release>
 80062b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062b4:	6523      	str	r3, [r4, #80]	; 0x50
 80062b6:	4b13      	ldr	r3, [pc, #76]	; (8006304 <__sinit+0x68>)
 80062b8:	4a13      	ldr	r2, [pc, #76]	; (8006308 <__sinit+0x6c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80062be:	42a3      	cmp	r3, r4
 80062c0:	bf04      	itt	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	61a3      	streq	r3, [r4, #24]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f820 	bl	800630c <__sfp>
 80062cc:	6060      	str	r0, [r4, #4]
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 f81c 	bl	800630c <__sfp>
 80062d4:	60a0      	str	r0, [r4, #8]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 f818 	bl	800630c <__sfp>
 80062dc:	2200      	movs	r2, #0
 80062de:	60e0      	str	r0, [r4, #12]
 80062e0:	2104      	movs	r1, #4
 80062e2:	6860      	ldr	r0, [r4, #4]
 80062e4:	f7ff ff82 	bl	80061ec <std>
 80062e8:	68a0      	ldr	r0, [r4, #8]
 80062ea:	2201      	movs	r2, #1
 80062ec:	2109      	movs	r1, #9
 80062ee:	f7ff ff7d 	bl	80061ec <std>
 80062f2:	68e0      	ldr	r0, [r4, #12]
 80062f4:	2202      	movs	r2, #2
 80062f6:	2112      	movs	r1, #18
 80062f8:	f7ff ff78 	bl	80061ec <std>
 80062fc:	2301      	movs	r3, #1
 80062fe:	61a3      	str	r3, [r4, #24]
 8006300:	e7d2      	b.n	80062a8 <__sinit+0xc>
 8006302:	bf00      	nop
 8006304:	080074f4 	.word	0x080074f4
 8006308:	08006235 	.word	0x08006235

0800630c <__sfp>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	4607      	mov	r7, r0
 8006310:	f7ff ffac 	bl	800626c <__sfp_lock_acquire>
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <__sfp+0x84>)
 8006316:	681e      	ldr	r6, [r3, #0]
 8006318:	69b3      	ldr	r3, [r6, #24]
 800631a:	b913      	cbnz	r3, 8006322 <__sfp+0x16>
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ffbd 	bl	800629c <__sinit>
 8006322:	3648      	adds	r6, #72	; 0x48
 8006324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006328:	3b01      	subs	r3, #1
 800632a:	d503      	bpl.n	8006334 <__sfp+0x28>
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	b30b      	cbz	r3, 8006374 <__sfp+0x68>
 8006330:	6836      	ldr	r6, [r6, #0]
 8006332:	e7f7      	b.n	8006324 <__sfp+0x18>
 8006334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006338:	b9d5      	cbnz	r5, 8006370 <__sfp+0x64>
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <__sfp+0x88>)
 800633c:	60e3      	str	r3, [r4, #12]
 800633e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006342:	6665      	str	r5, [r4, #100]	; 0x64
 8006344:	f000 f84c 	bl	80063e0 <__retarget_lock_init_recursive>
 8006348:	f7ff ff96 	bl	8006278 <__sfp_lock_release>
 800634c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006354:	6025      	str	r5, [r4, #0]
 8006356:	61a5      	str	r5, [r4, #24]
 8006358:	2208      	movs	r2, #8
 800635a:	4629      	mov	r1, r5
 800635c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006360:	f7fe faac 	bl	80048bc <memset>
 8006364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800636c:	4620      	mov	r0, r4
 800636e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006370:	3468      	adds	r4, #104	; 0x68
 8006372:	e7d9      	b.n	8006328 <__sfp+0x1c>
 8006374:	2104      	movs	r1, #4
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ff62 	bl	8006240 <__sfmoreglue>
 800637c:	4604      	mov	r4, r0
 800637e:	6030      	str	r0, [r6, #0]
 8006380:	2800      	cmp	r0, #0
 8006382:	d1d5      	bne.n	8006330 <__sfp+0x24>
 8006384:	f7ff ff78 	bl	8006278 <__sfp_lock_release>
 8006388:	230c      	movs	r3, #12
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	e7ee      	b.n	800636c <__sfp+0x60>
 800638e:	bf00      	nop
 8006390:	080074f4 	.word	0x080074f4
 8006394:	ffff0001 	.word	0xffff0001

08006398 <_fwalk_reent>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	4606      	mov	r6, r0
 800639e:	4688      	mov	r8, r1
 80063a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063a4:	2700      	movs	r7, #0
 80063a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063aa:	f1b9 0901 	subs.w	r9, r9, #1
 80063ae:	d505      	bpl.n	80063bc <_fwalk_reent+0x24>
 80063b0:	6824      	ldr	r4, [r4, #0]
 80063b2:	2c00      	cmp	r4, #0
 80063b4:	d1f7      	bne.n	80063a6 <_fwalk_reent+0xe>
 80063b6:	4638      	mov	r0, r7
 80063b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063bc:	89ab      	ldrh	r3, [r5, #12]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d907      	bls.n	80063d2 <_fwalk_reent+0x3a>
 80063c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063c6:	3301      	adds	r3, #1
 80063c8:	d003      	beq.n	80063d2 <_fwalk_reent+0x3a>
 80063ca:	4629      	mov	r1, r5
 80063cc:	4630      	mov	r0, r6
 80063ce:	47c0      	blx	r8
 80063d0:	4307      	orrs	r7, r0
 80063d2:	3568      	adds	r5, #104	; 0x68
 80063d4:	e7e9      	b.n	80063aa <_fwalk_reent+0x12>
	...

080063d8 <_localeconv_r>:
 80063d8:	4800      	ldr	r0, [pc, #0]	; (80063dc <_localeconv_r+0x4>)
 80063da:	4770      	bx	lr
 80063dc:	20000160 	.word	0x20000160

080063e0 <__retarget_lock_init_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <__retarget_lock_acquire_recursive>:
 80063e2:	4770      	bx	lr

080063e4 <__retarget_lock_release_recursive>:
 80063e4:	4770      	bx	lr

080063e6 <memcpy>:
 80063e6:	440a      	add	r2, r1
 80063e8:	4291      	cmp	r1, r2
 80063ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ee:	d100      	bne.n	80063f2 <memcpy+0xc>
 80063f0:	4770      	bx	lr
 80063f2:	b510      	push	{r4, lr}
 80063f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fc:	4291      	cmp	r1, r2
 80063fe:	d1f9      	bne.n	80063f4 <memcpy+0xe>
 8006400:	bd10      	pop	{r4, pc}
	...

08006404 <__malloc_lock>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__malloc_lock+0x8>)
 8006406:	f7ff bfec 	b.w	80063e2 <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	200002a0 	.word	0x200002a0

08006410 <__malloc_unlock>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__malloc_unlock+0x8>)
 8006412:	f7ff bfe7 	b.w	80063e4 <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	200002a0 	.word	0x200002a0

0800641c <_Balloc>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006420:	4604      	mov	r4, r0
 8006422:	460d      	mov	r5, r1
 8006424:	b976      	cbnz	r6, 8006444 <_Balloc+0x28>
 8006426:	2010      	movs	r0, #16
 8006428:	f7fe fa40 	bl	80048ac <malloc>
 800642c:	4602      	mov	r2, r0
 800642e:	6260      	str	r0, [r4, #36]	; 0x24
 8006430:	b920      	cbnz	r0, 800643c <_Balloc+0x20>
 8006432:	4b18      	ldr	r3, [pc, #96]	; (8006494 <_Balloc+0x78>)
 8006434:	4818      	ldr	r0, [pc, #96]	; (8006498 <_Balloc+0x7c>)
 8006436:	2166      	movs	r1, #102	; 0x66
 8006438:	f000 fde4 	bl	8007004 <__assert_func>
 800643c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006440:	6006      	str	r6, [r0, #0]
 8006442:	60c6      	str	r6, [r0, #12]
 8006444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006446:	68f3      	ldr	r3, [r6, #12]
 8006448:	b183      	cbz	r3, 800646c <_Balloc+0x50>
 800644a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006452:	b9b8      	cbnz	r0, 8006484 <_Balloc+0x68>
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f605 	lsl.w	r6, r1, r5
 800645a:	1d72      	adds	r2, r6, #5
 800645c:	0092      	lsls	r2, r2, #2
 800645e:	4620      	mov	r0, r4
 8006460:	f7fe fa34 	bl	80048cc <_calloc_r>
 8006464:	b160      	cbz	r0, 8006480 <_Balloc+0x64>
 8006466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800646a:	e00e      	b.n	800648a <_Balloc+0x6e>
 800646c:	2221      	movs	r2, #33	; 0x21
 800646e:	2104      	movs	r1, #4
 8006470:	4620      	mov	r0, r4
 8006472:	f7fe fa2b 	bl	80048cc <_calloc_r>
 8006476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006478:	60f0      	str	r0, [r6, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e4      	bne.n	800644a <_Balloc+0x2e>
 8006480:	2000      	movs	r0, #0
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	6802      	ldr	r2, [r0, #0]
 8006486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800648a:	2300      	movs	r3, #0
 800648c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006490:	e7f7      	b.n	8006482 <_Balloc+0x66>
 8006492:	bf00      	nop
 8006494:	0800763a 	.word	0x0800763a
 8006498:	08007720 	.word	0x08007720

0800649c <_Bfree>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064a0:	4605      	mov	r5, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b976      	cbnz	r6, 80064c4 <_Bfree+0x28>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f7fe fa00 	bl	80048ac <malloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6268      	str	r0, [r5, #36]	; 0x24
 80064b0:	b920      	cbnz	r0, 80064bc <_Bfree+0x20>
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <_Bfree+0x3c>)
 80064b4:	4809      	ldr	r0, [pc, #36]	; (80064dc <_Bfree+0x40>)
 80064b6:	218a      	movs	r1, #138	; 0x8a
 80064b8:	f000 fda4 	bl	8007004 <__assert_func>
 80064bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c0:	6006      	str	r6, [r0, #0]
 80064c2:	60c6      	str	r6, [r0, #12]
 80064c4:	b13c      	cbz	r4, 80064d6 <_Bfree+0x3a>
 80064c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064d0:	6021      	str	r1, [r4, #0]
 80064d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	0800763a 	.word	0x0800763a
 80064dc:	08007720 	.word	0x08007720

080064e0 <__multadd>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	690d      	ldr	r5, [r1, #16]
 80064e6:	4607      	mov	r7, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	461e      	mov	r6, r3
 80064ec:	f101 0c14 	add.w	ip, r1, #20
 80064f0:	2000      	movs	r0, #0
 80064f2:	f8dc 3000 	ldr.w	r3, [ip]
 80064f6:	b299      	uxth	r1, r3
 80064f8:	fb02 6101 	mla	r1, r2, r1, r6
 80064fc:	0c1e      	lsrs	r6, r3, #16
 80064fe:	0c0b      	lsrs	r3, r1, #16
 8006500:	fb02 3306 	mla	r3, r2, r6, r3
 8006504:	b289      	uxth	r1, r1
 8006506:	3001      	adds	r0, #1
 8006508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800650c:	4285      	cmp	r5, r0
 800650e:	f84c 1b04 	str.w	r1, [ip], #4
 8006512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006516:	dcec      	bgt.n	80064f2 <__multadd+0x12>
 8006518:	b30e      	cbz	r6, 800655e <__multadd+0x7e>
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc19      	bgt.n	8006554 <__multadd+0x74>
 8006520:	6861      	ldr	r1, [r4, #4]
 8006522:	4638      	mov	r0, r7
 8006524:	3101      	adds	r1, #1
 8006526:	f7ff ff79 	bl	800641c <_Balloc>
 800652a:	4680      	mov	r8, r0
 800652c:	b928      	cbnz	r0, 800653a <__multadd+0x5a>
 800652e:	4602      	mov	r2, r0
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <__multadd+0x84>)
 8006532:	480d      	ldr	r0, [pc, #52]	; (8006568 <__multadd+0x88>)
 8006534:	21b5      	movs	r1, #181	; 0xb5
 8006536:	f000 fd65 	bl	8007004 <__assert_func>
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	3202      	adds	r2, #2
 800653e:	f104 010c 	add.w	r1, r4, #12
 8006542:	0092      	lsls	r2, r2, #2
 8006544:	300c      	adds	r0, #12
 8006546:	f7ff ff4e 	bl	80063e6 <memcpy>
 800654a:	4621      	mov	r1, r4
 800654c:	4638      	mov	r0, r7
 800654e:	f7ff ffa5 	bl	800649c <_Bfree>
 8006552:	4644      	mov	r4, r8
 8006554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006558:	3501      	adds	r5, #1
 800655a:	615e      	str	r6, [r3, #20]
 800655c:	6125      	str	r5, [r4, #16]
 800655e:	4620      	mov	r0, r4
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006564:	080076ac 	.word	0x080076ac
 8006568:	08007720 	.word	0x08007720

0800656c <__hi0bits>:
 800656c:	0c03      	lsrs	r3, r0, #16
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	b9d3      	cbnz	r3, 80065a8 <__hi0bits+0x3c>
 8006572:	0400      	lsls	r0, r0, #16
 8006574:	2310      	movs	r3, #16
 8006576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800657a:	bf04      	itt	eq
 800657c:	0200      	lsleq	r0, r0, #8
 800657e:	3308      	addeq	r3, #8
 8006580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006584:	bf04      	itt	eq
 8006586:	0100      	lsleq	r0, r0, #4
 8006588:	3304      	addeq	r3, #4
 800658a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800658e:	bf04      	itt	eq
 8006590:	0080      	lsleq	r0, r0, #2
 8006592:	3302      	addeq	r3, #2
 8006594:	2800      	cmp	r0, #0
 8006596:	db05      	blt.n	80065a4 <__hi0bits+0x38>
 8006598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800659c:	f103 0301 	add.w	r3, r3, #1
 80065a0:	bf08      	it	eq
 80065a2:	2320      	moveq	r3, #32
 80065a4:	4618      	mov	r0, r3
 80065a6:	4770      	bx	lr
 80065a8:	2300      	movs	r3, #0
 80065aa:	e7e4      	b.n	8006576 <__hi0bits+0xa>

080065ac <__lo0bits>:
 80065ac:	6803      	ldr	r3, [r0, #0]
 80065ae:	f013 0207 	ands.w	r2, r3, #7
 80065b2:	4601      	mov	r1, r0
 80065b4:	d00b      	beq.n	80065ce <__lo0bits+0x22>
 80065b6:	07da      	lsls	r2, r3, #31
 80065b8:	d423      	bmi.n	8006602 <__lo0bits+0x56>
 80065ba:	0798      	lsls	r0, r3, #30
 80065bc:	bf49      	itett	mi
 80065be:	085b      	lsrmi	r3, r3, #1
 80065c0:	089b      	lsrpl	r3, r3, #2
 80065c2:	2001      	movmi	r0, #1
 80065c4:	600b      	strmi	r3, [r1, #0]
 80065c6:	bf5c      	itt	pl
 80065c8:	600b      	strpl	r3, [r1, #0]
 80065ca:	2002      	movpl	r0, #2
 80065cc:	4770      	bx	lr
 80065ce:	b298      	uxth	r0, r3
 80065d0:	b9a8      	cbnz	r0, 80065fe <__lo0bits+0x52>
 80065d2:	0c1b      	lsrs	r3, r3, #16
 80065d4:	2010      	movs	r0, #16
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	b90a      	cbnz	r2, 80065de <__lo0bits+0x32>
 80065da:	3008      	adds	r0, #8
 80065dc:	0a1b      	lsrs	r3, r3, #8
 80065de:	071a      	lsls	r2, r3, #28
 80065e0:	bf04      	itt	eq
 80065e2:	091b      	lsreq	r3, r3, #4
 80065e4:	3004      	addeq	r0, #4
 80065e6:	079a      	lsls	r2, r3, #30
 80065e8:	bf04      	itt	eq
 80065ea:	089b      	lsreq	r3, r3, #2
 80065ec:	3002      	addeq	r0, #2
 80065ee:	07da      	lsls	r2, r3, #31
 80065f0:	d403      	bmi.n	80065fa <__lo0bits+0x4e>
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	f100 0001 	add.w	r0, r0, #1
 80065f8:	d005      	beq.n	8006606 <__lo0bits+0x5a>
 80065fa:	600b      	str	r3, [r1, #0]
 80065fc:	4770      	bx	lr
 80065fe:	4610      	mov	r0, r2
 8006600:	e7e9      	b.n	80065d6 <__lo0bits+0x2a>
 8006602:	2000      	movs	r0, #0
 8006604:	4770      	bx	lr
 8006606:	2020      	movs	r0, #32
 8006608:	4770      	bx	lr
	...

0800660c <__i2b>:
 800660c:	b510      	push	{r4, lr}
 800660e:	460c      	mov	r4, r1
 8006610:	2101      	movs	r1, #1
 8006612:	f7ff ff03 	bl	800641c <_Balloc>
 8006616:	4602      	mov	r2, r0
 8006618:	b928      	cbnz	r0, 8006626 <__i2b+0x1a>
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <__i2b+0x24>)
 800661c:	4805      	ldr	r0, [pc, #20]	; (8006634 <__i2b+0x28>)
 800661e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006622:	f000 fcef 	bl	8007004 <__assert_func>
 8006626:	2301      	movs	r3, #1
 8006628:	6144      	str	r4, [r0, #20]
 800662a:	6103      	str	r3, [r0, #16]
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop
 8006630:	080076ac 	.word	0x080076ac
 8006634:	08007720 	.word	0x08007720

08006638 <__multiply>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	4691      	mov	r9, r2
 800663e:	690a      	ldr	r2, [r1, #16]
 8006640:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006644:	429a      	cmp	r2, r3
 8006646:	bfb8      	it	lt
 8006648:	460b      	movlt	r3, r1
 800664a:	460c      	mov	r4, r1
 800664c:	bfbc      	itt	lt
 800664e:	464c      	movlt	r4, r9
 8006650:	4699      	movlt	r9, r3
 8006652:	6927      	ldr	r7, [r4, #16]
 8006654:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006658:	68a3      	ldr	r3, [r4, #8]
 800665a:	6861      	ldr	r1, [r4, #4]
 800665c:	eb07 060a 	add.w	r6, r7, sl
 8006660:	42b3      	cmp	r3, r6
 8006662:	b085      	sub	sp, #20
 8006664:	bfb8      	it	lt
 8006666:	3101      	addlt	r1, #1
 8006668:	f7ff fed8 	bl	800641c <_Balloc>
 800666c:	b930      	cbnz	r0, 800667c <__multiply+0x44>
 800666e:	4602      	mov	r2, r0
 8006670:	4b44      	ldr	r3, [pc, #272]	; (8006784 <__multiply+0x14c>)
 8006672:	4845      	ldr	r0, [pc, #276]	; (8006788 <__multiply+0x150>)
 8006674:	f240 115d 	movw	r1, #349	; 0x15d
 8006678:	f000 fcc4 	bl	8007004 <__assert_func>
 800667c:	f100 0514 	add.w	r5, r0, #20
 8006680:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006684:	462b      	mov	r3, r5
 8006686:	2200      	movs	r2, #0
 8006688:	4543      	cmp	r3, r8
 800668a:	d321      	bcc.n	80066d0 <__multiply+0x98>
 800668c:	f104 0314 	add.w	r3, r4, #20
 8006690:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006694:	f109 0314 	add.w	r3, r9, #20
 8006698:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800669c:	9202      	str	r2, [sp, #8]
 800669e:	1b3a      	subs	r2, r7, r4
 80066a0:	3a15      	subs	r2, #21
 80066a2:	f022 0203 	bic.w	r2, r2, #3
 80066a6:	3204      	adds	r2, #4
 80066a8:	f104 0115 	add.w	r1, r4, #21
 80066ac:	428f      	cmp	r7, r1
 80066ae:	bf38      	it	cc
 80066b0:	2204      	movcc	r2, #4
 80066b2:	9201      	str	r2, [sp, #4]
 80066b4:	9a02      	ldr	r2, [sp, #8]
 80066b6:	9303      	str	r3, [sp, #12]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d80c      	bhi.n	80066d6 <__multiply+0x9e>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	dd03      	ble.n	80066c8 <__multiply+0x90>
 80066c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d05a      	beq.n	800677e <__multiply+0x146>
 80066c8:	6106      	str	r6, [r0, #16]
 80066ca:	b005      	add	sp, #20
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	f843 2b04 	str.w	r2, [r3], #4
 80066d4:	e7d8      	b.n	8006688 <__multiply+0x50>
 80066d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80066da:	f1ba 0f00 	cmp.w	sl, #0
 80066de:	d024      	beq.n	800672a <__multiply+0xf2>
 80066e0:	f104 0e14 	add.w	lr, r4, #20
 80066e4:	46a9      	mov	r9, r5
 80066e6:	f04f 0c00 	mov.w	ip, #0
 80066ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066ee:	f8d9 1000 	ldr.w	r1, [r9]
 80066f2:	fa1f fb82 	uxth.w	fp, r2
 80066f6:	b289      	uxth	r1, r1
 80066f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80066fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006700:	f8d9 2000 	ldr.w	r2, [r9]
 8006704:	4461      	add	r1, ip
 8006706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800670a:	fb0a c20b 	mla	r2, sl, fp, ip
 800670e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006712:	b289      	uxth	r1, r1
 8006714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006718:	4577      	cmp	r7, lr
 800671a:	f849 1b04 	str.w	r1, [r9], #4
 800671e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006722:	d8e2      	bhi.n	80066ea <__multiply+0xb2>
 8006724:	9a01      	ldr	r2, [sp, #4]
 8006726:	f845 c002 	str.w	ip, [r5, r2]
 800672a:	9a03      	ldr	r2, [sp, #12]
 800672c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006730:	3304      	adds	r3, #4
 8006732:	f1b9 0f00 	cmp.w	r9, #0
 8006736:	d020      	beq.n	800677a <__multiply+0x142>
 8006738:	6829      	ldr	r1, [r5, #0]
 800673a:	f104 0c14 	add.w	ip, r4, #20
 800673e:	46ae      	mov	lr, r5
 8006740:	f04f 0a00 	mov.w	sl, #0
 8006744:	f8bc b000 	ldrh.w	fp, [ip]
 8006748:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800674c:	fb09 220b 	mla	r2, r9, fp, r2
 8006750:	4492      	add	sl, r2
 8006752:	b289      	uxth	r1, r1
 8006754:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006758:	f84e 1b04 	str.w	r1, [lr], #4
 800675c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006760:	f8be 1000 	ldrh.w	r1, [lr]
 8006764:	0c12      	lsrs	r2, r2, #16
 8006766:	fb09 1102 	mla	r1, r9, r2, r1
 800676a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800676e:	4567      	cmp	r7, ip
 8006770:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006774:	d8e6      	bhi.n	8006744 <__multiply+0x10c>
 8006776:	9a01      	ldr	r2, [sp, #4]
 8006778:	50a9      	str	r1, [r5, r2]
 800677a:	3504      	adds	r5, #4
 800677c:	e79a      	b.n	80066b4 <__multiply+0x7c>
 800677e:	3e01      	subs	r6, #1
 8006780:	e79c      	b.n	80066bc <__multiply+0x84>
 8006782:	bf00      	nop
 8006784:	080076ac 	.word	0x080076ac
 8006788:	08007720 	.word	0x08007720

0800678c <__pow5mult>:
 800678c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006790:	4615      	mov	r5, r2
 8006792:	f012 0203 	ands.w	r2, r2, #3
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	d007      	beq.n	80067ac <__pow5mult+0x20>
 800679c:	4c25      	ldr	r4, [pc, #148]	; (8006834 <__pow5mult+0xa8>)
 800679e:	3a01      	subs	r2, #1
 80067a0:	2300      	movs	r3, #0
 80067a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067a6:	f7ff fe9b 	bl	80064e0 <__multadd>
 80067aa:	4607      	mov	r7, r0
 80067ac:	10ad      	asrs	r5, r5, #2
 80067ae:	d03d      	beq.n	800682c <__pow5mult+0xa0>
 80067b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067b2:	b97c      	cbnz	r4, 80067d4 <__pow5mult+0x48>
 80067b4:	2010      	movs	r0, #16
 80067b6:	f7fe f879 	bl	80048ac <malloc>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6270      	str	r0, [r6, #36]	; 0x24
 80067be:	b928      	cbnz	r0, 80067cc <__pow5mult+0x40>
 80067c0:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <__pow5mult+0xac>)
 80067c2:	481e      	ldr	r0, [pc, #120]	; (800683c <__pow5mult+0xb0>)
 80067c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067c8:	f000 fc1c 	bl	8007004 <__assert_func>
 80067cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d0:	6004      	str	r4, [r0, #0]
 80067d2:	60c4      	str	r4, [r0, #12]
 80067d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067dc:	b94c      	cbnz	r4, 80067f2 <__pow5mult+0x66>
 80067de:	f240 2171 	movw	r1, #625	; 0x271
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ff12 	bl	800660c <__i2b>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80067ee:	4604      	mov	r4, r0
 80067f0:	6003      	str	r3, [r0, #0]
 80067f2:	f04f 0900 	mov.w	r9, #0
 80067f6:	07eb      	lsls	r3, r5, #31
 80067f8:	d50a      	bpl.n	8006810 <__pow5mult+0x84>
 80067fa:	4639      	mov	r1, r7
 80067fc:	4622      	mov	r2, r4
 80067fe:	4630      	mov	r0, r6
 8006800:	f7ff ff1a 	bl	8006638 <__multiply>
 8006804:	4639      	mov	r1, r7
 8006806:	4680      	mov	r8, r0
 8006808:	4630      	mov	r0, r6
 800680a:	f7ff fe47 	bl	800649c <_Bfree>
 800680e:	4647      	mov	r7, r8
 8006810:	106d      	asrs	r5, r5, #1
 8006812:	d00b      	beq.n	800682c <__pow5mult+0xa0>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	b938      	cbnz	r0, 8006828 <__pow5mult+0x9c>
 8006818:	4622      	mov	r2, r4
 800681a:	4621      	mov	r1, r4
 800681c:	4630      	mov	r0, r6
 800681e:	f7ff ff0b 	bl	8006638 <__multiply>
 8006822:	6020      	str	r0, [r4, #0]
 8006824:	f8c0 9000 	str.w	r9, [r0]
 8006828:	4604      	mov	r4, r0
 800682a:	e7e4      	b.n	80067f6 <__pow5mult+0x6a>
 800682c:	4638      	mov	r0, r7
 800682e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006832:	bf00      	nop
 8006834:	08007870 	.word	0x08007870
 8006838:	0800763a 	.word	0x0800763a
 800683c:	08007720 	.word	0x08007720

08006840 <__lshift>:
 8006840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	460c      	mov	r4, r1
 8006846:	6849      	ldr	r1, [r1, #4]
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	4607      	mov	r7, r0
 8006852:	4691      	mov	r9, r2
 8006854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006858:	f108 0601 	add.w	r6, r8, #1
 800685c:	42b3      	cmp	r3, r6
 800685e:	db0b      	blt.n	8006878 <__lshift+0x38>
 8006860:	4638      	mov	r0, r7
 8006862:	f7ff fddb 	bl	800641c <_Balloc>
 8006866:	4605      	mov	r5, r0
 8006868:	b948      	cbnz	r0, 800687e <__lshift+0x3e>
 800686a:	4602      	mov	r2, r0
 800686c:	4b2a      	ldr	r3, [pc, #168]	; (8006918 <__lshift+0xd8>)
 800686e:	482b      	ldr	r0, [pc, #172]	; (800691c <__lshift+0xdc>)
 8006870:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006874:	f000 fbc6 	bl	8007004 <__assert_func>
 8006878:	3101      	adds	r1, #1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	e7ee      	b.n	800685c <__lshift+0x1c>
 800687e:	2300      	movs	r3, #0
 8006880:	f100 0114 	add.w	r1, r0, #20
 8006884:	f100 0210 	add.w	r2, r0, #16
 8006888:	4618      	mov	r0, r3
 800688a:	4553      	cmp	r3, sl
 800688c:	db37      	blt.n	80068fe <__lshift+0xbe>
 800688e:	6920      	ldr	r0, [r4, #16]
 8006890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006894:	f104 0314 	add.w	r3, r4, #20
 8006898:	f019 091f 	ands.w	r9, r9, #31
 800689c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068a4:	d02f      	beq.n	8006906 <__lshift+0xc6>
 80068a6:	f1c9 0e20 	rsb	lr, r9, #32
 80068aa:	468a      	mov	sl, r1
 80068ac:	f04f 0c00 	mov.w	ip, #0
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	fa02 f209 	lsl.w	r2, r2, r9
 80068b6:	ea42 020c 	orr.w	r2, r2, ip
 80068ba:	f84a 2b04 	str.w	r2, [sl], #4
 80068be:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c2:	4298      	cmp	r0, r3
 80068c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068c8:	d8f2      	bhi.n	80068b0 <__lshift+0x70>
 80068ca:	1b03      	subs	r3, r0, r4
 80068cc:	3b15      	subs	r3, #21
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	3304      	adds	r3, #4
 80068d4:	f104 0215 	add.w	r2, r4, #21
 80068d8:	4290      	cmp	r0, r2
 80068da:	bf38      	it	cc
 80068dc:	2304      	movcc	r3, #4
 80068de:	f841 c003 	str.w	ip, [r1, r3]
 80068e2:	f1bc 0f00 	cmp.w	ip, #0
 80068e6:	d001      	beq.n	80068ec <__lshift+0xac>
 80068e8:	f108 0602 	add.w	r6, r8, #2
 80068ec:	3e01      	subs	r6, #1
 80068ee:	4638      	mov	r0, r7
 80068f0:	612e      	str	r6, [r5, #16]
 80068f2:	4621      	mov	r1, r4
 80068f4:	f7ff fdd2 	bl	800649c <_Bfree>
 80068f8:	4628      	mov	r0, r5
 80068fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006902:	3301      	adds	r3, #1
 8006904:	e7c1      	b.n	800688a <__lshift+0x4a>
 8006906:	3904      	subs	r1, #4
 8006908:	f853 2b04 	ldr.w	r2, [r3], #4
 800690c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006910:	4298      	cmp	r0, r3
 8006912:	d8f9      	bhi.n	8006908 <__lshift+0xc8>
 8006914:	e7ea      	b.n	80068ec <__lshift+0xac>
 8006916:	bf00      	nop
 8006918:	080076ac 	.word	0x080076ac
 800691c:	08007720 	.word	0x08007720

08006920 <__mcmp>:
 8006920:	b530      	push	{r4, r5, lr}
 8006922:	6902      	ldr	r2, [r0, #16]
 8006924:	690c      	ldr	r4, [r1, #16]
 8006926:	1b12      	subs	r2, r2, r4
 8006928:	d10e      	bne.n	8006948 <__mcmp+0x28>
 800692a:	f100 0314 	add.w	r3, r0, #20
 800692e:	3114      	adds	r1, #20
 8006930:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006934:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006938:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800693c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006940:	42a5      	cmp	r5, r4
 8006942:	d003      	beq.n	800694c <__mcmp+0x2c>
 8006944:	d305      	bcc.n	8006952 <__mcmp+0x32>
 8006946:	2201      	movs	r2, #1
 8006948:	4610      	mov	r0, r2
 800694a:	bd30      	pop	{r4, r5, pc}
 800694c:	4283      	cmp	r3, r0
 800694e:	d3f3      	bcc.n	8006938 <__mcmp+0x18>
 8006950:	e7fa      	b.n	8006948 <__mcmp+0x28>
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	e7f7      	b.n	8006948 <__mcmp+0x28>

08006958 <__mdiff>:
 8006958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	460c      	mov	r4, r1
 800695e:	4606      	mov	r6, r0
 8006960:	4611      	mov	r1, r2
 8006962:	4620      	mov	r0, r4
 8006964:	4690      	mov	r8, r2
 8006966:	f7ff ffdb 	bl	8006920 <__mcmp>
 800696a:	1e05      	subs	r5, r0, #0
 800696c:	d110      	bne.n	8006990 <__mdiff+0x38>
 800696e:	4629      	mov	r1, r5
 8006970:	4630      	mov	r0, r6
 8006972:	f7ff fd53 	bl	800641c <_Balloc>
 8006976:	b930      	cbnz	r0, 8006986 <__mdiff+0x2e>
 8006978:	4b3a      	ldr	r3, [pc, #232]	; (8006a64 <__mdiff+0x10c>)
 800697a:	4602      	mov	r2, r0
 800697c:	f240 2132 	movw	r1, #562	; 0x232
 8006980:	4839      	ldr	r0, [pc, #228]	; (8006a68 <__mdiff+0x110>)
 8006982:	f000 fb3f 	bl	8007004 <__assert_func>
 8006986:	2301      	movs	r3, #1
 8006988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800698c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	bfa4      	itt	ge
 8006992:	4643      	movge	r3, r8
 8006994:	46a0      	movge	r8, r4
 8006996:	4630      	mov	r0, r6
 8006998:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800699c:	bfa6      	itte	ge
 800699e:	461c      	movge	r4, r3
 80069a0:	2500      	movge	r5, #0
 80069a2:	2501      	movlt	r5, #1
 80069a4:	f7ff fd3a 	bl	800641c <_Balloc>
 80069a8:	b920      	cbnz	r0, 80069b4 <__mdiff+0x5c>
 80069aa:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <__mdiff+0x10c>)
 80069ac:	4602      	mov	r2, r0
 80069ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069b2:	e7e5      	b.n	8006980 <__mdiff+0x28>
 80069b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069b8:	6926      	ldr	r6, [r4, #16]
 80069ba:	60c5      	str	r5, [r0, #12]
 80069bc:	f104 0914 	add.w	r9, r4, #20
 80069c0:	f108 0514 	add.w	r5, r8, #20
 80069c4:	f100 0e14 	add.w	lr, r0, #20
 80069c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80069cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069d0:	f108 0210 	add.w	r2, r8, #16
 80069d4:	46f2      	mov	sl, lr
 80069d6:	2100      	movs	r1, #0
 80069d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80069dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069e0:	fa1f f883 	uxth.w	r8, r3
 80069e4:	fa11 f18b 	uxtah	r1, r1, fp
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	eba1 0808 	sub.w	r8, r1, r8
 80069ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069f6:	fa1f f888 	uxth.w	r8, r8
 80069fa:	1419      	asrs	r1, r3, #16
 80069fc:	454e      	cmp	r6, r9
 80069fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a02:	f84a 3b04 	str.w	r3, [sl], #4
 8006a06:	d8e7      	bhi.n	80069d8 <__mdiff+0x80>
 8006a08:	1b33      	subs	r3, r6, r4
 8006a0a:	3b15      	subs	r3, #21
 8006a0c:	f023 0303 	bic.w	r3, r3, #3
 8006a10:	3304      	adds	r3, #4
 8006a12:	3415      	adds	r4, #21
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	bf38      	it	cc
 8006a18:	2304      	movcc	r3, #4
 8006a1a:	441d      	add	r5, r3
 8006a1c:	4473      	add	r3, lr
 8006a1e:	469e      	mov	lr, r3
 8006a20:	462e      	mov	r6, r5
 8006a22:	4566      	cmp	r6, ip
 8006a24:	d30e      	bcc.n	8006a44 <__mdiff+0xec>
 8006a26:	f10c 0203 	add.w	r2, ip, #3
 8006a2a:	1b52      	subs	r2, r2, r5
 8006a2c:	f022 0203 	bic.w	r2, r2, #3
 8006a30:	3d03      	subs	r5, #3
 8006a32:	45ac      	cmp	ip, r5
 8006a34:	bf38      	it	cc
 8006a36:	2200      	movcc	r2, #0
 8006a38:	441a      	add	r2, r3
 8006a3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a3e:	b17b      	cbz	r3, 8006a60 <__mdiff+0x108>
 8006a40:	6107      	str	r7, [r0, #16]
 8006a42:	e7a3      	b.n	800698c <__mdiff+0x34>
 8006a44:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a48:	fa11 f288 	uxtah	r2, r1, r8
 8006a4c:	1414      	asrs	r4, r2, #16
 8006a4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a52:	b292      	uxth	r2, r2
 8006a54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a58:	f84e 2b04 	str.w	r2, [lr], #4
 8006a5c:	1421      	asrs	r1, r4, #16
 8006a5e:	e7e0      	b.n	8006a22 <__mdiff+0xca>
 8006a60:	3f01      	subs	r7, #1
 8006a62:	e7ea      	b.n	8006a3a <__mdiff+0xe2>
 8006a64:	080076ac 	.word	0x080076ac
 8006a68:	08007720 	.word	0x08007720

08006a6c <__d2b>:
 8006a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a70:	4689      	mov	r9, r1
 8006a72:	2101      	movs	r1, #1
 8006a74:	ec57 6b10 	vmov	r6, r7, d0
 8006a78:	4690      	mov	r8, r2
 8006a7a:	f7ff fccf 	bl	800641c <_Balloc>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	b930      	cbnz	r0, 8006a90 <__d2b+0x24>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <__d2b+0xb0>)
 8006a86:	4826      	ldr	r0, [pc, #152]	; (8006b20 <__d2b+0xb4>)
 8006a88:	f240 310a 	movw	r1, #778	; 0x30a
 8006a8c:	f000 faba 	bl	8007004 <__assert_func>
 8006a90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a98:	bb35      	cbnz	r5, 8006ae8 <__d2b+0x7c>
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	d028      	beq.n	8006af2 <__d2b+0x86>
 8006aa0:	4668      	mov	r0, sp
 8006aa2:	9600      	str	r6, [sp, #0]
 8006aa4:	f7ff fd82 	bl	80065ac <__lo0bits>
 8006aa8:	9900      	ldr	r1, [sp, #0]
 8006aaa:	b300      	cbz	r0, 8006aee <__d2b+0x82>
 8006aac:	9a01      	ldr	r2, [sp, #4]
 8006aae:	f1c0 0320 	rsb	r3, r0, #32
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	40c2      	lsrs	r2, r0
 8006aba:	6163      	str	r3, [r4, #20]
 8006abc:	9201      	str	r2, [sp, #4]
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	61a3      	str	r3, [r4, #24]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf14      	ite	ne
 8006ac6:	2202      	movne	r2, #2
 8006ac8:	2201      	moveq	r2, #1
 8006aca:	6122      	str	r2, [r4, #16]
 8006acc:	b1d5      	cbz	r5, 8006b04 <__d2b+0x98>
 8006ace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ad2:	4405      	add	r5, r0
 8006ad4:	f8c9 5000 	str.w	r5, [r9]
 8006ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006adc:	f8c8 0000 	str.w	r0, [r8]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aec:	e7d5      	b.n	8006a9a <__d2b+0x2e>
 8006aee:	6161      	str	r1, [r4, #20]
 8006af0:	e7e5      	b.n	8006abe <__d2b+0x52>
 8006af2:	a801      	add	r0, sp, #4
 8006af4:	f7ff fd5a 	bl	80065ac <__lo0bits>
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	6163      	str	r3, [r4, #20]
 8006afc:	2201      	movs	r2, #1
 8006afe:	6122      	str	r2, [r4, #16]
 8006b00:	3020      	adds	r0, #32
 8006b02:	e7e3      	b.n	8006acc <__d2b+0x60>
 8006b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b0c:	f8c9 0000 	str.w	r0, [r9]
 8006b10:	6918      	ldr	r0, [r3, #16]
 8006b12:	f7ff fd2b 	bl	800656c <__hi0bits>
 8006b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b1a:	e7df      	b.n	8006adc <__d2b+0x70>
 8006b1c:	080076ac 	.word	0x080076ac
 8006b20:	08007720 	.word	0x08007720

08006b24 <__sfputc_r>:
 8006b24:	6893      	ldr	r3, [r2, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	b410      	push	{r4}
 8006b2c:	6093      	str	r3, [r2, #8]
 8006b2e:	da08      	bge.n	8006b42 <__sfputc_r+0x1e>
 8006b30:	6994      	ldr	r4, [r2, #24]
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	db01      	blt.n	8006b3a <__sfputc_r+0x16>
 8006b36:	290a      	cmp	r1, #10
 8006b38:	d103      	bne.n	8006b42 <__sfputc_r+0x1e>
 8006b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b3e:	f000 b98f 	b.w	8006e60 <__swbuf_r>
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	1c58      	adds	r0, r3, #1
 8006b46:	6010      	str	r0, [r2, #0]
 8006b48:	7019      	strb	r1, [r3, #0]
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <__sfputs_r>:
 8006b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b54:	4606      	mov	r6, r0
 8006b56:	460f      	mov	r7, r1
 8006b58:	4614      	mov	r4, r2
 8006b5a:	18d5      	adds	r5, r2, r3
 8006b5c:	42ac      	cmp	r4, r5
 8006b5e:	d101      	bne.n	8006b64 <__sfputs_r+0x12>
 8006b60:	2000      	movs	r0, #0
 8006b62:	e007      	b.n	8006b74 <__sfputs_r+0x22>
 8006b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b68:	463a      	mov	r2, r7
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ffda 	bl	8006b24 <__sfputc_r>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d1f3      	bne.n	8006b5c <__sfputs_r+0xa>
 8006b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b78 <_vfiprintf_r>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	b09d      	sub	sp, #116	; 0x74
 8006b80:	4614      	mov	r4, r2
 8006b82:	4698      	mov	r8, r3
 8006b84:	4606      	mov	r6, r0
 8006b86:	b118      	cbz	r0, 8006b90 <_vfiprintf_r+0x18>
 8006b88:	6983      	ldr	r3, [r0, #24]
 8006b8a:	b90b      	cbnz	r3, 8006b90 <_vfiprintf_r+0x18>
 8006b8c:	f7ff fb86 	bl	800629c <__sinit>
 8006b90:	4b89      	ldr	r3, [pc, #548]	; (8006db8 <_vfiprintf_r+0x240>)
 8006b92:	429d      	cmp	r5, r3
 8006b94:	d11b      	bne.n	8006bce <_vfiprintf_r+0x56>
 8006b96:	6875      	ldr	r5, [r6, #4]
 8006b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b9a:	07d9      	lsls	r1, r3, #31
 8006b9c:	d405      	bmi.n	8006baa <_vfiprintf_r+0x32>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_vfiprintf_r+0x32>
 8006ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ba6:	f7ff fc1c 	bl	80063e2 <__retarget_lock_acquire_recursive>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	071b      	lsls	r3, r3, #28
 8006bae:	d501      	bpl.n	8006bb4 <_vfiprintf_r+0x3c>
 8006bb0:	692b      	ldr	r3, [r5, #16]
 8006bb2:	b9eb      	cbnz	r3, 8006bf0 <_vfiprintf_r+0x78>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f9b6 	bl	8006f28 <__swsetup_r>
 8006bbc:	b1c0      	cbz	r0, 8006bf0 <_vfiprintf_r+0x78>
 8006bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc0:	07dc      	lsls	r4, r3, #31
 8006bc2:	d50e      	bpl.n	8006be2 <_vfiprintf_r+0x6a>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b01d      	add	sp, #116	; 0x74
 8006bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	4b7b      	ldr	r3, [pc, #492]	; (8006dbc <_vfiprintf_r+0x244>)
 8006bd0:	429d      	cmp	r5, r3
 8006bd2:	d101      	bne.n	8006bd8 <_vfiprintf_r+0x60>
 8006bd4:	68b5      	ldr	r5, [r6, #8]
 8006bd6:	e7df      	b.n	8006b98 <_vfiprintf_r+0x20>
 8006bd8:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <_vfiprintf_r+0x248>)
 8006bda:	429d      	cmp	r5, r3
 8006bdc:	bf08      	it	eq
 8006bde:	68f5      	ldreq	r5, [r6, #12]
 8006be0:	e7da      	b.n	8006b98 <_vfiprintf_r+0x20>
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	0598      	lsls	r0, r3, #22
 8006be6:	d4ed      	bmi.n	8006bc4 <_vfiprintf_r+0x4c>
 8006be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bea:	f7ff fbfb 	bl	80063e4 <__retarget_lock_release_recursive>
 8006bee:	e7e9      	b.n	8006bc4 <_vfiprintf_r+0x4c>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bfe:	2330      	movs	r3, #48	; 0x30
 8006c00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dc4 <_vfiprintf_r+0x24c>
 8006c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c08:	f04f 0901 	mov.w	r9, #1
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	469a      	mov	sl, r3
 8006c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c14:	b10a      	cbz	r2, 8006c1a <_vfiprintf_r+0xa2>
 8006c16:	2a25      	cmp	r2, #37	; 0x25
 8006c18:	d1f9      	bne.n	8006c0e <_vfiprintf_r+0x96>
 8006c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c1e:	d00b      	beq.n	8006c38 <_vfiprintf_r+0xc0>
 8006c20:	465b      	mov	r3, fp
 8006c22:	4622      	mov	r2, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ff93 	bl	8006b52 <__sfputs_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f000 80aa 	beq.w	8006d86 <_vfiprintf_r+0x20e>
 8006c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c34:	445a      	add	r2, fp
 8006c36:	9209      	str	r2, [sp, #36]	; 0x24
 8006c38:	f89a 3000 	ldrb.w	r3, [sl]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80a2 	beq.w	8006d86 <_vfiprintf_r+0x20e>
 8006c42:	2300      	movs	r3, #0
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295
 8006c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c4c:	f10a 0a01 	add.w	sl, sl, #1
 8006c50:	9304      	str	r3, [sp, #16]
 8006c52:	9307      	str	r3, [sp, #28]
 8006c54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c58:	931a      	str	r3, [sp, #104]	; 0x68
 8006c5a:	4654      	mov	r4, sl
 8006c5c:	2205      	movs	r2, #5
 8006c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c62:	4858      	ldr	r0, [pc, #352]	; (8006dc4 <_vfiprintf_r+0x24c>)
 8006c64:	f7f9 fad4 	bl	8000210 <memchr>
 8006c68:	9a04      	ldr	r2, [sp, #16]
 8006c6a:	b9d8      	cbnz	r0, 8006ca4 <_vfiprintf_r+0x12c>
 8006c6c:	06d1      	lsls	r1, r2, #27
 8006c6e:	bf44      	itt	mi
 8006c70:	2320      	movmi	r3, #32
 8006c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c76:	0713      	lsls	r3, r2, #28
 8006c78:	bf44      	itt	mi
 8006c7a:	232b      	movmi	r3, #43	; 0x2b
 8006c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c80:	f89a 3000 	ldrb.w	r3, [sl]
 8006c84:	2b2a      	cmp	r3, #42	; 0x2a
 8006c86:	d015      	beq.n	8006cb4 <_vfiprintf_r+0x13c>
 8006c88:	9a07      	ldr	r2, [sp, #28]
 8006c8a:	4654      	mov	r4, sl
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f04f 0c0a 	mov.w	ip, #10
 8006c92:	4621      	mov	r1, r4
 8006c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c98:	3b30      	subs	r3, #48	; 0x30
 8006c9a:	2b09      	cmp	r3, #9
 8006c9c:	d94e      	bls.n	8006d3c <_vfiprintf_r+0x1c4>
 8006c9e:	b1b0      	cbz	r0, 8006cce <_vfiprintf_r+0x156>
 8006ca0:	9207      	str	r2, [sp, #28]
 8006ca2:	e014      	b.n	8006cce <_vfiprintf_r+0x156>
 8006ca4:	eba0 0308 	sub.w	r3, r0, r8
 8006ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8006cac:	4313      	orrs	r3, r2
 8006cae:	9304      	str	r3, [sp, #16]
 8006cb0:	46a2      	mov	sl, r4
 8006cb2:	e7d2      	b.n	8006c5a <_vfiprintf_r+0xe2>
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	1d19      	adds	r1, r3, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	9103      	str	r1, [sp, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bfbb      	ittet	lt
 8006cc0:	425b      	neglt	r3, r3
 8006cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006cc6:	9307      	strge	r3, [sp, #28]
 8006cc8:	9307      	strlt	r3, [sp, #28]
 8006cca:	bfb8      	it	lt
 8006ccc:	9204      	strlt	r2, [sp, #16]
 8006cce:	7823      	ldrb	r3, [r4, #0]
 8006cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006cd2:	d10c      	bne.n	8006cee <_vfiprintf_r+0x176>
 8006cd4:	7863      	ldrb	r3, [r4, #1]
 8006cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd8:	d135      	bne.n	8006d46 <_vfiprintf_r+0x1ce>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	1d1a      	adds	r2, r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	9203      	str	r2, [sp, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bfb8      	it	lt
 8006ce6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cea:	3402      	adds	r4, #2
 8006cec:	9305      	str	r3, [sp, #20]
 8006cee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006dd4 <_vfiprintf_r+0x25c>
 8006cf2:	7821      	ldrb	r1, [r4, #0]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f7f9 fa8a 	bl	8000210 <memchr>
 8006cfc:	b140      	cbz	r0, 8006d10 <_vfiprintf_r+0x198>
 8006cfe:	2340      	movs	r3, #64	; 0x40
 8006d00:	eba0 000a 	sub.w	r0, r0, sl
 8006d04:	fa03 f000 	lsl.w	r0, r3, r0
 8006d08:	9b04      	ldr	r3, [sp, #16]
 8006d0a:	4303      	orrs	r3, r0
 8006d0c:	3401      	adds	r4, #1
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d14:	482c      	ldr	r0, [pc, #176]	; (8006dc8 <_vfiprintf_r+0x250>)
 8006d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d1a:	2206      	movs	r2, #6
 8006d1c:	f7f9 fa78 	bl	8000210 <memchr>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d03f      	beq.n	8006da4 <_vfiprintf_r+0x22c>
 8006d24:	4b29      	ldr	r3, [pc, #164]	; (8006dcc <_vfiprintf_r+0x254>)
 8006d26:	bb1b      	cbnz	r3, 8006d70 <_vfiprintf_r+0x1f8>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	3307      	adds	r3, #7
 8006d2c:	f023 0307 	bic.w	r3, r3, #7
 8006d30:	3308      	adds	r3, #8
 8006d32:	9303      	str	r3, [sp, #12]
 8006d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d36:	443b      	add	r3, r7
 8006d38:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3a:	e767      	b.n	8006c0c <_vfiprintf_r+0x94>
 8006d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d40:	460c      	mov	r4, r1
 8006d42:	2001      	movs	r0, #1
 8006d44:	e7a5      	b.n	8006c92 <_vfiprintf_r+0x11a>
 8006d46:	2300      	movs	r3, #0
 8006d48:	3401      	adds	r4, #1
 8006d4a:	9305      	str	r3, [sp, #20]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f04f 0c0a 	mov.w	ip, #10
 8006d52:	4620      	mov	r0, r4
 8006d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d58:	3a30      	subs	r2, #48	; 0x30
 8006d5a:	2a09      	cmp	r2, #9
 8006d5c:	d903      	bls.n	8006d66 <_vfiprintf_r+0x1ee>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0c5      	beq.n	8006cee <_vfiprintf_r+0x176>
 8006d62:	9105      	str	r1, [sp, #20]
 8006d64:	e7c3      	b.n	8006cee <_vfiprintf_r+0x176>
 8006d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e7f0      	b.n	8006d52 <_vfiprintf_r+0x1da>
 8006d70:	ab03      	add	r3, sp, #12
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	462a      	mov	r2, r5
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <_vfiprintf_r+0x258>)
 8006d78:	a904      	add	r1, sp, #16
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7fd ff3c 	bl	8004bf8 <_printf_float>
 8006d80:	4607      	mov	r7, r0
 8006d82:	1c78      	adds	r0, r7, #1
 8006d84:	d1d6      	bne.n	8006d34 <_vfiprintf_r+0x1bc>
 8006d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	d405      	bmi.n	8006d98 <_vfiprintf_r+0x220>
 8006d8c:	89ab      	ldrh	r3, [r5, #12]
 8006d8e:	059a      	lsls	r2, r3, #22
 8006d90:	d402      	bmi.n	8006d98 <_vfiprintf_r+0x220>
 8006d92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d94:	f7ff fb26 	bl	80063e4 <__retarget_lock_release_recursive>
 8006d98:	89ab      	ldrh	r3, [r5, #12]
 8006d9a:	065b      	lsls	r3, r3, #25
 8006d9c:	f53f af12 	bmi.w	8006bc4 <_vfiprintf_r+0x4c>
 8006da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da2:	e711      	b.n	8006bc8 <_vfiprintf_r+0x50>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462a      	mov	r2, r5
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <_vfiprintf_r+0x258>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7fe f9c6 	bl	8005140 <_printf_i>
 8006db4:	e7e4      	b.n	8006d80 <_vfiprintf_r+0x208>
 8006db6:	bf00      	nop
 8006db8:	080076e0 	.word	0x080076e0
 8006dbc:	08007700 	.word	0x08007700
 8006dc0:	080076c0 	.word	0x080076c0
 8006dc4:	0800787c 	.word	0x0800787c
 8006dc8:	08007886 	.word	0x08007886
 8006dcc:	08004bf9 	.word	0x08004bf9
 8006dd0:	08006b53 	.word	0x08006b53
 8006dd4:	08007882 	.word	0x08007882

08006dd8 <__sread>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	460c      	mov	r4, r1
 8006ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de0:	f000 fa9c 	bl	800731c <_read_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	bfab      	itete	ge
 8006de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dea:	89a3      	ldrhlt	r3, [r4, #12]
 8006dec:	181b      	addge	r3, r3, r0
 8006dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006df2:	bfac      	ite	ge
 8006df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006df6:	81a3      	strhlt	r3, [r4, #12]
 8006df8:	bd10      	pop	{r4, pc}

08006dfa <__swrite>:
 8006dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfe:	461f      	mov	r7, r3
 8006e00:	898b      	ldrh	r3, [r1, #12]
 8006e02:	05db      	lsls	r3, r3, #23
 8006e04:	4605      	mov	r5, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	4616      	mov	r6, r2
 8006e0a:	d505      	bpl.n	8006e18 <__swrite+0x1e>
 8006e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e10:	2302      	movs	r3, #2
 8006e12:	2200      	movs	r2, #0
 8006e14:	f000 f9f8 	bl	8007208 <_lseek_r>
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	4632      	mov	r2, r6
 8006e26:	463b      	mov	r3, r7
 8006e28:	4628      	mov	r0, r5
 8006e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2e:	f000 b869 	b.w	8006f04 <_write_r>

08006e32 <__sseek>:
 8006e32:	b510      	push	{r4, lr}
 8006e34:	460c      	mov	r4, r1
 8006e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3a:	f000 f9e5 	bl	8007208 <_lseek_r>
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	bf15      	itete	ne
 8006e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e4e:	81a3      	strheq	r3, [r4, #12]
 8006e50:	bf18      	it	ne
 8006e52:	81a3      	strhne	r3, [r4, #12]
 8006e54:	bd10      	pop	{r4, pc}

08006e56 <__sclose>:
 8006e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5a:	f000 b8f1 	b.w	8007040 <_close_r>
	...

08006e60 <__swbuf_r>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	460e      	mov	r6, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	4605      	mov	r5, r0
 8006e68:	b118      	cbz	r0, 8006e72 <__swbuf_r+0x12>
 8006e6a:	6983      	ldr	r3, [r0, #24]
 8006e6c:	b90b      	cbnz	r3, 8006e72 <__swbuf_r+0x12>
 8006e6e:	f7ff fa15 	bl	800629c <__sinit>
 8006e72:	4b21      	ldr	r3, [pc, #132]	; (8006ef8 <__swbuf_r+0x98>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	d12b      	bne.n	8006ed0 <__swbuf_r+0x70>
 8006e78:	686c      	ldr	r4, [r5, #4]
 8006e7a:	69a3      	ldr	r3, [r4, #24]
 8006e7c:	60a3      	str	r3, [r4, #8]
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	071a      	lsls	r2, r3, #28
 8006e82:	d52f      	bpl.n	8006ee4 <__swbuf_r+0x84>
 8006e84:	6923      	ldr	r3, [r4, #16]
 8006e86:	b36b      	cbz	r3, 8006ee4 <__swbuf_r+0x84>
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	1ac0      	subs	r0, r0, r3
 8006e8e:	6963      	ldr	r3, [r4, #20]
 8006e90:	b2f6      	uxtb	r6, r6
 8006e92:	4283      	cmp	r3, r0
 8006e94:	4637      	mov	r7, r6
 8006e96:	dc04      	bgt.n	8006ea2 <__swbuf_r+0x42>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f966 	bl	800716c <_fflush_r>
 8006ea0:	bb30      	cbnz	r0, 8006ef0 <__swbuf_r+0x90>
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	60a3      	str	r3, [r4, #8]
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	6022      	str	r2, [r4, #0]
 8006eae:	701e      	strb	r6, [r3, #0]
 8006eb0:	6963      	ldr	r3, [r4, #20]
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	4283      	cmp	r3, r0
 8006eb6:	d004      	beq.n	8006ec2 <__swbuf_r+0x62>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	07db      	lsls	r3, r3, #31
 8006ebc:	d506      	bpl.n	8006ecc <__swbuf_r+0x6c>
 8006ebe:	2e0a      	cmp	r6, #10
 8006ec0:	d104      	bne.n	8006ecc <__swbuf_r+0x6c>
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 f951 	bl	800716c <_fflush_r>
 8006eca:	b988      	cbnz	r0, 8006ef0 <__swbuf_r+0x90>
 8006ecc:	4638      	mov	r0, r7
 8006ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <__swbuf_r+0x9c>)
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d101      	bne.n	8006eda <__swbuf_r+0x7a>
 8006ed6:	68ac      	ldr	r4, [r5, #8]
 8006ed8:	e7cf      	b.n	8006e7a <__swbuf_r+0x1a>
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <__swbuf_r+0xa0>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	bf08      	it	eq
 8006ee0:	68ec      	ldreq	r4, [r5, #12]
 8006ee2:	e7ca      	b.n	8006e7a <__swbuf_r+0x1a>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f81e 	bl	8006f28 <__swsetup_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d0cb      	beq.n	8006e88 <__swbuf_r+0x28>
 8006ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ef4:	e7ea      	b.n	8006ecc <__swbuf_r+0x6c>
 8006ef6:	bf00      	nop
 8006ef8:	080076e0 	.word	0x080076e0
 8006efc:	08007700 	.word	0x08007700
 8006f00:	080076c0 	.word	0x080076c0

08006f04 <_write_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d07      	ldr	r5, [pc, #28]	; (8006f24 <_write_r+0x20>)
 8006f08:	4604      	mov	r4, r0
 8006f0a:	4608      	mov	r0, r1
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	602a      	str	r2, [r5, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7fa fd3d 	bl	8001992 <_write>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_write_r+0x1e>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_write_r+0x1e>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	200002a4 	.word	0x200002a4

08006f28 <__swsetup_r>:
 8006f28:	4b32      	ldr	r3, [pc, #200]	; (8006ff4 <__swsetup_r+0xcc>)
 8006f2a:	b570      	push	{r4, r5, r6, lr}
 8006f2c:	681d      	ldr	r5, [r3, #0]
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	b125      	cbz	r5, 8006f3e <__swsetup_r+0x16>
 8006f34:	69ab      	ldr	r3, [r5, #24]
 8006f36:	b913      	cbnz	r3, 8006f3e <__swsetup_r+0x16>
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f7ff f9af 	bl	800629c <__sinit>
 8006f3e:	4b2e      	ldr	r3, [pc, #184]	; (8006ff8 <__swsetup_r+0xd0>)
 8006f40:	429c      	cmp	r4, r3
 8006f42:	d10f      	bne.n	8006f64 <__swsetup_r+0x3c>
 8006f44:	686c      	ldr	r4, [r5, #4]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f4c:	0719      	lsls	r1, r3, #28
 8006f4e:	d42c      	bmi.n	8006faa <__swsetup_r+0x82>
 8006f50:	06dd      	lsls	r5, r3, #27
 8006f52:	d411      	bmi.n	8006f78 <__swsetup_r+0x50>
 8006f54:	2309      	movs	r3, #9
 8006f56:	6033      	str	r3, [r6, #0]
 8006f58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f5c:	81a3      	strh	r3, [r4, #12]
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	e03e      	b.n	8006fe2 <__swsetup_r+0xba>
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <__swsetup_r+0xd4>)
 8006f66:	429c      	cmp	r4, r3
 8006f68:	d101      	bne.n	8006f6e <__swsetup_r+0x46>
 8006f6a:	68ac      	ldr	r4, [r5, #8]
 8006f6c:	e7eb      	b.n	8006f46 <__swsetup_r+0x1e>
 8006f6e:	4b24      	ldr	r3, [pc, #144]	; (8007000 <__swsetup_r+0xd8>)
 8006f70:	429c      	cmp	r4, r3
 8006f72:	bf08      	it	eq
 8006f74:	68ec      	ldreq	r4, [r5, #12]
 8006f76:	e7e6      	b.n	8006f46 <__swsetup_r+0x1e>
 8006f78:	0758      	lsls	r0, r3, #29
 8006f7a:	d512      	bpl.n	8006fa2 <__swsetup_r+0x7a>
 8006f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f7e:	b141      	cbz	r1, 8006f92 <__swsetup_r+0x6a>
 8006f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f84:	4299      	cmp	r1, r3
 8006f86:	d002      	beq.n	8006f8e <__swsetup_r+0x66>
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7fd fcb5 	bl	80048f8 <_free_r>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6363      	str	r3, [r4, #52]	; 0x34
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6063      	str	r3, [r4, #4]
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	f043 0308 	orr.w	r3, r3, #8
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	b94b      	cbnz	r3, 8006fc2 <__swsetup_r+0x9a>
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb8:	d003      	beq.n	8006fc2 <__swsetup_r+0x9a>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f000 f95b 	bl	8007278 <__smakebuf_r>
 8006fc2:	89a0      	ldrh	r0, [r4, #12]
 8006fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc8:	f010 0301 	ands.w	r3, r0, #1
 8006fcc:	d00a      	beq.n	8006fe4 <__swsetup_r+0xbc>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60a3      	str	r3, [r4, #8]
 8006fd2:	6963      	ldr	r3, [r4, #20]
 8006fd4:	425b      	negs	r3, r3
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	b943      	cbnz	r3, 8006fee <__swsetup_r+0xc6>
 8006fdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fe0:	d1ba      	bne.n	8006f58 <__swsetup_r+0x30>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	0781      	lsls	r1, r0, #30
 8006fe6:	bf58      	it	pl
 8006fe8:	6963      	ldrpl	r3, [r4, #20]
 8006fea:	60a3      	str	r3, [r4, #8]
 8006fec:	e7f4      	b.n	8006fd8 <__swsetup_r+0xb0>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e7f7      	b.n	8006fe2 <__swsetup_r+0xba>
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c
 8006ff8:	080076e0 	.word	0x080076e0
 8006ffc:	08007700 	.word	0x08007700
 8007000:	080076c0 	.word	0x080076c0

08007004 <__assert_func>:
 8007004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007006:	4614      	mov	r4, r2
 8007008:	461a      	mov	r2, r3
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <__assert_func+0x2c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4605      	mov	r5, r0
 8007010:	68d8      	ldr	r0, [r3, #12]
 8007012:	b14c      	cbz	r4, 8007028 <__assert_func+0x24>
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <__assert_func+0x30>)
 8007016:	9100      	str	r1, [sp, #0]
 8007018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800701c:	4906      	ldr	r1, [pc, #24]	; (8007038 <__assert_func+0x34>)
 800701e:	462b      	mov	r3, r5
 8007020:	f000 f8e0 	bl	80071e4 <fiprintf>
 8007024:	f000 f999 	bl	800735a <abort>
 8007028:	4b04      	ldr	r3, [pc, #16]	; (800703c <__assert_func+0x38>)
 800702a:	461c      	mov	r4, r3
 800702c:	e7f3      	b.n	8007016 <__assert_func+0x12>
 800702e:	bf00      	nop
 8007030:	2000000c 	.word	0x2000000c
 8007034:	0800788d 	.word	0x0800788d
 8007038:	0800789a 	.word	0x0800789a
 800703c:	080078c8 	.word	0x080078c8

08007040 <_close_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d06      	ldr	r5, [pc, #24]	; (800705c <_close_r+0x1c>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	f7fa fcbd 	bl	80019ca <_close>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_close_r+0x1a>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_close_r+0x1a>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	200002a4 	.word	0x200002a4

08007060 <__sflush_r>:
 8007060:	898a      	ldrh	r2, [r1, #12]
 8007062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	4605      	mov	r5, r0
 8007068:	0710      	lsls	r0, r2, #28
 800706a:	460c      	mov	r4, r1
 800706c:	d458      	bmi.n	8007120 <__sflush_r+0xc0>
 800706e:	684b      	ldr	r3, [r1, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	dc05      	bgt.n	8007080 <__sflush_r+0x20>
 8007074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	dc02      	bgt.n	8007080 <__sflush_r+0x20>
 800707a:	2000      	movs	r0, #0
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007082:	2e00      	cmp	r6, #0
 8007084:	d0f9      	beq.n	800707a <__sflush_r+0x1a>
 8007086:	2300      	movs	r3, #0
 8007088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800708c:	682f      	ldr	r7, [r5, #0]
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	d032      	beq.n	80070f8 <__sflush_r+0x98>
 8007092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	075a      	lsls	r2, r3, #29
 8007098:	d505      	bpl.n	80070a6 <__sflush_r+0x46>
 800709a:	6863      	ldr	r3, [r4, #4]
 800709c:	1ac0      	subs	r0, r0, r3
 800709e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a0:	b10b      	cbz	r3, 80070a6 <__sflush_r+0x46>
 80070a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	4602      	mov	r2, r0
 80070aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b0      	blx	r6
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	d106      	bne.n	80070c6 <__sflush_r+0x66>
 80070b8:	6829      	ldr	r1, [r5, #0]
 80070ba:	291d      	cmp	r1, #29
 80070bc:	d82c      	bhi.n	8007118 <__sflush_r+0xb8>
 80070be:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <__sflush_r+0x108>)
 80070c0:	40ca      	lsrs	r2, r1
 80070c2:	07d6      	lsls	r6, r2, #31
 80070c4:	d528      	bpl.n	8007118 <__sflush_r+0xb8>
 80070c6:	2200      	movs	r2, #0
 80070c8:	6062      	str	r2, [r4, #4]
 80070ca:	04d9      	lsls	r1, r3, #19
 80070cc:	6922      	ldr	r2, [r4, #16]
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	d504      	bpl.n	80070dc <__sflush_r+0x7c>
 80070d2:	1c42      	adds	r2, r0, #1
 80070d4:	d101      	bne.n	80070da <__sflush_r+0x7a>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	b903      	cbnz	r3, 80070dc <__sflush_r+0x7c>
 80070da:	6560      	str	r0, [r4, #84]	; 0x54
 80070dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070de:	602f      	str	r7, [r5, #0]
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d0ca      	beq.n	800707a <__sflush_r+0x1a>
 80070e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070e8:	4299      	cmp	r1, r3
 80070ea:	d002      	beq.n	80070f2 <__sflush_r+0x92>
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7fd fc03 	bl	80048f8 <_free_r>
 80070f2:	2000      	movs	r0, #0
 80070f4:	6360      	str	r0, [r4, #52]	; 0x34
 80070f6:	e7c1      	b.n	800707c <__sflush_r+0x1c>
 80070f8:	6a21      	ldr	r1, [r4, #32]
 80070fa:	2301      	movs	r3, #1
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b0      	blx	r6
 8007100:	1c41      	adds	r1, r0, #1
 8007102:	d1c7      	bne.n	8007094 <__sflush_r+0x34>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0c4      	beq.n	8007094 <__sflush_r+0x34>
 800710a:	2b1d      	cmp	r3, #29
 800710c:	d001      	beq.n	8007112 <__sflush_r+0xb2>
 800710e:	2b16      	cmp	r3, #22
 8007110:	d101      	bne.n	8007116 <__sflush_r+0xb6>
 8007112:	602f      	str	r7, [r5, #0]
 8007114:	e7b1      	b.n	800707a <__sflush_r+0x1a>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	e7ad      	b.n	800707c <__sflush_r+0x1c>
 8007120:	690f      	ldr	r7, [r1, #16]
 8007122:	2f00      	cmp	r7, #0
 8007124:	d0a9      	beq.n	800707a <__sflush_r+0x1a>
 8007126:	0793      	lsls	r3, r2, #30
 8007128:	680e      	ldr	r6, [r1, #0]
 800712a:	bf08      	it	eq
 800712c:	694b      	ldreq	r3, [r1, #20]
 800712e:	600f      	str	r7, [r1, #0]
 8007130:	bf18      	it	ne
 8007132:	2300      	movne	r3, #0
 8007134:	eba6 0807 	sub.w	r8, r6, r7
 8007138:	608b      	str	r3, [r1, #8]
 800713a:	f1b8 0f00 	cmp.w	r8, #0
 800713e:	dd9c      	ble.n	800707a <__sflush_r+0x1a>
 8007140:	6a21      	ldr	r1, [r4, #32]
 8007142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007144:	4643      	mov	r3, r8
 8007146:	463a      	mov	r2, r7
 8007148:	4628      	mov	r0, r5
 800714a:	47b0      	blx	r6
 800714c:	2800      	cmp	r0, #0
 800714e:	dc06      	bgt.n	800715e <__sflush_r+0xfe>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e78e      	b.n	800707c <__sflush_r+0x1c>
 800715e:	4407      	add	r7, r0
 8007160:	eba8 0800 	sub.w	r8, r8, r0
 8007164:	e7e9      	b.n	800713a <__sflush_r+0xda>
 8007166:	bf00      	nop
 8007168:	20400001 	.word	0x20400001

0800716c <_fflush_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	690b      	ldr	r3, [r1, #16]
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b913      	cbnz	r3, 800717c <_fflush_r+0x10>
 8007176:	2500      	movs	r5, #0
 8007178:	4628      	mov	r0, r5
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	b118      	cbz	r0, 8007186 <_fflush_r+0x1a>
 800717e:	6983      	ldr	r3, [r0, #24]
 8007180:	b90b      	cbnz	r3, 8007186 <_fflush_r+0x1a>
 8007182:	f7ff f88b 	bl	800629c <__sinit>
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <_fflush_r+0x6c>)
 8007188:	429c      	cmp	r4, r3
 800718a:	d11b      	bne.n	80071c4 <_fflush_r+0x58>
 800718c:	686c      	ldr	r4, [r5, #4]
 800718e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0ef      	beq.n	8007176 <_fflush_r+0xa>
 8007196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007198:	07d0      	lsls	r0, r2, #31
 800719a:	d404      	bmi.n	80071a6 <_fflush_r+0x3a>
 800719c:	0599      	lsls	r1, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_fflush_r+0x3a>
 80071a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a2:	f7ff f91e 	bl	80063e2 <__retarget_lock_acquire_recursive>
 80071a6:	4628      	mov	r0, r5
 80071a8:	4621      	mov	r1, r4
 80071aa:	f7ff ff59 	bl	8007060 <__sflush_r>
 80071ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b0:	07da      	lsls	r2, r3, #31
 80071b2:	4605      	mov	r5, r0
 80071b4:	d4e0      	bmi.n	8007178 <_fflush_r+0xc>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	059b      	lsls	r3, r3, #22
 80071ba:	d4dd      	bmi.n	8007178 <_fflush_r+0xc>
 80071bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071be:	f7ff f911 	bl	80063e4 <__retarget_lock_release_recursive>
 80071c2:	e7d9      	b.n	8007178 <_fflush_r+0xc>
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <_fflush_r+0x70>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <_fflush_r+0x62>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e7df      	b.n	800718e <_fflush_r+0x22>
 80071ce:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <_fflush_r+0x74>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	e7da      	b.n	800718e <_fflush_r+0x22>
 80071d8:	080076e0 	.word	0x080076e0
 80071dc:	08007700 	.word	0x08007700
 80071e0:	080076c0 	.word	0x080076c0

080071e4 <fiprintf>:
 80071e4:	b40e      	push	{r1, r2, r3}
 80071e6:	b503      	push	{r0, r1, lr}
 80071e8:	4601      	mov	r1, r0
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <fiprintf+0x20>)
 80071ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f2:	6800      	ldr	r0, [r0, #0]
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	f7ff fcbf 	bl	8006b78 <_vfiprintf_r>
 80071fa:	b002      	add	sp, #8
 80071fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007200:	b003      	add	sp, #12
 8007202:	4770      	bx	lr
 8007204:	2000000c 	.word	0x2000000c

08007208 <_lseek_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	; (8007228 <_lseek_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fbfe 	bl	8001a18 <_lseek>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_lseek_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_lseek_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200002a4 	.word	0x200002a4

0800722c <__swhatbuf_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	460e      	mov	r6, r1
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2900      	cmp	r1, #0
 8007236:	b096      	sub	sp, #88	; 0x58
 8007238:	4614      	mov	r4, r2
 800723a:	461d      	mov	r5, r3
 800723c:	da08      	bge.n	8007250 <__swhatbuf_r+0x24>
 800723e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	061a      	lsls	r2, r3, #24
 8007248:	d410      	bmi.n	800726c <__swhatbuf_r+0x40>
 800724a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724e:	e00e      	b.n	800726e <__swhatbuf_r+0x42>
 8007250:	466a      	mov	r2, sp
 8007252:	f000 f889 	bl	8007368 <_fstat_r>
 8007256:	2800      	cmp	r0, #0
 8007258:	dbf1      	blt.n	800723e <__swhatbuf_r+0x12>
 800725a:	9a01      	ldr	r2, [sp, #4]
 800725c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007264:	425a      	negs	r2, r3
 8007266:	415a      	adcs	r2, r3
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	e7ee      	b.n	800724a <__swhatbuf_r+0x1e>
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	2000      	movs	r0, #0
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	b016      	add	sp, #88	; 0x58
 8007274:	bd70      	pop	{r4, r5, r6, pc}
	...

08007278 <__smakebuf_r>:
 8007278:	898b      	ldrh	r3, [r1, #12]
 800727a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800727c:	079d      	lsls	r5, r3, #30
 800727e:	4606      	mov	r6, r0
 8007280:	460c      	mov	r4, r1
 8007282:	d507      	bpl.n	8007294 <__smakebuf_r+0x1c>
 8007284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	2301      	movs	r3, #1
 800728e:	6163      	str	r3, [r4, #20]
 8007290:	b002      	add	sp, #8
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	ab01      	add	r3, sp, #4
 8007296:	466a      	mov	r2, sp
 8007298:	f7ff ffc8 	bl	800722c <__swhatbuf_r>
 800729c:	9900      	ldr	r1, [sp, #0]
 800729e:	4605      	mov	r5, r0
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7fd fb95 	bl	80049d0 <_malloc_r>
 80072a6:	b948      	cbnz	r0, 80072bc <__smakebuf_r+0x44>
 80072a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ac:	059a      	lsls	r2, r3, #22
 80072ae:	d4ef      	bmi.n	8007290 <__smakebuf_r+0x18>
 80072b0:	f023 0303 	bic.w	r3, r3, #3
 80072b4:	f043 0302 	orr.w	r3, r3, #2
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	e7e3      	b.n	8007284 <__smakebuf_r+0xc>
 80072bc:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <__smakebuf_r+0x7c>)
 80072be:	62b3      	str	r3, [r6, #40]	; 0x28
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	6020      	str	r0, [r4, #0]
 80072c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	9b00      	ldr	r3, [sp, #0]
 80072cc:	6163      	str	r3, [r4, #20]
 80072ce:	9b01      	ldr	r3, [sp, #4]
 80072d0:	6120      	str	r0, [r4, #16]
 80072d2:	b15b      	cbz	r3, 80072ec <__smakebuf_r+0x74>
 80072d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d8:	4630      	mov	r0, r6
 80072da:	f000 f857 	bl	800738c <_isatty_r>
 80072de:	b128      	cbz	r0, 80072ec <__smakebuf_r+0x74>
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	81a3      	strh	r3, [r4, #12]
 80072ec:	89a0      	ldrh	r0, [r4, #12]
 80072ee:	4305      	orrs	r5, r0
 80072f0:	81a5      	strh	r5, [r4, #12]
 80072f2:	e7cd      	b.n	8007290 <__smakebuf_r+0x18>
 80072f4:	08006235 	.word	0x08006235

080072f8 <__ascii_mbtowc>:
 80072f8:	b082      	sub	sp, #8
 80072fa:	b901      	cbnz	r1, 80072fe <__ascii_mbtowc+0x6>
 80072fc:	a901      	add	r1, sp, #4
 80072fe:	b142      	cbz	r2, 8007312 <__ascii_mbtowc+0x1a>
 8007300:	b14b      	cbz	r3, 8007316 <__ascii_mbtowc+0x1e>
 8007302:	7813      	ldrb	r3, [r2, #0]
 8007304:	600b      	str	r3, [r1, #0]
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	1e10      	subs	r0, r2, #0
 800730a:	bf18      	it	ne
 800730c:	2001      	movne	r0, #1
 800730e:	b002      	add	sp, #8
 8007310:	4770      	bx	lr
 8007312:	4610      	mov	r0, r2
 8007314:	e7fb      	b.n	800730e <__ascii_mbtowc+0x16>
 8007316:	f06f 0001 	mvn.w	r0, #1
 800731a:	e7f8      	b.n	800730e <__ascii_mbtowc+0x16>

0800731c <_read_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	; (800733c <_read_r+0x20>)
 8007320:	4604      	mov	r4, r0
 8007322:	4608      	mov	r0, r1
 8007324:	4611      	mov	r1, r2
 8007326:	2200      	movs	r2, #0
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f7fa fb14 	bl	8001958 <_read>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_read_r+0x1e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_read_r+0x1e>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	200002a4 	.word	0x200002a4

08007340 <__ascii_wctomb>:
 8007340:	b149      	cbz	r1, 8007356 <__ascii_wctomb+0x16>
 8007342:	2aff      	cmp	r2, #255	; 0xff
 8007344:	bf85      	ittet	hi
 8007346:	238a      	movhi	r3, #138	; 0x8a
 8007348:	6003      	strhi	r3, [r0, #0]
 800734a:	700a      	strbls	r2, [r1, #0]
 800734c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007350:	bf98      	it	ls
 8007352:	2001      	movls	r0, #1
 8007354:	4770      	bx	lr
 8007356:	4608      	mov	r0, r1
 8007358:	4770      	bx	lr

0800735a <abort>:
 800735a:	b508      	push	{r3, lr}
 800735c:	2006      	movs	r0, #6
 800735e:	f000 f84d 	bl	80073fc <raise>
 8007362:	2001      	movs	r0, #1
 8007364:	f7fa faee 	bl	8001944 <_exit>

08007368 <_fstat_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d07      	ldr	r5, [pc, #28]	; (8007388 <_fstat_r+0x20>)
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	4611      	mov	r1, r2
 8007374:	602b      	str	r3, [r5, #0]
 8007376:	f7fa fb34 	bl	80019e2 <_fstat>
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	d102      	bne.n	8007384 <_fstat_r+0x1c>
 800737e:	682b      	ldr	r3, [r5, #0]
 8007380:	b103      	cbz	r3, 8007384 <_fstat_r+0x1c>
 8007382:	6023      	str	r3, [r4, #0]
 8007384:	bd38      	pop	{r3, r4, r5, pc}
 8007386:	bf00      	nop
 8007388:	200002a4 	.word	0x200002a4

0800738c <_isatty_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_isatty_r+0x1c>)
 8007390:	2300      	movs	r3, #0
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	602b      	str	r3, [r5, #0]
 8007398:	f7fa fb33 	bl	8001a02 <_isatty>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_isatty_r+0x1a>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_isatty_r+0x1a>
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	200002a4 	.word	0x200002a4

080073ac <_raise_r>:
 80073ac:	291f      	cmp	r1, #31
 80073ae:	b538      	push	{r3, r4, r5, lr}
 80073b0:	4604      	mov	r4, r0
 80073b2:	460d      	mov	r5, r1
 80073b4:	d904      	bls.n	80073c0 <_raise_r+0x14>
 80073b6:	2316      	movs	r3, #22
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073c2:	b112      	cbz	r2, 80073ca <_raise_r+0x1e>
 80073c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073c8:	b94b      	cbnz	r3, 80073de <_raise_r+0x32>
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f830 	bl	8007430 <_getpid_r>
 80073d0:	462a      	mov	r2, r5
 80073d2:	4601      	mov	r1, r0
 80073d4:	4620      	mov	r0, r4
 80073d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073da:	f000 b817 	b.w	800740c <_kill_r>
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d00a      	beq.n	80073f8 <_raise_r+0x4c>
 80073e2:	1c59      	adds	r1, r3, #1
 80073e4:	d103      	bne.n	80073ee <_raise_r+0x42>
 80073e6:	2316      	movs	r3, #22
 80073e8:	6003      	str	r3, [r0, #0]
 80073ea:	2001      	movs	r0, #1
 80073ec:	e7e7      	b.n	80073be <_raise_r+0x12>
 80073ee:	2400      	movs	r4, #0
 80073f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073f4:	4628      	mov	r0, r5
 80073f6:	4798      	blx	r3
 80073f8:	2000      	movs	r0, #0
 80073fa:	e7e0      	b.n	80073be <_raise_r+0x12>

080073fc <raise>:
 80073fc:	4b02      	ldr	r3, [pc, #8]	; (8007408 <raise+0xc>)
 80073fe:	4601      	mov	r1, r0
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	f7ff bfd3 	b.w	80073ac <_raise_r>
 8007406:	bf00      	nop
 8007408:	2000000c 	.word	0x2000000c

0800740c <_kill_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	; (800742c <_kill_r+0x20>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	f7fa fa83 	bl	8001924 <_kill>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d102      	bne.n	8007428 <_kill_r+0x1c>
 8007422:	682b      	ldr	r3, [r5, #0]
 8007424:	b103      	cbz	r3, 8007428 <_kill_r+0x1c>
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	bf00      	nop
 800742c:	200002a4 	.word	0x200002a4

08007430 <_getpid_r>:
 8007430:	f7fa ba70 	b.w	8001914 <_getpid>

08007434 <_init>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr

08007440 <_fini>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	bf00      	nop
 8007444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007446:	bc08      	pop	{r3}
 8007448:	469e      	mov	lr, r3
 800744a:	4770      	bx	lr
